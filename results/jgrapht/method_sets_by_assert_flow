[1] Set (editDistance: 0, isComplete: true, packages: 1, classes: 1, uniqueness: 2, controlFlowSize: 0, isHighPriority: true): 
Assertions (13): 
	<junit.framework.TestCase: void assertEquals(java.lang.Object,java.lang.Object)> (bools:0, nulls:0, inLoop:false, inCatch:false, exceptionalSuccsSize:0)
	<junit.framework.TestCase: void assertEquals(java.lang.Object,java.lang.Object)> (bools:0, nulls:0, inLoop:false, inCatch:false, exceptionalSuccsSize:0)
	<junit.framework.TestCase: void assertEquals(java.lang.Object,java.lang.Object)> (bools:0, nulls:0, inLoop:false, inCatch:false, exceptionalSuccsSize:0)
	<junit.framework.TestCase: void assertEquals(java.lang.Object,java.lang.Object)> (bools:0, nulls:0, inLoop:false, inCatch:false, exceptionalSuccsSize:0)
	<junit.framework.TestCase: void assertEquals(java.lang.Object,java.lang.Object)> (bools:0, nulls:0, inLoop:false, inCatch:false, exceptionalSuccsSize:0)
	<junit.framework.TestCase: void assertEquals(java.lang.Object,java.lang.Object)> (bools:0, nulls:0, inLoop:false, inCatch:false, exceptionalSuccsSize:0)
	<junit.framework.TestCase: void assertTrue(boolean)> (bools:0, nulls:0, inLoop:false, inCatch:false, exceptionalSuccsSize:0)
	<junit.framework.TestCase: void assertEquals(java.lang.Object,java.lang.Object)> (bools:0, nulls:0, inLoop:false, inCatch:false, exceptionalSuccsSize:0)
	<junit.framework.TestCase: void assertEquals(java.lang.Object,java.lang.Object)> (bools:0, nulls:0, inLoop:false, inCatch:false, exceptionalSuccsSize:0)
	<junit.framework.TestCase: void assertEquals(java.lang.Object,java.lang.Object)> (bools:0, nulls:0, inLoop:false, inCatch:false, exceptionalSuccsSize:0)
	<junit.framework.TestCase: void assertEquals(java.lang.Object,java.lang.Object)> (bools:0, nulls:0, inLoop:false, inCatch:false, exceptionalSuccsSize:0)
	<junit.framework.TestCase: void assertEquals(java.lang.Object,java.lang.Object)> (bools:0, nulls:0, inLoop:false, inCatch:false, exceptionalSuccsSize:0)
	<junit.framework.TestCase: void assertEquals(java.lang.Object,java.lang.Object)> (bools:0, nulls:0, inLoop:false, inCatch:false, exceptionalSuccsSize:0)

Methods (2): 
	<org.jgrapht.graph.ListenableGraphTest: void testGraphListener()>
		<org.jgrapht.graph.ListenableGraphTest.java:95, 20.83%> (predicates:{}, inLoop:false, inCatch:false, exceptionalSuccs:[])
		<org.jgrapht.graph.ListenableGraphTest.java:96, 20.83%> (predicates:{}, inLoop:false, inCatch:false, exceptionalSuccs:[])
		<org.jgrapht.graph.ListenableGraphTest.java:100, 29.17%> (predicates:{}, inLoop:false, inCatch:false, exceptionalSuccs:[])
		<org.jgrapht.graph.ListenableGraphTest.java:101, 29.17%> (predicates:{}, inLoop:false, inCatch:false, exceptionalSuccs:[])
		<org.jgrapht.graph.ListenableGraphTest.java:110, 41.67%> (predicates:{}, inLoop:false, inCatch:false, exceptionalSuccs:[])
		<org.jgrapht.graph.ListenableGraphTest.java:111, 37.50%> (predicates:{}, inLoop:false, inCatch:false, exceptionalSuccs:[])
		<org.jgrapht.graph.ListenableGraphTest.java:114, 12.50%> (predicates:{}, inLoop:false, inCatch:false, exceptionalSuccs:[])
		<org.jgrapht.graph.ListenableGraphTest.java:115, 50.00%> (predicates:{}, inLoop:false, inCatch:false, exceptionalSuccs:[])
		<org.jgrapht.graph.ListenableGraphTest.java:116, 45.83%> (predicates:{}, inLoop:false, inCatch:false, exceptionalSuccs:[])
		<org.jgrapht.graph.ListenableGraphTest.java:131, 50.00%> (predicates:{}, inLoop:false, inCatch:false, exceptionalSuccs:[])
		<org.jgrapht.graph.ListenableGraphTest.java:132, 54.17%> (predicates:{}, inLoop:false, inCatch:false, exceptionalSuccs:[])
		<org.jgrapht.graph.ListenableGraphTest.java:133, 58.33%> (predicates:{}, inLoop:false, inCatch:false, exceptionalSuccs:[])
		<org.jgrapht.graph.ListenableGraphTest.java:134, 62.50%> (predicates:{}, inLoop:false, inCatch:false, exceptionalSuccs:[])
	<org.jgrapht.graph.ListenableGraphTest: void testVertexSetListener()>
		<org.jgrapht.graph.ListenableGraphTest.java:155, 20.83%> (predicates:{}, inLoop:false, inCatch:false, exceptionalSuccs:[])
		<org.jgrapht.graph.ListenableGraphTest.java:156, 20.83%> (predicates:{}, inLoop:false, inCatch:false, exceptionalSuccs:[])
		<org.jgrapht.graph.ListenableGraphTest.java:160, 29.17%> (predicates:{}, inLoop:false, inCatch:false, exceptionalSuccs:[])
		<org.jgrapht.graph.ListenableGraphTest.java:161, 29.17%> (predicates:{}, inLoop:false, inCatch:false, exceptionalSuccs:[])
		<org.jgrapht.graph.ListenableGraphTest.java:170, 33.33%> (predicates:{}, inLoop:false, inCatch:false, exceptionalSuccs:[])
		<org.jgrapht.graph.ListenableGraphTest.java:171, 37.50%> (predicates:{}, inLoop:false, inCatch:false, exceptionalSuccs:[])
		<org.jgrapht.graph.ListenableGraphTest.java:174, 12.50%> (predicates:{}, inLoop:false, inCatch:false, exceptionalSuccs:[])
		<org.jgrapht.graph.ListenableGraphTest.java:175, 41.67%> (predicates:{}, inLoop:false, inCatch:false, exceptionalSuccs:[])
		<org.jgrapht.graph.ListenableGraphTest.java:176, 45.83%> (predicates:{}, inLoop:false, inCatch:false, exceptionalSuccs:[])
		<org.jgrapht.graph.ListenableGraphTest.java:191, 50.00%> (predicates:{}, inLoop:false, inCatch:false, exceptionalSuccs:[])
		<org.jgrapht.graph.ListenableGraphTest.java:192, 54.17%> (predicates:{}, inLoop:false, inCatch:false, exceptionalSuccs:[])
		<org.jgrapht.graph.ListenableGraphTest.java:193, 58.33%> (predicates:{}, inLoop:false, inCatch:false, exceptionalSuccs:[])
		<org.jgrapht.graph.ListenableGraphTest.java:194, 62.50%> (predicates:{}, inLoop:false, inCatch:false, exceptionalSuccs:[])

Relevant Assertion clone sets (1):
Set (score: 1.00, ccsize: 2, packages: 1, classes: 1): 
	<org.jgrapht.graph.ListenableGraphTest: void testGraphListener()>
		<org.jgrapht.graph.ListenableGraphTest.java:114, 12.50%> (predicates:{}, inLoop:false, inCatch:false, exceptionalSuccs:[])
	<org.jgrapht.graph.ListenableGraphTest: void testVertexSetListener()>
		<org.jgrapht.graph.ListenableGraphTest.java:174, 12.50%> (predicates:{}, inLoop:false, inCatch:false, exceptionalSuccs:[])
==============================================

[2] Set (editDistance: 0, isComplete: true, packages: 1, classes: 1, uniqueness: 3, controlFlowSize: 6, isHighPriority: true): 
Assertions (6): 
	<junit.framework.TestCase: void assertEquals(float,float,float)> (bools:1, nulls:0, inLoop:false, inCatch:false, exceptionalSuccsSize:0)
	<junit.framework.TestCase: void assertEquals(float,float,float)> (bools:1, nulls:0, inLoop:false, inCatch:false, exceptionalSuccsSize:0)
	<junit.framework.TestCase: void assertEquals(java.lang.Object,java.lang.Object)> (bools:1, nulls:0, inLoop:false, inCatch:false, exceptionalSuccsSize:0)
	<junit.framework.TestCase: void assertEquals(java.lang.Object,java.lang.Object)> (bools:1, nulls:0, inLoop:false, inCatch:false, exceptionalSuccsSize:0)
	<junit.framework.TestCase: void assertEquals(double,double,double)> (bools:1, nulls:0, inLoop:false, inCatch:false, exceptionalSuccsSize:0)
	<junit.framework.TestCase: void assertEquals(java.lang.Object,java.lang.Object)> (bools:1, nulls:0, inLoop:false, inCatch:false, exceptionalSuccsSize:0)

Methods (3): 
	<org.jgrapht.alg.MinSourceSinkCutTest: void testRealGraph()>
		<org.jgrapht.alg.MinSourceSinkCutTest.java:90, 5.05%> (predicates:{(i1 < i0)=false}, inLoop:false, inCatch:false, exceptionalSuccs:[])
		<org.jgrapht.alg.MinSourceSinkCutTest.java:92, 6.06%> (predicates:{(i1 < i0)=false}, inLoop:false, inCatch:false, exceptionalSuccs:[])
		<org.jgrapht.alg.MinSourceSinkCutTest.java:99, 5.05%> (predicates:{(i1 < i0)=false}, inLoop:false, inCatch:false, exceptionalSuccs:[])
		<org.jgrapht.alg.MinSourceSinkCutTest.java:100, 5.05%> (predicates:{(i1 < i0)=false}, inLoop:false, inCatch:false, exceptionalSuccs:[])
		<org.jgrapht.alg.MinSourceSinkCutTest.java:103, 5.05%> (predicates:{(i1 < i0)=false}, inLoop:false, inCatch:false, exceptionalSuccs:[])
		<org.jgrapht.alg.MinSourceSinkCutTest.java:108, 5.05%> (predicates:{(i1 < i0)=false}, inLoop:false, inCatch:false, exceptionalSuccs:[])
	<org.jgrapht.alg.MinSourceSinkCutTest: void testRealGraph2()>
		<org.jgrapht.alg.MinSourceSinkCutTest.java:138, 5.05%> (predicates:{(i1 < i0)=false}, inLoop:false, inCatch:false, exceptionalSuccs:[])
		<org.jgrapht.alg.MinSourceSinkCutTest.java:140, 6.06%> (predicates:{(i1 < i0)=false}, inLoop:false, inCatch:false, exceptionalSuccs:[])
		<org.jgrapht.alg.MinSourceSinkCutTest.java:147, 5.05%> (predicates:{(i1 < i0)=false}, inLoop:false, inCatch:false, exceptionalSuccs:[])
		<org.jgrapht.alg.MinSourceSinkCutTest.java:148, 5.05%> (predicates:{(i1 < i0)=false}, inLoop:false, inCatch:false, exceptionalSuccs:[])
		<org.jgrapht.alg.MinSourceSinkCutTest.java:151, 5.05%> (predicates:{(i1 < i0)=false}, inLoop:false, inCatch:false, exceptionalSuccs:[])
		<org.jgrapht.alg.MinSourceSinkCutTest.java:156, 5.05%> (predicates:{(i1 < i0)=false}, inLoop:false, inCatch:false, exceptionalSuccs:[])
	<org.jgrapht.alg.MinSourceSinkCutTest: void testDisconnectedGraph()>
		<org.jgrapht.alg.MinSourceSinkCutTest.java:207, 11.36%> (predicates:{(i1 < i0)=false}, inLoop:false, inCatch:false, exceptionalSuccs:[])
		<org.jgrapht.alg.MinSourceSinkCutTest.java:209, 13.64%> (predicates:{(i1 < i0)=false}, inLoop:false, inCatch:false, exceptionalSuccs:[])
		<org.jgrapht.alg.MinSourceSinkCutTest.java:216, 11.36%> (predicates:{(i1 < i0)=false}, inLoop:false, inCatch:false, exceptionalSuccs:[])
		<org.jgrapht.alg.MinSourceSinkCutTest.java:217, 11.36%> (predicates:{(i1 < i0)=false}, inLoop:false, inCatch:false, exceptionalSuccs:[])
		<org.jgrapht.alg.MinSourceSinkCutTest.java:220, 9.09%> (predicates:{(i1 < i0)=false}, inLoop:false, inCatch:false, exceptionalSuccs:[])
		<org.jgrapht.alg.MinSourceSinkCutTest.java:221, 11.36%> (predicates:{(i1 < i0)=false}, inLoop:false, inCatch:false, exceptionalSuccs:[])

Relevant Assertion clone sets (6):
Set (score: 0.67, ccsize: 2, packages: 1, classes: 1): 
	<org.jgrapht.alg.MinSourceSinkCutTest: void testRealGraph()>
		<org.jgrapht.alg.MinSourceSinkCutTest.java:99, 5.05%> (predicates:{(i1 < i0)=false}, inLoop:false, inCatch:false, exceptionalSuccs:[])
	<org.jgrapht.alg.MinSourceSinkCutTest: void testRealGraph2()>
		<org.jgrapht.alg.MinSourceSinkCutTest.java:147, 5.05%> (predicates:{(i1 < i0)=false}, inLoop:false, inCatch:false, exceptionalSuccs:[])
	<org.jgrapht.alg.MinSourceSinkCutTest: void testGraphWithOneEdge()>
		<org.jgrapht.alg.MinSourceSinkCutTest.java:180, 9.80%> (predicates:{(i1 < i0)=false}, inLoop:false, inCatch:false, exceptionalSuccs:[])
	<org.jgrapht.alg.MinSourceSinkCutTest: void testDisconnectedGraph()>
		<org.jgrapht.alg.MinSourceSinkCutTest.java:216, 11.36%> (predicates:{(i1 < i0)=false}, inLoop:false, inCatch:false, exceptionalSuccs:[])
Set (score: 0.67, ccsize: 2, packages: 1, classes: 1): 
	<org.jgrapht.alg.MinSourceSinkCutTest: void testRealGraph()>
		<org.jgrapht.alg.MinSourceSinkCutTest.java:100, 5.05%> (predicates:{(i1 < i0)=false}, inLoop:false, inCatch:false, exceptionalSuccs:[])
	<org.jgrapht.alg.MinSourceSinkCutTest: void testRealGraph2()>
		<org.jgrapht.alg.MinSourceSinkCutTest.java:148, 5.05%> (predicates:{(i1 < i0)=false}, inLoop:false, inCatch:false, exceptionalSuccs:[])
	<org.jgrapht.alg.MinSourceSinkCutTest: void testGraphWithOneEdge()>
		<org.jgrapht.alg.MinSourceSinkCutTest.java:181, 9.80%> (predicates:{(i1 < i0)=false}, inLoop:false, inCatch:false, exceptionalSuccs:[])
	<org.jgrapht.alg.MinSourceSinkCutTest: void testDisconnectedGraph()>
		<org.jgrapht.alg.MinSourceSinkCutTest.java:217, 11.36%> (predicates:{(i1 < i0)=false}, inLoop:false, inCatch:false, exceptionalSuccs:[])
Set (score: 0.67, ccsize: 2, packages: 1, classes: 1): 
	<org.jgrapht.alg.MinSourceSinkCutTest: void testRealGraph()>
		<org.jgrapht.alg.MinSourceSinkCutTest.java:108, 5.05%> (predicates:{(i1 < i0)=false}, inLoop:false, inCatch:false, exceptionalSuccs:[])
	<org.jgrapht.alg.MinSourceSinkCutTest: void testRealGraph2()>
		<org.jgrapht.alg.MinSourceSinkCutTest.java:156, 5.05%> (predicates:{(i1 < i0)=false}, inLoop:false, inCatch:false, exceptionalSuccs:[])
	<org.jgrapht.alg.MinSourceSinkCutTest: void testDisconnectedGraph()>
		<org.jgrapht.alg.MinSourceSinkCutTest.java:221, 11.36%> (predicates:{(i1 < i0)=false}, inLoop:false, inCatch:false, exceptionalSuccs:[])
Set (score: 0.50, ccsize: 3, packages: 1, classes: 1): 
	<org.jgrapht.alg.MinSourceSinkCutTest: void testGraphWithOneEdge()>
		<org.jgrapht.alg.MinSourceSinkCutTest.java:172, 9.80%> (predicates:{(i1 < i0)=false}, inLoop:false, inCatch:false, exceptionalSuccs:[])
		<org.jgrapht.alg.MinSourceSinkCutTest.java:188, 11.76%> (predicates:{(i1 < i0)=false}, inLoop:false, inCatch:false, exceptionalSuccs:[])
	<org.jgrapht.alg.MinSourceSinkCutTest: void testRealGraph()>
		<org.jgrapht.alg.MinSourceSinkCutTest.java:90, 5.05%> (predicates:{(i1 < i0)=false}, inLoop:false, inCatch:false, exceptionalSuccs:[])
	<org.jgrapht.alg.MinSourceSinkCutTest: void testRealGraph2()>
		<org.jgrapht.alg.MinSourceSinkCutTest.java:138, 5.05%> (predicates:{(i1 < i0)=false}, inLoop:false, inCatch:false, exceptionalSuccs:[])
	<org.jgrapht.alg.MinSourceSinkCutTest: void testDisconnectedGraph()>
		<org.jgrapht.alg.MinSourceSinkCutTest.java:207, 11.36%> (predicates:{(i1 < i0)=false}, inLoop:false, inCatch:false, exceptionalSuccs:[])
Set (score: 0.50, ccsize: 3, packages: 1, classes: 1): 
	<org.jgrapht.alg.MinSourceSinkCutTest: void testGraphWithOneEdge()>
		<org.jgrapht.alg.MinSourceSinkCutTest.java:173, 11.76%> (predicates:{(i1 < i0)=false}, inLoop:false, inCatch:false, exceptionalSuccs:[])
		<org.jgrapht.alg.MinSourceSinkCutTest.java:189, 9.80%> (predicates:{(i1 < i0)=false}, inLoop:false, inCatch:false, exceptionalSuccs:[])
	<org.jgrapht.alg.MinSourceSinkCutTest: void testRealGraph()>
		<org.jgrapht.alg.MinSourceSinkCutTest.java:92, 6.06%> (predicates:{(i1 < i0)=false}, inLoop:false, inCatch:false, exceptionalSuccs:[])
	<org.jgrapht.alg.MinSourceSinkCutTest: void testRealGraph2()>
		<org.jgrapht.alg.MinSourceSinkCutTest.java:140, 6.06%> (predicates:{(i1 < i0)=false}, inLoop:false, inCatch:false, exceptionalSuccs:[])
	<org.jgrapht.alg.MinSourceSinkCutTest: void testDisconnectedGraph()>
		<org.jgrapht.alg.MinSourceSinkCutTest.java:209, 13.64%> (predicates:{(i1 < i0)=false}, inLoop:false, inCatch:false, exceptionalSuccs:[])
Set (score: 0.50, ccsize: 2, packages: 1, classes: 1): 
	<org.jgrapht.alg.MinSourceSinkCutTest: void testGraphWithOneEdge()>
		<org.jgrapht.alg.MinSourceSinkCutTest.java:184, 9.80%> (predicates:{(i1 < i0)=false}, inLoop:false, inCatch:false, exceptionalSuccs:[])
		<org.jgrapht.alg.MinSourceSinkCutTest.java:190, 7.84%> (predicates:{(i1 < i0)=false}, inLoop:false, inCatch:false, exceptionalSuccs:[])
	<org.jgrapht.alg.MinSourceSinkCutTest: void testRealGraph()>
		<org.jgrapht.alg.MinSourceSinkCutTest.java:103, 5.05%> (predicates:{(i1 < i0)=false}, inLoop:false, inCatch:false, exceptionalSuccs:[])
	<org.jgrapht.alg.MinSourceSinkCutTest: void testRealGraph2()>
		<org.jgrapht.alg.MinSourceSinkCutTest.java:151, 5.05%> (predicates:{(i1 < i0)=false}, inLoop:false, inCatch:false, exceptionalSuccs:[])
	<org.jgrapht.alg.MinSourceSinkCutTest: void testDisconnectedGraph()>
		<org.jgrapht.alg.MinSourceSinkCutTest.java:220, 9.09%> (predicates:{(i1 < i0)=false}, inLoop:false, inCatch:false, exceptionalSuccs:[])
==============================================

[3] Set (editDistance: 0, isComplete: true, packages: 1, classes: 1, uniqueness: 4, controlFlowSize: 6, isHighPriority: true): 
Assertions (4): 
	<junit.framework.TestCase: void assertEquals(boolean,boolean)> (bools:1, nulls:0, inLoop:true, inCatch:false, exceptionalSuccsSize:0)
	<junit.framework.TestCase: void assertEquals(java.lang.Object,java.lang.Object)> (bools:1, nulls:0, inLoop:true, inCatch:false, exceptionalSuccsSize:0)
	<junit.framework.TestCase: void assertEquals(boolean,boolean)> (bools:1, nulls:0, inLoop:false, inCatch:false, exceptionalSuccsSize:0)
	<junit.framework.TestCase: void assertTrue(boolean)> (bools:1, nulls:0, inLoop:false, inCatch:false, exceptionalSuccsSize:0)

Methods (2): 
	<org.jgrapht.util.PrefetchIteratorTest: void testIteratorInterface()>
		<org.jgrapht.util.PrefetchIteratorTest.java:54, 33.33%> (predicates:{(i0 < 100)=true}, inLoop:true, inCatch:false, exceptionalSuccs:[])
		<org.jgrapht.util.PrefetchIteratorTest.java:55, 41.67%> (predicates:{(i0 < 100)=true}, inLoop:true, inCatch:false, exceptionalSuccs:[])
		<org.jgrapht.util.PrefetchIteratorTest.java:57, 33.33%> (predicates:{(i0 < 100)=false}, inLoop:false, inCatch:false, exceptionalSuccs:[])
		<org.jgrapht.util.PrefetchIteratorTest.java:64, 25.00%> (predicates:{(i0 < 100)=false}, inLoop:false, inCatch:false, exceptionalSuccs:[])
	<org.jgrapht.util.PrefetchIteratorTest: void testEnumInterface()>
		<org.jgrapht.util.PrefetchIteratorTest.java:71, 33.33%> (predicates:{(i0 < 100)=true}, inLoop:true, inCatch:false, exceptionalSuccs:[])
		<org.jgrapht.util.PrefetchIteratorTest.java:72, 41.67%> (predicates:{(i0 < 100)=true}, inLoop:true, inCatch:false, exceptionalSuccs:[])
		<org.jgrapht.util.PrefetchIteratorTest.java:74, 33.33%> (predicates:{(i0 < 100)=false}, inLoop:false, inCatch:false, exceptionalSuccs:[])
		<org.jgrapht.util.PrefetchIteratorTest.java:81, 25.00%> (predicates:{(i0 < 100)=false}, inLoop:false, inCatch:false, exceptionalSuccs:[])

Relevant Assertion clone sets (1):
Set (score: 1.00, ccsize: 2, packages: 1, classes: 1): 
	<org.jgrapht.util.PrefetchIteratorTest: void testIteratorInterface()>
		<org.jgrapht.util.PrefetchIteratorTest.java:64, 25.00%> (predicates:{(i0 < 100)=false}, inLoop:false, inCatch:false, exceptionalSuccs:[])
	<org.jgrapht.util.PrefetchIteratorTest: void testEnumInterface()>
		<org.jgrapht.util.PrefetchIteratorTest.java:81, 25.00%> (predicates:{(i0 < 100)=false}, inLoop:false, inCatch:false, exceptionalSuccs:[])
==============================================

[4] Set (editDistance: 0, isComplete: true, packages: 1, classes: 1, uniqueness: 3, controlFlowSize: 2, isHighPriority: true): 
Assertions (3): 
	<junit.framework.TestCase: void assertTrue(boolean)> (bools:0, nulls:0, inLoop:false, inCatch:false, exceptionalSuccsSize:0)
	<junit.framework.TestCase: void assertTrue(boolean)> (bools:0, nulls:1, inLoop:false, inCatch:false, exceptionalSuccsSize:0)
	<junit.framework.TestCase: void assertEquals(int,int)> (bools:0, nulls:1, inLoop:false, inCatch:false, exceptionalSuccsSize:0)

Methods (5): 
	<org.jgrapht.graph.EqualsAndHashCodeTest: void testDefaultDirectedGraph()>
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:105, 6.52%> (predicates:{}, inLoop:false, inCatch:false, exceptionalSuccs:[])
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:106, 4.35%> (predicates:{($z18 == 0)=null}, inLoop:false, inCatch:false, exceptionalSuccs:[])
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:108, 13.04%> (predicates:{($z18 == 0)=null}, inLoop:false, inCatch:false, exceptionalSuccs:[])
	<org.jgrapht.graph.EqualsAndHashCodeTest: void testSimpleGraph()>
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:148, 6.52%> (predicates:{}, inLoop:false, inCatch:false, exceptionalSuccs:[])
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:149, 4.35%> (predicates:{($z18 == 0)=null}, inLoop:false, inCatch:false, exceptionalSuccs:[])
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:151, 13.04%> (predicates:{($z18 == 0)=null}, inLoop:false, inCatch:false, exceptionalSuccs:[])
	<org.jgrapht.graph.EqualsAndHashCodeTest: void testGraphsWithNonIntrusiveEdge()>
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:187, 3.90%> (predicates:{}, inLoop:false, inCatch:false, exceptionalSuccs:[])
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:188, 2.60%> (predicates:{($z17 == 0)=null}, inLoop:false, inCatch:false, exceptionalSuccs:[])
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:190, 7.79%> (predicates:{($z17 == 0)=null}, inLoop:false, inCatch:false, exceptionalSuccs:[])
	<org.jgrapht.graph.EqualsAndHashCodeTest: void testPseudograph()>
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:230, 5.08%> (predicates:{}, inLoop:false, inCatch:false, exceptionalSuccs:[])
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:231, 3.39%> (predicates:{($z19 == 0)=null}, inLoop:false, inCatch:false, exceptionalSuccs:[])
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:233, 10.17%> (predicates:{($z19 == 0)=null}, inLoop:false, inCatch:false, exceptionalSuccs:[])
	<org.jgrapht.graph.EqualsAndHashCodeTest: void testGrapshWithCustomEdges()>
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:268, 7.69%> (predicates:{}, inLoop:false, inCatch:false, exceptionalSuccs:[])
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:269, 5.13%> (predicates:{($z16 == 0)=null}, inLoop:false, inCatch:false, exceptionalSuccs:[])
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:271, 15.38%> (predicates:{($z16 == 0)=null}, inLoop:false, inCatch:false, exceptionalSuccs:[])

Relevant Assertion clone sets (2):
Set (score: 1.00, ccsize: 2, packages: 1, classes: 1): 
	<org.jgrapht.graph.EqualsAndHashCodeTest: void testAsWeightedGraphs()>
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:329, 5.17%> (predicates:{}, inLoop:false, inCatch:false, exceptionalSuccs:[])
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:332, 5.17%> (predicates:{}, inLoop:false, inCatch:false, exceptionalSuccs:[])
	<org.jgrapht.graph.EqualsAndHashCodeTest: void testDefaultDirectedGraph()>
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:105, 6.52%> (predicates:{}, inLoop:false, inCatch:false, exceptionalSuccs:[])
	<org.jgrapht.graph.EqualsAndHashCodeTest: void testSimpleGraph()>
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:148, 6.52%> (predicates:{}, inLoop:false, inCatch:false, exceptionalSuccs:[])
	<org.jgrapht.graph.EqualsAndHashCodeTest: void testGraphsWithNonIntrusiveEdge()>
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:187, 3.90%> (predicates:{}, inLoop:false, inCatch:false, exceptionalSuccs:[])
	<org.jgrapht.graph.EqualsAndHashCodeTest: void testPseudograph()>
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:230, 5.08%> (predicates:{}, inLoop:false, inCatch:false, exceptionalSuccs:[])
	<org.jgrapht.graph.EqualsAndHashCodeTest: void testGrapshWithCustomEdges()>
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:268, 7.69%> (predicates:{}, inLoop:false, inCatch:false, exceptionalSuccs:[])
Set (score: 1.00, ccsize: 2, packages: 1, classes: 1): 
	<org.jgrapht.graph.EqualsAndHashCodeTest: void testAsWeightedGraphs()>
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:330, 10.34%> (predicates:{}, inLoop:false, inCatch:false, exceptionalSuccs:[])
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:333, 10.34%> (predicates:{}, inLoop:false, inCatch:false, exceptionalSuccs:[])
	<org.jgrapht.graph.EqualsAndHashCodeTest: void testDefaultDirectedGraph()>
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:108, 13.04%> (predicates:{($z18 == 0)=null}, inLoop:false, inCatch:false, exceptionalSuccs:[])
	<org.jgrapht.graph.EqualsAndHashCodeTest: void testSimpleGraph()>
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:151, 13.04%> (predicates:{($z18 == 0)=null}, inLoop:false, inCatch:false, exceptionalSuccs:[])
	<org.jgrapht.graph.EqualsAndHashCodeTest: void testGraphsWithNonIntrusiveEdge()>
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:190, 7.79%> (predicates:{($z17 == 0)=null}, inLoop:false, inCatch:false, exceptionalSuccs:[])
	<org.jgrapht.graph.EqualsAndHashCodeTest: void testPseudograph()>
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:233, 10.17%> (predicates:{($z19 == 0)=null}, inLoop:false, inCatch:false, exceptionalSuccs:[])
	<org.jgrapht.graph.EqualsAndHashCodeTest: void testGrapshWithCustomEdges()>
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:271, 15.38%> (predicates:{($z16 == 0)=null}, inLoop:false, inCatch:false, exceptionalSuccs:[])
==============================================

[5] Set (editDistance: 0, isComplete: true, packages: 1, classes: 1, uniqueness: 3, controlFlowSize: 3, isHighPriority: true): 
Assertions (3): 
	<junit.framework.TestCase: void assertEquals(java.lang.Object,java.lang.Object)> (bools:0, nulls:0, inLoop:false, inCatch:false, exceptionalSuccsSize:0)
	<junit.framework.TestCase: void assertTrue(boolean)> (bools:1, nulls:0, inLoop:true, inCatch:false, exceptionalSuccsSize:0)
	<junit.framework.TestCase: void assertEquals(java.lang.Object,java.lang.Object)> (bools:1, nulls:0, inLoop:false, inCatch:false, exceptionalSuccsSize:0)

Methods (3): 
	<org.jgrapht.alg.ConnectivityInspectorTest: void testStronglyConnected1()>
		<org.jgrapht.alg.ConnectivityInspectorTest.java:211, 16.00%> (predicates:{}, inLoop:false, inCatch:false, exceptionalSuccs:[])
		<org.jgrapht.alg.ConnectivityInspectorTest.java:222, 12.00%> (predicates:{($z13 != 0)=true}, inLoop:true, inCatch:false, exceptionalSuccs:[])
		<org.jgrapht.alg.ConnectivityInspectorTest.java:225, 16.00%> (predicates:{($z13 != 0)=false}, inLoop:false, inCatch:false, exceptionalSuccs:[])
	<org.jgrapht.alg.ConnectivityInspectorTest: void testStronglyConnected2()>
		<org.jgrapht.alg.ConnectivityInspectorTest.java:268, 16.00%> (predicates:{}, inLoop:false, inCatch:false, exceptionalSuccs:[])
		<org.jgrapht.alg.ConnectivityInspectorTest.java:279, 12.00%> (predicates:{($z13 != 0)=true}, inLoop:true, inCatch:false, exceptionalSuccs:[])
		<org.jgrapht.alg.ConnectivityInspectorTest.java:282, 16.00%> (predicates:{($z13 != 0)=false}, inLoop:false, inCatch:false, exceptionalSuccs:[])
	<org.jgrapht.alg.ConnectivityInspectorTest: void testStronglyConnected3()>
		<org.jgrapht.alg.ConnectivityInspectorTest.java:325, 17.39%> (predicates:{}, inLoop:false, inCatch:false, exceptionalSuccs:[])
		<org.jgrapht.alg.ConnectivityInspectorTest.java:337, 13.04%> (predicates:{($z12 != 0)=true}, inLoop:true, inCatch:false, exceptionalSuccs:[])
		<org.jgrapht.alg.ConnectivityInspectorTest.java:340, 17.39%> (predicates:{($z12 != 0)=false}, inLoop:false, inCatch:false, exceptionalSuccs:[])

Relevant Assertion clone sets (1):
Set (score: 1.00, ccsize: 2, packages: 1, classes: 1): 
	<org.jgrapht.alg.ConnectivityInspectorTest: void testStronglyConnected1()>
		<org.jgrapht.alg.ConnectivityInspectorTest.java:222, 12.00%> (predicates:{($z13 != 0)=true}, inLoop:true, inCatch:false, exceptionalSuccs:[])
	<org.jgrapht.alg.ConnectivityInspectorTest: void testStronglyConnected2()>
		<org.jgrapht.alg.ConnectivityInspectorTest.java:279, 12.00%> (predicates:{($z13 != 0)=true}, inLoop:true, inCatch:false, exceptionalSuccs:[])
	<org.jgrapht.alg.ConnectivityInspectorTest: void testStronglyConnected3()>
		<org.jgrapht.alg.ConnectivityInspectorTest.java:337, 13.04%> (predicates:{($z12 != 0)=true}, inLoop:true, inCatch:false, exceptionalSuccs:[])
==============================================

[6] Set (editDistance: 0, isComplete: true, packages: 1, classes: 1, uniqueness: 2, controlFlowSize: 0, isHighPriority: true): 
Assertions (2): 
	<junit.framework.TestCase: void assertEquals(int,int)> (bools:0, nulls:0, inLoop:false, inCatch:false, exceptionalSuccsSize:0)
	<junit.framework.TestCase: void assertEquals(java.lang.Object,java.lang.Object)> (bools:0, nulls:0, inLoop:false, inCatch:false, exceptionalSuccsSize:0)

Methods (2): 
	<org.jgrapht.alg.BronKerboschCliqueFinderTest: void testFindBiggest()>
		<org.jgrapht.alg.BronKerboschCliqueFinderTest.java:119, 41.67%> (predicates:{}, inLoop:false, inCatch:false, exceptionalSuccs:[])
		<org.jgrapht.alg.BronKerboschCliqueFinderTest.java:129, 58.33%> (predicates:{}, inLoop:false, inCatch:false, exceptionalSuccs:[])
	<org.jgrapht.alg.BronKerboschCliqueFinderTest: void testFindAll()>
		<org.jgrapht.alg.BronKerboschCliqueFinderTest.java:143, 26.32%> (predicates:{}, inLoop:false, inCatch:false, exceptionalSuccs:[])
		<org.jgrapht.alg.BronKerboschCliqueFinderTest.java:175, 21.05%> (predicates:{}, inLoop:false, inCatch:false, exceptionalSuccs:[])

Relevant Assertion clone sets (0):
==============================================

[7] Set (editDistance: 0, isComplete: true, packages: 1, classes: 1, uniqueness: 2, controlFlowSize: 0, isHighPriority: true): 
Assertions (2): 
	<junit.framework.TestCase: void assertEquals(float,float,float)> (bools:0, nulls:0, inLoop:false, inCatch:false, exceptionalSuccsSize:0)
	<junit.framework.TestCase: void assertEquals(java.lang.Object,java.lang.Object)> (bools:0, nulls:0, inLoop:false, inCatch:false, exceptionalSuccsSize:0)

Methods (2): 
	<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest: void testBipartiteMatching1()>
		<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest.java:83, 6.76%> (predicates:{}, inLoop:false, inCatch:false, exceptionalSuccs:[])
		<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest.java:86, 6.76%> (predicates:{}, inLoop:false, inCatch:false, exceptionalSuccs:[])
	<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest: void testBipartiteMatching2()>
		<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest.java:112, 5.21%> (predicates:{}, inLoop:false, inCatch:false, exceptionalSuccs:[])
		<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest.java:115, 5.21%> (predicates:{}, inLoop:false, inCatch:false, exceptionalSuccs:[])

Relevant Assertion clone sets (2):
Set (score: 0.67, ccsize: 2, packages: 1, classes: 1): 
	<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest: void testBipartiteMatching1()>
		<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest.java:86, 6.76%> (predicates:{}, inLoop:false, inCatch:false, exceptionalSuccs:[])
	<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest: void testBipartiteMatching2()>
		<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest.java:115, 5.21%> (predicates:{}, inLoop:false, inCatch:false, exceptionalSuccs:[])
	<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest: void testEmptyMatching()>
		<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest.java:128, 33.33%> (predicates:{}, inLoop:false, inCatch:false, exceptionalSuccs:[])
Set (score: 0.50, ccsize: 2, packages: 1, classes: 1): 
	<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest: void testBipartiteMatching1()>
		<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest.java:83, 6.76%> (predicates:{}, inLoop:false, inCatch:false, exceptionalSuccs:[])
	<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest: void testBipartiteMatching2()>
		<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest.java:112, 5.21%> (predicates:{}, inLoop:false, inCatch:false, exceptionalSuccs:[])
==============================================

[8] Set (editDistance: 0, isComplete: true, packages: 1, classes: 1, uniqueness: 1, controlFlowSize: 2, isHighPriority: true): 
Assertions (1): 
	<junit.framework.TestCase: void assertTrue(boolean)> (bools:1, nulls:0, inLoop:true, inCatch:false, exceptionalSuccsSize:0)

Methods (2): 
	<org.jgrapht.alg.VertexCoversTest: void testFind2ApproximationCover()>
		<org.jgrapht.alg.VertexCoversTest.java:74, 60.00%> (predicates:{(i0 < 20)=true}, inLoop:true, inCatch:false, exceptionalSuccs:[])
	<org.jgrapht.alg.VertexCoversTest: void testFindGreedyCover()>
		<org.jgrapht.alg.VertexCoversTest.java:89, 50.00%> (predicates:{(i0 < 20)=true}, inLoop:true, inCatch:false, exceptionalSuccs:[])

Relevant Assertion clone sets (1):
Set (score: 1.00, ccsize: 2, packages: 1, classes: 1): 
	<org.jgrapht.alg.VertexCoversTest: void testFind2ApproximationCover()>
		<org.jgrapht.alg.VertexCoversTest.java:74, 60.00%> (predicates:{(i0 < 20)=true}, inLoop:true, inCatch:false, exceptionalSuccs:[])
	<org.jgrapht.alg.VertexCoversTest: void testFindGreedyCover()>
		<org.jgrapht.alg.VertexCoversTest.java:89, 50.00%> (predicates:{(i0 < 20)=true}, inLoop:true, inCatch:false, exceptionalSuccs:[])
==============================================

[9] Set (editDistance: 0, isComplete: true, packages: 1, classes: 1, uniqueness: 1, controlFlowSize: 1, isHighPriority: true): 
Assertions (1): 
	<junit.framework.TestCase: void assertEquals(java.lang.String,java.lang.String)> (bools:0, nulls:0, inLoop:false, inCatch:false, exceptionalSuccsSize:1)

Methods (2): 
	<org.jgrapht.experimental.GraphReaderTest: void testGraphReader()>
		<org.jgrapht.experimental.GraphReaderTest.java:88, 27.27%> (predicates:{}, inLoop:false, inCatch:false, exceptionalSuccs:[$r22 := @caughtexception])
	<org.jgrapht.experimental.GraphReaderTest: void testGraphReaderWeighted()>
		<org.jgrapht.experimental.GraphReaderTest.java:116, 23.08%> (predicates:{}, inLoop:false, inCatch:false, exceptionalSuccs:[$r24 := @caughtexception])

Relevant Assertion clone sets (1):
Set (score: 1.00, ccsize: 2, packages: 1, classes: 1): 
	<org.jgrapht.experimental.GraphReaderTest: void testGraphReader()>
		<org.jgrapht.experimental.GraphReaderTest.java:88, 27.27%> (predicates:{}, inLoop:false, inCatch:false, exceptionalSuccs:[$r22 := @caughtexception])
	<org.jgrapht.experimental.GraphReaderTest: void testGraphReaderWeighted()>
		<org.jgrapht.experimental.GraphReaderTest.java:116, 23.08%> (predicates:{}, inLoop:false, inCatch:false, exceptionalSuccs:[$r24 := @caughtexception])
==============================================

[10] Set (editDistance: 0, isComplete: true, packages: 1, classes: 1, uniqueness: 1, controlFlowSize: 1, isHighPriority: true): 
Assertions (1): 
	<junit.framework.TestCase: void assertTrue(boolean)> (bools:1, nulls:0, inLoop:false, inCatch:false, exceptionalSuccsSize:0)

Methods (2): 
	<org.jgrapht.generate.RandomGraphGeneratorTest: void testGenerateDirectedGraph()>
		<org.jgrapht.generate.RandomGraphGeneratorTest.java:70, 20.00%> (predicates:{(i0 < 3)=false}, inLoop:false, inCatch:false, exceptionalSuccs:[])
	<org.jgrapht.generate.RandomGraphGeneratorTest: void testGenerateListenableUndirectedGraph()>
		<org.jgrapht.generate.RandomGraphGeneratorTest.java:89, 20.00%> (predicates:{(i0 < 3)=false}, inLoop:false, inCatch:false, exceptionalSuccs:[])

Relevant Assertion clone sets (0):
==============================================

[11] Set (editDistance: 0, isComplete: true, packages: 1, classes: 1, uniqueness: 1, controlFlowSize: 2, isHighPriority: true): 
Assertions (1): 
	<junit.framework.TestCase: void assertEquals(java.lang.String,java.lang.String)> (bools:2, nulls:0, inLoop:false, inCatch:false, exceptionalSuccsSize:0)

Methods (2): 
	<org.jgrapht.traverse.ClosestFirstIteratorTest: void testRadius()>
		<org.jgrapht.traverse.ClosestFirstIteratorTest.java:80, 53.85%> (predicates:{($z1 != 0)=false, ($z0 == 0)=true}, inLoop:false, inCatch:false, exceptionalSuccs:[])
	<org.jgrapht.traverse.ClosestFirstIteratorTest: void testNoStart()>
		<org.jgrapht.traverse.ClosestFirstIteratorTest.java:103, 53.85%> (predicates:{($z1 != 0)=false, ($z0 == 0)=true}, inLoop:false, inCatch:false, exceptionalSuccs:[])

Relevant Assertion clone sets (1):
Set (score: 0.33, ccsize: 5, packages: 1, classes: 2): 
	<org.jgrapht.traverse.AbstractGraphIteratorTest: void testDirectedGraph()>
		<org.jgrapht.traverse.AbstractGraphIteratorTest.java:86, 47.06%> (predicates:{($z1 != 0)=false, ($z0 == 0)=true}, inLoop:false, inCatch:false, exceptionalSuccs:[])
	<org.jgrapht.traverse.ClosestFirstIteratorTest: void testRadius()>
		<org.jgrapht.traverse.ClosestFirstIteratorTest.java:80, 53.85%> (predicates:{($z1 != 0)=false, ($z0 == 0)=true}, inLoop:false, inCatch:false, exceptionalSuccs:[])
	<org.jgrapht.traverse.ClosestFirstIteratorTest: void testNoStart()>
		<org.jgrapht.traverse.ClosestFirstIteratorTest.java:103, 53.85%> (predicates:{($z1 != 0)=false, ($z0 == 0)=true}, inLoop:false, inCatch:false, exceptionalSuccs:[])
==============================================

[12] Set (editDistance: 0, isComplete: true, packages: 2, classes: 2, uniqueness: 1, controlFlowSize: 0, isHighPriority: false): 
Assertions (4): 
	<junit.framework.TestCase: void assertEquals(java.lang.Object,java.lang.Object)> (bools:0, nulls:0, inLoop:false, inCatch:false, exceptionalSuccsSize:0)
	<junit.framework.TestCase: void assertEquals(java.lang.Object,java.lang.Object)> (bools:0, nulls:0, inLoop:false, inCatch:false, exceptionalSuccsSize:0)
	<junit.framework.TestCase: void assertEquals(java.lang.Object,java.lang.Object)> (bools:0, nulls:0, inLoop:false, inCatch:false, exceptionalSuccsSize:0)
	<junit.framework.TestCase: void assertEquals(java.lang.Object,java.lang.Object)> (bools:0, nulls:0, inLoop:false, inCatch:false, exceptionalSuccsSize:0)

Methods (3): 
	<org.jgrapht.alg.ShortestPathTestCase: void testPathBetween()>
		<org.jgrapht.alg.ShortestPathTestCase.java:86, 21.74%> (predicates:{}, inLoop:false, inCatch:false, exceptionalSuccs:[])
		<org.jgrapht.alg.ShortestPathTestCase.java:89, 26.09%> (predicates:{}, inLoop:false, inCatch:false, exceptionalSuccs:[])
		<org.jgrapht.alg.ShortestPathTestCase.java:96, 34.78%> (predicates:{}, inLoop:false, inCatch:false, exceptionalSuccs:[])
		<org.jgrapht.alg.ShortestPathTestCase.java:104, 47.83%> (predicates:{}, inLoop:false, inCatch:false, exceptionalSuccs:[])
	<org.jgrapht.graph.SubgraphTest: void testInducedSubgraphListener()>
		<org.jgrapht.graph.SubgraphTest.java:86, 50.00%> (predicates:{}, inLoop:false, inCatch:false, exceptionalSuccs:[])
		<org.jgrapht.graph.SubgraphTest.java:87, 50.00%> (predicates:{}, inLoop:false, inCatch:false, exceptionalSuccs:[])
		<org.jgrapht.graph.SubgraphTest.java:91, 50.00%> (predicates:{}, inLoop:false, inCatch:false, exceptionalSuccs:[])
		<org.jgrapht.graph.SubgraphTest.java:92, 50.00%> (predicates:{}, inLoop:false, inCatch:false, exceptionalSuccs:[])
	<org.jgrapht.graph.SubgraphTest: void testSubgraphListener()>
		<org.jgrapht.graph.SubgraphTest.java:139, 43.75%> (predicates:{}, inLoop:false, inCatch:false, exceptionalSuccs:[])
		<org.jgrapht.graph.SubgraphTest.java:140, 43.75%> (predicates:{}, inLoop:false, inCatch:false, exceptionalSuccs:[])
		<org.jgrapht.graph.SubgraphTest.java:145, 31.25%> (predicates:{}, inLoop:false, inCatch:false, exceptionalSuccs:[])
		<org.jgrapht.graph.SubgraphTest.java:146, 43.75%> (predicates:{}, inLoop:false, inCatch:false, exceptionalSuccs:[])

Relevant Assertion clone sets (0):
==============================================

[13] Set (editDistance: 0, isComplete: true, packages: 2, classes: 2, uniqueness: 1, controlFlowSize: 0, isHighPriority: false): 
Assertions (2): 
	<junit.framework.TestCase: void assertEquals(boolean,boolean)> (bools:0, nulls:0, inLoop:false, inCatch:false, exceptionalSuccsSize:0)
	<junit.framework.TestCase: void assertEquals(boolean,boolean)> (bools:0, nulls:0, inLoop:false, inCatch:false, exceptionalSuccsSize:0)

Methods (4): 
	<org.jgrapht.alg.ConnectivityInspectorTest: void testDirectedGraph()>
		<org.jgrapht.alg.ConnectivityInspectorTest.java:139, 57.14%> (predicates:{}, inLoop:false, inCatch:false, exceptionalSuccs:[])
		<org.jgrapht.alg.ConnectivityInspectorTest.java:143, 57.14%> (predicates:{}, inLoop:false, inCatch:false, exceptionalSuccs:[])
	<org.jgrapht.graph.AsUndirectedGraphTest: void testAddVertex()>
		<org.jgrapht.graph.AsUndirectedGraphTest.java:102, 85.71%> (predicates:{}, inLoop:false, inCatch:false, exceptionalSuccs:[])
		<org.jgrapht.graph.AsUndirectedGraphTest.java:103, 100.00%> (predicates:{}, inLoop:false, inCatch:false, exceptionalSuccs:[])
	<org.jgrapht.graph.AsUndirectedGraphTest: void testRemoveEdge()>
		<org.jgrapht.graph.AsUndirectedGraphTest.java:155, 77.78%> (predicates:{}, inLoop:false, inCatch:false, exceptionalSuccs:[])
		<org.jgrapht.graph.AsUndirectedGraphTest.java:156, 100.00%> (predicates:{}, inLoop:false, inCatch:false, exceptionalSuccs:[])
	<org.jgrapht.graph.AsUndirectedGraphTest: void testRemoveVertex()>
		<org.jgrapht.graph.AsUndirectedGraphTest.java:165, 77.78%> (predicates:{}, inLoop:false, inCatch:false, exceptionalSuccs:[])
		<org.jgrapht.graph.AsUndirectedGraphTest.java:166, 100.00%> (predicates:{}, inLoop:false, inCatch:false, exceptionalSuccs:[])

Relevant Assertion clone sets (1):
Set (score: 0.33, ccsize: 5, packages: 1, classes: 1): 
	<org.jgrapht.graph.AsUndirectedGraphTest: void testAddVertex()>
		<org.jgrapht.graph.AsUndirectedGraphTest.java:103, 100.00%> (predicates:{}, inLoop:false, inCatch:false, exceptionalSuccs:[])
	<org.jgrapht.graph.AsUndirectedGraphTest: void testRemoveVertex()>
		<org.jgrapht.graph.AsUndirectedGraphTest.java:165, 77.78%> (predicates:{}, inLoop:false, inCatch:false, exceptionalSuccs:[])
==============================================

[14] Set (editDistance: 0, isComplete: true, packages: 3, classes: 5, uniqueness: 1, controlFlowSize: 0, isHighPriority: false): 
Assertions (2): 
	<junit.framework.TestCase: void assertEquals(int,int)> (bools:0, nulls:0, inLoop:false, inCatch:false, exceptionalSuccsSize:0)
	<junit.framework.TestCase: void assertEquals(int,int)> (bools:0, nulls:0, inLoop:false, inCatch:false, exceptionalSuccsSize:0)

Methods (11): 
	<org.jgrapht.alg.BiconnectivityInspectorTest: void testLinearGraph(int)>
		<org.jgrapht.alg.BiconnectivityInspectorTest.java:88, 40.00%> (predicates:{}, inLoop:false, inCatch:false, exceptionalSuccs:[])
		<org.jgrapht.alg.BiconnectivityInspectorTest.java:89, 40.00%> (predicates:{}, inLoop:false, inCatch:false, exceptionalSuccs:[])
	<org.jgrapht.alg.BiconnectivityInspectorTest: void testNotBiconnected()>
		<org.jgrapht.alg.BiconnectivityInspectorTest.java:100, 55.56%> (predicates:{}, inLoop:false, inCatch:false, exceptionalSuccs:[])
		<org.jgrapht.alg.BiconnectivityInspectorTest.java:101, 55.56%> (predicates:{}, inLoop:false, inCatch:false, exceptionalSuccs:[])
	<org.jgrapht.alg.BlockCutpointGraphTest: void testBiconnected()>
		<org.jgrapht.alg.BlockCutpointGraphTest.java:67, 41.67%> (predicates:{}, inLoop:false, inCatch:false, exceptionalSuccs:[])
		<org.jgrapht.alg.BlockCutpointGraphTest.java:71, 41.67%> (predicates:{}, inLoop:false, inCatch:false, exceptionalSuccs:[])
	<org.jgrapht.alg.BlockCutpointGraphTest: void testLinearGraph(int)>
		<org.jgrapht.alg.BlockCutpointGraphTest.java:121, 33.33%> (predicates:{}, inLoop:false, inCatch:false, exceptionalSuccs:[])
		<org.jgrapht.alg.BlockCutpointGraphTest.java:125, 33.33%> (predicates:{}, inLoop:false, inCatch:false, exceptionalSuccs:[])
	<org.jgrapht.alg.BlockCutpointGraphTest: void testNotBiconnected()>
		<org.jgrapht.alg.BlockCutpointGraphTest.java:135, 41.67%> (predicates:{}, inLoop:false, inCatch:false, exceptionalSuccs:[])
		<org.jgrapht.alg.BlockCutpointGraphTest.java:139, 41.67%> (predicates:{}, inLoop:false, inCatch:false, exceptionalSuccs:[])
	<org.jgrapht.generate.GraphGeneratorTest: void testCompleteBipartiteGraphGenerator()>
		<org.jgrapht.generate.GraphGeneratorTest.java:243, 50.00%> (predicates:{}, inLoop:false, inCatch:false, exceptionalSuccs:[])
		<org.jgrapht.generate.GraphGeneratorTest.java:244, 50.00%> (predicates:{}, inLoop:false, inCatch:false, exceptionalSuccs:[])
	<org.jgrapht.generate.GraphGeneratorTest: void testHyperCubeGraphGenerator()>
		<org.jgrapht.generate.GraphGeneratorTest.java:265, 50.00%> (predicates:{}, inLoop:false, inCatch:false, exceptionalSuccs:[])
		<org.jgrapht.generate.GraphGeneratorTest.java:266, 50.00%> (predicates:{}, inLoop:false, inCatch:false, exceptionalSuccs:[])
	<org.jgrapht.graph.DefaultDirectedGraphTest: void testEdgesOf()>
		<org.jgrapht.graph.DefaultDirectedGraphTest.java:117, 75.00%> (predicates:{}, inLoop:false, inCatch:false, exceptionalSuccs:[])
		<org.jgrapht.graph.DefaultDirectedGraphTest.java:118, 75.00%> (predicates:{}, inLoop:false, inCatch:false, exceptionalSuccs:[])
	<org.jgrapht.graph.DefaultDirectedGraphTest: void testInDegreeOf()>
		<org.jgrapht.graph.DefaultDirectedGraphTest.java:141, 83.33%> (predicates:{}, inLoop:false, inCatch:false, exceptionalSuccs:[])
		<org.jgrapht.graph.DefaultDirectedGraphTest.java:142, 83.33%> (predicates:{}, inLoop:false, inCatch:false, exceptionalSuccs:[])
	<org.jgrapht.graph.DefaultDirectedGraphTest: void testOutDegreeOf()>
		<org.jgrapht.graph.DefaultDirectedGraphTest.java:153, 83.33%> (predicates:{}, inLoop:false, inCatch:false, exceptionalSuccs:[])
		<org.jgrapht.graph.DefaultDirectedGraphTest.java:154, 83.33%> (predicates:{}, inLoop:false, inCatch:false, exceptionalSuccs:[])
	<org.jgrapht.graph.GenericGraphsTest: void testEqualButNotSameVertex()>
		<org.jgrapht.graph.GenericGraphsTest.java:145, 40.00%> (predicates:{}, inLoop:false, inCatch:false, exceptionalSuccs:[])
		<org.jgrapht.graph.GenericGraphsTest.java:146, 40.00%> (predicates:{}, inLoop:false, inCatch:false, exceptionalSuccs:[])

Relevant Assertion clone sets (0):
==============================================

[15] Set (editDistance: 0, isComplete: true, packages: 1, classes: 1, uniqueness: 1, controlFlowSize: 0, isHighPriority: false): 
Assertions (1): 
	<junit.framework.TestCase: void assertEquals(double,double,double)> (bools:0, nulls:0, inLoop:false, inCatch:false, exceptionalSuccsSize:0)

Methods (2): 
	<org.jgrapht.alg.StoerWagnerMinimumCutTest: void testMinCut14()>
		<org.jgrapht.alg.StoerWagnerMinimumCutTest.java:97, 16.67%> (predicates:{}, inLoop:false, inCatch:false, exceptionalSuccs:[])
	<org.jgrapht.alg.StoerWagnerMinimumCutTest: void testMinCutDisconnected()>
		<org.jgrapht.alg.StoerWagnerMinimumCutTest.java:124, 22.73%> (predicates:{}, inLoop:false, inCatch:false, exceptionalSuccs:[])

Relevant Assertion clone sets (0):
==============================================

[16] Set (editDistance: 0, isComplete: true, packages: 2, classes: 2, uniqueness: 1, controlFlowSize: 0, isHighPriority: false): 
Assertions (1): 
	<junit.framework.TestCase: void assertFalse(boolean)> (bools:0, nulls:0, inLoop:false, inCatch:false, exceptionalSuccsSize:0)

Methods (2): 
	<org.jgrapht.graph.SubgraphTest: void testInducedSubgraphUnderlyingEdgeAddition()>
		<org.jgrapht.graph.SubgraphTest.java:192, 20.00%> (predicates:{}, inLoop:false, inCatch:false, exceptionalSuccs:[])
	<org.jgrapht.traverse.TopologicalOrderIteratorTest: void testEmptyGraph()>
		<org.jgrapht.traverse.TopologicalOrderIteratorTest.java:136, 50.00%> (predicates:{}, inLoop:false, inCatch:false, exceptionalSuccs:[])

Relevant Assertion clone sets (0):
==============================================

[17] Set (editDistance: 0, isComplete: true, packages: 2, classes: 5, uniqueness: 1, controlFlowSize: 0, isHighPriority: false): 
Assertions (1): 
	<junit.framework.TestCase: void assertEquals(java.lang.String,java.lang.String)> (bools:0, nulls:0, inLoop:false, inCatch:false, exceptionalSuccsSize:0)

Methods (6): 
	<org.jgrapht.ext.DOTExporterTest: void testUndirected()>
		<org.jgrapht.ext.DOTExporterTest.java:110, 41.67%> (predicates:{}, inLoop:false, inCatch:false, exceptionalSuccs:[])
	<org.jgrapht.ext.GmlExporterTest: void testUndirected()>
		<org.jgrapht.ext.GmlExporterTest.java:117, 62.50%> (predicates:{}, inLoop:false, inCatch:false, exceptionalSuccs:[])
	<org.jgrapht.ext.MatrixExporterTest: void testAdjacencyUndirected()>
		<org.jgrapht.ext.MatrixExporterTest.java:133, 62.50%> (predicates:{}, inLoop:false, inCatch:false, exceptionalSuccs:[])
	<org.jgrapht.ext.MatrixExporterTest: void testAdjacencyDirected()>
		<org.jgrapht.ext.MatrixExporterTest.java:149, 62.50%> (predicates:{}, inLoop:false, inCatch:false, exceptionalSuccs:[])
	<org.jgrapht.graph.AsUndirectedGraphTest: void testAddEdge()>
		<org.jgrapht.graph.AsUndirectedGraphTest.java:89, 100.00%> (predicates:{}, inLoop:false, inCatch:false, exceptionalSuccs:[])
	<org.jgrapht.graph.GenericGraphsTest: void testAlissaHacker()>
		<org.jgrapht.graph.GenericGraphsTest.java:134, 83.33%> (predicates:{}, inLoop:false, inCatch:false, exceptionalSuccs:[])

Relevant Assertion clone sets (0):
==============================================

[18] Set (editDistance: 0, isComplete: true, packages: 3, classes: 3, uniqueness: 1, controlFlowSize: 0, isHighPriority: false): 
Assertions (1): 
	<junit.framework.TestCase: void assertEquals(int,int)> (bools:0, nulls:0, inLoop:false, inCatch:false, exceptionalSuccsSize:0)

Methods (5): 
	<org.jgrapht.alg.KSPExampleTest: void testFourReturnedPathsJGraphT()>
		<org.jgrapht.alg.KSPExampleTest.java:60, 55.56%> (predicates:{}, inLoop:false, inCatch:false, exceptionalSuccs:[])
	<org.jgrapht.alg.KSPExampleTest: void testThreeReturnedPathsJGraphT()>
		<org.jgrapht.alg.KSPExampleTest.java:72, 60.00%> (predicates:{}, inLoop:false, inCatch:false, exceptionalSuccs:[])
	<org.jgrapht.alg.KSPExampleTest: void testTwoReturnedPathsJGraphT()>
		<org.jgrapht.alg.KSPExampleTest.java:84, 60.00%> (predicates:{}, inLoop:false, inCatch:false, exceptionalSuccs:[])
	<org.jgrapht.generate.GraphGeneratorTest: void testCompleteGraphGenerator()>
		<org.jgrapht.generate.GraphGeneratorTest.java:185, 62.50%> (predicates:{}, inLoop:false, inCatch:false, exceptionalSuccs:[])
	<org.jgrapht.graph.DefaultDirectedGraphTest: void testGetAllEdges()>
		<org.jgrapht.graph.DefaultDirectedGraphTest.java:130, 100.00%> (predicates:{}, inLoop:false, inCatch:false, exceptionalSuccs:[])

Relevant Assertion clone sets (1):
Set (score: 0.67, ccsize: 3, packages: 1, classes: 1): 
	<org.jgrapht.alg.KSPExampleTest: void testFourReturnedPathsJGraphT()>
		<org.jgrapht.alg.KSPExampleTest.java:60, 55.56%> (predicates:{}, inLoop:false, inCatch:false, exceptionalSuccs:[])
	<org.jgrapht.alg.KSPExampleTest: void testThreeReturnedPathsJGraphT()>
		<org.jgrapht.alg.KSPExampleTest.java:72, 60.00%> (predicates:{}, inLoop:false, inCatch:false, exceptionalSuccs:[])
	<org.jgrapht.alg.KSPExampleTest: void testTwoReturnedPathsJGraphT()>
		<org.jgrapht.alg.KSPExampleTest.java:84, 60.00%> (predicates:{}, inLoop:false, inCatch:false, exceptionalSuccs:[])
==============================================

[19] Set (editDistance: 0, isComplete: true, packages: 3, classes: 5, uniqueness: 1, controlFlowSize: 0, isHighPriority: false): 
Assertions (1): 
	<junit.framework.TestCase: void assertEquals(java.lang.Object,java.lang.Object)> (bools:0, nulls:0, inLoop:false, inCatch:false, exceptionalSuccsSize:0)

Methods (8): 
	<org.jgrapht.alg.ConnectivityInspectorTest: void testStronglyConnected4()>
		<org.jgrapht.alg.ConnectivityInspectorTest.java:371, 30.77%> (predicates:{}, inLoop:false, inCatch:false, exceptionalSuccs:[])
	<org.jgrapht.alg.FloydWarshallShortestPathsTest: void testDiameter()>
		<org.jgrapht.alg.FloydWarshallShortestPathsTest.java:161, 57.14%> (predicates:{}, inLoop:false, inCatch:false, exceptionalSuccs:[])
	<org.jgrapht.alg.FloydWarshallShortestPathsTest: void testEmptyDiameter()>
		<org.jgrapht.alg.FloydWarshallShortestPathsTest.java:170, 50.00%> (predicates:{}, inLoop:false, inCatch:false, exceptionalSuccs:[])
	<org.jgrapht.alg.FloydWarshallShortestPathsTest: void testEdgeLessDiameter()>
		<org.jgrapht.alg.FloydWarshallShortestPathsTest.java:182, 40.00%> (predicates:{}, inLoop:false, inCatch:false, exceptionalSuccs:[])
	<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest: void testEmptyMatching()>
		<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest.java:128, 33.33%> (predicates:{}, inLoop:false, inCatch:false, exceptionalSuccs:[])
	<org.jgrapht.experimental.alg.ColoringTest: void testGreedyColoring()>
		<org.jgrapht.experimental.alg.ColoringTest.java:77, 50.00%> (predicates:{}, inLoop:false, inCatch:false, exceptionalSuccs:[])
	<org.jgrapht.experimental.alg.ColoringTest: void testBacktrackColoring()>
		<org.jgrapht.experimental.alg.ColoringTest.java:97, 50.00%> (predicates:{}, inLoop:false, inCatch:false, exceptionalSuccs:[])
	<org.jgrapht.graph.SimpleDirectedGraphTest: void testIncomingOutgoingEdgesOf()>
		<org.jgrapht.graph.SimpleDirectedGraphTest.java:315, 114.29%> (predicates:{}, inLoop:false, inCatch:false, exceptionalSuccs:[])

Relevant Assertion clone sets (0):
==============================================

