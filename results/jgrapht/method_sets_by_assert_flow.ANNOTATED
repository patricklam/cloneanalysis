Unless specified, we are referring to edit distance of 0 only for any observations
=======================================================================================

*This is a strong clone set for which using call chain analysis only
capture one pair of asserts because the call chains of other pairs
were too short (or BUG).

#Verified with control flow inspection
Although there was no branching at all, no branching for number size of
asserts may be a good indication of clones as well.

[1] Set (editDistance: 0, isComplete: true, packages: 1, classes: 1): 
Assertions (13): 
	<junit.framework.TestCase: void assertEquals(java.lang.Object,java.lang.Object)>
	<junit.framework.TestCase: void assertEquals(java.lang.Object,java.lang.Object)>
	<junit.framework.TestCase: void assertEquals(java.lang.Object,java.lang.Object)>
	<junit.framework.TestCase: void assertEquals(java.lang.Object,java.lang.Object)>
	<junit.framework.TestCase: void assertEquals(java.lang.Object,java.lang.Object)>
	<junit.framework.TestCase: void assertEquals(java.lang.Object,java.lang.Object)>
	<junit.framework.TestCase: void assertTrue(boolean)>
	<junit.framework.TestCase: void assertEquals(java.lang.Object,java.lang.Object)>
	<junit.framework.TestCase: void assertEquals(java.lang.Object,java.lang.Object)>
	<junit.framework.TestCase: void assertEquals(java.lang.Object,java.lang.Object)>
	<junit.framework.TestCase: void assertEquals(java.lang.Object,java.lang.Object)>
	<junit.framework.TestCase: void assertEquals(java.lang.Object,java.lang.Object)>
	<junit.framework.TestCase: void assertEquals(java.lang.Object,java.lang.Object)>

Methods (2): 
	<org.jgrapht.graph.ListenableGraphTest: void testGraphListener()>:
		<org.jgrapht.graph.ListenableGraphTest.java:95, 66.67%>
		<org.jgrapht.graph.ListenableGraphTest.java:96, 62.50%>
		<org.jgrapht.graph.ListenableGraphTest.java:100, 66.67%>
		<org.jgrapht.graph.ListenableGraphTest.java:101, 62.50%>
		<org.jgrapht.graph.ListenableGraphTest.java:110, 70.83%>
		<org.jgrapht.graph.ListenableGraphTest.java:111, 62.50%>
		<org.jgrapht.graph.ListenableGraphTest.java:114, 12.50%>
		<org.jgrapht.graph.ListenableGraphTest.java:115, 70.83%>
		<org.jgrapht.graph.ListenableGraphTest.java:116, 62.50%>
		<org.jgrapht.graph.ListenableGraphTest.java:131, 62.50%>
		<org.jgrapht.graph.ListenableGraphTest.java:132, 62.50%>
		<org.jgrapht.graph.ListenableGraphTest.java:133, 62.50%>
		<org.jgrapht.graph.ListenableGraphTest.java:134, 62.50%>
	<org.jgrapht.graph.ListenableGraphTest: void testVertexSetListener()>:
		<org.jgrapht.graph.ListenableGraphTest.java:155, 66.67%>
		<org.jgrapht.graph.ListenableGraphTest.java:156, 62.50%>
		<org.jgrapht.graph.ListenableGraphTest.java:160, 66.67%>
		<org.jgrapht.graph.ListenableGraphTest.java:161, 62.50%>
		<org.jgrapht.graph.ListenableGraphTest.java:170, 62.50%>
		<org.jgrapht.graph.ListenableGraphTest.java:171, 62.50%>
		<org.jgrapht.graph.ListenableGraphTest.java:174, 12.50%>
		<org.jgrapht.graph.ListenableGraphTest.java:175, 62.50%>
		<org.jgrapht.graph.ListenableGraphTest.java:176, 62.50%>
		<org.jgrapht.graph.ListenableGraphTest.java:191, 62.50%>
		<org.jgrapht.graph.ListenableGraphTest.java:192, 62.50%>
		<org.jgrapht.graph.ListenableGraphTest.java:193, 62.50%>
		<org.jgrapht.graph.ListenableGraphTest.java:194, 62.50%>

Relevant Assertion clone sets (1):
Set (score: 1.00, ccsize: 2, packages: 1, classes: 1): 
	<org.jgrapht.graph.ListenableGraphTest: void testGraphListener()>:
		<org.jgrapht.graph.ListenableGraphTest.java:114, 12.50%>
	<org.jgrapht.graph.ListenableGraphTest: void testVertexSetListener()>:
		<org.jgrapht.graph.ListenableGraphTest.java:174, 12.50%>
==============================================

*testDisconnectedGraph appears to be similar with the other two and
might be a clone.
testRealGraph and testRealGraph2 were strongly matched by call chain analysis.

#Verified with control flow inspection
However, these methods all only have a loop prior to all the asserts.

[2] Set (editDistance: 0, isComplete: true, packages: 1, classes: 1): 
Assertions (6): 
	<junit.framework.TestCase: void assertEquals(float,float,float)>
	<junit.framework.TestCase: void assertEquals(float,float,float)>
	<junit.framework.TestCase: void assertEquals(java.lang.Object,java.lang.Object)>
	<junit.framework.TestCase: void assertEquals(java.lang.Object,java.lang.Object)>
	<junit.framework.TestCase: void assertEquals(double,double,double)>
	<junit.framework.TestCase: void assertEquals(java.lang.Object,java.lang.Object)>

Methods (3): 
	<org.jgrapht.alg.MinSourceSinkCutTest: void testDisconnectedGraph()>:
		<org.jgrapht.alg.MinSourceSinkCutTest.java:207, 11.36%>
		<org.jgrapht.alg.MinSourceSinkCutTest.java:209, 13.64%>
		<org.jgrapht.alg.MinSourceSinkCutTest.java:216, 11.36%>
		<org.jgrapht.alg.MinSourceSinkCutTest.java:217, 11.36%>
		<org.jgrapht.alg.MinSourceSinkCutTest.java:220, 9.09%>
		<org.jgrapht.alg.MinSourceSinkCutTest.java:221, 11.36%>
	<org.jgrapht.alg.MinSourceSinkCutTest: void testRealGraph()>:
		<org.jgrapht.alg.MinSourceSinkCutTest.java:90, 5.05%>
		<org.jgrapht.alg.MinSourceSinkCutTest.java:92, 6.06%>
		<org.jgrapht.alg.MinSourceSinkCutTest.java:99, 5.05%>
		<org.jgrapht.alg.MinSourceSinkCutTest.java:100, 5.05%>
		<org.jgrapht.alg.MinSourceSinkCutTest.java:103, 5.05%>
		<org.jgrapht.alg.MinSourceSinkCutTest.java:108, 5.05%>
	<org.jgrapht.alg.MinSourceSinkCutTest: void testRealGraph2()>:
		<org.jgrapht.alg.MinSourceSinkCutTest.java:138, 5.05%>
		<org.jgrapht.alg.MinSourceSinkCutTest.java:140, 6.06%>
		<org.jgrapht.alg.MinSourceSinkCutTest.java:147, 5.05%>
		<org.jgrapht.alg.MinSourceSinkCutTest.java:148, 5.05%>
		<org.jgrapht.alg.MinSourceSinkCutTest.java:151, 5.05%>
		<org.jgrapht.alg.MinSourceSinkCutTest.java:156, 5.05%>

Relevant Assertion clone sets (3):
Set (score: 0.67, ccsize: 2, packages: 1, classes: 1): 
	<org.jgrapht.alg.MinSourceSinkCutTest: void testRealGraph()>:
		<org.jgrapht.alg.MinSourceSinkCutTest.java:100, 5.05%>
	<org.jgrapht.alg.MinSourceSinkCutTest: void testRealGraph2()>:
		<org.jgrapht.alg.MinSourceSinkCutTest.java:148, 5.05%>
Set (score: 0.50, ccsize: 3, packages: 1, classes: 1): 
	<org.jgrapht.alg.MinSourceSinkCutTest: void testRealGraph()>:
		<org.jgrapht.alg.MinSourceSinkCutTest.java:92, 6.06%>
	<org.jgrapht.alg.MinSourceSinkCutTest: void testRealGraph2()>:
		<org.jgrapht.alg.MinSourceSinkCutTest.java:140, 6.06%>
Set (score: 0.50, ccsize: 2, packages: 1, classes: 1): 
	<org.jgrapht.alg.MinSourceSinkCutTest: void testRealGraph()>:
		<org.jgrapht.alg.MinSourceSinkCutTest.java:103, 5.05%>
	<org.jgrapht.alg.MinSourceSinkCutTest: void testRealGraph2()>:
		<org.jgrapht.alg.MinSourceSinkCutTest.java:151, 5.05%>
==============================================

*This is a strong clone and backed by results from call chain analysis

#Verified with control flow inspection
The body of all test methods have no branching; all the second assert
evaluates an in-place boolean expression and therefore produces an if statement.
This is more towards assisting call chain analysis.

[3] Set (editDistance: 0, isComplete: true, packages: 1, classes: 1): 
Assertions (3): 
	<junit.framework.TestCase: void assertTrue(boolean)>
	<junit.framework.TestCase: void assertTrue(boolean)>
	<junit.framework.TestCase: void assertEquals(int,int)>

Methods (5): 
	<org.jgrapht.graph.EqualsAndHashCodeTest: void testDefaultDirectedGraph()>:
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:105, 6.52%>
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:106, 10.87%>
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:108, 13.04%>
	<org.jgrapht.graph.EqualsAndHashCodeTest: void testGraphsWithNonIntrusiveEdge()>:
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:187, 3.90%>
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:188, 6.49%>
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:190, 7.79%>
	<org.jgrapht.graph.EqualsAndHashCodeTest: void testGrapshWithCustomEdges()>:
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:268, 7.69%>
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:269, 12.82%>
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:271, 15.38%>
	<org.jgrapht.graph.EqualsAndHashCodeTest: void testPseudograph()>:
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:230, 5.08%>
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:231, 8.47%>
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:233, 10.17%>
	<org.jgrapht.graph.EqualsAndHashCodeTest: void testSimpleGraph()>:
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:148, 6.52%>
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:149, 10.87%>
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:151, 13.04%>

Relevant Assertion clone sets (3):
Set (score: 1.00, ccsize: 2, packages: 1, classes: 1): 
	<org.jgrapht.graph.EqualsAndHashCodeTest: void testAsWeightedGraphs()>:
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:329, 5.17%>
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:332, 5.17%>
	<org.jgrapht.graph.EqualsAndHashCodeTest: void testDefaultDirectedGraph()>:
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:105, 6.52%>
	<org.jgrapht.graph.EqualsAndHashCodeTest: void testGraphsWithNonIntrusiveEdge()>:
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:187, 3.90%>
	<org.jgrapht.graph.EqualsAndHashCodeTest: void testGrapshWithCustomEdges()>:
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:268, 7.69%>
	<org.jgrapht.graph.EqualsAndHashCodeTest: void testPseudograph()>:
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:230, 5.08%>
	<org.jgrapht.graph.EqualsAndHashCodeTest: void testSimpleGraph()>:
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:148, 6.52%>
Set (score: 0.50, ccsize: 4, packages: 1, classes: 1): 
	<org.jgrapht.graph.EqualsAndHashCodeTest: void testDefaultDirectedGraph()>:
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:106, 10.87%>
	<org.jgrapht.graph.EqualsAndHashCodeTest: void testGraphsWithNonIntrusiveEdge()>:
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:188, 6.49%>
Set (score: 0.50, ccsize: 4, packages: 1, classes: 1): 
	<org.jgrapht.graph.EqualsAndHashCodeTest: void testGrapshWithCustomEdges()>:
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:269, 12.82%>
	<org.jgrapht.graph.EqualsAndHashCodeTest: void testSimpleGraph()>:
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:149, 10.87%>
==============================================

*This is a strong clone and backed by results from call chain analysis

#Verified with control flow inspection
The second assert is in a loop, which strengthens the validity of result.

[4] Set (editDistance: 0, isComplete: true, packages: 1, classes: 1): 
Assertions (3): 
	<junit.framework.TestCase: void assertEquals(java.lang.Object,java.lang.Object)>
	<junit.framework.TestCase: void assertTrue(boolean)>
	<junit.framework.TestCase: void assertEquals(java.lang.Object,java.lang.Object)>

Methods (3): 
	<org.jgrapht.alg.ConnectivityInspectorTest: void testStronglyConnected1()>:
		<org.jgrapht.alg.ConnectivityInspectorTest.java:211, 16.00%>
		<org.jgrapht.alg.ConnectivityInspectorTest.java:222, 12.00%>
		<org.jgrapht.alg.ConnectivityInspectorTest.java:225, 16.00%>
	<org.jgrapht.alg.ConnectivityInspectorTest: void testStronglyConnected2()>:
		<org.jgrapht.alg.ConnectivityInspectorTest.java:268, 16.00%>
		<org.jgrapht.alg.ConnectivityInspectorTest.java:279, 12.00%>
		<org.jgrapht.alg.ConnectivityInspectorTest.java:282, 16.00%>
	<org.jgrapht.alg.ConnectivityInspectorTest: void testStronglyConnected3()>:
		<org.jgrapht.alg.ConnectivityInspectorTest.java:325, 17.39%>
		<org.jgrapht.alg.ConnectivityInspectorTest.java:337, 13.04%>
		<org.jgrapht.alg.ConnectivityInspectorTest.java:340, 17.39%>

Relevant Assertion clone sets (1):
Set (score: 1.00, ccsize: 2, packages: 1, classes: 1): 
	<org.jgrapht.alg.ConnectivityInspectorTest: void testStronglyConnected1()>:
		<org.jgrapht.alg.ConnectivityInspectorTest.java:222, 12.00%>
	<org.jgrapht.alg.ConnectivityInspectorTest: void testStronglyConnected2()>:
		<org.jgrapht.alg.ConnectivityInspectorTest.java:279, 12.00%>
	<org.jgrapht.alg.ConnectivityInspectorTest: void testStronglyConnected3()>:
		<org.jgrapht.alg.ConnectivityInspectorTest.java:337, 13.04%>
==============================================

*Because the assertion flow structure is small, this result is
suceptible to false positives. The relevant sets captured by the
call chain analysis is testLinearGraph from
BiconnectivityInspectorTest and BlockCutpointGraphTest and
testNotBiconnected from BiconnectivityInspectorTest and
BlockCutpointGraphTest.
The set of testEdgesOf, testInDegreeOf, testOutDegreeOf from
DefaultDirectedGraphTest were not captured by the call chain analysis
probably due to their low scoring (or BUG).

#Control flow inspection partially removed <org.jgrapht.experimental.permutation.CompoundPermutationIterTest: void testGetNext()>:
could not reason about this set because there was no branching:
	<junit.framework.TestCase: void assertEquals(int,int)> (bools:0, nulls:0, inLoop:false)
	<junit.framework.TestCase: void assertEquals(int,int)> (bools:0, nulls:0, inLoop:false)


[5] Set (editDistance: 0, isComplete: true, packages: 4, classes: 6): 
Assertions (2): 
	<junit.framework.TestCase: void assertEquals(int,int)>
	<junit.framework.TestCase: void assertEquals(int,int)>

Methods (12): 
	<org.jgrapht.alg.BiconnectivityInspectorTest: void testLinearGraph(int)>:
		<org.jgrapht.alg.BiconnectivityInspectorTest.java:88, 40.00%>
		<org.jgrapht.alg.BiconnectivityInspectorTest.java:89, 40.00%>
	<org.jgrapht.alg.BiconnectivityInspectorTest: void testNotBiconnected()>:
		<org.jgrapht.alg.BiconnectivityInspectorTest.java:100, 55.56%>
		<org.jgrapht.alg.BiconnectivityInspectorTest.java:101, 55.56%>
	<org.jgrapht.alg.BlockCutpointGraphTest: void testBiconnected()>:
		<org.jgrapht.alg.BlockCutpointGraphTest.java:67, 41.67%>
		<org.jgrapht.alg.BlockCutpointGraphTest.java:71, 41.67%>
	<org.jgrapht.alg.BlockCutpointGraphTest: void testLinearGraph(int)>:
		<org.jgrapht.alg.BlockCutpointGraphTest.java:121, 33.33%>
		<org.jgrapht.alg.BlockCutpointGraphTest.java:125, 33.33%>
	<org.jgrapht.alg.BlockCutpointGraphTest: void testNotBiconnected()>:
		<org.jgrapht.alg.BlockCutpointGraphTest.java:135, 41.67%>
		<org.jgrapht.alg.BlockCutpointGraphTest.java:139, 41.67%>
	<org.jgrapht.experimental.permutation.CompoundPermutationIterTest: void testGetNext()>:
		<org.jgrapht.experimental.permutation.CompoundPermutationIterTest.java:96, 40.00%>
		<org.jgrapht.experimental.permutation.CompoundPermutationIterTest.java:127, 40.00%>
	<org.jgrapht.generate.GraphGeneratorTest: void testCompleteBipartiteGraphGenerator()>:
		<org.jgrapht.generate.GraphGeneratorTest.java:243, 50.00%>
		<org.jgrapht.generate.GraphGeneratorTest.java:244, 50.00%>
	<org.jgrapht.generate.GraphGeneratorTest: void testHyperCubeGraphGenerator()>:
		<org.jgrapht.generate.GraphGeneratorTest.java:265, 50.00%>
		<org.jgrapht.generate.GraphGeneratorTest.java:266, 50.00%>
	<org.jgrapht.graph.DefaultDirectedGraphTest: void testEdgesOf()>:
		<org.jgrapht.graph.DefaultDirectedGraphTest.java:117, 75.00%>
		<org.jgrapht.graph.DefaultDirectedGraphTest.java:118, 75.00%>
	<org.jgrapht.graph.DefaultDirectedGraphTest: void testInDegreeOf()>:
		<org.jgrapht.graph.DefaultDirectedGraphTest.java:141, 83.33%>
		<org.jgrapht.graph.DefaultDirectedGraphTest.java:142, 83.33%>
	<org.jgrapht.graph.DefaultDirectedGraphTest: void testOutDegreeOf()>:
		<org.jgrapht.graph.DefaultDirectedGraphTest.java:153, 83.33%>
		<org.jgrapht.graph.DefaultDirectedGraphTest.java:154, 83.33%>
	<org.jgrapht.graph.GenericGraphsTest: void testEqualButNotSameVertex()>:
		<org.jgrapht.graph.GenericGraphsTest.java:145, 40.00%>
		<org.jgrapht.graph.GenericGraphsTest.java:146, 40.00%>

Relevant Assertion clone sets (2):
Set (score: 0.67, ccsize: 3, packages: 1, classes: 2): 
	<org.jgrapht.alg.BiconnectivityInspectorTest: void testLinearGraph(int)>:
		<org.jgrapht.alg.BiconnectivityInspectorTest.java:88, 40.00%>
	<org.jgrapht.alg.BlockCutpointGraphTest: void testLinearGraph(int)>:
		<org.jgrapht.alg.BlockCutpointGraphTest.java:121, 33.33%>
		<org.jgrapht.alg.BlockCutpointGraphTest.java:125, 33.33%>
Set (score: 0.67, ccsize: 3, packages: 1, classes: 2): 
	<org.jgrapht.alg.BiconnectivityInspectorTest: void testNotBiconnected()>:
		<org.jgrapht.alg.BiconnectivityInspectorTest.java:100, 55.56%>
	<org.jgrapht.alg.BlockCutpointGraphTest: void testNotBiconnected()>:
		<org.jgrapht.alg.BlockCutpointGraphTest.java:135, 41.67%>
		<org.jgrapht.alg.BlockCutpointGraphTest.java:139, 41.67%>
==============================================

*This is a strong clone and backed by results from call chain analysis

#Verified with control flow inspection
however there was no branching:
	<junit.framework.TestCase: void assertEquals(float,float,float)> (bools:0, nulls:0, inLoop:false)
	<junit.framework.TestCase: void assertEquals(java.lang.Object,java.lang.Object)> (bools:0, nulls:0, inLoop:false)

[6] Set (editDistance: 0, isComplete: true, packages: 1, classes: 1): 
Assertions (2): 
	<junit.framework.TestCase: void assertEquals(float,float,float)>
	<junit.framework.TestCase: void assertEquals(java.lang.Object,java.lang.Object)>

Methods (2): 
	<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest: void testBipartiteMatching1()>:
		<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest.java:83, 6.76%>
		<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest.java:86, 6.76%>
	<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest: void testBipartiteMatching2()>:
		<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest.java:112, 5.21%>
		<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest.java:115, 5.21%>

Relevant Assertion clone sets (2):
Set (score: 0.67, ccsize: 2, packages: 1, classes: 1): 
	<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest: void testBipartiteMatching1()>:
		<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest.java:86, 6.76%>
	<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest: void testBipartiteMatching2()>:
		<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest.java:115, 5.21%>
Set (score: 0.50, ccsize: 2, packages: 1, classes: 1): 
	<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest: void testBipartiteMatching1()>:
		<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest.java:83, 6.76%>
	<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest: void testBipartiteMatching2()>:
		<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest.java:112, 5.21%>
==============================================

* The clone set of testUndirected from DOTExporterTest and GmlExporterTest
reported from call chain analysis is a false positive.
testAdjacencyDirected and testAdjacencyUndirected appears to be a clone set but
missed by call chain analysis probably due to low scoring (or BUG).
testNoStart and testRadius from ClosestFirstIteratorTest appears to be a clone
set but missed by call chain analysis probably due to low scoring (or BUG).

#Control flow inspection partially removed:
	<org.jgrapht.traverse.ClosestFirstIteratorTest: void testNoStart()>:
	<org.jgrapht.traverse.ClosestFirstIteratorTest: void testRadius()>:
      (The above two are moved to a separate set)
      A while loop with an if statement inside prior to all the asserts help isolate this set
	<org.jgrapht.traverse.DepthFirstIteratorTest: void testBug1169182()>:

[7] Set (editDistance: 0, isComplete: true, packages: 4, classes: 8): 
Assertions (1): 
	<junit.framework.TestCase: void assertEquals(java.lang.String,java.lang.String)>

Methods (11): 
	<org.jgrapht.experimental.GraphReaderTest: void testGraphReader()>:
		<org.jgrapht.experimental.GraphReaderTest.java:88, 27.27%>
	<org.jgrapht.experimental.GraphReaderTest: void testGraphReaderWeighted()>:
		<org.jgrapht.experimental.GraphReaderTest.java:116, 23.08%>
	<org.jgrapht.ext.DOTExporterTest: void testUndirected()>:
		<org.jgrapht.ext.DOTExporterTest.java:110, 41.67%>
	<org.jgrapht.ext.GmlExporterTest: void testUndirected()>:
		<org.jgrapht.ext.GmlExporterTest.java:117, 62.50%>
	<org.jgrapht.ext.MatrixExporterTest: void testAdjacencyDirected()>:
		<org.jgrapht.ext.MatrixExporterTest.java:149, 62.50%>
	<org.jgrapht.ext.MatrixExporterTest: void testAdjacencyUndirected()>:
		<org.jgrapht.ext.MatrixExporterTest.java:133, 62.50%>
	<org.jgrapht.graph.AsUndirectedGraphTest: void testAddEdge()>:
		<org.jgrapht.graph.AsUndirectedGraphTest.java:89, 100.00%>
	<org.jgrapht.graph.GenericGraphsTest: void testAlissaHacker()>:
		<org.jgrapht.graph.GenericGraphsTest.java:134, 83.33%>
	<org.jgrapht.traverse.ClosestFirstIteratorTest: void testNoStart()>:
		<org.jgrapht.traverse.ClosestFirstIteratorTest.java:103, 53.85%>
	<org.jgrapht.traverse.ClosestFirstIteratorTest: void testRadius()>:
		<org.jgrapht.traverse.ClosestFirstIteratorTest.java:80, 53.85%>
	<org.jgrapht.traverse.DepthFirstIteratorTest: void testBug1169182()>:
		<org.jgrapht.traverse.DepthFirstIteratorTest.java:149, 16.00%>

Relevant Assertion clone sets (2):
Set (score: 1.00, ccsize: 2, packages: 1, classes: 1): 
	<org.jgrapht.experimental.GraphReaderTest: void testGraphReader()>:
		<org.jgrapht.experimental.GraphReaderTest.java:88, 27.27%>
	<org.jgrapht.experimental.GraphReaderTest: void testGraphReaderWeighted()>:
		<org.jgrapht.experimental.GraphReaderTest.java:116, 23.08%>
Set (score: 0.67, ccsize: 2, packages: 1, classes: 2): 
	<org.jgrapht.ext.DOTExporterTest: void testUndirected()>:
		<org.jgrapht.ext.DOTExporterTest.java:110, 41.67%>
	<org.jgrapht.ext.GmlExporterTest: void testUndirected()>:
		<org.jgrapht.ext.GmlExporterTest.java:117, 62.50%>
==============================================

* The methods in VertexCoversTest is a valid clone set.
The methods in RandomGraphGeneratorTest is a valid clone set but
missed by call chain analysis probably due to low scoring (or BUG).
The rest is false positive.

#Control flow inspection completely removed this set and regrouped:
	<org.jgrapht.EnhancedTestCase: void assertFalse()>:
	<org.jgrapht.EnhancedTestCase: void assertTrue()>:
      (The above two are moved to a separate set)
      These have no branching.
	<org.jgrapht.alg.VertexCoversTest: void testFind2ApproximationCover()>:
	<org.jgrapht.alg.VertexCoversTest: void testFindGreedyCover()>:
      (The above two are moved to a separate set)
      These both have assert in loop.
	<org.jgrapht.generate.RandomGraphGeneratorTest: void testGenerateDirectedGraph()>:
	<org.jgrapht.generate.RandomGraphGeneratorTest: void testGenerateListenableUndirectedGraph()>:
      (The above two are moved to a separate set)
      These both have a loop prior to assert.

[8] Set (editDistance: 0, isComplete: true, packages: 3, classes: 4): 
Assertions (1): 
	<junit.framework.TestCase: void assertTrue(boolean)>

Methods (7): 
	<org.jgrapht.EnhancedTestCase: void assertFalse()>:
		<org.jgrapht.EnhancedTestCase.java:79, 100.00%>
	<org.jgrapht.EnhancedTestCase: void assertTrue()>:
		<org.jgrapht.EnhancedTestCase.java:87, 100.00%>
	<org.jgrapht.alg.KShortestPathCostTest: void verifyWeightsConsistency(java.util.List,java.util.List)>:
		<org.jgrapht.alg.KShortestPathCostTest.java:294, 53.85%>
	<org.jgrapht.alg.VertexCoversTest: void testFind2ApproximationCover()>:
		<org.jgrapht.alg.VertexCoversTest.java:74, 60.00%>
	<org.jgrapht.alg.VertexCoversTest: void testFindGreedyCover()>:
		<org.jgrapht.alg.VertexCoversTest.java:89, 50.00%>
	<org.jgrapht.generate.RandomGraphGeneratorTest: void testGenerateDirectedGraph()>:
		<org.jgrapht.generate.RandomGraphGeneratorTest.java:70, 20.00%>
	<org.jgrapht.generate.RandomGraphGeneratorTest: void testGenerateListenableUndirectedGraph()>:
		<org.jgrapht.generate.RandomGraphGeneratorTest.java:89, 20.00%>

Relevant Assertion clone sets (1):
Set (score: 1.00, ccsize: 2, packages: 1, classes: 1): 
	<org.jgrapht.alg.VertexCoversTest: void testFind2ApproximationCover()>:
		<org.jgrapht.alg.VertexCoversTest.java:74, 60.00%>
	<org.jgrapht.alg.VertexCoversTest: void testFindGreedyCover()>:
		<org.jgrapht.alg.VertexCoversTest.java:89, 50.00%>
==============================================

*The clone set backed by call chain analysis is valid. The rest is
false positive.

#Control flow inspection could not isolate the actual clones
because there was no branching:
	<junit.framework.TestCase: void assertEquals(int,int)> (bools:0, nulls:0, inLoop:false)

[9] Set (editDistance: 0, isComplete: true, packages: 3, classes: 3): 
Assertions (1): 
	<junit.framework.TestCase: void assertEquals(int,int)>

Methods (5): 
	<org.jgrapht.alg.KSPExampleTest: void testFourReturnedPathsJGraphT()>:
		<org.jgrapht.alg.KSPExampleTest.java:60, 55.56%>
	<org.jgrapht.alg.KSPExampleTest: void testThreeReturnedPathsJGraphT()>:
		<org.jgrapht.alg.KSPExampleTest.java:72, 60.00%>
	<org.jgrapht.alg.KSPExampleTest: void testTwoReturnedPathsJGraphT()>:
		<org.jgrapht.alg.KSPExampleTest.java:84, 60.00%>
	<org.jgrapht.generate.GraphGeneratorTest: void testCompleteGraphGenerator()>:
		<org.jgrapht.generate.GraphGeneratorTest.java:185, 62.50%>
	<org.jgrapht.graph.DefaultDirectedGraphTest: void testGetAllEdges()>:
		<org.jgrapht.graph.DefaultDirectedGraphTest.java:130, 100.00%>

Relevant Assertion clone sets (1):
Set (score: 0.50, ccsize: 3, packages: 1, classes: 1): 
	<org.jgrapht.alg.KSPExampleTest: void testFourReturnedPathsJGraphT()>:
		<org.jgrapht.alg.KSPExampleTest.java:60, 55.56%>
	<org.jgrapht.alg.KSPExampleTest: void testThreeReturnedPathsJGraphT()>:
		<org.jgrapht.alg.KSPExampleTest.java:72, 60.00%>
	<org.jgrapht.alg.KSPExampleTest: void testTwoReturnedPathsJGraphT()>:
		<org.jgrapht.alg.KSPExampleTest.java:84, 60.00%>
==============================================

*testInducedSubgraphListener and testSubgraphListener are a valid
clone set missed call chain analysis probably due to low scoring (or
BUG). The rest is false positives.

#Control flow inspection could not isolate the actual clones 
because there was no branching:
	<junit.framework.TestCase: void assertEquals(java.lang.Object,java.lang.Object)> (bools:0, nulls:0, inLoop:false)
	<junit.framework.TestCase: void assertEquals(java.lang.Object,java.lang.Object)> (bools:0, nulls:0, inLoop:false)
	<junit.framework.TestCase: void assertEquals(java.lang.Object,java.lang.Object)> (bools:0, nulls:0, inLoop:false)
	<junit.framework.TestCase: void assertEquals(java.lang.Object,java.lang.Object)> (bools:0, nulls:0, inLoop:false)

[10] Set (editDistance: 0, isComplete: true, packages: 2, classes: 3): 
Assertions (4): 
	<junit.framework.TestCase: void assertEquals(java.lang.Object,java.lang.Object)>
	<junit.framework.TestCase: void assertEquals(java.lang.Object,java.lang.Object)>
	<junit.framework.TestCase: void assertEquals(java.lang.Object,java.lang.Object)>
	<junit.framework.TestCase: void assertEquals(java.lang.Object,java.lang.Object)>

Methods (4): 
	<org.jgrapht.alg.ShortestPathTestCase: void testPathBetween()>:
		<org.jgrapht.alg.ShortestPathTestCase.java:86, 21.74%>
		<org.jgrapht.alg.ShortestPathTestCase.java:89, 26.09%>
		<org.jgrapht.alg.ShortestPathTestCase.java:96, 34.78%>
		<org.jgrapht.alg.ShortestPathTestCase.java:104, 47.83%>
	<org.jgrapht.graph.AsUnweightedGraphTest: void checkView(org.jgrapht.WeightedGraph,org.jgrapht.Graph)>:
		<org.jgrapht.graph.AsUnweightedGraphTest.java:120, 17.39%>
		<org.jgrapht.graph.AsUnweightedGraphTest.java:126, 17.39%>
		<org.jgrapht.graph.AsUnweightedGraphTest.java:132, 17.39%>
		<org.jgrapht.graph.AsUnweightedGraphTest.java:136, 17.39%>
	<org.jgrapht.graph.SubgraphTest: void testInducedSubgraphListener()>:
		<org.jgrapht.graph.SubgraphTest.java:86, 50.00%>
		<org.jgrapht.graph.SubgraphTest.java:87, 50.00%>
		<org.jgrapht.graph.SubgraphTest.java:91, 50.00%>
		<org.jgrapht.graph.SubgraphTest.java:92, 50.00%>
	<org.jgrapht.graph.SubgraphTest: void testSubgraphListener()>:
		<org.jgrapht.graph.SubgraphTest.java:139, 43.75%>
		<org.jgrapht.graph.SubgraphTest.java:140, 43.75%>
		<org.jgrapht.graph.SubgraphTest.java:145, 31.25%>
		<org.jgrapht.graph.SubgraphTest.java:146, 43.75%>

Relevant Assertion clone sets (0):
==============================================

*This is a strong clone set that was missed by call chain analysis (maybe BUG),
although some pair of asserts should have been captured by call chain
analysis.

#Verified with control flow inspection
First two asserts are in loops, the last two aren't
Both have a try catch block between the third and fourth assert.

[11] Set (editDistance: 0, isComplete: true, packages: 1, classes: 1): 
Assertions (4): 
	<junit.framework.TestCase: void assertEquals(boolean,boolean)>
	<junit.framework.TestCase: void assertEquals(java.lang.Object,java.lang.Object)>
	<junit.framework.TestCase: void assertEquals(boolean,boolean)>
	<junit.framework.TestCase: void assertTrue(boolean)>

Methods (2): 
	<org.jgrapht.util.PrefetchIteratorTest: void testEnumInterface()>:
		<org.jgrapht.util.PrefetchIteratorTest.java:71, 33.33%>
		<org.jgrapht.util.PrefetchIteratorTest.java:72, 41.67%>
		<org.jgrapht.util.PrefetchIteratorTest.java:74, 33.33%>
		<org.jgrapht.util.PrefetchIteratorTest.java:81, 16.67%>
	<org.jgrapht.util.PrefetchIteratorTest: void testIteratorInterface()>:
		<org.jgrapht.util.PrefetchIteratorTest.java:54, 33.33%>
		<org.jgrapht.util.PrefetchIteratorTest.java:55, 41.67%>
		<org.jgrapht.util.PrefetchIteratorTest.java:57, 33.33%>
		<org.jgrapht.util.PrefetchIteratorTest.java:64, 16.67%>

Relevant Assertion clone sets (0):
==============================================

*This is a false positive

#Control flow inspection completely removed this set.

[12] Set (editDistance: 0, isComplete: true, packages: 2, classes: 2): 
Assertions (3): 
	<junit.framework.TestCase: void assertEquals(int,int)>
	<junit.framework.TestCase: void assertEquals(int,int)>
	<junit.framework.TestCase: void assertEquals(int,int)>

Methods (2): 
	<org.jgrapht.alg.ChromaticNumberTest: void testChromaticNumber()>:
		<org.jgrapht.alg.ChromaticNumberTest.java:78, 18.75%>
		<org.jgrapht.alg.ChromaticNumberTest.java:83, 31.25%>
		<org.jgrapht.alg.ChromaticNumberTest.java:100, 18.75%>
	<org.jgrapht.graph.SimpleDirectedGraphTest: void testEdgesOf()>:
		<org.jgrapht.graph.SimpleDirectedGraphTest.java:232, 46.67%>
		<org.jgrapht.graph.SimpleDirectedGraphTest.java:233, 60.00%>
		<org.jgrapht.graph.SimpleDirectedGraphTest.java:243, 20.00%>

Relevant Assertion clone sets (0):
==============================================

*The two methods have similarities but not really clones and may be
difficult to refactor.

#Control flow inspection completely removed this set.

[13] Set (editDistance: 0, isComplete: true, packages: 1, classes: 1): 
Assertions (3): 
	<junit.framework.TestCase: void assertEquals(int,int)>
	<junit.framework.TestCase: void assertEquals(int,int)>
	<junit.framework.TestCase: void assertTrue(boolean)>

Methods (2): 
	<org.jgrapht.generate.GraphGeneratorTest: void testEmptyGraphGenerator()>:
		<org.jgrapht.generate.GraphGeneratorTest.java:90, 38.46%>
		<org.jgrapht.generate.GraphGeneratorTest.java:91, 38.46%>
		<org.jgrapht.generate.GraphGeneratorTest.java:92, 23.08%>
	<org.jgrapht.generate.GraphGeneratorTest: void testStarGraphGenerator()>:
		<org.jgrapht.generate.GraphGeneratorTest.java:287, 35.71%>
		<org.jgrapht.generate.GraphGeneratorTest.java:288, 35.71%>
		<org.jgrapht.generate.GraphGeneratorTest.java:289, 42.86%>

Relevant Assertion clone sets (0):
==============================================

*testLinearGraph and testRingGraph from TransitiveClosureTest
appear to be clones.
testAddVertex, testRemoveVertex, and testRemoveVertex appear to be
similar but not really clones.
All clones in this set are missed by call chain analysis (maybe BUG)
testDirectedGraph is a false positive.

#Control flow inspection partially removed:
	<org.jgrapht.alg.TransitiveClosureTest: void testLinearGraph()>:
	<org.jgrapht.alg.TransitiveClosureTest: void testRingGraph()>:
      (The above two are moved to a separate set with edit distance 1)
could not reason about the rest because there was no branching:
	<junit.framework.TestCase: void assertEquals(boolean,boolean)> (bools:0, nulls:0, inLoop:false)
	<junit.framework.TestCase: void assertEquals(boolean,boolean)> (bools:0, nulls:0, inLoop:false)

[14] Set (editDistance: 0, isComplete: true, packages: 2, classes: 3): 
Assertions (2): 
	<junit.framework.TestCase: void assertEquals(boolean,boolean)>
	<junit.framework.TestCase: void assertEquals(boolean,boolean)>

Methods (6): 
	<org.jgrapht.alg.ConnectivityInspectorTest: void testDirectedGraph()>:
		<org.jgrapht.alg.ConnectivityInspectorTest.java:139, 57.14%>
		<org.jgrapht.alg.ConnectivityInspectorTest.java:143, 57.14%>
	<org.jgrapht.alg.TransitiveClosureTest: void testLinearGraph()>:
		<org.jgrapht.alg.TransitiveClosureTest.java:75, 47.83%>
		<org.jgrapht.alg.TransitiveClosureTest.java:78, 43.48%>
	<org.jgrapht.alg.TransitiveClosureTest: void testRingGraph()>:
		<org.jgrapht.alg.TransitiveClosureTest.java:107, 45.45%>
		<org.jgrapht.alg.TransitiveClosureTest.java:110, 50.00%>
	<org.jgrapht.graph.AsUndirectedGraphTest: void testAddVertex()>:
		<org.jgrapht.graph.AsUndirectedGraphTest.java:102, 85.71%>
		<org.jgrapht.graph.AsUndirectedGraphTest.java:103, 100.00%>
	<org.jgrapht.graph.AsUndirectedGraphTest: void testRemoveEdge()>:
		<org.jgrapht.graph.AsUndirectedGraphTest.java:155, 88.89%>
		<org.jgrapht.graph.AsUndirectedGraphTest.java:156, 111.11%>
	<org.jgrapht.graph.AsUndirectedGraphTest: void testRemoveVertex()>:
		<org.jgrapht.graph.AsUndirectedGraphTest.java:165, 88.89%>
		<org.jgrapht.graph.AsUndirectedGraphTest.java:166, 111.11%>

Relevant Assertion clone sets (0):
==============================================

*This is a false positive.

#Control flow inspection completely removed this set.

[15] Set (editDistance: 0, isComplete: true, packages: 2, classes: 4): 
Assertions (2): 
	<junit.framework.TestCase: void assertTrue(boolean)>
	<junit.framework.TestCase: void assertTrue(boolean)>

Methods (4): 
	<org.jgrapht.alg.FloydWarshallShortestPathsTest: void testCompareWithDijkstra()>:
		<org.jgrapht.alg.FloydWarshallShortestPathsTest.java:96, 7.41%>
		<org.jgrapht.alg.FloydWarshallShortestPathsTest.java:121, 7.41%>
	<org.jgrapht.alg.HamiltonianCycleTest: void testHamiltonianCycle()>:
		<org.jgrapht.alg.HamiltonianCycleTest.java:79, 33.33%>
		<org.jgrapht.alg.HamiltonianCycleTest.java:89, 27.78%>
	<org.jgrapht.alg.KShortestPathCostTest: void verifyShortestPathsInIncreasingOrderOfWeight(org.jgrapht.Graph)>:
		<org.jgrapht.alg.KShortestPathCostTest.java:222, 30.77%>
		<org.jgrapht.alg.KShortestPathCostTest.java:225, 30.77%>
	<org.jgrapht.experimental.isomorphism.IsomorphismInspectorTest: void assertIsomorphic(org.jgrapht.Graph[],boolean,org.jgrapht.experimental.equivalence.EquivalenceComparator,org.jgrapht.experimental.equivalence.EquivalenceComparator)>:
		<org.jgrapht.experimental.isomorphism.IsomorphismInspectorTest.java:138, 28.57%>
		<org.jgrapht.experimental.isomorphism.IsomorphismInspectorTest.java:140, 28.57%>

Relevant Assertion clone sets (0):
==============================================

*This is a false positive.

#Control flow inspection completely removed this set.

[16] Set (editDistance: 0, isComplete: true, packages: 2, classes: 3): 
Assertions (2): 
	<junit.framework.TestCase: void assertEquals(java.lang.String,java.lang.String)>
	<junit.framework.TestCase: void assertEquals(java.lang.String,java.lang.String)>

Methods (3): 
	<org.jgrapht.ext.MatrixExporterTest: void testLaplacian()>:
		<org.jgrapht.ext.MatrixExporterTest.java:113, 38.46%>
		<org.jgrapht.ext.MatrixExporterTest.java:117, 38.46%>
	<org.jgrapht.traverse.AbstractGraphIteratorTest: void testDirectedGraph()>:
		<org.jgrapht.traverse.AbstractGraphIteratorTest.java:86, 47.06%>
		<org.jgrapht.traverse.AbstractGraphIteratorTest.java:88, 52.94%>
	<org.jgrapht.traverse.TopologicalOrderIteratorTest: void testRecipe()>:
		<org.jgrapht.traverse.TopologicalOrderIteratorTest.java:109, 9.62%>
		<org.jgrapht.traverse.TopologicalOrderIteratorTest.java:121, 9.62%>

Relevant Assertion clone sets (0):
==============================================

*This is a false positive.

#Control flow inspection completely removed this set.

[17] Set (editDistance: 0, isComplete: true, packages: 1, classes: 2): 
Assertions (2): 
	<junit.framework.TestCase: void assertEquals(java.lang.Object,java.lang.Object)>
	<junit.framework.TestCase: void assertTrue(boolean)>

Methods (2): 
	<org.jgrapht.alg.BlockCutpointGraphTest: void testGetBlock(org.jgrapht.alg.BlockCutpointGraph)>:
		<org.jgrapht.alg.BlockCutpointGraphTest.java:88, 33.33%>
		<org.jgrapht.alg.BlockCutpointGraphTest.java:94, 19.05%>
	<org.jgrapht.alg.KruskalMinimumSpanningTreeTest: void testMinimumSpanningTree()>:
		<org.jgrapht.alg.KruskalMinimumSpanningTreeTest.java:80, 19.05%>
		<org.jgrapht.alg.KruskalMinimumSpanningTreeTest.java:84, 38.10%>

Relevant Assertion clone sets (0):
==============================================

*The two methods look similar but may be difficult to refactor.

#Verified with control flow inspection
There was no branching:
	<junit.framework.TestCase: void assertEquals(int,int)> (bools:0, nulls:0, inLoop:false)
	<junit.framework.TestCase: void assertEquals(java.lang.Object,java.lang.Object)> (bools:0, nulls:0, inLoop:false)

[18] Set (editDistance: 0, isComplete: true, packages: 1, classes: 1): 
Assertions (2): 
	<junit.framework.TestCase: void assertEquals(int,int)>
	<junit.framework.TestCase: void assertEquals(java.lang.Object,java.lang.Object)>

Methods (2): 
	<org.jgrapht.alg.BronKerboschCliqueFinderTest: void testFindAll()>:
		<org.jgrapht.alg.BronKerboschCliqueFinderTest.java:143, 26.32%>
		<org.jgrapht.alg.BronKerboschCliqueFinderTest.java:175, 21.05%>
	<org.jgrapht.alg.BronKerboschCliqueFinderTest: void testFindBiggest()>:
		<org.jgrapht.alg.BronKerboschCliqueFinderTest.java:119, 41.67%>
		<org.jgrapht.alg.BronKerboschCliqueFinderTest.java:129, 58.33%>

Relevant Assertion clone sets (0):
==============================================

*testDiameter, testEdgeLessDiameter, testEmptyDiameter from
FloydWarshallShortestPathsTest are similar but may be hard to
refactor.
testBacktrackColoring and testGreedyColoring seem to be good clones.
The rest is false positive.

#Control flow inspection could not reason about this set
because there was no branching:
	<junit.framework.TestCase: void assertEquals(java.lang.Object,java.lang.Object)> (bools:0, nulls:0, inLoop:false)

[19] Set (editDistance: 0, isComplete: true, packages: 3, classes: 6): 
Assertions (1): 
	<junit.framework.TestCase: void assertEquals(java.lang.Object,java.lang.Object)>

Methods (9): 
	<org.jgrapht.alg.ConnectivityInspectorTest: void testStronglyConnected4()>:
		<org.jgrapht.alg.ConnectivityInspectorTest.java:371, 30.77%>
	<org.jgrapht.alg.FloydWarshallShortestPathsTest: void testDiameter()>:
		<org.jgrapht.alg.FloydWarshallShortestPathsTest.java:161, 57.14%>
	<org.jgrapht.alg.FloydWarshallShortestPathsTest: void testEdgeLessDiameter()>:
		<org.jgrapht.alg.FloydWarshallShortestPathsTest.java:182, 40.00%>
	<org.jgrapht.alg.FloydWarshallShortestPathsTest: void testEmptyDiameter()>:
		<org.jgrapht.alg.FloydWarshallShortestPathsTest.java:170, 50.00%>
	<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest: void testEmptyMatching()>:
		<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest.java:128, 33.33%>
	<org.jgrapht.experimental.alg.ColoringTest: void testBacktrackColoring()>:
		<org.jgrapht.experimental.alg.ColoringTest.java:97, 50.00%>
	<org.jgrapht.experimental.alg.ColoringTest: void testGreedyColoring()>:
		<org.jgrapht.experimental.alg.ColoringTest.java:77, 50.00%>
	<org.jgrapht.graph.AsUnweightedGraphTest: void constructWeighted(org.jgrapht.WeightedGraph)>:
		<org.jgrapht.graph.AsUnweightedGraphTest.java:110, 57.14%>
	<org.jgrapht.graph.SimpleDirectedGraphTest: void testIncomingOutgoingEdgesOf()>:
		<org.jgrapht.graph.SimpleDirectedGraphTest.java:315, 128.57%>

Relevant Assertion clone sets (0):
==============================================

*This is a false positive.

#Control flow inspection completely removed this set.

[20] Set (editDistance: 0, isComplete: true, packages: 2, classes: 2): 
Assertions (1): 
	<junit.framework.TestCase: void assertEquals(boolean,boolean)>

Methods (2): 
	<org.jgrapht.alg.util.UnionFindTest: void testIdentical(java.lang.String[],java.util.ArrayList,org.jgrapht.alg.util.UnionFind)>:
		<org.jgrapht.alg.util.UnionFindTest.java:131, 41.18%>
	<org.jgrapht.experimental.isomorphism.IsomorphismInspectorTest: void assertIsomorphicStopAfterFirstMatch(org.jgrapht.Graph[],boolean,boolean,org.jgrapht.experimental.equivalence.EquivalenceComparator,org.jgrapht.experimental.equivalence.EquivalenceComparator)>:
		<org.jgrapht.experimental.isomorphism.IsomorphismInspectorTest.java:485, 14.71%>

Relevant Assertion clone sets (0):
==============================================

*This is a false positive.

#Control flow inspection could not reason about this set
because there was no branching:
	<junit.framework.TestCase: void assertFalse(boolean)> (bools:0, nulls:0, inLoop:false)

[21] Set (editDistance: 0, isComplete: true, packages: 2, classes: 2): 
Assertions (1): 
	<junit.framework.TestCase: void assertFalse(boolean)>

Methods (2): 
	<org.jgrapht.graph.SubgraphTest: void testInducedSubgraphUnderlyingEdgeAddition()>:
		<org.jgrapht.graph.SubgraphTest.java:192, 20.00%>
	<org.jgrapht.traverse.TopologicalOrderIteratorTest: void testEmptyGraph()>:
		<org.jgrapht.traverse.TopologicalOrderIteratorTest.java:136, 50.00%>

Relevant Assertion clone sets (0):
==============================================

*The two methods seem to be clones.

#Control inspection could not reason about this set
because there was no branching:
	<junit.framework.TestCase: void assertEquals(double,double,double)> (bools:0, nulls:0, inLoop:false)

[22] Set (editDistance: 0, isComplete: true, packages: 1, classes: 1): 
Assertions (1): 
	<junit.framework.TestCase: void assertEquals(double,double,double)>

Methods (2): 
	<org.jgrapht.alg.StoerWagnerMinimumCutTest: void testMinCut14()>:
		<org.jgrapht.alg.StoerWagnerMinimumCutTest.java:97, 16.67%>
	<org.jgrapht.alg.StoerWagnerMinimumCutTest: void testMinCutDisconnected()>:
		<org.jgrapht.alg.StoerWagnerMinimumCutTest.java:124, 22.73%>

Relevant Assertion clone sets (0):
==============================================

[23] Set (editDistance: 1, isComplete: false, packages: 2, classes: 2): 
Centroid (size: 4): <org.jgrapht.alg.EulerianCircuitTest: void testEulerianCircuit()>

Methods (6): 
	<org.jgrapht.alg.EulerianCircuitTest: void testEulerianCircuit()>:
		<org.jgrapht.alg.EulerianCircuitTest.java:77, 11.76%>
		<org.jgrapht.alg.EulerianCircuitTest.java:78, 29.41%>
		<org.jgrapht.alg.EulerianCircuitTest.java:91, 11.76%>
		<org.jgrapht.alg.EulerianCircuitTest.java:95, 23.53%>
	<org.jgrapht.graph.EqualsAndHashCodeTest: void testDefaultDirectedGraph()>:
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:105, 6.52%>
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:106, 10.87%>
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:108, 13.04%>
	<org.jgrapht.graph.EqualsAndHashCodeTest: void testGraphsWithNonIntrusiveEdge()>:
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:187, 3.90%>
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:188, 6.49%>
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:190, 7.79%>
	<org.jgrapht.graph.EqualsAndHashCodeTest: void testGrapshWithCustomEdges()>:
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:268, 7.69%>
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:269, 12.82%>
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:271, 15.38%>
	<org.jgrapht.graph.EqualsAndHashCodeTest: void testPseudograph()>:
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:230, 5.08%>
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:231, 8.47%>
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:233, 10.17%>
	<org.jgrapht.graph.EqualsAndHashCodeTest: void testSimpleGraph()>:
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:148, 6.52%>
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:149, 10.87%>
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:151, 13.04%>

Relevant Assertion clone sets (2):
Set (score: 0.50, ccsize: 4, packages: 1, classes: 1): 
	<org.jgrapht.graph.EqualsAndHashCodeTest: void testDefaultDirectedGraph()>:
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:106, 10.87%>
	<org.jgrapht.graph.EqualsAndHashCodeTest: void testGraphsWithNonIntrusiveEdge()>:
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:188, 6.49%>
Set (score: 0.50, ccsize: 4, packages: 1, classes: 1): 
	<org.jgrapht.graph.EqualsAndHashCodeTest: void testGrapshWithCustomEdges()>:
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:269, 12.82%>
	<org.jgrapht.graph.EqualsAndHashCodeTest: void testSimpleGraph()>:
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:149, 10.87%>
==============================================

[24] Set (editDistance: 1, isComplete: false, packages: 4, classes: 9): 
Centroid (size: 3): <org.jgrapht.alg.BiconnectivityInspectorTest: void testBiconnected()>

Methods (20): 
	<org.jgrapht.alg.BiconnectivityInspectorTest: void testBiconnected()>:
		<org.jgrapht.alg.BiconnectivityInspectorTest.java:64, 30.00%>
		<org.jgrapht.alg.BiconnectivityInspectorTest.java:65, 50.00%>
		<org.jgrapht.alg.BiconnectivityInspectorTest.java:66, 50.00%>
	<org.jgrapht.alg.BiconnectivityInspectorTest: void testLinearGraph(int)>:
		<org.jgrapht.alg.BiconnectivityInspectorTest.java:88, 40.00%>
		<org.jgrapht.alg.BiconnectivityInspectorTest.java:89, 40.00%>
	<org.jgrapht.alg.BiconnectivityInspectorTest: void testNotBiconnected()>:
		<org.jgrapht.alg.BiconnectivityInspectorTest.java:100, 55.56%>
		<org.jgrapht.alg.BiconnectivityInspectorTest.java:101, 55.56%>
	<org.jgrapht.alg.BlockCutpointGraphTest: void testBiconnected()>:
		<org.jgrapht.alg.BlockCutpointGraphTest.java:67, 41.67%>
		<org.jgrapht.alg.BlockCutpointGraphTest.java:71, 41.67%>
	<org.jgrapht.alg.BlockCutpointGraphTest: void testLinearGraph(int)>:
		<org.jgrapht.alg.BlockCutpointGraphTest.java:121, 33.33%>
		<org.jgrapht.alg.BlockCutpointGraphTest.java:125, 33.33%>
	<org.jgrapht.alg.BlockCutpointGraphTest: void testNotBiconnected()>:
		<org.jgrapht.alg.BlockCutpointGraphTest.java:135, 41.67%>
		<org.jgrapht.alg.BlockCutpointGraphTest.java:139, 41.67%>
	<org.jgrapht.alg.ChromaticNumberTest: void testChromaticNumber()>:
		<org.jgrapht.alg.ChromaticNumberTest.java:78, 18.75%>
		<org.jgrapht.alg.ChromaticNumberTest.java:83, 31.25%>
		<org.jgrapht.alg.ChromaticNumberTest.java:100, 18.75%>
	<org.jgrapht.experimental.permutation.CompoundPermutationIterTest: void testGetNext()>:
		<org.jgrapht.experimental.permutation.CompoundPermutationIterTest.java:96, 40.00%>
		<org.jgrapht.experimental.permutation.CompoundPermutationIterTest.java:127, 40.00%>
	<org.jgrapht.generate.GraphGeneratorTest: void testCompleteBipartiteGraphGenerator()>:
		<org.jgrapht.generate.GraphGeneratorTest.java:243, 50.00%>
		<org.jgrapht.generate.GraphGeneratorTest.java:244, 50.00%>
	<org.jgrapht.generate.GraphGeneratorTest: void testHyperCubeGraphGenerator()>:
		<org.jgrapht.generate.GraphGeneratorTest.java:265, 50.00%>
		<org.jgrapht.generate.GraphGeneratorTest.java:266, 50.00%>
	<org.jgrapht.graph.DefaultDirectedGraphTest: void testEdgesOf()>:
		<org.jgrapht.graph.DefaultDirectedGraphTest.java:117, 75.00%>
		<org.jgrapht.graph.DefaultDirectedGraphTest.java:118, 75.00%>
	<org.jgrapht.graph.DefaultDirectedGraphTest: void testInDegreeOf()>:
		<org.jgrapht.graph.DefaultDirectedGraphTest.java:141, 83.33%>
		<org.jgrapht.graph.DefaultDirectedGraphTest.java:142, 83.33%>
	<org.jgrapht.graph.DefaultDirectedGraphTest: void testOutDegreeOf()>:
		<org.jgrapht.graph.DefaultDirectedGraphTest.java:153, 83.33%>
		<org.jgrapht.graph.DefaultDirectedGraphTest.java:154, 83.33%>
	<org.jgrapht.graph.EqualsAndHashCodeTest: void testDefaultDirectedGraph()>:
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:105, 6.52%>
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:106, 10.87%>
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:108, 13.04%>
	<org.jgrapht.graph.EqualsAndHashCodeTest: void testGraphsWithNonIntrusiveEdge()>:
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:187, 3.90%>
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:188, 6.49%>
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:190, 7.79%>
	<org.jgrapht.graph.EqualsAndHashCodeTest: void testGrapshWithCustomEdges()>:
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:268, 7.69%>
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:269, 12.82%>
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:271, 15.38%>
	<org.jgrapht.graph.EqualsAndHashCodeTest: void testPseudograph()>:
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:230, 5.08%>
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:231, 8.47%>
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:233, 10.17%>
	<org.jgrapht.graph.EqualsAndHashCodeTest: void testSimpleGraph()>:
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:148, 6.52%>
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:149, 10.87%>
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:151, 13.04%>
	<org.jgrapht.graph.GenericGraphsTest: void testEqualButNotSameVertex()>:
		<org.jgrapht.graph.GenericGraphsTest.java:145, 40.00%>
		<org.jgrapht.graph.GenericGraphsTest.java:146, 40.00%>
	<org.jgrapht.graph.SimpleDirectedGraphTest: void testEdgesOf()>:
		<org.jgrapht.graph.SimpleDirectedGraphTest.java:232, 46.67%>
		<org.jgrapht.graph.SimpleDirectedGraphTest.java:233, 60.00%>
		<org.jgrapht.graph.SimpleDirectedGraphTest.java:243, 20.00%>

Relevant Assertion clone sets (5):
Set (score: 0.67, ccsize: 3, packages: 1, classes: 2): 
	<org.jgrapht.alg.BiconnectivityInspectorTest: void testBiconnected()>:
		<org.jgrapht.alg.BiconnectivityInspectorTest.java:65, 50.00%>
	<org.jgrapht.alg.BlockCutpointGraphTest: void testBiconnected()>:
		<org.jgrapht.alg.BlockCutpointGraphTest.java:67, 41.67%>
		<org.jgrapht.alg.BlockCutpointGraphTest.java:71, 41.67%>
Set (score: 0.67, ccsize: 3, packages: 1, classes: 2): 
	<org.jgrapht.alg.BiconnectivityInspectorTest: void testLinearGraph(int)>:
		<org.jgrapht.alg.BiconnectivityInspectorTest.java:88, 40.00%>
	<org.jgrapht.alg.BlockCutpointGraphTest: void testLinearGraph(int)>:
		<org.jgrapht.alg.BlockCutpointGraphTest.java:121, 33.33%>
		<org.jgrapht.alg.BlockCutpointGraphTest.java:125, 33.33%>
Set (score: 0.67, ccsize: 3, packages: 1, classes: 2): 
	<org.jgrapht.alg.BiconnectivityInspectorTest: void testNotBiconnected()>:
		<org.jgrapht.alg.BiconnectivityInspectorTest.java:100, 55.56%>
	<org.jgrapht.alg.BlockCutpointGraphTest: void testNotBiconnected()>:
		<org.jgrapht.alg.BlockCutpointGraphTest.java:135, 41.67%>
		<org.jgrapht.alg.BlockCutpointGraphTest.java:139, 41.67%>
Set (score: 0.50, ccsize: 4, packages: 1, classes: 1): 
	<org.jgrapht.graph.EqualsAndHashCodeTest: void testDefaultDirectedGraph()>:
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:106, 10.87%>
	<org.jgrapht.graph.EqualsAndHashCodeTest: void testGraphsWithNonIntrusiveEdge()>:
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:188, 6.49%>
Set (score: 0.50, ccsize: 4, packages: 1, classes: 1): 
	<org.jgrapht.graph.EqualsAndHashCodeTest: void testGrapshWithCustomEdges()>:
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:269, 12.82%>
	<org.jgrapht.graph.EqualsAndHashCodeTest: void testSimpleGraph()>:
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:149, 10.87%>
==============================================

[25] Set (editDistance: 1, isComplete: false, packages: 4, classes: 8): 
Centroid (size: 3): <org.jgrapht.alg.ChromaticNumberTest: void testChromaticNumber()>

Methods (17): 
	<org.jgrapht.alg.BiconnectivityInspectorTest: void testBiconnected()>:
		<org.jgrapht.alg.BiconnectivityInspectorTest.java:64, 30.00%>
		<org.jgrapht.alg.BiconnectivityInspectorTest.java:65, 50.00%>
		<org.jgrapht.alg.BiconnectivityInspectorTest.java:66, 50.00%>
	<org.jgrapht.alg.BiconnectivityInspectorTest: void testLinearGraph(int)>:
		<org.jgrapht.alg.BiconnectivityInspectorTest.java:88, 40.00%>
		<org.jgrapht.alg.BiconnectivityInspectorTest.java:89, 40.00%>
	<org.jgrapht.alg.BiconnectivityInspectorTest: void testNotBiconnected()>:
		<org.jgrapht.alg.BiconnectivityInspectorTest.java:100, 55.56%>
		<org.jgrapht.alg.BiconnectivityInspectorTest.java:101, 55.56%>
	<org.jgrapht.alg.BlockCutpointGraphTest: void testBiconnected()>:
		<org.jgrapht.alg.BlockCutpointGraphTest.java:67, 41.67%>
		<org.jgrapht.alg.BlockCutpointGraphTest.java:71, 41.67%>
	<org.jgrapht.alg.BlockCutpointGraphTest: void testLinearGraph(int)>:
		<org.jgrapht.alg.BlockCutpointGraphTest.java:121, 33.33%>
		<org.jgrapht.alg.BlockCutpointGraphTest.java:125, 33.33%>
	<org.jgrapht.alg.BlockCutpointGraphTest: void testNotBiconnected()>:
		<org.jgrapht.alg.BlockCutpointGraphTest.java:135, 41.67%>
		<org.jgrapht.alg.BlockCutpointGraphTest.java:139, 41.67%>
	<org.jgrapht.alg.ChromaticNumberTest: void testChromaticNumber()>:
		<org.jgrapht.alg.ChromaticNumberTest.java:78, 18.75%>
		<org.jgrapht.alg.ChromaticNumberTest.java:83, 31.25%>
		<org.jgrapht.alg.ChromaticNumberTest.java:100, 18.75%>
	<org.jgrapht.experimental.permutation.CompoundPermutationIterTest: void testGetNext()>:
		<org.jgrapht.experimental.permutation.CompoundPermutationIterTest.java:96, 40.00%>
		<org.jgrapht.experimental.permutation.CompoundPermutationIterTest.java:127, 40.00%>
	<org.jgrapht.generate.GraphGeneratorTest: void testCompleteBipartiteGraphGenerator()>:
		<org.jgrapht.generate.GraphGeneratorTest.java:243, 50.00%>
		<org.jgrapht.generate.GraphGeneratorTest.java:244, 50.00%>
	<org.jgrapht.generate.GraphGeneratorTest: void testEmptyGraphGenerator()>:
		<org.jgrapht.generate.GraphGeneratorTest.java:90, 38.46%>
		<org.jgrapht.generate.GraphGeneratorTest.java:91, 38.46%>
		<org.jgrapht.generate.GraphGeneratorTest.java:92, 23.08%>
	<org.jgrapht.generate.GraphGeneratorTest: void testHyperCubeGraphGenerator()>:
		<org.jgrapht.generate.GraphGeneratorTest.java:265, 50.00%>
		<org.jgrapht.generate.GraphGeneratorTest.java:266, 50.00%>
	<org.jgrapht.generate.GraphGeneratorTest: void testStarGraphGenerator()>:
		<org.jgrapht.generate.GraphGeneratorTest.java:287, 35.71%>
		<org.jgrapht.generate.GraphGeneratorTest.java:288, 35.71%>
		<org.jgrapht.generate.GraphGeneratorTest.java:289, 42.86%>
	<org.jgrapht.graph.AsUndirectedGraphTest: void testDegreeOf()>:
		<org.jgrapht.graph.AsUndirectedGraphTest.java:111, 46.15%>
		<org.jgrapht.graph.AsUndirectedGraphTest.java:112, 61.54%>
		<org.jgrapht.graph.AsUndirectedGraphTest.java:113, 76.92%>
		<org.jgrapht.graph.AsUndirectedGraphTest.java:114, 92.31%>
	<org.jgrapht.graph.DefaultDirectedGraphTest: void testEdgesOf()>:
		<org.jgrapht.graph.DefaultDirectedGraphTest.java:117, 75.00%>
		<org.jgrapht.graph.DefaultDirectedGraphTest.java:118, 75.00%>
	<org.jgrapht.graph.DefaultDirectedGraphTest: void testInDegreeOf()>:
		<org.jgrapht.graph.DefaultDirectedGraphTest.java:141, 83.33%>
		<org.jgrapht.graph.DefaultDirectedGraphTest.java:142, 83.33%>
	<org.jgrapht.graph.DefaultDirectedGraphTest: void testOutDegreeOf()>:
		<org.jgrapht.graph.DefaultDirectedGraphTest.java:153, 83.33%>
		<org.jgrapht.graph.DefaultDirectedGraphTest.java:154, 83.33%>
	<org.jgrapht.graph.GenericGraphsTest: void testEqualButNotSameVertex()>:
		<org.jgrapht.graph.GenericGraphsTest.java:145, 40.00%>
		<org.jgrapht.graph.GenericGraphsTest.java:146, 40.00%>

Relevant Assertion clone sets (3):
Set (score: 0.67, ccsize: 3, packages: 1, classes: 2): 
	<org.jgrapht.alg.BiconnectivityInspectorTest: void testBiconnected()>:
		<org.jgrapht.alg.BiconnectivityInspectorTest.java:65, 50.00%>
	<org.jgrapht.alg.BlockCutpointGraphTest: void testBiconnected()>:
		<org.jgrapht.alg.BlockCutpointGraphTest.java:67, 41.67%>
		<org.jgrapht.alg.BlockCutpointGraphTest.java:71, 41.67%>
Set (score: 0.67, ccsize: 3, packages: 1, classes: 2): 
	<org.jgrapht.alg.BiconnectivityInspectorTest: void testLinearGraph(int)>:
		<org.jgrapht.alg.BiconnectivityInspectorTest.java:88, 40.00%>
	<org.jgrapht.alg.BlockCutpointGraphTest: void testLinearGraph(int)>:
		<org.jgrapht.alg.BlockCutpointGraphTest.java:121, 33.33%>
		<org.jgrapht.alg.BlockCutpointGraphTest.java:125, 33.33%>
Set (score: 0.67, ccsize: 3, packages: 1, classes: 2): 
	<org.jgrapht.alg.BiconnectivityInspectorTest: void testNotBiconnected()>:
		<org.jgrapht.alg.BiconnectivityInspectorTest.java:100, 55.56%>
	<org.jgrapht.alg.BlockCutpointGraphTest: void testNotBiconnected()>:
		<org.jgrapht.alg.BlockCutpointGraphTest.java:135, 41.67%>
		<org.jgrapht.alg.BlockCutpointGraphTest.java:139, 41.67%>
==============================================

[26] Set (editDistance: 1, isComplete: false, packages: 5, classes: 10): 
Centroid (size: 3): <org.jgrapht.generate.GraphGeneratorTest: void testEmptyGraphGenerator()>

Methods (17): 
	<org.jgrapht.alg.BiconnectivityInspectorTest: void testLinearGraph(int)>:
		<org.jgrapht.alg.BiconnectivityInspectorTest.java:88, 40.00%>
		<org.jgrapht.alg.BiconnectivityInspectorTest.java:89, 40.00%>
	<org.jgrapht.alg.BiconnectivityInspectorTest: void testNotBiconnected()>:
		<org.jgrapht.alg.BiconnectivityInspectorTest.java:100, 55.56%>
		<org.jgrapht.alg.BiconnectivityInspectorTest.java:101, 55.56%>
	<org.jgrapht.alg.BlockCutpointGraphTest: void testBiconnected()>:
		<org.jgrapht.alg.BlockCutpointGraphTest.java:67, 41.67%>
		<org.jgrapht.alg.BlockCutpointGraphTest.java:71, 41.67%>
	<org.jgrapht.alg.BlockCutpointGraphTest: void testLinearGraph(int)>:
		<org.jgrapht.alg.BlockCutpointGraphTest.java:121, 33.33%>
		<org.jgrapht.alg.BlockCutpointGraphTest.java:125, 33.33%>
	<org.jgrapht.alg.BlockCutpointGraphTest: void testNotBiconnected()>:
		<org.jgrapht.alg.BlockCutpointGraphTest.java:135, 41.67%>
		<org.jgrapht.alg.BlockCutpointGraphTest.java:139, 41.67%>
	<org.jgrapht.alg.ChromaticNumberTest: void testChromaticNumber()>:
		<org.jgrapht.alg.ChromaticNumberTest.java:78, 18.75%>
		<org.jgrapht.alg.ChromaticNumberTest.java:83, 31.25%>
		<org.jgrapht.alg.ChromaticNumberTest.java:100, 18.75%>
	<org.jgrapht.alg.EdmondsBlossomShrinkingTest: void testOne()>:
		<org.jgrapht.alg.EdmondsBlossomShrinkingTest.java:80, 23.81%>
		<org.jgrapht.alg.EdmondsBlossomShrinkingTest.java:81, 19.05%>
		<org.jgrapht.alg.EdmondsBlossomShrinkingTest.java:82, 19.05%>
	<org.jgrapht.experimental.equivalence.EquivalenceGroupCreatorTest: void testOneComparator(org.jgrapht.experimental.equivalence.EquivalenceComparator,int)>:
		<org.jgrapht.experimental.equivalence.EquivalenceGroupCreatorTest.java:152, 23.53%>
		<org.jgrapht.experimental.equivalence.EquivalenceGroupCreatorTest.java:157, 41.18%>
	<org.jgrapht.experimental.permutation.CompoundPermutationIterTest: void testGetNext()>:
		<org.jgrapht.experimental.permutation.CompoundPermutationIterTest.java:96, 40.00%>
		<org.jgrapht.experimental.permutation.CompoundPermutationIterTest.java:127, 40.00%>
	<org.jgrapht.generate.GraphGeneratorTest: void testCompleteBipartiteGraphGenerator()>:
		<org.jgrapht.generate.GraphGeneratorTest.java:243, 50.00%>
		<org.jgrapht.generate.GraphGeneratorTest.java:244, 50.00%>
	<org.jgrapht.generate.GraphGeneratorTest: void testEmptyGraphGenerator()>:
		<org.jgrapht.generate.GraphGeneratorTest.java:90, 38.46%>
		<org.jgrapht.generate.GraphGeneratorTest.java:91, 38.46%>
		<org.jgrapht.generate.GraphGeneratorTest.java:92, 23.08%>
	<org.jgrapht.generate.GraphGeneratorTest: void testHyperCubeGraphGenerator()>:
		<org.jgrapht.generate.GraphGeneratorTest.java:265, 50.00%>
		<org.jgrapht.generate.GraphGeneratorTest.java:266, 50.00%>
	<org.jgrapht.graph.DefaultDirectedGraphTest: void testEdgesOf()>:
		<org.jgrapht.graph.DefaultDirectedGraphTest.java:117, 75.00%>
		<org.jgrapht.graph.DefaultDirectedGraphTest.java:118, 75.00%>
	<org.jgrapht.graph.DefaultDirectedGraphTest: void testInDegreeOf()>:
		<org.jgrapht.graph.DefaultDirectedGraphTest.java:141, 83.33%>
		<org.jgrapht.graph.DefaultDirectedGraphTest.java:142, 83.33%>
	<org.jgrapht.graph.DefaultDirectedGraphTest: void testOutDegreeOf()>:
		<org.jgrapht.graph.DefaultDirectedGraphTest.java:153, 83.33%>
		<org.jgrapht.graph.DefaultDirectedGraphTest.java:154, 83.33%>
	<org.jgrapht.graph.GenericGraphsTest: void testEqualButNotSameVertex()>:
		<org.jgrapht.graph.GenericGraphsTest.java:145, 40.00%>
		<org.jgrapht.graph.GenericGraphsTest.java:146, 40.00%>
	<org.jgrapht.graph.SimpleDirectedGraphTest: void testEdgesOf()>:
		<org.jgrapht.graph.SimpleDirectedGraphTest.java:232, 46.67%>
		<org.jgrapht.graph.SimpleDirectedGraphTest.java:233, 60.00%>
		<org.jgrapht.graph.SimpleDirectedGraphTest.java:243, 20.00%>

Relevant Assertion clone sets (2):
Set (score: 0.67, ccsize: 3, packages: 1, classes: 2): 
	<org.jgrapht.alg.BiconnectivityInspectorTest: void testLinearGraph(int)>:
		<org.jgrapht.alg.BiconnectivityInspectorTest.java:88, 40.00%>
	<org.jgrapht.alg.BlockCutpointGraphTest: void testLinearGraph(int)>:
		<org.jgrapht.alg.BlockCutpointGraphTest.java:121, 33.33%>
		<org.jgrapht.alg.BlockCutpointGraphTest.java:125, 33.33%>
Set (score: 0.67, ccsize: 3, packages: 1, classes: 2): 
	<org.jgrapht.alg.BiconnectivityInspectorTest: void testNotBiconnected()>:
		<org.jgrapht.alg.BiconnectivityInspectorTest.java:100, 55.56%>
	<org.jgrapht.alg.BlockCutpointGraphTest: void testNotBiconnected()>:
		<org.jgrapht.alg.BlockCutpointGraphTest.java:135, 41.67%>
		<org.jgrapht.alg.BlockCutpointGraphTest.java:139, 41.67%>
==============================================

[27] Set (editDistance: 1, isComplete: false, packages: 5, classes: 10): 
Centroid (size: 3): <org.jgrapht.generate.GraphGeneratorTest: void testStarGraphGenerator()>

Methods (17): 
	<org.jgrapht.alg.BiconnectivityInspectorTest: void testLinearGraph(int)>:
		<org.jgrapht.alg.BiconnectivityInspectorTest.java:88, 40.00%>
		<org.jgrapht.alg.BiconnectivityInspectorTest.java:89, 40.00%>
	<org.jgrapht.alg.BiconnectivityInspectorTest: void testNotBiconnected()>:
		<org.jgrapht.alg.BiconnectivityInspectorTest.java:100, 55.56%>
		<org.jgrapht.alg.BiconnectivityInspectorTest.java:101, 55.56%>
	<org.jgrapht.alg.BlockCutpointGraphTest: void testBiconnected()>:
		<org.jgrapht.alg.BlockCutpointGraphTest.java:67, 41.67%>
		<org.jgrapht.alg.BlockCutpointGraphTest.java:71, 41.67%>
	<org.jgrapht.alg.BlockCutpointGraphTest: void testLinearGraph(int)>:
		<org.jgrapht.alg.BlockCutpointGraphTest.java:121, 33.33%>
		<org.jgrapht.alg.BlockCutpointGraphTest.java:125, 33.33%>
	<org.jgrapht.alg.BlockCutpointGraphTest: void testNotBiconnected()>:
		<org.jgrapht.alg.BlockCutpointGraphTest.java:135, 41.67%>
		<org.jgrapht.alg.BlockCutpointGraphTest.java:139, 41.67%>
	<org.jgrapht.alg.ChromaticNumberTest: void testChromaticNumber()>:
		<org.jgrapht.alg.ChromaticNumberTest.java:78, 18.75%>
		<org.jgrapht.alg.ChromaticNumberTest.java:83, 31.25%>
		<org.jgrapht.alg.ChromaticNumberTest.java:100, 18.75%>
	<org.jgrapht.alg.EdmondsBlossomShrinkingTest: void testOne()>:
		<org.jgrapht.alg.EdmondsBlossomShrinkingTest.java:80, 23.81%>
		<org.jgrapht.alg.EdmondsBlossomShrinkingTest.java:81, 19.05%>
		<org.jgrapht.alg.EdmondsBlossomShrinkingTest.java:82, 19.05%>
	<org.jgrapht.experimental.equivalence.EquivalenceGroupCreatorTest: void testOneComparator(org.jgrapht.experimental.equivalence.EquivalenceComparator,int)>:
		<org.jgrapht.experimental.equivalence.EquivalenceGroupCreatorTest.java:152, 23.53%>
		<org.jgrapht.experimental.equivalence.EquivalenceGroupCreatorTest.java:157, 41.18%>
	<org.jgrapht.experimental.permutation.CompoundPermutationIterTest: void testGetNext()>:
		<org.jgrapht.experimental.permutation.CompoundPermutationIterTest.java:96, 40.00%>
		<org.jgrapht.experimental.permutation.CompoundPermutationIterTest.java:127, 40.00%>
	<org.jgrapht.generate.GraphGeneratorTest: void testCompleteBipartiteGraphGenerator()>:
		<org.jgrapht.generate.GraphGeneratorTest.java:243, 50.00%>
		<org.jgrapht.generate.GraphGeneratorTest.java:244, 50.00%>
	<org.jgrapht.generate.GraphGeneratorTest: void testHyperCubeGraphGenerator()>:
		<org.jgrapht.generate.GraphGeneratorTest.java:265, 50.00%>
		<org.jgrapht.generate.GraphGeneratorTest.java:266, 50.00%>
	<org.jgrapht.generate.GraphGeneratorTest: void testStarGraphGenerator()>:
		<org.jgrapht.generate.GraphGeneratorTest.java:287, 35.71%>
		<org.jgrapht.generate.GraphGeneratorTest.java:288, 35.71%>
		<org.jgrapht.generate.GraphGeneratorTest.java:289, 42.86%>
	<org.jgrapht.graph.DefaultDirectedGraphTest: void testEdgesOf()>:
		<org.jgrapht.graph.DefaultDirectedGraphTest.java:117, 75.00%>
		<org.jgrapht.graph.DefaultDirectedGraphTest.java:118, 75.00%>
	<org.jgrapht.graph.DefaultDirectedGraphTest: void testInDegreeOf()>:
		<org.jgrapht.graph.DefaultDirectedGraphTest.java:141, 83.33%>
		<org.jgrapht.graph.DefaultDirectedGraphTest.java:142, 83.33%>
	<org.jgrapht.graph.DefaultDirectedGraphTest: void testOutDegreeOf()>:
		<org.jgrapht.graph.DefaultDirectedGraphTest.java:153, 83.33%>
		<org.jgrapht.graph.DefaultDirectedGraphTest.java:154, 83.33%>
	<org.jgrapht.graph.GenericGraphsTest: void testEqualButNotSameVertex()>:
		<org.jgrapht.graph.GenericGraphsTest.java:145, 40.00%>
		<org.jgrapht.graph.GenericGraphsTest.java:146, 40.00%>
	<org.jgrapht.graph.SimpleDirectedGraphTest: void testEdgesOf()>:
		<org.jgrapht.graph.SimpleDirectedGraphTest.java:232, 46.67%>
		<org.jgrapht.graph.SimpleDirectedGraphTest.java:233, 60.00%>
		<org.jgrapht.graph.SimpleDirectedGraphTest.java:243, 20.00%>

Relevant Assertion clone sets (2):
Set (score: 0.67, ccsize: 3, packages: 1, classes: 2): 
	<org.jgrapht.alg.BiconnectivityInspectorTest: void testLinearGraph(int)>:
		<org.jgrapht.alg.BiconnectivityInspectorTest.java:88, 40.00%>
	<org.jgrapht.alg.BlockCutpointGraphTest: void testLinearGraph(int)>:
		<org.jgrapht.alg.BlockCutpointGraphTest.java:121, 33.33%>
		<org.jgrapht.alg.BlockCutpointGraphTest.java:125, 33.33%>
Set (score: 0.67, ccsize: 3, packages: 1, classes: 2): 
	<org.jgrapht.alg.BiconnectivityInspectorTest: void testNotBiconnected()>:
		<org.jgrapht.alg.BiconnectivityInspectorTest.java:100, 55.56%>
	<org.jgrapht.alg.BlockCutpointGraphTest: void testNotBiconnected()>:
		<org.jgrapht.alg.BlockCutpointGraphTest.java:135, 41.67%>
		<org.jgrapht.alg.BlockCutpointGraphTest.java:139, 41.67%>
==============================================

[28] Set (editDistance: 1, isComplete: false, packages: 2, classes: 6): 
Centroid (size: 3): <org.jgrapht.graph.AsUndirectedGraphTest: void testGetEdge()>

Methods (9): 
	<org.jgrapht.alg.BellmanFordShortestPathTest: void testWithNegativeEdges()>:
		<org.jgrapht.alg.BellmanFordShortestPathTest.java:120, 45.45%>
		<org.jgrapht.alg.BellmanFordShortestPathTest.java:127, 63.64%>
	<org.jgrapht.alg.ConnectivityInspectorTest: void testStronglyConnected1()>:
		<org.jgrapht.alg.ConnectivityInspectorTest.java:211, 16.00%>
		<org.jgrapht.alg.ConnectivityInspectorTest.java:222, 12.00%>
		<org.jgrapht.alg.ConnectivityInspectorTest.java:225, 16.00%>
	<org.jgrapht.alg.ConnectivityInspectorTest: void testStronglyConnected2()>:
		<org.jgrapht.alg.ConnectivityInspectorTest.java:268, 16.00%>
		<org.jgrapht.alg.ConnectivityInspectorTest.java:279, 12.00%>
		<org.jgrapht.alg.ConnectivityInspectorTest.java:282, 16.00%>
	<org.jgrapht.alg.ConnectivityInspectorTest: void testStronglyConnected3()>:
		<org.jgrapht.alg.ConnectivityInspectorTest.java:325, 17.39%>
		<org.jgrapht.alg.ConnectivityInspectorTest.java:337, 13.04%>
		<org.jgrapht.alg.ConnectivityInspectorTest.java:340, 17.39%>
	<org.jgrapht.alg.ShortestPathTestCase: void testPathBetween()>:
		<org.jgrapht.alg.ShortestPathTestCase.java:86, 21.74%>
		<org.jgrapht.alg.ShortestPathTestCase.java:89, 26.09%>
		<org.jgrapht.alg.ShortestPathTestCase.java:96, 34.78%>
		<org.jgrapht.alg.ShortestPathTestCase.java:104, 47.83%>
	<org.jgrapht.graph.AsUndirectedGraphTest: void testGetEdge()>:
		<org.jgrapht.graph.AsUndirectedGraphTest.java:137, 44.00%>
		<org.jgrapht.graph.AsUndirectedGraphTest.java:140, 68.00%>
		<org.jgrapht.graph.AsUndirectedGraphTest.java:144, 92.00%>
	<org.jgrapht.graph.AsUnweightedGraphTest: void checkView(org.jgrapht.WeightedGraph,org.jgrapht.Graph)>:
		<org.jgrapht.graph.AsUnweightedGraphTest.java:120, 17.39%>
		<org.jgrapht.graph.AsUnweightedGraphTest.java:126, 17.39%>
		<org.jgrapht.graph.AsUnweightedGraphTest.java:132, 17.39%>
		<org.jgrapht.graph.AsUnweightedGraphTest.java:136, 17.39%>
	<org.jgrapht.graph.SubgraphTest: void testInducedSubgraphListener()>:
		<org.jgrapht.graph.SubgraphTest.java:86, 50.00%>
		<org.jgrapht.graph.SubgraphTest.java:87, 50.00%>
		<org.jgrapht.graph.SubgraphTest.java:91, 50.00%>
		<org.jgrapht.graph.SubgraphTest.java:92, 50.00%>
	<org.jgrapht.graph.SubgraphTest: void testSubgraphListener()>:
		<org.jgrapht.graph.SubgraphTest.java:139, 43.75%>
		<org.jgrapht.graph.SubgraphTest.java:140, 43.75%>
		<org.jgrapht.graph.SubgraphTest.java:145, 31.25%>
		<org.jgrapht.graph.SubgraphTest.java:146, 43.75%>

Relevant Assertion clone sets (2):
Set (score: 1.00, ccsize: 2, packages: 1, classes: 1): 
	<org.jgrapht.alg.ConnectivityInspectorTest: void testStronglyConnected1()>:
		<org.jgrapht.alg.ConnectivityInspectorTest.java:222, 12.00%>
	<org.jgrapht.alg.ConnectivityInspectorTest: void testStronglyConnected2()>:
		<org.jgrapht.alg.ConnectivityInspectorTest.java:279, 12.00%>
	<org.jgrapht.alg.ConnectivityInspectorTest: void testStronglyConnected3()>:
		<org.jgrapht.alg.ConnectivityInspectorTest.java:337, 13.04%>
Set (score: 0.50, ccsize: 2, packages: 1, classes: 2): 
	<org.jgrapht.alg.BellmanFordShortestPathTest: void testWithNegativeEdges()>:
		<org.jgrapht.alg.BellmanFordShortestPathTest.java:120, 45.45%>
	<org.jgrapht.alg.ShortestPathTestCase: void testPathBetween()>:
		<org.jgrapht.alg.ShortestPathTestCase.java:86, 21.74%>
==============================================

[29] Set (editDistance: 1, isComplete: false, packages: 3, classes: 7): 
Centroid (size: 3): <org.jgrapht.graph.EqualsAndHashCodeTest: void testDefaultDirectedGraph()>

Methods (7): 
	<org.jgrapht.alg.BiconnectivityInspectorTest: void testBiconnected()>:
		<org.jgrapht.alg.BiconnectivityInspectorTest.java:64, 30.00%>
		<org.jgrapht.alg.BiconnectivityInspectorTest.java:65, 50.00%>
		<org.jgrapht.alg.BiconnectivityInspectorTest.java:66, 50.00%>
	<org.jgrapht.alg.EulerianCircuitTest: void testEulerianCircuit()>:
		<org.jgrapht.alg.EulerianCircuitTest.java:77, 11.76%>
		<org.jgrapht.alg.EulerianCircuitTest.java:78, 29.41%>
		<org.jgrapht.alg.EulerianCircuitTest.java:91, 11.76%>
		<org.jgrapht.alg.EulerianCircuitTest.java:95, 23.53%>
	<org.jgrapht.alg.FloydWarshallShortestPathsTest: void testCompareWithDijkstra()>:
		<org.jgrapht.alg.FloydWarshallShortestPathsTest.java:96, 7.41%>
		<org.jgrapht.alg.FloydWarshallShortestPathsTest.java:121, 7.41%>
	<org.jgrapht.alg.HamiltonianCycleTest: void testHamiltonianCycle()>:
		<org.jgrapht.alg.HamiltonianCycleTest.java:79, 33.33%>
		<org.jgrapht.alg.HamiltonianCycleTest.java:89, 27.78%>
	<org.jgrapht.alg.KShortestPathCostTest: void verifyShortestPathsInIncreasingOrderOfWeight(org.jgrapht.Graph)>:
		<org.jgrapht.alg.KShortestPathCostTest.java:222, 30.77%>
		<org.jgrapht.alg.KShortestPathCostTest.java:225, 30.77%>
	<org.jgrapht.experimental.isomorphism.IsomorphismInspectorTest: void assertIsomorphic(org.jgrapht.Graph[],boolean,org.jgrapht.experimental.equivalence.EquivalenceComparator,org.jgrapht.experimental.equivalence.EquivalenceComparator)>:
		<org.jgrapht.experimental.isomorphism.IsomorphismInspectorTest.java:138, 28.57%>
		<org.jgrapht.experimental.isomorphism.IsomorphismInspectorTest.java:140, 28.57%>
	<org.jgrapht.graph.EqualsAndHashCodeTest: void testDefaultDirectedGraph()>:
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:105, 6.52%>
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:106, 10.87%>
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:108, 13.04%>

Relevant Assertion clone sets (1):
Set (score: 0.50, ccsize: 4, packages: 1, classes: 2): 
	<org.jgrapht.alg.EulerianCircuitTest: void testEulerianCircuit()>:
		<org.jgrapht.alg.EulerianCircuitTest.java:78, 29.41%>
	<org.jgrapht.alg.HamiltonianCycleTest: void testHamiltonianCycle()>:
		<org.jgrapht.alg.HamiltonianCycleTest.java:89, 27.78%>
==============================================

[30] Set (editDistance: 1, isComplete: false, packages: 3, classes: 7): 
Centroid (size: 3): <org.jgrapht.graph.EqualsAndHashCodeTest: void testGraphsWithNonIntrusiveEdge()>

Methods (7): 
	<org.jgrapht.alg.BiconnectivityInspectorTest: void testBiconnected()>:
		<org.jgrapht.alg.BiconnectivityInspectorTest.java:64, 30.00%>
		<org.jgrapht.alg.BiconnectivityInspectorTest.java:65, 50.00%>
		<org.jgrapht.alg.BiconnectivityInspectorTest.java:66, 50.00%>
	<org.jgrapht.alg.EulerianCircuitTest: void testEulerianCircuit()>:
		<org.jgrapht.alg.EulerianCircuitTest.java:77, 11.76%>
		<org.jgrapht.alg.EulerianCircuitTest.java:78, 29.41%>
		<org.jgrapht.alg.EulerianCircuitTest.java:91, 11.76%>
		<org.jgrapht.alg.EulerianCircuitTest.java:95, 23.53%>
	<org.jgrapht.alg.FloydWarshallShortestPathsTest: void testCompareWithDijkstra()>:
		<org.jgrapht.alg.FloydWarshallShortestPathsTest.java:96, 7.41%>
		<org.jgrapht.alg.FloydWarshallShortestPathsTest.java:121, 7.41%>
	<org.jgrapht.alg.HamiltonianCycleTest: void testHamiltonianCycle()>:
		<org.jgrapht.alg.HamiltonianCycleTest.java:79, 33.33%>
		<org.jgrapht.alg.HamiltonianCycleTest.java:89, 27.78%>
	<org.jgrapht.alg.KShortestPathCostTest: void verifyShortestPathsInIncreasingOrderOfWeight(org.jgrapht.Graph)>:
		<org.jgrapht.alg.KShortestPathCostTest.java:222, 30.77%>
		<org.jgrapht.alg.KShortestPathCostTest.java:225, 30.77%>
	<org.jgrapht.experimental.isomorphism.IsomorphismInspectorTest: void assertIsomorphic(org.jgrapht.Graph[],boolean,org.jgrapht.experimental.equivalence.EquivalenceComparator,org.jgrapht.experimental.equivalence.EquivalenceComparator)>:
		<org.jgrapht.experimental.isomorphism.IsomorphismInspectorTest.java:138, 28.57%>
		<org.jgrapht.experimental.isomorphism.IsomorphismInspectorTest.java:140, 28.57%>
	<org.jgrapht.graph.EqualsAndHashCodeTest: void testGraphsWithNonIntrusiveEdge()>:
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:187, 3.90%>
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:188, 6.49%>
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:190, 7.79%>

Relevant Assertion clone sets (1):
Set (score: 0.50, ccsize: 4, packages: 1, classes: 2): 
	<org.jgrapht.alg.EulerianCircuitTest: void testEulerianCircuit()>:
		<org.jgrapht.alg.EulerianCircuitTest.java:78, 29.41%>
	<org.jgrapht.alg.HamiltonianCycleTest: void testHamiltonianCycle()>:
		<org.jgrapht.alg.HamiltonianCycleTest.java:89, 27.78%>
==============================================

[31] Set (editDistance: 1, isComplete: false, packages: 3, classes: 7): 
Centroid (size: 3): <org.jgrapht.graph.EqualsAndHashCodeTest: void testGrapshWithCustomEdges()>

Methods (7): 
	<org.jgrapht.alg.BiconnectivityInspectorTest: void testBiconnected()>:
		<org.jgrapht.alg.BiconnectivityInspectorTest.java:64, 30.00%>
		<org.jgrapht.alg.BiconnectivityInspectorTest.java:65, 50.00%>
		<org.jgrapht.alg.BiconnectivityInspectorTest.java:66, 50.00%>
	<org.jgrapht.alg.EulerianCircuitTest: void testEulerianCircuit()>:
		<org.jgrapht.alg.EulerianCircuitTest.java:77, 11.76%>
		<org.jgrapht.alg.EulerianCircuitTest.java:78, 29.41%>
		<org.jgrapht.alg.EulerianCircuitTest.java:91, 11.76%>
		<org.jgrapht.alg.EulerianCircuitTest.java:95, 23.53%>
	<org.jgrapht.alg.FloydWarshallShortestPathsTest: void testCompareWithDijkstra()>:
		<org.jgrapht.alg.FloydWarshallShortestPathsTest.java:96, 7.41%>
		<org.jgrapht.alg.FloydWarshallShortestPathsTest.java:121, 7.41%>
	<org.jgrapht.alg.HamiltonianCycleTest: void testHamiltonianCycle()>:
		<org.jgrapht.alg.HamiltonianCycleTest.java:79, 33.33%>
		<org.jgrapht.alg.HamiltonianCycleTest.java:89, 27.78%>
	<org.jgrapht.alg.KShortestPathCostTest: void verifyShortestPathsInIncreasingOrderOfWeight(org.jgrapht.Graph)>:
		<org.jgrapht.alg.KShortestPathCostTest.java:222, 30.77%>
		<org.jgrapht.alg.KShortestPathCostTest.java:225, 30.77%>
	<org.jgrapht.experimental.isomorphism.IsomorphismInspectorTest: void assertIsomorphic(org.jgrapht.Graph[],boolean,org.jgrapht.experimental.equivalence.EquivalenceComparator,org.jgrapht.experimental.equivalence.EquivalenceComparator)>:
		<org.jgrapht.experimental.isomorphism.IsomorphismInspectorTest.java:138, 28.57%>
		<org.jgrapht.experimental.isomorphism.IsomorphismInspectorTest.java:140, 28.57%>
	<org.jgrapht.graph.EqualsAndHashCodeTest: void testGrapshWithCustomEdges()>:
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:268, 7.69%>
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:269, 12.82%>
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:271, 15.38%>

Relevant Assertion clone sets (1):
Set (score: 0.50, ccsize: 4, packages: 1, classes: 2): 
	<org.jgrapht.alg.EulerianCircuitTest: void testEulerianCircuit()>:
		<org.jgrapht.alg.EulerianCircuitTest.java:78, 29.41%>
	<org.jgrapht.alg.HamiltonianCycleTest: void testHamiltonianCycle()>:
		<org.jgrapht.alg.HamiltonianCycleTest.java:89, 27.78%>
==============================================

[32] Set (editDistance: 1, isComplete: false, packages: 3, classes: 7): 
Centroid (size: 3): <org.jgrapht.graph.EqualsAndHashCodeTest: void testPseudograph()>

Methods (7): 
	<org.jgrapht.alg.BiconnectivityInspectorTest: void testBiconnected()>:
		<org.jgrapht.alg.BiconnectivityInspectorTest.java:64, 30.00%>
		<org.jgrapht.alg.BiconnectivityInspectorTest.java:65, 50.00%>
		<org.jgrapht.alg.BiconnectivityInspectorTest.java:66, 50.00%>
	<org.jgrapht.alg.EulerianCircuitTest: void testEulerianCircuit()>:
		<org.jgrapht.alg.EulerianCircuitTest.java:77, 11.76%>
		<org.jgrapht.alg.EulerianCircuitTest.java:78, 29.41%>
		<org.jgrapht.alg.EulerianCircuitTest.java:91, 11.76%>
		<org.jgrapht.alg.EulerianCircuitTest.java:95, 23.53%>
	<org.jgrapht.alg.FloydWarshallShortestPathsTest: void testCompareWithDijkstra()>:
		<org.jgrapht.alg.FloydWarshallShortestPathsTest.java:96, 7.41%>
		<org.jgrapht.alg.FloydWarshallShortestPathsTest.java:121, 7.41%>
	<org.jgrapht.alg.HamiltonianCycleTest: void testHamiltonianCycle()>:
		<org.jgrapht.alg.HamiltonianCycleTest.java:79, 33.33%>
		<org.jgrapht.alg.HamiltonianCycleTest.java:89, 27.78%>
	<org.jgrapht.alg.KShortestPathCostTest: void verifyShortestPathsInIncreasingOrderOfWeight(org.jgrapht.Graph)>:
		<org.jgrapht.alg.KShortestPathCostTest.java:222, 30.77%>
		<org.jgrapht.alg.KShortestPathCostTest.java:225, 30.77%>
	<org.jgrapht.experimental.isomorphism.IsomorphismInspectorTest: void assertIsomorphic(org.jgrapht.Graph[],boolean,org.jgrapht.experimental.equivalence.EquivalenceComparator,org.jgrapht.experimental.equivalence.EquivalenceComparator)>:
		<org.jgrapht.experimental.isomorphism.IsomorphismInspectorTest.java:138, 28.57%>
		<org.jgrapht.experimental.isomorphism.IsomorphismInspectorTest.java:140, 28.57%>
	<org.jgrapht.graph.EqualsAndHashCodeTest: void testPseudograph()>:
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:230, 5.08%>
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:231, 8.47%>
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:233, 10.17%>

Relevant Assertion clone sets (1):
Set (score: 0.50, ccsize: 4, packages: 1, classes: 2): 
	<org.jgrapht.alg.EulerianCircuitTest: void testEulerianCircuit()>:
		<org.jgrapht.alg.EulerianCircuitTest.java:78, 29.41%>
	<org.jgrapht.alg.HamiltonianCycleTest: void testHamiltonianCycle()>:
		<org.jgrapht.alg.HamiltonianCycleTest.java:89, 27.78%>
==============================================

[33] Set (editDistance: 1, isComplete: false, packages: 3, classes: 7): 
Centroid (size: 3): <org.jgrapht.graph.EqualsAndHashCodeTest: void testSimpleGraph()>

Methods (7): 
	<org.jgrapht.alg.BiconnectivityInspectorTest: void testBiconnected()>:
		<org.jgrapht.alg.BiconnectivityInspectorTest.java:64, 30.00%>
		<org.jgrapht.alg.BiconnectivityInspectorTest.java:65, 50.00%>
		<org.jgrapht.alg.BiconnectivityInspectorTest.java:66, 50.00%>
	<org.jgrapht.alg.EulerianCircuitTest: void testEulerianCircuit()>:
		<org.jgrapht.alg.EulerianCircuitTest.java:77, 11.76%>
		<org.jgrapht.alg.EulerianCircuitTest.java:78, 29.41%>
		<org.jgrapht.alg.EulerianCircuitTest.java:91, 11.76%>
		<org.jgrapht.alg.EulerianCircuitTest.java:95, 23.53%>
	<org.jgrapht.alg.FloydWarshallShortestPathsTest: void testCompareWithDijkstra()>:
		<org.jgrapht.alg.FloydWarshallShortestPathsTest.java:96, 7.41%>
		<org.jgrapht.alg.FloydWarshallShortestPathsTest.java:121, 7.41%>
	<org.jgrapht.alg.HamiltonianCycleTest: void testHamiltonianCycle()>:
		<org.jgrapht.alg.HamiltonianCycleTest.java:79, 33.33%>
		<org.jgrapht.alg.HamiltonianCycleTest.java:89, 27.78%>
	<org.jgrapht.alg.KShortestPathCostTest: void verifyShortestPathsInIncreasingOrderOfWeight(org.jgrapht.Graph)>:
		<org.jgrapht.alg.KShortestPathCostTest.java:222, 30.77%>
		<org.jgrapht.alg.KShortestPathCostTest.java:225, 30.77%>
	<org.jgrapht.experimental.isomorphism.IsomorphismInspectorTest: void assertIsomorphic(org.jgrapht.Graph[],boolean,org.jgrapht.experimental.equivalence.EquivalenceComparator,org.jgrapht.experimental.equivalence.EquivalenceComparator)>:
		<org.jgrapht.experimental.isomorphism.IsomorphismInspectorTest.java:138, 28.57%>
		<org.jgrapht.experimental.isomorphism.IsomorphismInspectorTest.java:140, 28.57%>
	<org.jgrapht.graph.EqualsAndHashCodeTest: void testSimpleGraph()>:
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:148, 6.52%>
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:149, 10.87%>
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:151, 13.04%>

Relevant Assertion clone sets (1):
Set (score: 0.50, ccsize: 4, packages: 1, classes: 2): 
	<org.jgrapht.alg.EulerianCircuitTest: void testEulerianCircuit()>:
		<org.jgrapht.alg.EulerianCircuitTest.java:78, 29.41%>
	<org.jgrapht.alg.HamiltonianCycleTest: void testHamiltonianCycle()>:
		<org.jgrapht.alg.HamiltonianCycleTest.java:89, 27.78%>
==============================================

[34] Set (editDistance: 1, isComplete: false, packages: 4, classes: 8): 
Centroid (size: 3): <org.jgrapht.graph.SimpleDirectedGraphTest: void testEdgesOf()>

Methods (17): 
	<org.jgrapht.alg.BiconnectivityInspectorTest: void testBiconnected()>:
		<org.jgrapht.alg.BiconnectivityInspectorTest.java:64, 30.00%>
		<org.jgrapht.alg.BiconnectivityInspectorTest.java:65, 50.00%>
		<org.jgrapht.alg.BiconnectivityInspectorTest.java:66, 50.00%>
	<org.jgrapht.alg.BiconnectivityInspectorTest: void testLinearGraph(int)>:
		<org.jgrapht.alg.BiconnectivityInspectorTest.java:88, 40.00%>
		<org.jgrapht.alg.BiconnectivityInspectorTest.java:89, 40.00%>
	<org.jgrapht.alg.BiconnectivityInspectorTest: void testNotBiconnected()>:
		<org.jgrapht.alg.BiconnectivityInspectorTest.java:100, 55.56%>
		<org.jgrapht.alg.BiconnectivityInspectorTest.java:101, 55.56%>
	<org.jgrapht.alg.BlockCutpointGraphTest: void testBiconnected()>:
		<org.jgrapht.alg.BlockCutpointGraphTest.java:67, 41.67%>
		<org.jgrapht.alg.BlockCutpointGraphTest.java:71, 41.67%>
	<org.jgrapht.alg.BlockCutpointGraphTest: void testLinearGraph(int)>:
		<org.jgrapht.alg.BlockCutpointGraphTest.java:121, 33.33%>
		<org.jgrapht.alg.BlockCutpointGraphTest.java:125, 33.33%>
	<org.jgrapht.alg.BlockCutpointGraphTest: void testNotBiconnected()>:
		<org.jgrapht.alg.BlockCutpointGraphTest.java:135, 41.67%>
		<org.jgrapht.alg.BlockCutpointGraphTest.java:139, 41.67%>
	<org.jgrapht.experimental.permutation.CompoundPermutationIterTest: void testGetNext()>:
		<org.jgrapht.experimental.permutation.CompoundPermutationIterTest.java:96, 40.00%>
		<org.jgrapht.experimental.permutation.CompoundPermutationIterTest.java:127, 40.00%>
	<org.jgrapht.generate.GraphGeneratorTest: void testCompleteBipartiteGraphGenerator()>:
		<org.jgrapht.generate.GraphGeneratorTest.java:243, 50.00%>
		<org.jgrapht.generate.GraphGeneratorTest.java:244, 50.00%>
	<org.jgrapht.generate.GraphGeneratorTest: void testEmptyGraphGenerator()>:
		<org.jgrapht.generate.GraphGeneratorTest.java:90, 38.46%>
		<org.jgrapht.generate.GraphGeneratorTest.java:91, 38.46%>
		<org.jgrapht.generate.GraphGeneratorTest.java:92, 23.08%>
	<org.jgrapht.generate.GraphGeneratorTest: void testHyperCubeGraphGenerator()>:
		<org.jgrapht.generate.GraphGeneratorTest.java:265, 50.00%>
		<org.jgrapht.generate.GraphGeneratorTest.java:266, 50.00%>
	<org.jgrapht.generate.GraphGeneratorTest: void testStarGraphGenerator()>:
		<org.jgrapht.generate.GraphGeneratorTest.java:287, 35.71%>
		<org.jgrapht.generate.GraphGeneratorTest.java:288, 35.71%>
		<org.jgrapht.generate.GraphGeneratorTest.java:289, 42.86%>
	<org.jgrapht.graph.AsUndirectedGraphTest: void testDegreeOf()>:
		<org.jgrapht.graph.AsUndirectedGraphTest.java:111, 46.15%>
		<org.jgrapht.graph.AsUndirectedGraphTest.java:112, 61.54%>
		<org.jgrapht.graph.AsUndirectedGraphTest.java:113, 76.92%>
		<org.jgrapht.graph.AsUndirectedGraphTest.java:114, 92.31%>
	<org.jgrapht.graph.DefaultDirectedGraphTest: void testEdgesOf()>:
		<org.jgrapht.graph.DefaultDirectedGraphTest.java:117, 75.00%>
		<org.jgrapht.graph.DefaultDirectedGraphTest.java:118, 75.00%>
	<org.jgrapht.graph.DefaultDirectedGraphTest: void testInDegreeOf()>:
		<org.jgrapht.graph.DefaultDirectedGraphTest.java:141, 83.33%>
		<org.jgrapht.graph.DefaultDirectedGraphTest.java:142, 83.33%>
	<org.jgrapht.graph.DefaultDirectedGraphTest: void testOutDegreeOf()>:
		<org.jgrapht.graph.DefaultDirectedGraphTest.java:153, 83.33%>
		<org.jgrapht.graph.DefaultDirectedGraphTest.java:154, 83.33%>
	<org.jgrapht.graph.GenericGraphsTest: void testEqualButNotSameVertex()>:
		<org.jgrapht.graph.GenericGraphsTest.java:145, 40.00%>
		<org.jgrapht.graph.GenericGraphsTest.java:146, 40.00%>
	<org.jgrapht.graph.SimpleDirectedGraphTest: void testEdgesOf()>:
		<org.jgrapht.graph.SimpleDirectedGraphTest.java:232, 46.67%>
		<org.jgrapht.graph.SimpleDirectedGraphTest.java:233, 60.00%>
		<org.jgrapht.graph.SimpleDirectedGraphTest.java:243, 20.00%>

Relevant Assertion clone sets (3):
Set (score: 0.67, ccsize: 3, packages: 1, classes: 2): 
	<org.jgrapht.alg.BiconnectivityInspectorTest: void testBiconnected()>:
		<org.jgrapht.alg.BiconnectivityInspectorTest.java:65, 50.00%>
	<org.jgrapht.alg.BlockCutpointGraphTest: void testBiconnected()>:
		<org.jgrapht.alg.BlockCutpointGraphTest.java:67, 41.67%>
		<org.jgrapht.alg.BlockCutpointGraphTest.java:71, 41.67%>
Set (score: 0.67, ccsize: 3, packages: 1, classes: 2): 
	<org.jgrapht.alg.BiconnectivityInspectorTest: void testLinearGraph(int)>:
		<org.jgrapht.alg.BiconnectivityInspectorTest.java:88, 40.00%>
	<org.jgrapht.alg.BlockCutpointGraphTest: void testLinearGraph(int)>:
		<org.jgrapht.alg.BlockCutpointGraphTest.java:121, 33.33%>
		<org.jgrapht.alg.BlockCutpointGraphTest.java:125, 33.33%>
Set (score: 0.67, ccsize: 3, packages: 1, classes: 2): 
	<org.jgrapht.alg.BiconnectivityInspectorTest: void testNotBiconnected()>:
		<org.jgrapht.alg.BiconnectivityInspectorTest.java:100, 55.56%>
	<org.jgrapht.alg.BlockCutpointGraphTest: void testNotBiconnected()>:
		<org.jgrapht.alg.BlockCutpointGraphTest.java:135, 41.67%>
		<org.jgrapht.alg.BlockCutpointGraphTest.java:139, 41.67%>
==============================================

[35] Set (editDistance: 1, isComplete: false, packages: 3, classes: 11): 
Centroid (size: 2): <org.jgrapht.alg.BellmanFordShortestPathTest: void testWithNegativeEdges()>

Methods (20): 
	<org.jgrapht.alg.BellmanFordShortestPathTest: void testWithNegativeEdges()>:
		<org.jgrapht.alg.BellmanFordShortestPathTest.java:120, 45.45%>
		<org.jgrapht.alg.BellmanFordShortestPathTest.java:127, 63.64%>
	<org.jgrapht.alg.BlockCutpointGraphTest: void testGetBlock(org.jgrapht.alg.BlockCutpointGraph)>:
		<org.jgrapht.alg.BlockCutpointGraphTest.java:88, 33.33%>
		<org.jgrapht.alg.BlockCutpointGraphTest.java:94, 19.05%>
	<org.jgrapht.alg.BronKerboschCliqueFinderTest: void testFindAll()>:
		<org.jgrapht.alg.BronKerboschCliqueFinderTest.java:143, 26.32%>
		<org.jgrapht.alg.BronKerboschCliqueFinderTest.java:175, 21.05%>
	<org.jgrapht.alg.BronKerboschCliqueFinderTest: void testFindBiggest()>:
		<org.jgrapht.alg.BronKerboschCliqueFinderTest.java:119, 41.67%>
		<org.jgrapht.alg.BronKerboschCliqueFinderTest.java:129, 58.33%>
	<org.jgrapht.alg.ConnectivityInspectorTest: void testStronglyConnected1()>:
		<org.jgrapht.alg.ConnectivityInspectorTest.java:211, 16.00%>
		<org.jgrapht.alg.ConnectivityInspectorTest.java:222, 12.00%>
		<org.jgrapht.alg.ConnectivityInspectorTest.java:225, 16.00%>
	<org.jgrapht.alg.ConnectivityInspectorTest: void testStronglyConnected2()>:
		<org.jgrapht.alg.ConnectivityInspectorTest.java:268, 16.00%>
		<org.jgrapht.alg.ConnectivityInspectorTest.java:279, 12.00%>
		<org.jgrapht.alg.ConnectivityInspectorTest.java:282, 16.00%>
	<org.jgrapht.alg.ConnectivityInspectorTest: void testStronglyConnected3()>:
		<org.jgrapht.alg.ConnectivityInspectorTest.java:325, 17.39%>
		<org.jgrapht.alg.ConnectivityInspectorTest.java:337, 13.04%>
		<org.jgrapht.alg.ConnectivityInspectorTest.java:340, 17.39%>
	<org.jgrapht.alg.ConnectivityInspectorTest: void testStronglyConnected4()>:
		<org.jgrapht.alg.ConnectivityInspectorTest.java:371, 30.77%>
	<org.jgrapht.alg.FloydWarshallShortestPathsTest: void testDiameter()>:
		<org.jgrapht.alg.FloydWarshallShortestPathsTest.java:161, 57.14%>
	<org.jgrapht.alg.FloydWarshallShortestPathsTest: void testEdgeLessDiameter()>:
		<org.jgrapht.alg.FloydWarshallShortestPathsTest.java:182, 40.00%>
	<org.jgrapht.alg.FloydWarshallShortestPathsTest: void testEmptyDiameter()>:
		<org.jgrapht.alg.FloydWarshallShortestPathsTest.java:170, 50.00%>
	<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest: void testBipartiteMatching1()>:
		<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest.java:83, 6.76%>
		<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest.java:86, 6.76%>
	<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest: void testBipartiteMatching2()>:
		<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest.java:112, 5.21%>
		<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest.java:115, 5.21%>
	<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest: void testEmptyMatching()>:
		<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest.java:128, 33.33%>
	<org.jgrapht.alg.KruskalMinimumSpanningTreeTest: void testMinimumSpanningTree()>:
		<org.jgrapht.alg.KruskalMinimumSpanningTreeTest.java:80, 19.05%>
		<org.jgrapht.alg.KruskalMinimumSpanningTreeTest.java:84, 38.10%>
	<org.jgrapht.experimental.alg.ColoringTest: void testBacktrackColoring()>:
		<org.jgrapht.experimental.alg.ColoringTest.java:97, 50.00%>
	<org.jgrapht.experimental.alg.ColoringTest: void testGreedyColoring()>:
		<org.jgrapht.experimental.alg.ColoringTest.java:77, 50.00%>
	<org.jgrapht.graph.AsUndirectedGraphTest: void testGetEdge()>:
		<org.jgrapht.graph.AsUndirectedGraphTest.java:137, 44.00%>
		<org.jgrapht.graph.AsUndirectedGraphTest.java:140, 68.00%>
		<org.jgrapht.graph.AsUndirectedGraphTest.java:144, 92.00%>
	<org.jgrapht.graph.AsUnweightedGraphTest: void constructWeighted(org.jgrapht.WeightedGraph)>:
		<org.jgrapht.graph.AsUnweightedGraphTest.java:110, 57.14%>
	<org.jgrapht.graph.SimpleDirectedGraphTest: void testIncomingOutgoingEdgesOf()>:
		<org.jgrapht.graph.SimpleDirectedGraphTest.java:315, 128.57%>

Relevant Assertion clone sets (3):
Set (score: 1.00, ccsize: 2, packages: 1, classes: 1): 
	<org.jgrapht.alg.ConnectivityInspectorTest: void testStronglyConnected1()>:
		<org.jgrapht.alg.ConnectivityInspectorTest.java:222, 12.00%>
	<org.jgrapht.alg.ConnectivityInspectorTest: void testStronglyConnected2()>:
		<org.jgrapht.alg.ConnectivityInspectorTest.java:279, 12.00%>
	<org.jgrapht.alg.ConnectivityInspectorTest: void testStronglyConnected3()>:
		<org.jgrapht.alg.ConnectivityInspectorTest.java:337, 13.04%>
Set (score: 0.67, ccsize: 2, packages: 1, classes: 1): 
	<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest: void testBipartiteMatching1()>:
		<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest.java:86, 6.76%>
	<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest: void testBipartiteMatching2()>:
		<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest.java:115, 5.21%>
Set (score: 0.50, ccsize: 2, packages: 1, classes: 1): 
	<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest: void testBipartiteMatching1()>:
		<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest.java:83, 6.76%>
	<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest: void testBipartiteMatching2()>:
		<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest.java:112, 5.21%>
==============================================

[36] Set (editDistance: 1, isComplete: false, packages: 4, classes: 8): 
Centroid (size: 2): <org.jgrapht.alg.BiconnectivityInspectorTest: void testLinearGraph(int)>

Methods (14): 
	<org.jgrapht.alg.BiconnectivityInspectorTest: void testBiconnected()>:
		<org.jgrapht.alg.BiconnectivityInspectorTest.java:64, 30.00%>
		<org.jgrapht.alg.BiconnectivityInspectorTest.java:65, 50.00%>
		<org.jgrapht.alg.BiconnectivityInspectorTest.java:66, 50.00%>
	<org.jgrapht.alg.BiconnectivityInspectorTest: void testLinearGraph(int)>:
		<org.jgrapht.alg.BiconnectivityInspectorTest.java:88, 40.00%>
		<org.jgrapht.alg.BiconnectivityInspectorTest.java:89, 40.00%>
	<org.jgrapht.alg.BronKerboschCliqueFinderTest: void testFindAll()>:
		<org.jgrapht.alg.BronKerboschCliqueFinderTest.java:143, 26.32%>
		<org.jgrapht.alg.BronKerboschCliqueFinderTest.java:175, 21.05%>
	<org.jgrapht.alg.BronKerboschCliqueFinderTest: void testFindBiggest()>:
		<org.jgrapht.alg.BronKerboschCliqueFinderTest.java:119, 41.67%>
		<org.jgrapht.alg.BronKerboschCliqueFinderTest.java:129, 58.33%>
	<org.jgrapht.alg.ChromaticNumberTest: void testChromaticNumber()>:
		<org.jgrapht.alg.ChromaticNumberTest.java:78, 18.75%>
		<org.jgrapht.alg.ChromaticNumberTest.java:83, 31.25%>
		<org.jgrapht.alg.ChromaticNumberTest.java:100, 18.75%>
	<org.jgrapht.alg.KSPExampleTest: void testFourReturnedPathsJGraphT()>:
		<org.jgrapht.alg.KSPExampleTest.java:60, 55.56%>
	<org.jgrapht.alg.KSPExampleTest: void testThreeReturnedPathsJGraphT()>:
		<org.jgrapht.alg.KSPExampleTest.java:72, 60.00%>
	<org.jgrapht.alg.KSPExampleTest: void testTwoReturnedPathsJGraphT()>:
		<org.jgrapht.alg.KSPExampleTest.java:84, 60.00%>
	<org.jgrapht.experimental.equivalence.EquivalenceGroupCreatorTest: void testOneComparator(org.jgrapht.experimental.equivalence.EquivalenceComparator,int)>:
		<org.jgrapht.experimental.equivalence.EquivalenceGroupCreatorTest.java:152, 23.53%>
		<org.jgrapht.experimental.equivalence.EquivalenceGroupCreatorTest.java:157, 41.18%>
	<org.jgrapht.generate.GraphGeneratorTest: void testCompleteGraphGenerator()>:
		<org.jgrapht.generate.GraphGeneratorTest.java:185, 62.50%>
	<org.jgrapht.generate.GraphGeneratorTest: void testEmptyGraphGenerator()>:
		<org.jgrapht.generate.GraphGeneratorTest.java:90, 38.46%>
		<org.jgrapht.generate.GraphGeneratorTest.java:91, 38.46%>
		<org.jgrapht.generate.GraphGeneratorTest.java:92, 23.08%>
	<org.jgrapht.generate.GraphGeneratorTest: void testStarGraphGenerator()>:
		<org.jgrapht.generate.GraphGeneratorTest.java:287, 35.71%>
		<org.jgrapht.generate.GraphGeneratorTest.java:288, 35.71%>
		<org.jgrapht.generate.GraphGeneratorTest.java:289, 42.86%>
	<org.jgrapht.graph.DefaultDirectedGraphTest: void testGetAllEdges()>:
		<org.jgrapht.graph.DefaultDirectedGraphTest.java:130, 100.00%>
	<org.jgrapht.graph.SimpleDirectedGraphTest: void testEdgesOf()>:
		<org.jgrapht.graph.SimpleDirectedGraphTest.java:232, 46.67%>
		<org.jgrapht.graph.SimpleDirectedGraphTest.java:233, 60.00%>
		<org.jgrapht.graph.SimpleDirectedGraphTest.java:243, 20.00%>

Relevant Assertion clone sets (1):
Set (score: 0.50, ccsize: 3, packages: 1, classes: 1): 
	<org.jgrapht.alg.KSPExampleTest: void testFourReturnedPathsJGraphT()>:
		<org.jgrapht.alg.KSPExampleTest.java:60, 55.56%>
	<org.jgrapht.alg.KSPExampleTest: void testThreeReturnedPathsJGraphT()>:
		<org.jgrapht.alg.KSPExampleTest.java:72, 60.00%>
	<org.jgrapht.alg.KSPExampleTest: void testTwoReturnedPathsJGraphT()>:
		<org.jgrapht.alg.KSPExampleTest.java:84, 60.00%>
==============================================

[37] Set (editDistance: 1, isComplete: false, packages: 4, classes: 8): 
Centroid (size: 2): <org.jgrapht.alg.BiconnectivityInspectorTest: void testNotBiconnected()>

Methods (14): 
	<org.jgrapht.alg.BiconnectivityInspectorTest: void testBiconnected()>:
		<org.jgrapht.alg.BiconnectivityInspectorTest.java:64, 30.00%>
		<org.jgrapht.alg.BiconnectivityInspectorTest.java:65, 50.00%>
		<org.jgrapht.alg.BiconnectivityInspectorTest.java:66, 50.00%>
	<org.jgrapht.alg.BiconnectivityInspectorTest: void testNotBiconnected()>:
		<org.jgrapht.alg.BiconnectivityInspectorTest.java:100, 55.56%>
		<org.jgrapht.alg.BiconnectivityInspectorTest.java:101, 55.56%>
	<org.jgrapht.alg.BronKerboschCliqueFinderTest: void testFindAll()>:
		<org.jgrapht.alg.BronKerboschCliqueFinderTest.java:143, 26.32%>
		<org.jgrapht.alg.BronKerboschCliqueFinderTest.java:175, 21.05%>
	<org.jgrapht.alg.BronKerboschCliqueFinderTest: void testFindBiggest()>:
		<org.jgrapht.alg.BronKerboschCliqueFinderTest.java:119, 41.67%>
		<org.jgrapht.alg.BronKerboschCliqueFinderTest.java:129, 58.33%>
	<org.jgrapht.alg.ChromaticNumberTest: void testChromaticNumber()>:
		<org.jgrapht.alg.ChromaticNumberTest.java:78, 18.75%>
		<org.jgrapht.alg.ChromaticNumberTest.java:83, 31.25%>
		<org.jgrapht.alg.ChromaticNumberTest.java:100, 18.75%>
	<org.jgrapht.alg.KSPExampleTest: void testFourReturnedPathsJGraphT()>:
		<org.jgrapht.alg.KSPExampleTest.java:60, 55.56%>
	<org.jgrapht.alg.KSPExampleTest: void testThreeReturnedPathsJGraphT()>:
		<org.jgrapht.alg.KSPExampleTest.java:72, 60.00%>
	<org.jgrapht.alg.KSPExampleTest: void testTwoReturnedPathsJGraphT()>:
		<org.jgrapht.alg.KSPExampleTest.java:84, 60.00%>
	<org.jgrapht.experimental.equivalence.EquivalenceGroupCreatorTest: void testOneComparator(org.jgrapht.experimental.equivalence.EquivalenceComparator,int)>:
		<org.jgrapht.experimental.equivalence.EquivalenceGroupCreatorTest.java:152, 23.53%>
		<org.jgrapht.experimental.equivalence.EquivalenceGroupCreatorTest.java:157, 41.18%>
	<org.jgrapht.generate.GraphGeneratorTest: void testCompleteGraphGenerator()>:
		<org.jgrapht.generate.GraphGeneratorTest.java:185, 62.50%>
	<org.jgrapht.generate.GraphGeneratorTest: void testEmptyGraphGenerator()>:
		<org.jgrapht.generate.GraphGeneratorTest.java:90, 38.46%>
		<org.jgrapht.generate.GraphGeneratorTest.java:91, 38.46%>
		<org.jgrapht.generate.GraphGeneratorTest.java:92, 23.08%>
	<org.jgrapht.generate.GraphGeneratorTest: void testStarGraphGenerator()>:
		<org.jgrapht.generate.GraphGeneratorTest.java:287, 35.71%>
		<org.jgrapht.generate.GraphGeneratorTest.java:288, 35.71%>
		<org.jgrapht.generate.GraphGeneratorTest.java:289, 42.86%>
	<org.jgrapht.graph.DefaultDirectedGraphTest: void testGetAllEdges()>:
		<org.jgrapht.graph.DefaultDirectedGraphTest.java:130, 100.00%>
	<org.jgrapht.graph.SimpleDirectedGraphTest: void testEdgesOf()>:
		<org.jgrapht.graph.SimpleDirectedGraphTest.java:232, 46.67%>
		<org.jgrapht.graph.SimpleDirectedGraphTest.java:233, 60.00%>
		<org.jgrapht.graph.SimpleDirectedGraphTest.java:243, 20.00%>

Relevant Assertion clone sets (1):
Set (score: 0.50, ccsize: 3, packages: 1, classes: 1): 
	<org.jgrapht.alg.KSPExampleTest: void testFourReturnedPathsJGraphT()>:
		<org.jgrapht.alg.KSPExampleTest.java:60, 55.56%>
	<org.jgrapht.alg.KSPExampleTest: void testThreeReturnedPathsJGraphT()>:
		<org.jgrapht.alg.KSPExampleTest.java:72, 60.00%>
	<org.jgrapht.alg.KSPExampleTest: void testTwoReturnedPathsJGraphT()>:
		<org.jgrapht.alg.KSPExampleTest.java:84, 60.00%>
==============================================

[38] Set (editDistance: 1, isComplete: false, packages: 4, classes: 9): 
Centroid (size: 2): <org.jgrapht.alg.BlockCutpointGraphTest: void testBiconnected()>

Methods (14): 
	<org.jgrapht.alg.BiconnectivityInspectorTest: void testBiconnected()>:
		<org.jgrapht.alg.BiconnectivityInspectorTest.java:64, 30.00%>
		<org.jgrapht.alg.BiconnectivityInspectorTest.java:65, 50.00%>
		<org.jgrapht.alg.BiconnectivityInspectorTest.java:66, 50.00%>
	<org.jgrapht.alg.BlockCutpointGraphTest: void testBiconnected()>:
		<org.jgrapht.alg.BlockCutpointGraphTest.java:67, 41.67%>
		<org.jgrapht.alg.BlockCutpointGraphTest.java:71, 41.67%>
	<org.jgrapht.alg.BronKerboschCliqueFinderTest: void testFindAll()>:
		<org.jgrapht.alg.BronKerboschCliqueFinderTest.java:143, 26.32%>
		<org.jgrapht.alg.BronKerboschCliqueFinderTest.java:175, 21.05%>
	<org.jgrapht.alg.BronKerboschCliqueFinderTest: void testFindBiggest()>:
		<org.jgrapht.alg.BronKerboschCliqueFinderTest.java:119, 41.67%>
		<org.jgrapht.alg.BronKerboschCliqueFinderTest.java:129, 58.33%>
	<org.jgrapht.alg.ChromaticNumberTest: void testChromaticNumber()>:
		<org.jgrapht.alg.ChromaticNumberTest.java:78, 18.75%>
		<org.jgrapht.alg.ChromaticNumberTest.java:83, 31.25%>
		<org.jgrapht.alg.ChromaticNumberTest.java:100, 18.75%>
	<org.jgrapht.alg.KSPExampleTest: void testFourReturnedPathsJGraphT()>:
		<org.jgrapht.alg.KSPExampleTest.java:60, 55.56%>
	<org.jgrapht.alg.KSPExampleTest: void testThreeReturnedPathsJGraphT()>:
		<org.jgrapht.alg.KSPExampleTest.java:72, 60.00%>
	<org.jgrapht.alg.KSPExampleTest: void testTwoReturnedPathsJGraphT()>:
		<org.jgrapht.alg.KSPExampleTest.java:84, 60.00%>
	<org.jgrapht.experimental.equivalence.EquivalenceGroupCreatorTest: void testOneComparator(org.jgrapht.experimental.equivalence.EquivalenceComparator,int)>:
		<org.jgrapht.experimental.equivalence.EquivalenceGroupCreatorTest.java:152, 23.53%>
		<org.jgrapht.experimental.equivalence.EquivalenceGroupCreatorTest.java:157, 41.18%>
	<org.jgrapht.generate.GraphGeneratorTest: void testCompleteGraphGenerator()>:
		<org.jgrapht.generate.GraphGeneratorTest.java:185, 62.50%>
	<org.jgrapht.generate.GraphGeneratorTest: void testEmptyGraphGenerator()>:
		<org.jgrapht.generate.GraphGeneratorTest.java:90, 38.46%>
		<org.jgrapht.generate.GraphGeneratorTest.java:91, 38.46%>
		<org.jgrapht.generate.GraphGeneratorTest.java:92, 23.08%>
	<org.jgrapht.generate.GraphGeneratorTest: void testStarGraphGenerator()>:
		<org.jgrapht.generate.GraphGeneratorTest.java:287, 35.71%>
		<org.jgrapht.generate.GraphGeneratorTest.java:288, 35.71%>
		<org.jgrapht.generate.GraphGeneratorTest.java:289, 42.86%>
	<org.jgrapht.graph.DefaultDirectedGraphTest: void testGetAllEdges()>:
		<org.jgrapht.graph.DefaultDirectedGraphTest.java:130, 100.00%>
	<org.jgrapht.graph.SimpleDirectedGraphTest: void testEdgesOf()>:
		<org.jgrapht.graph.SimpleDirectedGraphTest.java:232, 46.67%>
		<org.jgrapht.graph.SimpleDirectedGraphTest.java:233, 60.00%>
		<org.jgrapht.graph.SimpleDirectedGraphTest.java:243, 20.00%>

Relevant Assertion clone sets (2):
Set (score: 0.67, ccsize: 3, packages: 1, classes: 2): 
	<org.jgrapht.alg.BiconnectivityInspectorTest: void testBiconnected()>:
		<org.jgrapht.alg.BiconnectivityInspectorTest.java:65, 50.00%>
	<org.jgrapht.alg.BlockCutpointGraphTest: void testBiconnected()>:
		<org.jgrapht.alg.BlockCutpointGraphTest.java:67, 41.67%>
		<org.jgrapht.alg.BlockCutpointGraphTest.java:71, 41.67%>
Set (score: 0.50, ccsize: 3, packages: 1, classes: 1): 
	<org.jgrapht.alg.KSPExampleTest: void testFourReturnedPathsJGraphT()>:
		<org.jgrapht.alg.KSPExampleTest.java:60, 55.56%>
	<org.jgrapht.alg.KSPExampleTest: void testThreeReturnedPathsJGraphT()>:
		<org.jgrapht.alg.KSPExampleTest.java:72, 60.00%>
	<org.jgrapht.alg.KSPExampleTest: void testTwoReturnedPathsJGraphT()>:
		<org.jgrapht.alg.KSPExampleTest.java:84, 60.00%>
==============================================

[39] Set (editDistance: 1, isComplete: false, packages: 8, classes: 16): 
Centroid (size: 2): <org.jgrapht.alg.BlockCutpointGraphTest: void testGetBlock(org.jgrapht.alg.BlockCutpointGraph)>

Methods (27): 
	<org.jgrapht.EnhancedTestCase: void assertFalse()>:
		<org.jgrapht.EnhancedTestCase.java:79, 100.00%>
	<org.jgrapht.EnhancedTestCase: void assertTrue()>:
		<org.jgrapht.EnhancedTestCase.java:87, 100.00%>
	<org.jgrapht.alg.BellmanFordShortestPathTest: void testWithNegativeEdges()>:
		<org.jgrapht.alg.BellmanFordShortestPathTest.java:120, 45.45%>
		<org.jgrapht.alg.BellmanFordShortestPathTest.java:127, 63.64%>
	<org.jgrapht.alg.BlockCutpointGraphTest: void testGetBlock(org.jgrapht.alg.BlockCutpointGraph)>:
		<org.jgrapht.alg.BlockCutpointGraphTest.java:88, 33.33%>
		<org.jgrapht.alg.BlockCutpointGraphTest.java:94, 19.05%>
	<org.jgrapht.alg.ConnectivityInspectorTest: void testStronglyConnected1()>:
		<org.jgrapht.alg.ConnectivityInspectorTest.java:211, 16.00%>
		<org.jgrapht.alg.ConnectivityInspectorTest.java:222, 12.00%>
		<org.jgrapht.alg.ConnectivityInspectorTest.java:225, 16.00%>
	<org.jgrapht.alg.ConnectivityInspectorTest: void testStronglyConnected2()>:
		<org.jgrapht.alg.ConnectivityInspectorTest.java:268, 16.00%>
		<org.jgrapht.alg.ConnectivityInspectorTest.java:279, 12.00%>
		<org.jgrapht.alg.ConnectivityInspectorTest.java:282, 16.00%>
	<org.jgrapht.alg.ConnectivityInspectorTest: void testStronglyConnected3()>:
		<org.jgrapht.alg.ConnectivityInspectorTest.java:325, 17.39%>
		<org.jgrapht.alg.ConnectivityInspectorTest.java:337, 13.04%>
		<org.jgrapht.alg.ConnectivityInspectorTest.java:340, 17.39%>
	<org.jgrapht.alg.ConnectivityInspectorTest: void testStronglyConnected4()>:
		<org.jgrapht.alg.ConnectivityInspectorTest.java:371, 30.77%>
	<org.jgrapht.alg.FloydWarshallShortestPathsTest: void testCompareWithDijkstra()>:
		<org.jgrapht.alg.FloydWarshallShortestPathsTest.java:96, 7.41%>
		<org.jgrapht.alg.FloydWarshallShortestPathsTest.java:121, 7.41%>
	<org.jgrapht.alg.FloydWarshallShortestPathsTest: void testDiameter()>:
		<org.jgrapht.alg.FloydWarshallShortestPathsTest.java:161, 57.14%>
	<org.jgrapht.alg.FloydWarshallShortestPathsTest: void testEdgeLessDiameter()>:
		<org.jgrapht.alg.FloydWarshallShortestPathsTest.java:182, 40.00%>
	<org.jgrapht.alg.FloydWarshallShortestPathsTest: void testEmptyDiameter()>:
		<org.jgrapht.alg.FloydWarshallShortestPathsTest.java:170, 50.00%>
	<org.jgrapht.alg.HamiltonianCycleTest: void testHamiltonianCycle()>:
		<org.jgrapht.alg.HamiltonianCycleTest.java:79, 33.33%>
		<org.jgrapht.alg.HamiltonianCycleTest.java:89, 27.78%>
	<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest: void testEmptyMatching()>:
		<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest.java:128, 33.33%>
	<org.jgrapht.alg.KShortestPathCostTest: void verifyShortestPathsInIncreasingOrderOfWeight(org.jgrapht.Graph)>:
		<org.jgrapht.alg.KShortestPathCostTest.java:222, 30.77%>
		<org.jgrapht.alg.KShortestPathCostTest.java:225, 30.77%>
	<org.jgrapht.alg.KShortestPathCostTest: void verifyWeightsConsistency(java.util.List,java.util.List)>:
		<org.jgrapht.alg.KShortestPathCostTest.java:294, 53.85%>
	<org.jgrapht.alg.VertexCoversTest: void testFind2ApproximationCover()>:
		<org.jgrapht.alg.VertexCoversTest.java:74, 60.00%>
	<org.jgrapht.alg.VertexCoversTest: void testFindGreedyCover()>:
		<org.jgrapht.alg.VertexCoversTest.java:89, 50.00%>
	<org.jgrapht.experimental.alg.ColoringTest: void testBacktrackColoring()>:
		<org.jgrapht.experimental.alg.ColoringTest.java:97, 50.00%>
	<org.jgrapht.experimental.alg.ColoringTest: void testGreedyColoring()>:
		<org.jgrapht.experimental.alg.ColoringTest.java:77, 50.00%>
	<org.jgrapht.experimental.dag.DirectedAcyclicGraphTest: void testCycleDetectionInRandomGraphBuild()>:
		<org.jgrapht.experimental.dag.DirectedAcyclicGraphTest.java:131, 14.29%>
		<org.jgrapht.experimental.dag.DirectedAcyclicGraphTest.java:141, 12.24%>
		<org.jgrapht.experimental.dag.DirectedAcyclicGraphTest.java:152, 6.12%>
	<org.jgrapht.experimental.equivalence.EquivalenceGroupCreatorTest: void testOneComparator(org.jgrapht.experimental.equivalence.EquivalenceComparator,int)>:
		<org.jgrapht.experimental.equivalence.EquivalenceGroupCreatorTest.java:152, 23.53%>
		<org.jgrapht.experimental.equivalence.EquivalenceGroupCreatorTest.java:157, 41.18%>
	<org.jgrapht.experimental.isomorphism.IsomorphismInspectorTest: void assertIsomorphic(org.jgrapht.Graph[],boolean,org.jgrapht.experimental.equivalence.EquivalenceComparator,org.jgrapht.experimental.equivalence.EquivalenceComparator)>:
		<org.jgrapht.experimental.isomorphism.IsomorphismInspectorTest.java:138, 28.57%>
		<org.jgrapht.experimental.isomorphism.IsomorphismInspectorTest.java:140, 28.57%>
	<org.jgrapht.generate.RandomGraphGeneratorTest: void testGenerateDirectedGraph()>:
		<org.jgrapht.generate.RandomGraphGeneratorTest.java:70, 20.00%>
	<org.jgrapht.generate.RandomGraphGeneratorTest: void testGenerateListenableUndirectedGraph()>:
		<org.jgrapht.generate.RandomGraphGeneratorTest.java:89, 20.00%>
	<org.jgrapht.graph.AsUnweightedGraphTest: void constructWeighted(org.jgrapht.WeightedGraph)>:
		<org.jgrapht.graph.AsUnweightedGraphTest.java:110, 57.14%>
	<org.jgrapht.graph.SimpleDirectedGraphTest: void testIncomingOutgoingEdgesOf()>:
		<org.jgrapht.graph.SimpleDirectedGraphTest.java:315, 128.57%>

Relevant Assertion clone sets (2):
Set (score: 1.00, ccsize: 2, packages: 1, classes: 1): 
	<org.jgrapht.alg.ConnectivityInspectorTest: void testStronglyConnected1()>:
		<org.jgrapht.alg.ConnectivityInspectorTest.java:222, 12.00%>
	<org.jgrapht.alg.ConnectivityInspectorTest: void testStronglyConnected2()>:
		<org.jgrapht.alg.ConnectivityInspectorTest.java:279, 12.00%>
	<org.jgrapht.alg.ConnectivityInspectorTest: void testStronglyConnected3()>:
		<org.jgrapht.alg.ConnectivityInspectorTest.java:337, 13.04%>
Set (score: 1.00, ccsize: 2, packages: 1, classes: 1): 
	<org.jgrapht.alg.VertexCoversTest: void testFind2ApproximationCover()>:
		<org.jgrapht.alg.VertexCoversTest.java:74, 60.00%>
	<org.jgrapht.alg.VertexCoversTest: void testFindGreedyCover()>:
		<org.jgrapht.alg.VertexCoversTest.java:89, 50.00%>
==============================================

[40] Set (editDistance: 1, isComplete: false, packages: 4, classes: 9): 
Centroid (size: 2): <org.jgrapht.alg.BlockCutpointGraphTest: void testLinearGraph(int)>

Methods (14): 
	<org.jgrapht.alg.BiconnectivityInspectorTest: void testBiconnected()>:
		<org.jgrapht.alg.BiconnectivityInspectorTest.java:64, 30.00%>
		<org.jgrapht.alg.BiconnectivityInspectorTest.java:65, 50.00%>
		<org.jgrapht.alg.BiconnectivityInspectorTest.java:66, 50.00%>
	<org.jgrapht.alg.BlockCutpointGraphTest: void testLinearGraph(int)>:
		<org.jgrapht.alg.BlockCutpointGraphTest.java:121, 33.33%>
		<org.jgrapht.alg.BlockCutpointGraphTest.java:125, 33.33%>
	<org.jgrapht.alg.BronKerboschCliqueFinderTest: void testFindAll()>:
		<org.jgrapht.alg.BronKerboschCliqueFinderTest.java:143, 26.32%>
		<org.jgrapht.alg.BronKerboschCliqueFinderTest.java:175, 21.05%>
	<org.jgrapht.alg.BronKerboschCliqueFinderTest: void testFindBiggest()>:
		<org.jgrapht.alg.BronKerboschCliqueFinderTest.java:119, 41.67%>
		<org.jgrapht.alg.BronKerboschCliqueFinderTest.java:129, 58.33%>
	<org.jgrapht.alg.ChromaticNumberTest: void testChromaticNumber()>:
		<org.jgrapht.alg.ChromaticNumberTest.java:78, 18.75%>
		<org.jgrapht.alg.ChromaticNumberTest.java:83, 31.25%>
		<org.jgrapht.alg.ChromaticNumberTest.java:100, 18.75%>
	<org.jgrapht.alg.KSPExampleTest: void testFourReturnedPathsJGraphT()>:
		<org.jgrapht.alg.KSPExampleTest.java:60, 55.56%>
	<org.jgrapht.alg.KSPExampleTest: void testThreeReturnedPathsJGraphT()>:
		<org.jgrapht.alg.KSPExampleTest.java:72, 60.00%>
	<org.jgrapht.alg.KSPExampleTest: void testTwoReturnedPathsJGraphT()>:
		<org.jgrapht.alg.KSPExampleTest.java:84, 60.00%>
	<org.jgrapht.experimental.equivalence.EquivalenceGroupCreatorTest: void testOneComparator(org.jgrapht.experimental.equivalence.EquivalenceComparator,int)>:
		<org.jgrapht.experimental.equivalence.EquivalenceGroupCreatorTest.java:152, 23.53%>
		<org.jgrapht.experimental.equivalence.EquivalenceGroupCreatorTest.java:157, 41.18%>
	<org.jgrapht.generate.GraphGeneratorTest: void testCompleteGraphGenerator()>:
		<org.jgrapht.generate.GraphGeneratorTest.java:185, 62.50%>
	<org.jgrapht.generate.GraphGeneratorTest: void testEmptyGraphGenerator()>:
		<org.jgrapht.generate.GraphGeneratorTest.java:90, 38.46%>
		<org.jgrapht.generate.GraphGeneratorTest.java:91, 38.46%>
		<org.jgrapht.generate.GraphGeneratorTest.java:92, 23.08%>
	<org.jgrapht.generate.GraphGeneratorTest: void testStarGraphGenerator()>:
		<org.jgrapht.generate.GraphGeneratorTest.java:287, 35.71%>
		<org.jgrapht.generate.GraphGeneratorTest.java:288, 35.71%>
		<org.jgrapht.generate.GraphGeneratorTest.java:289, 42.86%>
	<org.jgrapht.graph.DefaultDirectedGraphTest: void testGetAllEdges()>:
		<org.jgrapht.graph.DefaultDirectedGraphTest.java:130, 100.00%>
	<org.jgrapht.graph.SimpleDirectedGraphTest: void testEdgesOf()>:
		<org.jgrapht.graph.SimpleDirectedGraphTest.java:232, 46.67%>
		<org.jgrapht.graph.SimpleDirectedGraphTest.java:233, 60.00%>
		<org.jgrapht.graph.SimpleDirectedGraphTest.java:243, 20.00%>

Relevant Assertion clone sets (1):
Set (score: 0.50, ccsize: 3, packages: 1, classes: 1): 
	<org.jgrapht.alg.KSPExampleTest: void testFourReturnedPathsJGraphT()>:
		<org.jgrapht.alg.KSPExampleTest.java:60, 55.56%>
	<org.jgrapht.alg.KSPExampleTest: void testThreeReturnedPathsJGraphT()>:
		<org.jgrapht.alg.KSPExampleTest.java:72, 60.00%>
	<org.jgrapht.alg.KSPExampleTest: void testTwoReturnedPathsJGraphT()>:
		<org.jgrapht.alg.KSPExampleTest.java:84, 60.00%>
==============================================

[41] Set (editDistance: 1, isComplete: false, packages: 4, classes: 9): 
Centroid (size: 2): <org.jgrapht.alg.BlockCutpointGraphTest: void testNotBiconnected()>

Methods (14): 
	<org.jgrapht.alg.BiconnectivityInspectorTest: void testBiconnected()>:
		<org.jgrapht.alg.BiconnectivityInspectorTest.java:64, 30.00%>
		<org.jgrapht.alg.BiconnectivityInspectorTest.java:65, 50.00%>
		<org.jgrapht.alg.BiconnectivityInspectorTest.java:66, 50.00%>
	<org.jgrapht.alg.BlockCutpointGraphTest: void testNotBiconnected()>:
		<org.jgrapht.alg.BlockCutpointGraphTest.java:135, 41.67%>
		<org.jgrapht.alg.BlockCutpointGraphTest.java:139, 41.67%>
	<org.jgrapht.alg.BronKerboschCliqueFinderTest: void testFindAll()>:
		<org.jgrapht.alg.BronKerboschCliqueFinderTest.java:143, 26.32%>
		<org.jgrapht.alg.BronKerboschCliqueFinderTest.java:175, 21.05%>
	<org.jgrapht.alg.BronKerboschCliqueFinderTest: void testFindBiggest()>:
		<org.jgrapht.alg.BronKerboschCliqueFinderTest.java:119, 41.67%>
		<org.jgrapht.alg.BronKerboschCliqueFinderTest.java:129, 58.33%>
	<org.jgrapht.alg.ChromaticNumberTest: void testChromaticNumber()>:
		<org.jgrapht.alg.ChromaticNumberTest.java:78, 18.75%>
		<org.jgrapht.alg.ChromaticNumberTest.java:83, 31.25%>
		<org.jgrapht.alg.ChromaticNumberTest.java:100, 18.75%>
	<org.jgrapht.alg.KSPExampleTest: void testFourReturnedPathsJGraphT()>:
		<org.jgrapht.alg.KSPExampleTest.java:60, 55.56%>
	<org.jgrapht.alg.KSPExampleTest: void testThreeReturnedPathsJGraphT()>:
		<org.jgrapht.alg.KSPExampleTest.java:72, 60.00%>
	<org.jgrapht.alg.KSPExampleTest: void testTwoReturnedPathsJGraphT()>:
		<org.jgrapht.alg.KSPExampleTest.java:84, 60.00%>
	<org.jgrapht.experimental.equivalence.EquivalenceGroupCreatorTest: void testOneComparator(org.jgrapht.experimental.equivalence.EquivalenceComparator,int)>:
		<org.jgrapht.experimental.equivalence.EquivalenceGroupCreatorTest.java:152, 23.53%>
		<org.jgrapht.experimental.equivalence.EquivalenceGroupCreatorTest.java:157, 41.18%>
	<org.jgrapht.generate.GraphGeneratorTest: void testCompleteGraphGenerator()>:
		<org.jgrapht.generate.GraphGeneratorTest.java:185, 62.50%>
	<org.jgrapht.generate.GraphGeneratorTest: void testEmptyGraphGenerator()>:
		<org.jgrapht.generate.GraphGeneratorTest.java:90, 38.46%>
		<org.jgrapht.generate.GraphGeneratorTest.java:91, 38.46%>
		<org.jgrapht.generate.GraphGeneratorTest.java:92, 23.08%>
	<org.jgrapht.generate.GraphGeneratorTest: void testStarGraphGenerator()>:
		<org.jgrapht.generate.GraphGeneratorTest.java:287, 35.71%>
		<org.jgrapht.generate.GraphGeneratorTest.java:288, 35.71%>
		<org.jgrapht.generate.GraphGeneratorTest.java:289, 42.86%>
	<org.jgrapht.graph.DefaultDirectedGraphTest: void testGetAllEdges()>:
		<org.jgrapht.graph.DefaultDirectedGraphTest.java:130, 100.00%>
	<org.jgrapht.graph.SimpleDirectedGraphTest: void testEdgesOf()>:
		<org.jgrapht.graph.SimpleDirectedGraphTest.java:232, 46.67%>
		<org.jgrapht.graph.SimpleDirectedGraphTest.java:233, 60.00%>
		<org.jgrapht.graph.SimpleDirectedGraphTest.java:243, 20.00%>

Relevant Assertion clone sets (1):
Set (score: 0.50, ccsize: 3, packages: 1, classes: 1): 
	<org.jgrapht.alg.KSPExampleTest: void testFourReturnedPathsJGraphT()>:
		<org.jgrapht.alg.KSPExampleTest.java:60, 55.56%>
	<org.jgrapht.alg.KSPExampleTest: void testThreeReturnedPathsJGraphT()>:
		<org.jgrapht.alg.KSPExampleTest.java:72, 60.00%>
	<org.jgrapht.alg.KSPExampleTest: void testTwoReturnedPathsJGraphT()>:
		<org.jgrapht.alg.KSPExampleTest.java:84, 60.00%>
==============================================

[42] Set (editDistance: 1, isComplete: false, packages: 6, classes: 16): 
Centroid (size: 2): <org.jgrapht.alg.BronKerboschCliqueFinderTest: void testFindAll()>

Methods (31): 
	<org.jgrapht.alg.BellmanFordShortestPathTest: void testWithNegativeEdges()>:
		<org.jgrapht.alg.BellmanFordShortestPathTest.java:120, 45.45%>
		<org.jgrapht.alg.BellmanFordShortestPathTest.java:127, 63.64%>
	<org.jgrapht.alg.BiconnectivityInspectorTest: void testLinearGraph(int)>:
		<org.jgrapht.alg.BiconnectivityInspectorTest.java:88, 40.00%>
		<org.jgrapht.alg.BiconnectivityInspectorTest.java:89, 40.00%>
	<org.jgrapht.alg.BiconnectivityInspectorTest: void testNotBiconnected()>:
		<org.jgrapht.alg.BiconnectivityInspectorTest.java:100, 55.56%>
		<org.jgrapht.alg.BiconnectivityInspectorTest.java:101, 55.56%>
	<org.jgrapht.alg.BlockCutpointGraphTest: void testBiconnected()>:
		<org.jgrapht.alg.BlockCutpointGraphTest.java:67, 41.67%>
		<org.jgrapht.alg.BlockCutpointGraphTest.java:71, 41.67%>
	<org.jgrapht.alg.BlockCutpointGraphTest: void testLinearGraph(int)>:
		<org.jgrapht.alg.BlockCutpointGraphTest.java:121, 33.33%>
		<org.jgrapht.alg.BlockCutpointGraphTest.java:125, 33.33%>
	<org.jgrapht.alg.BlockCutpointGraphTest: void testNotBiconnected()>:
		<org.jgrapht.alg.BlockCutpointGraphTest.java:135, 41.67%>
		<org.jgrapht.alg.BlockCutpointGraphTest.java:139, 41.67%>
	<org.jgrapht.alg.BronKerboschCliqueFinderTest: void testFindAll()>:
		<org.jgrapht.alg.BronKerboschCliqueFinderTest.java:143, 26.32%>
		<org.jgrapht.alg.BronKerboschCliqueFinderTest.java:175, 21.05%>
	<org.jgrapht.alg.ConnectivityInspectorTest: void testStronglyConnected4()>:
		<org.jgrapht.alg.ConnectivityInspectorTest.java:371, 30.77%>
	<org.jgrapht.alg.FloydWarshallShortestPathsTest: void testDiameter()>:
		<org.jgrapht.alg.FloydWarshallShortestPathsTest.java:161, 57.14%>
	<org.jgrapht.alg.FloydWarshallShortestPathsTest: void testEdgeLessDiameter()>:
		<org.jgrapht.alg.FloydWarshallShortestPathsTest.java:182, 40.00%>
	<org.jgrapht.alg.FloydWarshallShortestPathsTest: void testEmptyDiameter()>:
		<org.jgrapht.alg.FloydWarshallShortestPathsTest.java:170, 50.00%>
	<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest: void testBipartiteMatching1()>:
		<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest.java:83, 6.76%>
		<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest.java:86, 6.76%>
	<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest: void testBipartiteMatching2()>:
		<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest.java:112, 5.21%>
		<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest.java:115, 5.21%>
	<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest: void testEmptyMatching()>:
		<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest.java:128, 33.33%>
	<org.jgrapht.alg.KSPExampleTest: void testFourReturnedPathsJGraphT()>:
		<org.jgrapht.alg.KSPExampleTest.java:60, 55.56%>
	<org.jgrapht.alg.KSPExampleTest: void testThreeReturnedPathsJGraphT()>:
		<org.jgrapht.alg.KSPExampleTest.java:72, 60.00%>
	<org.jgrapht.alg.KSPExampleTest: void testTwoReturnedPathsJGraphT()>:
		<org.jgrapht.alg.KSPExampleTest.java:84, 60.00%>
	<org.jgrapht.experimental.alg.ColoringTest: void testBacktrackColoring()>:
		<org.jgrapht.experimental.alg.ColoringTest.java:97, 50.00%>
	<org.jgrapht.experimental.alg.ColoringTest: void testGreedyColoring()>:
		<org.jgrapht.experimental.alg.ColoringTest.java:77, 50.00%>
	<org.jgrapht.experimental.equivalence.EquivalenceGroupCreatorTest: void testOneComparator(org.jgrapht.experimental.equivalence.EquivalenceComparator,int)>:
		<org.jgrapht.experimental.equivalence.EquivalenceGroupCreatorTest.java:152, 23.53%>
		<org.jgrapht.experimental.equivalence.EquivalenceGroupCreatorTest.java:157, 41.18%>
	<org.jgrapht.experimental.permutation.CompoundPermutationIterTest: void testGetNext()>:
		<org.jgrapht.experimental.permutation.CompoundPermutationIterTest.java:96, 40.00%>
		<org.jgrapht.experimental.permutation.CompoundPermutationIterTest.java:127, 40.00%>
	<org.jgrapht.generate.GraphGeneratorTest: void testCompleteBipartiteGraphGenerator()>:
		<org.jgrapht.generate.GraphGeneratorTest.java:243, 50.00%>
		<org.jgrapht.generate.GraphGeneratorTest.java:244, 50.00%>
	<org.jgrapht.generate.GraphGeneratorTest: void testCompleteGraphGenerator()>:
		<org.jgrapht.generate.GraphGeneratorTest.java:185, 62.50%>
	<org.jgrapht.generate.GraphGeneratorTest: void testHyperCubeGraphGenerator()>:
		<org.jgrapht.generate.GraphGeneratorTest.java:265, 50.00%>
		<org.jgrapht.generate.GraphGeneratorTest.java:266, 50.00%>
	<org.jgrapht.graph.AsUnweightedGraphTest: void constructWeighted(org.jgrapht.WeightedGraph)>:
		<org.jgrapht.graph.AsUnweightedGraphTest.java:110, 57.14%>
	<org.jgrapht.graph.DefaultDirectedGraphTest: void testEdgesOf()>:
		<org.jgrapht.graph.DefaultDirectedGraphTest.java:117, 75.00%>
		<org.jgrapht.graph.DefaultDirectedGraphTest.java:118, 75.00%>
	<org.jgrapht.graph.DefaultDirectedGraphTest: void testGetAllEdges()>:
		<org.jgrapht.graph.DefaultDirectedGraphTest.java:130, 100.00%>
	<org.jgrapht.graph.DefaultDirectedGraphTest: void testInDegreeOf()>:
		<org.jgrapht.graph.DefaultDirectedGraphTest.java:141, 83.33%>
		<org.jgrapht.graph.DefaultDirectedGraphTest.java:142, 83.33%>
	<org.jgrapht.graph.DefaultDirectedGraphTest: void testOutDegreeOf()>:
		<org.jgrapht.graph.DefaultDirectedGraphTest.java:153, 83.33%>
		<org.jgrapht.graph.DefaultDirectedGraphTest.java:154, 83.33%>
	<org.jgrapht.graph.GenericGraphsTest: void testEqualButNotSameVertex()>:
		<org.jgrapht.graph.GenericGraphsTest.java:145, 40.00%>
		<org.jgrapht.graph.GenericGraphsTest.java:146, 40.00%>
	<org.jgrapht.graph.SimpleDirectedGraphTest: void testIncomingOutgoingEdgesOf()>:
		<org.jgrapht.graph.SimpleDirectedGraphTest.java:315, 128.57%>

Relevant Assertion clone sets (5):
Set (score: 0.67, ccsize: 3, packages: 1, classes: 2): 
	<org.jgrapht.alg.BiconnectivityInspectorTest: void testLinearGraph(int)>:
		<org.jgrapht.alg.BiconnectivityInspectorTest.java:88, 40.00%>
	<org.jgrapht.alg.BlockCutpointGraphTest: void testLinearGraph(int)>:
		<org.jgrapht.alg.BlockCutpointGraphTest.java:121, 33.33%>
		<org.jgrapht.alg.BlockCutpointGraphTest.java:125, 33.33%>
Set (score: 0.67, ccsize: 3, packages: 1, classes: 2): 
	<org.jgrapht.alg.BiconnectivityInspectorTest: void testNotBiconnected()>:
		<org.jgrapht.alg.BiconnectivityInspectorTest.java:100, 55.56%>
	<org.jgrapht.alg.BlockCutpointGraphTest: void testNotBiconnected()>:
		<org.jgrapht.alg.BlockCutpointGraphTest.java:135, 41.67%>
		<org.jgrapht.alg.BlockCutpointGraphTest.java:139, 41.67%>
Set (score: 0.67, ccsize: 2, packages: 1, classes: 1): 
	<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest: void testBipartiteMatching1()>:
		<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest.java:86, 6.76%>
	<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest: void testBipartiteMatching2()>:
		<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest.java:115, 5.21%>
Set (score: 0.50, ccsize: 3, packages: 1, classes: 1): 
	<org.jgrapht.alg.KSPExampleTest: void testFourReturnedPathsJGraphT()>:
		<org.jgrapht.alg.KSPExampleTest.java:60, 55.56%>
	<org.jgrapht.alg.KSPExampleTest: void testThreeReturnedPathsJGraphT()>:
		<org.jgrapht.alg.KSPExampleTest.java:72, 60.00%>
	<org.jgrapht.alg.KSPExampleTest: void testTwoReturnedPathsJGraphT()>:
		<org.jgrapht.alg.KSPExampleTest.java:84, 60.00%>
Set (score: 0.50, ccsize: 2, packages: 1, classes: 1): 
	<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest: void testBipartiteMatching1()>:
		<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest.java:83, 6.76%>
	<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest: void testBipartiteMatching2()>:
		<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest.java:112, 5.21%>
==============================================

[43] Set (editDistance: 1, isComplete: false, packages: 6, classes: 16): 
Centroid (size: 2): <org.jgrapht.alg.BronKerboschCliqueFinderTest: void testFindBiggest()>

Methods (31): 
	<org.jgrapht.alg.BellmanFordShortestPathTest: void testWithNegativeEdges()>:
		<org.jgrapht.alg.BellmanFordShortestPathTest.java:120, 45.45%>
		<org.jgrapht.alg.BellmanFordShortestPathTest.java:127, 63.64%>
	<org.jgrapht.alg.BiconnectivityInspectorTest: void testLinearGraph(int)>:
		<org.jgrapht.alg.BiconnectivityInspectorTest.java:88, 40.00%>
		<org.jgrapht.alg.BiconnectivityInspectorTest.java:89, 40.00%>
	<org.jgrapht.alg.BiconnectivityInspectorTest: void testNotBiconnected()>:
		<org.jgrapht.alg.BiconnectivityInspectorTest.java:100, 55.56%>
		<org.jgrapht.alg.BiconnectivityInspectorTest.java:101, 55.56%>
	<org.jgrapht.alg.BlockCutpointGraphTest: void testBiconnected()>:
		<org.jgrapht.alg.BlockCutpointGraphTest.java:67, 41.67%>
		<org.jgrapht.alg.BlockCutpointGraphTest.java:71, 41.67%>
	<org.jgrapht.alg.BlockCutpointGraphTest: void testLinearGraph(int)>:
		<org.jgrapht.alg.BlockCutpointGraphTest.java:121, 33.33%>
		<org.jgrapht.alg.BlockCutpointGraphTest.java:125, 33.33%>
	<org.jgrapht.alg.BlockCutpointGraphTest: void testNotBiconnected()>:
		<org.jgrapht.alg.BlockCutpointGraphTest.java:135, 41.67%>
		<org.jgrapht.alg.BlockCutpointGraphTest.java:139, 41.67%>
	<org.jgrapht.alg.BronKerboschCliqueFinderTest: void testFindBiggest()>:
		<org.jgrapht.alg.BronKerboschCliqueFinderTest.java:119, 41.67%>
		<org.jgrapht.alg.BronKerboschCliqueFinderTest.java:129, 58.33%>
	<org.jgrapht.alg.ConnectivityInspectorTest: void testStronglyConnected4()>:
		<org.jgrapht.alg.ConnectivityInspectorTest.java:371, 30.77%>
	<org.jgrapht.alg.FloydWarshallShortestPathsTest: void testDiameter()>:
		<org.jgrapht.alg.FloydWarshallShortestPathsTest.java:161, 57.14%>
	<org.jgrapht.alg.FloydWarshallShortestPathsTest: void testEdgeLessDiameter()>:
		<org.jgrapht.alg.FloydWarshallShortestPathsTest.java:182, 40.00%>
	<org.jgrapht.alg.FloydWarshallShortestPathsTest: void testEmptyDiameter()>:
		<org.jgrapht.alg.FloydWarshallShortestPathsTest.java:170, 50.00%>
	<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest: void testBipartiteMatching1()>:
		<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest.java:83, 6.76%>
		<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest.java:86, 6.76%>
	<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest: void testBipartiteMatching2()>:
		<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest.java:112, 5.21%>
		<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest.java:115, 5.21%>
	<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest: void testEmptyMatching()>:
		<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest.java:128, 33.33%>
	<org.jgrapht.alg.KSPExampleTest: void testFourReturnedPathsJGraphT()>:
		<org.jgrapht.alg.KSPExampleTest.java:60, 55.56%>
	<org.jgrapht.alg.KSPExampleTest: void testThreeReturnedPathsJGraphT()>:
		<org.jgrapht.alg.KSPExampleTest.java:72, 60.00%>
	<org.jgrapht.alg.KSPExampleTest: void testTwoReturnedPathsJGraphT()>:
		<org.jgrapht.alg.KSPExampleTest.java:84, 60.00%>
	<org.jgrapht.experimental.alg.ColoringTest: void testBacktrackColoring()>:
		<org.jgrapht.experimental.alg.ColoringTest.java:97, 50.00%>
	<org.jgrapht.experimental.alg.ColoringTest: void testGreedyColoring()>:
		<org.jgrapht.experimental.alg.ColoringTest.java:77, 50.00%>
	<org.jgrapht.experimental.equivalence.EquivalenceGroupCreatorTest: void testOneComparator(org.jgrapht.experimental.equivalence.EquivalenceComparator,int)>:
		<org.jgrapht.experimental.equivalence.EquivalenceGroupCreatorTest.java:152, 23.53%>
		<org.jgrapht.experimental.equivalence.EquivalenceGroupCreatorTest.java:157, 41.18%>
	<org.jgrapht.experimental.permutation.CompoundPermutationIterTest: void testGetNext()>:
		<org.jgrapht.experimental.permutation.CompoundPermutationIterTest.java:96, 40.00%>
		<org.jgrapht.experimental.permutation.CompoundPermutationIterTest.java:127, 40.00%>
	<org.jgrapht.generate.GraphGeneratorTest: void testCompleteBipartiteGraphGenerator()>:
		<org.jgrapht.generate.GraphGeneratorTest.java:243, 50.00%>
		<org.jgrapht.generate.GraphGeneratorTest.java:244, 50.00%>
	<org.jgrapht.generate.GraphGeneratorTest: void testCompleteGraphGenerator()>:
		<org.jgrapht.generate.GraphGeneratorTest.java:185, 62.50%>
	<org.jgrapht.generate.GraphGeneratorTest: void testHyperCubeGraphGenerator()>:
		<org.jgrapht.generate.GraphGeneratorTest.java:265, 50.00%>
		<org.jgrapht.generate.GraphGeneratorTest.java:266, 50.00%>
	<org.jgrapht.graph.AsUnweightedGraphTest: void constructWeighted(org.jgrapht.WeightedGraph)>:
		<org.jgrapht.graph.AsUnweightedGraphTest.java:110, 57.14%>
	<org.jgrapht.graph.DefaultDirectedGraphTest: void testEdgesOf()>:
		<org.jgrapht.graph.DefaultDirectedGraphTest.java:117, 75.00%>
		<org.jgrapht.graph.DefaultDirectedGraphTest.java:118, 75.00%>
	<org.jgrapht.graph.DefaultDirectedGraphTest: void testGetAllEdges()>:
		<org.jgrapht.graph.DefaultDirectedGraphTest.java:130, 100.00%>
	<org.jgrapht.graph.DefaultDirectedGraphTest: void testInDegreeOf()>:
		<org.jgrapht.graph.DefaultDirectedGraphTest.java:141, 83.33%>
		<org.jgrapht.graph.DefaultDirectedGraphTest.java:142, 83.33%>
	<org.jgrapht.graph.DefaultDirectedGraphTest: void testOutDegreeOf()>:
		<org.jgrapht.graph.DefaultDirectedGraphTest.java:153, 83.33%>
		<org.jgrapht.graph.DefaultDirectedGraphTest.java:154, 83.33%>
	<org.jgrapht.graph.GenericGraphsTest: void testEqualButNotSameVertex()>:
		<org.jgrapht.graph.GenericGraphsTest.java:145, 40.00%>
		<org.jgrapht.graph.GenericGraphsTest.java:146, 40.00%>
	<org.jgrapht.graph.SimpleDirectedGraphTest: void testIncomingOutgoingEdgesOf()>:
		<org.jgrapht.graph.SimpleDirectedGraphTest.java:315, 128.57%>

Relevant Assertion clone sets (5):
Set (score: 0.67, ccsize: 3, packages: 1, classes: 2): 
	<org.jgrapht.alg.BiconnectivityInspectorTest: void testLinearGraph(int)>:
		<org.jgrapht.alg.BiconnectivityInspectorTest.java:88, 40.00%>
	<org.jgrapht.alg.BlockCutpointGraphTest: void testLinearGraph(int)>:
		<org.jgrapht.alg.BlockCutpointGraphTest.java:121, 33.33%>
		<org.jgrapht.alg.BlockCutpointGraphTest.java:125, 33.33%>
Set (score: 0.67, ccsize: 3, packages: 1, classes: 2): 
	<org.jgrapht.alg.BiconnectivityInspectorTest: void testNotBiconnected()>:
		<org.jgrapht.alg.BiconnectivityInspectorTest.java:100, 55.56%>
	<org.jgrapht.alg.BlockCutpointGraphTest: void testNotBiconnected()>:
		<org.jgrapht.alg.BlockCutpointGraphTest.java:135, 41.67%>
		<org.jgrapht.alg.BlockCutpointGraphTest.java:139, 41.67%>
Set (score: 0.67, ccsize: 2, packages: 1, classes: 1): 
	<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest: void testBipartiteMatching1()>:
		<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest.java:86, 6.76%>
	<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest: void testBipartiteMatching2()>:
		<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest.java:115, 5.21%>
Set (score: 0.50, ccsize: 3, packages: 1, classes: 1): 
	<org.jgrapht.alg.KSPExampleTest: void testFourReturnedPathsJGraphT()>:
		<org.jgrapht.alg.KSPExampleTest.java:60, 55.56%>
	<org.jgrapht.alg.KSPExampleTest: void testThreeReturnedPathsJGraphT()>:
		<org.jgrapht.alg.KSPExampleTest.java:72, 60.00%>
	<org.jgrapht.alg.KSPExampleTest: void testTwoReturnedPathsJGraphT()>:
		<org.jgrapht.alg.KSPExampleTest.java:84, 60.00%>
Set (score: 0.50, ccsize: 2, packages: 1, classes: 1): 
	<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest: void testBipartiteMatching1()>:
		<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest.java:83, 6.76%>
	<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest: void testBipartiteMatching2()>:
		<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest.java:112, 5.21%>
==============================================

[44] Set (editDistance: 1, isComplete: false, packages: 7, classes: 12): 
Centroid (size: 2): <org.jgrapht.alg.FloydWarshallShortestPathsTest: void testCompareWithDijkstra()>

Methods (19): 
	<org.jgrapht.EnhancedTestCase: void assertFalse()>:
		<org.jgrapht.EnhancedTestCase.java:79, 100.00%>
	<org.jgrapht.EnhancedTestCase: void assertTrue()>:
		<org.jgrapht.EnhancedTestCase.java:87, 100.00%>
	<org.jgrapht.alg.BlockCutpointGraphTest: void testGetBlock(org.jgrapht.alg.BlockCutpointGraph)>:
		<org.jgrapht.alg.BlockCutpointGraphTest.java:88, 33.33%>
		<org.jgrapht.alg.BlockCutpointGraphTest.java:94, 19.05%>
	<org.jgrapht.alg.EdmondsBlossomShrinkingTest: void testOne()>:
		<org.jgrapht.alg.EdmondsBlossomShrinkingTest.java:80, 23.81%>
		<org.jgrapht.alg.EdmondsBlossomShrinkingTest.java:81, 19.05%>
		<org.jgrapht.alg.EdmondsBlossomShrinkingTest.java:82, 19.05%>
	<org.jgrapht.alg.FloydWarshallShortestPathsTest: void testCompareWithDijkstra()>:
		<org.jgrapht.alg.FloydWarshallShortestPathsTest.java:96, 7.41%>
		<org.jgrapht.alg.FloydWarshallShortestPathsTest.java:121, 7.41%>
	<org.jgrapht.alg.KShortestPathCostTest: void verifyWeightsConsistency(java.util.List,java.util.List)>:
		<org.jgrapht.alg.KShortestPathCostTest.java:294, 53.85%>
	<org.jgrapht.alg.KruskalMinimumSpanningTreeTest: void testMinimumSpanningTree()>:
		<org.jgrapht.alg.KruskalMinimumSpanningTreeTest.java:80, 19.05%>
		<org.jgrapht.alg.KruskalMinimumSpanningTreeTest.java:84, 38.10%>
	<org.jgrapht.alg.VertexCoversTest: void testFind2ApproximationCover()>:
		<org.jgrapht.alg.VertexCoversTest.java:74, 60.00%>
	<org.jgrapht.alg.VertexCoversTest: void testFindGreedyCover()>:
		<org.jgrapht.alg.VertexCoversTest.java:89, 50.00%>
	<org.jgrapht.experimental.dag.DirectedAcyclicGraphTest: void testCycleDetectionInRandomGraphBuild()>:
		<org.jgrapht.experimental.dag.DirectedAcyclicGraphTest.java:131, 14.29%>
		<org.jgrapht.experimental.dag.DirectedAcyclicGraphTest.java:141, 12.24%>
		<org.jgrapht.experimental.dag.DirectedAcyclicGraphTest.java:152, 6.12%>
	<org.jgrapht.experimental.equivalence.EquivalenceGroupCreatorTest: void testOneComparator(org.jgrapht.experimental.equivalence.EquivalenceComparator,int)>:
		<org.jgrapht.experimental.equivalence.EquivalenceGroupCreatorTest.java:152, 23.53%>
		<org.jgrapht.experimental.equivalence.EquivalenceGroupCreatorTest.java:157, 41.18%>
	<org.jgrapht.generate.RandomGraphGeneratorTest: void testGenerateDirectedGraph()>:
		<org.jgrapht.generate.RandomGraphGeneratorTest.java:70, 20.00%>
	<org.jgrapht.generate.RandomGraphGeneratorTest: void testGenerateListenableUndirectedGraph()>:
		<org.jgrapht.generate.RandomGraphGeneratorTest.java:89, 20.00%>
	<org.jgrapht.graph.EqualsAndHashCodeTest: void testDefaultDirectedGraph()>:
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:105, 6.52%>
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:106, 10.87%>
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:108, 13.04%>
	<org.jgrapht.graph.EqualsAndHashCodeTest: void testGraphsWithNonIntrusiveEdge()>:
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:187, 3.90%>
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:188, 6.49%>
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:190, 7.79%>
	<org.jgrapht.graph.EqualsAndHashCodeTest: void testGrapshWithCustomEdges()>:
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:268, 7.69%>
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:269, 12.82%>
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:271, 15.38%>
	<org.jgrapht.graph.EqualsAndHashCodeTest: void testPseudograph()>:
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:230, 5.08%>
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:231, 8.47%>
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:233, 10.17%>
	<org.jgrapht.graph.EqualsAndHashCodeTest: void testSimpleGraph()>:
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:148, 6.52%>
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:149, 10.87%>
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:151, 13.04%>
	<org.jgrapht.util.FibonacciHeapTest: void testGrowReplaceShrink()>:
		<org.jgrapht.util.FibonacciHeapTest.java:88, 17.65%>
		<org.jgrapht.util.FibonacciHeapTest.java:91, 17.65%>

Relevant Assertion clone sets (3):
Set (score: 1.00, ccsize: 2, packages: 1, classes: 1): 
	<org.jgrapht.alg.VertexCoversTest: void testFind2ApproximationCover()>:
		<org.jgrapht.alg.VertexCoversTest.java:74, 60.00%>
	<org.jgrapht.alg.VertexCoversTest: void testFindGreedyCover()>:
		<org.jgrapht.alg.VertexCoversTest.java:89, 50.00%>
Set (score: 0.50, ccsize: 4, packages: 1, classes: 1): 
	<org.jgrapht.graph.EqualsAndHashCodeTest: void testDefaultDirectedGraph()>:
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:106, 10.87%>
	<org.jgrapht.graph.EqualsAndHashCodeTest: void testGraphsWithNonIntrusiveEdge()>:
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:188, 6.49%>
Set (score: 0.50, ccsize: 4, packages: 1, classes: 1): 
	<org.jgrapht.graph.EqualsAndHashCodeTest: void testGrapshWithCustomEdges()>:
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:269, 12.82%>
	<org.jgrapht.graph.EqualsAndHashCodeTest: void testSimpleGraph()>:
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:149, 10.87%>
==============================================

[45] Set (editDistance: 1, isComplete: false, packages: 7, classes: 12): 
Centroid (size: 2): <org.jgrapht.alg.HamiltonianCycleTest: void testHamiltonianCycle()>

Methods (19): 
	<org.jgrapht.EnhancedTestCase: void assertFalse()>:
		<org.jgrapht.EnhancedTestCase.java:79, 100.00%>
	<org.jgrapht.EnhancedTestCase: void assertTrue()>:
		<org.jgrapht.EnhancedTestCase.java:87, 100.00%>
	<org.jgrapht.alg.BlockCutpointGraphTest: void testGetBlock(org.jgrapht.alg.BlockCutpointGraph)>:
		<org.jgrapht.alg.BlockCutpointGraphTest.java:88, 33.33%>
		<org.jgrapht.alg.BlockCutpointGraphTest.java:94, 19.05%>
	<org.jgrapht.alg.EdmondsBlossomShrinkingTest: void testOne()>:
		<org.jgrapht.alg.EdmondsBlossomShrinkingTest.java:80, 23.81%>
		<org.jgrapht.alg.EdmondsBlossomShrinkingTest.java:81, 19.05%>
		<org.jgrapht.alg.EdmondsBlossomShrinkingTest.java:82, 19.05%>
	<org.jgrapht.alg.HamiltonianCycleTest: void testHamiltonianCycle()>:
		<org.jgrapht.alg.HamiltonianCycleTest.java:79, 33.33%>
		<org.jgrapht.alg.HamiltonianCycleTest.java:89, 27.78%>
	<org.jgrapht.alg.KShortestPathCostTest: void verifyWeightsConsistency(java.util.List,java.util.List)>:
		<org.jgrapht.alg.KShortestPathCostTest.java:294, 53.85%>
	<org.jgrapht.alg.KruskalMinimumSpanningTreeTest: void testMinimumSpanningTree()>:
		<org.jgrapht.alg.KruskalMinimumSpanningTreeTest.java:80, 19.05%>
		<org.jgrapht.alg.KruskalMinimumSpanningTreeTest.java:84, 38.10%>
	<org.jgrapht.alg.VertexCoversTest: void testFind2ApproximationCover()>:
		<org.jgrapht.alg.VertexCoversTest.java:74, 60.00%>
	<org.jgrapht.alg.VertexCoversTest: void testFindGreedyCover()>:
		<org.jgrapht.alg.VertexCoversTest.java:89, 50.00%>
	<org.jgrapht.experimental.dag.DirectedAcyclicGraphTest: void testCycleDetectionInRandomGraphBuild()>:
		<org.jgrapht.experimental.dag.DirectedAcyclicGraphTest.java:131, 14.29%>
		<org.jgrapht.experimental.dag.DirectedAcyclicGraphTest.java:141, 12.24%>
		<org.jgrapht.experimental.dag.DirectedAcyclicGraphTest.java:152, 6.12%>
	<org.jgrapht.experimental.equivalence.EquivalenceGroupCreatorTest: void testOneComparator(org.jgrapht.experimental.equivalence.EquivalenceComparator,int)>:
		<org.jgrapht.experimental.equivalence.EquivalenceGroupCreatorTest.java:152, 23.53%>
		<org.jgrapht.experimental.equivalence.EquivalenceGroupCreatorTest.java:157, 41.18%>
	<org.jgrapht.generate.RandomGraphGeneratorTest: void testGenerateDirectedGraph()>:
		<org.jgrapht.generate.RandomGraphGeneratorTest.java:70, 20.00%>
	<org.jgrapht.generate.RandomGraphGeneratorTest: void testGenerateListenableUndirectedGraph()>:
		<org.jgrapht.generate.RandomGraphGeneratorTest.java:89, 20.00%>
	<org.jgrapht.graph.EqualsAndHashCodeTest: void testDefaultDirectedGraph()>:
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:105, 6.52%>
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:106, 10.87%>
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:108, 13.04%>
	<org.jgrapht.graph.EqualsAndHashCodeTest: void testGraphsWithNonIntrusiveEdge()>:
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:187, 3.90%>
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:188, 6.49%>
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:190, 7.79%>
	<org.jgrapht.graph.EqualsAndHashCodeTest: void testGrapshWithCustomEdges()>:
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:268, 7.69%>
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:269, 12.82%>
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:271, 15.38%>
	<org.jgrapht.graph.EqualsAndHashCodeTest: void testPseudograph()>:
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:230, 5.08%>
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:231, 8.47%>
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:233, 10.17%>
	<org.jgrapht.graph.EqualsAndHashCodeTest: void testSimpleGraph()>:
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:148, 6.52%>
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:149, 10.87%>
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:151, 13.04%>
	<org.jgrapht.util.FibonacciHeapTest: void testGrowReplaceShrink()>:
		<org.jgrapht.util.FibonacciHeapTest.java:88, 17.65%>
		<org.jgrapht.util.FibonacciHeapTest.java:91, 17.65%>

Relevant Assertion clone sets (3):
Set (score: 1.00, ccsize: 2, packages: 1, classes: 1): 
	<org.jgrapht.alg.VertexCoversTest: void testFind2ApproximationCover()>:
		<org.jgrapht.alg.VertexCoversTest.java:74, 60.00%>
	<org.jgrapht.alg.VertexCoversTest: void testFindGreedyCover()>:
		<org.jgrapht.alg.VertexCoversTest.java:89, 50.00%>
Set (score: 0.50, ccsize: 4, packages: 1, classes: 1): 
	<org.jgrapht.graph.EqualsAndHashCodeTest: void testDefaultDirectedGraph()>:
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:106, 10.87%>
	<org.jgrapht.graph.EqualsAndHashCodeTest: void testGraphsWithNonIntrusiveEdge()>:
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:188, 6.49%>
Set (score: 0.50, ccsize: 4, packages: 1, classes: 1): 
	<org.jgrapht.graph.EqualsAndHashCodeTest: void testGrapshWithCustomEdges()>:
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:269, 12.82%>
	<org.jgrapht.graph.EqualsAndHashCodeTest: void testSimpleGraph()>:
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:149, 10.87%>
==============================================

[46] Set (editDistance: 1, isComplete: false, packages: 7, classes: 11): 
Centroid (size: 2): <org.jgrapht.alg.KShortestPathCostTest: void verifyShortestPathsInIncreasingOrderOfWeight(org.jgrapht.Graph)>

Methods (19): 
	<org.jgrapht.EnhancedTestCase: void assertFalse()>:
		<org.jgrapht.EnhancedTestCase.java:79, 100.00%>
	<org.jgrapht.EnhancedTestCase: void assertTrue()>:
		<org.jgrapht.EnhancedTestCase.java:87, 100.00%>
	<org.jgrapht.alg.BlockCutpointGraphTest: void testGetBlock(org.jgrapht.alg.BlockCutpointGraph)>:
		<org.jgrapht.alg.BlockCutpointGraphTest.java:88, 33.33%>
		<org.jgrapht.alg.BlockCutpointGraphTest.java:94, 19.05%>
	<org.jgrapht.alg.EdmondsBlossomShrinkingTest: void testOne()>:
		<org.jgrapht.alg.EdmondsBlossomShrinkingTest.java:80, 23.81%>
		<org.jgrapht.alg.EdmondsBlossomShrinkingTest.java:81, 19.05%>
		<org.jgrapht.alg.EdmondsBlossomShrinkingTest.java:82, 19.05%>
	<org.jgrapht.alg.KShortestPathCostTest: void verifyShortestPathsInIncreasingOrderOfWeight(org.jgrapht.Graph)>:
		<org.jgrapht.alg.KShortestPathCostTest.java:222, 30.77%>
		<org.jgrapht.alg.KShortestPathCostTest.java:225, 30.77%>
	<org.jgrapht.alg.KShortestPathCostTest: void verifyWeightsConsistency(java.util.List,java.util.List)>:
		<org.jgrapht.alg.KShortestPathCostTest.java:294, 53.85%>
	<org.jgrapht.alg.KruskalMinimumSpanningTreeTest: void testMinimumSpanningTree()>:
		<org.jgrapht.alg.KruskalMinimumSpanningTreeTest.java:80, 19.05%>
		<org.jgrapht.alg.KruskalMinimumSpanningTreeTest.java:84, 38.10%>
	<org.jgrapht.alg.VertexCoversTest: void testFind2ApproximationCover()>:
		<org.jgrapht.alg.VertexCoversTest.java:74, 60.00%>
	<org.jgrapht.alg.VertexCoversTest: void testFindGreedyCover()>:
		<org.jgrapht.alg.VertexCoversTest.java:89, 50.00%>
	<org.jgrapht.experimental.dag.DirectedAcyclicGraphTest: void testCycleDetectionInRandomGraphBuild()>:
		<org.jgrapht.experimental.dag.DirectedAcyclicGraphTest.java:131, 14.29%>
		<org.jgrapht.experimental.dag.DirectedAcyclicGraphTest.java:141, 12.24%>
		<org.jgrapht.experimental.dag.DirectedAcyclicGraphTest.java:152, 6.12%>
	<org.jgrapht.experimental.equivalence.EquivalenceGroupCreatorTest: void testOneComparator(org.jgrapht.experimental.equivalence.EquivalenceComparator,int)>:
		<org.jgrapht.experimental.equivalence.EquivalenceGroupCreatorTest.java:152, 23.53%>
		<org.jgrapht.experimental.equivalence.EquivalenceGroupCreatorTest.java:157, 41.18%>
	<org.jgrapht.generate.RandomGraphGeneratorTest: void testGenerateDirectedGraph()>:
		<org.jgrapht.generate.RandomGraphGeneratorTest.java:70, 20.00%>
	<org.jgrapht.generate.RandomGraphGeneratorTest: void testGenerateListenableUndirectedGraph()>:
		<org.jgrapht.generate.RandomGraphGeneratorTest.java:89, 20.00%>
	<org.jgrapht.graph.EqualsAndHashCodeTest: void testDefaultDirectedGraph()>:
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:105, 6.52%>
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:106, 10.87%>
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:108, 13.04%>
	<org.jgrapht.graph.EqualsAndHashCodeTest: void testGraphsWithNonIntrusiveEdge()>:
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:187, 3.90%>
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:188, 6.49%>
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:190, 7.79%>
	<org.jgrapht.graph.EqualsAndHashCodeTest: void testGrapshWithCustomEdges()>:
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:268, 7.69%>
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:269, 12.82%>
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:271, 15.38%>
	<org.jgrapht.graph.EqualsAndHashCodeTest: void testPseudograph()>:
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:230, 5.08%>
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:231, 8.47%>
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:233, 10.17%>
	<org.jgrapht.graph.EqualsAndHashCodeTest: void testSimpleGraph()>:
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:148, 6.52%>
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:149, 10.87%>
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:151, 13.04%>
	<org.jgrapht.util.FibonacciHeapTest: void testGrowReplaceShrink()>:
		<org.jgrapht.util.FibonacciHeapTest.java:88, 17.65%>
		<org.jgrapht.util.FibonacciHeapTest.java:91, 17.65%>

Relevant Assertion clone sets (3):
Set (score: 1.00, ccsize: 2, packages: 1, classes: 1): 
	<org.jgrapht.alg.VertexCoversTest: void testFind2ApproximationCover()>:
		<org.jgrapht.alg.VertexCoversTest.java:74, 60.00%>
	<org.jgrapht.alg.VertexCoversTest: void testFindGreedyCover()>:
		<org.jgrapht.alg.VertexCoversTest.java:89, 50.00%>
Set (score: 0.50, ccsize: 4, packages: 1, classes: 1): 
	<org.jgrapht.graph.EqualsAndHashCodeTest: void testDefaultDirectedGraph()>:
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:106, 10.87%>
	<org.jgrapht.graph.EqualsAndHashCodeTest: void testGraphsWithNonIntrusiveEdge()>:
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:188, 6.49%>
Set (score: 0.50, ccsize: 4, packages: 1, classes: 1): 
	<org.jgrapht.graph.EqualsAndHashCodeTest: void testGrapshWithCustomEdges()>:
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:269, 12.82%>
	<org.jgrapht.graph.EqualsAndHashCodeTest: void testSimpleGraph()>:
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:149, 10.87%>
==============================================

[47] Set (editDistance: 1, isComplete: false, packages: 8, classes: 16): 
Centroid (size: 2): <org.jgrapht.alg.KruskalMinimumSpanningTreeTest: void testMinimumSpanningTree()>

Methods (27): 
	<org.jgrapht.EnhancedTestCase: void assertFalse()>:
		<org.jgrapht.EnhancedTestCase.java:79, 100.00%>
	<org.jgrapht.EnhancedTestCase: void assertTrue()>:
		<org.jgrapht.EnhancedTestCase.java:87, 100.00%>
	<org.jgrapht.alg.BellmanFordShortestPathTest: void testWithNegativeEdges()>:
		<org.jgrapht.alg.BellmanFordShortestPathTest.java:120, 45.45%>
		<org.jgrapht.alg.BellmanFordShortestPathTest.java:127, 63.64%>
	<org.jgrapht.alg.ConnectivityInspectorTest: void testStronglyConnected1()>:
		<org.jgrapht.alg.ConnectivityInspectorTest.java:211, 16.00%>
		<org.jgrapht.alg.ConnectivityInspectorTest.java:222, 12.00%>
		<org.jgrapht.alg.ConnectivityInspectorTest.java:225, 16.00%>
	<org.jgrapht.alg.ConnectivityInspectorTest: void testStronglyConnected2()>:
		<org.jgrapht.alg.ConnectivityInspectorTest.java:268, 16.00%>
		<org.jgrapht.alg.ConnectivityInspectorTest.java:279, 12.00%>
		<org.jgrapht.alg.ConnectivityInspectorTest.java:282, 16.00%>
	<org.jgrapht.alg.ConnectivityInspectorTest: void testStronglyConnected3()>:
		<org.jgrapht.alg.ConnectivityInspectorTest.java:325, 17.39%>
		<org.jgrapht.alg.ConnectivityInspectorTest.java:337, 13.04%>
		<org.jgrapht.alg.ConnectivityInspectorTest.java:340, 17.39%>
	<org.jgrapht.alg.ConnectivityInspectorTest: void testStronglyConnected4()>:
		<org.jgrapht.alg.ConnectivityInspectorTest.java:371, 30.77%>
	<org.jgrapht.alg.FloydWarshallShortestPathsTest: void testCompareWithDijkstra()>:
		<org.jgrapht.alg.FloydWarshallShortestPathsTest.java:96, 7.41%>
		<org.jgrapht.alg.FloydWarshallShortestPathsTest.java:121, 7.41%>
	<org.jgrapht.alg.FloydWarshallShortestPathsTest: void testDiameter()>:
		<org.jgrapht.alg.FloydWarshallShortestPathsTest.java:161, 57.14%>
	<org.jgrapht.alg.FloydWarshallShortestPathsTest: void testEdgeLessDiameter()>:
		<org.jgrapht.alg.FloydWarshallShortestPathsTest.java:182, 40.00%>
	<org.jgrapht.alg.FloydWarshallShortestPathsTest: void testEmptyDiameter()>:
		<org.jgrapht.alg.FloydWarshallShortestPathsTest.java:170, 50.00%>
	<org.jgrapht.alg.HamiltonianCycleTest: void testHamiltonianCycle()>:
		<org.jgrapht.alg.HamiltonianCycleTest.java:79, 33.33%>
		<org.jgrapht.alg.HamiltonianCycleTest.java:89, 27.78%>
	<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest: void testEmptyMatching()>:
		<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest.java:128, 33.33%>
	<org.jgrapht.alg.KShortestPathCostTest: void verifyShortestPathsInIncreasingOrderOfWeight(org.jgrapht.Graph)>:
		<org.jgrapht.alg.KShortestPathCostTest.java:222, 30.77%>
		<org.jgrapht.alg.KShortestPathCostTest.java:225, 30.77%>
	<org.jgrapht.alg.KShortestPathCostTest: void verifyWeightsConsistency(java.util.List,java.util.List)>:
		<org.jgrapht.alg.KShortestPathCostTest.java:294, 53.85%>
	<org.jgrapht.alg.KruskalMinimumSpanningTreeTest: void testMinimumSpanningTree()>:
		<org.jgrapht.alg.KruskalMinimumSpanningTreeTest.java:80, 19.05%>
		<org.jgrapht.alg.KruskalMinimumSpanningTreeTest.java:84, 38.10%>
	<org.jgrapht.alg.VertexCoversTest: void testFind2ApproximationCover()>:
		<org.jgrapht.alg.VertexCoversTest.java:74, 60.00%>
	<org.jgrapht.alg.VertexCoversTest: void testFindGreedyCover()>:
		<org.jgrapht.alg.VertexCoversTest.java:89, 50.00%>
	<org.jgrapht.experimental.alg.ColoringTest: void testBacktrackColoring()>:
		<org.jgrapht.experimental.alg.ColoringTest.java:97, 50.00%>
	<org.jgrapht.experimental.alg.ColoringTest: void testGreedyColoring()>:
		<org.jgrapht.experimental.alg.ColoringTest.java:77, 50.00%>
	<org.jgrapht.experimental.dag.DirectedAcyclicGraphTest: void testCycleDetectionInRandomGraphBuild()>:
		<org.jgrapht.experimental.dag.DirectedAcyclicGraphTest.java:131, 14.29%>
		<org.jgrapht.experimental.dag.DirectedAcyclicGraphTest.java:141, 12.24%>
		<org.jgrapht.experimental.dag.DirectedAcyclicGraphTest.java:152, 6.12%>
	<org.jgrapht.experimental.equivalence.EquivalenceGroupCreatorTest: void testOneComparator(org.jgrapht.experimental.equivalence.EquivalenceComparator,int)>:
		<org.jgrapht.experimental.equivalence.EquivalenceGroupCreatorTest.java:152, 23.53%>
		<org.jgrapht.experimental.equivalence.EquivalenceGroupCreatorTest.java:157, 41.18%>
	<org.jgrapht.experimental.isomorphism.IsomorphismInspectorTest: void assertIsomorphic(org.jgrapht.Graph[],boolean,org.jgrapht.experimental.equivalence.EquivalenceComparator,org.jgrapht.experimental.equivalence.EquivalenceComparator)>:
		<org.jgrapht.experimental.isomorphism.IsomorphismInspectorTest.java:138, 28.57%>
		<org.jgrapht.experimental.isomorphism.IsomorphismInspectorTest.java:140, 28.57%>
	<org.jgrapht.generate.RandomGraphGeneratorTest: void testGenerateDirectedGraph()>:
		<org.jgrapht.generate.RandomGraphGeneratorTest.java:70, 20.00%>
	<org.jgrapht.generate.RandomGraphGeneratorTest: void testGenerateListenableUndirectedGraph()>:
		<org.jgrapht.generate.RandomGraphGeneratorTest.java:89, 20.00%>
	<org.jgrapht.graph.AsUnweightedGraphTest: void constructWeighted(org.jgrapht.WeightedGraph)>:
		<org.jgrapht.graph.AsUnweightedGraphTest.java:110, 57.14%>
	<org.jgrapht.graph.SimpleDirectedGraphTest: void testIncomingOutgoingEdgesOf()>:
		<org.jgrapht.graph.SimpleDirectedGraphTest.java:315, 128.57%>

Relevant Assertion clone sets (2):
Set (score: 1.00, ccsize: 2, packages: 1, classes: 1): 
	<org.jgrapht.alg.ConnectivityInspectorTest: void testStronglyConnected1()>:
		<org.jgrapht.alg.ConnectivityInspectorTest.java:222, 12.00%>
	<org.jgrapht.alg.ConnectivityInspectorTest: void testStronglyConnected2()>:
		<org.jgrapht.alg.ConnectivityInspectorTest.java:279, 12.00%>
	<org.jgrapht.alg.ConnectivityInspectorTest: void testStronglyConnected3()>:
		<org.jgrapht.alg.ConnectivityInspectorTest.java:337, 13.04%>
Set (score: 1.00, ccsize: 2, packages: 1, classes: 1): 
	<org.jgrapht.alg.VertexCoversTest: void testFind2ApproximationCover()>:
		<org.jgrapht.alg.VertexCoversTest.java:74, 60.00%>
	<org.jgrapht.alg.VertexCoversTest: void testFindGreedyCover()>:
		<org.jgrapht.alg.VertexCoversTest.java:89, 50.00%>
==============================================

[48] Set (editDistance: 1, isComplete: false, packages: 7, classes: 18): 
Centroid (size: 2): <org.jgrapht.experimental.equivalence.EquivalenceGroupCreatorTest: void testOneComparator(org.jgrapht.experimental.equivalence.EquivalenceComparator,int)>

Methods (36): 
	<org.jgrapht.EnhancedTestCase: void assertFalse()>:
		<org.jgrapht.EnhancedTestCase.java:79, 100.00%>
	<org.jgrapht.EnhancedTestCase: void assertTrue()>:
		<org.jgrapht.EnhancedTestCase.java:87, 100.00%>
	<org.jgrapht.alg.BiconnectivityInspectorTest: void testLinearGraph(int)>:
		<org.jgrapht.alg.BiconnectivityInspectorTest.java:88, 40.00%>
		<org.jgrapht.alg.BiconnectivityInspectorTest.java:89, 40.00%>
	<org.jgrapht.alg.BiconnectivityInspectorTest: void testNotBiconnected()>:
		<org.jgrapht.alg.BiconnectivityInspectorTest.java:100, 55.56%>
		<org.jgrapht.alg.BiconnectivityInspectorTest.java:101, 55.56%>
	<org.jgrapht.alg.BlockCutpointGraphTest: void testBiconnected()>:
		<org.jgrapht.alg.BlockCutpointGraphTest.java:67, 41.67%>
		<org.jgrapht.alg.BlockCutpointGraphTest.java:71, 41.67%>
	<org.jgrapht.alg.BlockCutpointGraphTest: void testGetBlock(org.jgrapht.alg.BlockCutpointGraph)>:
		<org.jgrapht.alg.BlockCutpointGraphTest.java:88, 33.33%>
		<org.jgrapht.alg.BlockCutpointGraphTest.java:94, 19.05%>
	<org.jgrapht.alg.BlockCutpointGraphTest: void testLinearGraph(int)>:
		<org.jgrapht.alg.BlockCutpointGraphTest.java:121, 33.33%>
		<org.jgrapht.alg.BlockCutpointGraphTest.java:125, 33.33%>
	<org.jgrapht.alg.BlockCutpointGraphTest: void testNotBiconnected()>:
		<org.jgrapht.alg.BlockCutpointGraphTest.java:135, 41.67%>
		<org.jgrapht.alg.BlockCutpointGraphTest.java:139, 41.67%>
	<org.jgrapht.alg.BronKerboschCliqueFinderTest: void testFindAll()>:
		<org.jgrapht.alg.BronKerboschCliqueFinderTest.java:143, 26.32%>
		<org.jgrapht.alg.BronKerboschCliqueFinderTest.java:175, 21.05%>
	<org.jgrapht.alg.BronKerboschCliqueFinderTest: void testFindBiggest()>:
		<org.jgrapht.alg.BronKerboschCliqueFinderTest.java:119, 41.67%>
		<org.jgrapht.alg.BronKerboschCliqueFinderTest.java:129, 58.33%>
	<org.jgrapht.alg.EdmondsBlossomShrinkingTest: void testOne()>:
		<org.jgrapht.alg.EdmondsBlossomShrinkingTest.java:80, 23.81%>
		<org.jgrapht.alg.EdmondsBlossomShrinkingTest.java:81, 19.05%>
		<org.jgrapht.alg.EdmondsBlossomShrinkingTest.java:82, 19.05%>
	<org.jgrapht.alg.FloydWarshallShortestPathsTest: void testCompareWithDijkstra()>:
		<org.jgrapht.alg.FloydWarshallShortestPathsTest.java:96, 7.41%>
		<org.jgrapht.alg.FloydWarshallShortestPathsTest.java:121, 7.41%>
	<org.jgrapht.alg.HamiltonianCycleTest: void testHamiltonianCycle()>:
		<org.jgrapht.alg.HamiltonianCycleTest.java:79, 33.33%>
		<org.jgrapht.alg.HamiltonianCycleTest.java:89, 27.78%>
	<org.jgrapht.alg.KSPExampleTest: void testFourReturnedPathsJGraphT()>:
		<org.jgrapht.alg.KSPExampleTest.java:60, 55.56%>
	<org.jgrapht.alg.KSPExampleTest: void testThreeReturnedPathsJGraphT()>:
		<org.jgrapht.alg.KSPExampleTest.java:72, 60.00%>
	<org.jgrapht.alg.KSPExampleTest: void testTwoReturnedPathsJGraphT()>:
		<org.jgrapht.alg.KSPExampleTest.java:84, 60.00%>
	<org.jgrapht.alg.KShortestPathCostTest: void verifyShortestPathsInIncreasingOrderOfWeight(org.jgrapht.Graph)>:
		<org.jgrapht.alg.KShortestPathCostTest.java:222, 30.77%>
		<org.jgrapht.alg.KShortestPathCostTest.java:225, 30.77%>
	<org.jgrapht.alg.KShortestPathCostTest: void verifyWeightsConsistency(java.util.List,java.util.List)>:
		<org.jgrapht.alg.KShortestPathCostTest.java:294, 53.85%>
	<org.jgrapht.alg.KruskalMinimumSpanningTreeTest: void testMinimumSpanningTree()>:
		<org.jgrapht.alg.KruskalMinimumSpanningTreeTest.java:80, 19.05%>
		<org.jgrapht.alg.KruskalMinimumSpanningTreeTest.java:84, 38.10%>
	<org.jgrapht.alg.VertexCoversTest: void testFind2ApproximationCover()>:
		<org.jgrapht.alg.VertexCoversTest.java:74, 60.00%>
	<org.jgrapht.alg.VertexCoversTest: void testFindGreedyCover()>:
		<org.jgrapht.alg.VertexCoversTest.java:89, 50.00%>
	<org.jgrapht.experimental.equivalence.EquivalenceGroupCreatorTest: void testOneComparator(org.jgrapht.experimental.equivalence.EquivalenceComparator,int)>:
		<org.jgrapht.experimental.equivalence.EquivalenceGroupCreatorTest.java:152, 23.53%>
		<org.jgrapht.experimental.equivalence.EquivalenceGroupCreatorTest.java:157, 41.18%>
	<org.jgrapht.experimental.isomorphism.IsomorphismInspectorTest: void assertIsomorphic(org.jgrapht.Graph[],boolean,org.jgrapht.experimental.equivalence.EquivalenceComparator,org.jgrapht.experimental.equivalence.EquivalenceComparator)>:
		<org.jgrapht.experimental.isomorphism.IsomorphismInspectorTest.java:138, 28.57%>
		<org.jgrapht.experimental.isomorphism.IsomorphismInspectorTest.java:140, 28.57%>
	<org.jgrapht.experimental.permutation.CompoundPermutationIterTest: void testGetNext()>:
		<org.jgrapht.experimental.permutation.CompoundPermutationIterTest.java:96, 40.00%>
		<org.jgrapht.experimental.permutation.CompoundPermutationIterTest.java:127, 40.00%>
	<org.jgrapht.generate.GraphGeneratorTest: void testCompleteBipartiteGraphGenerator()>:
		<org.jgrapht.generate.GraphGeneratorTest.java:243, 50.00%>
		<org.jgrapht.generate.GraphGeneratorTest.java:244, 50.00%>
	<org.jgrapht.generate.GraphGeneratorTest: void testCompleteGraphGenerator()>:
		<org.jgrapht.generate.GraphGeneratorTest.java:185, 62.50%>
	<org.jgrapht.generate.GraphGeneratorTest: void testEmptyGraphGenerator()>:
		<org.jgrapht.generate.GraphGeneratorTest.java:90, 38.46%>
		<org.jgrapht.generate.GraphGeneratorTest.java:91, 38.46%>
		<org.jgrapht.generate.GraphGeneratorTest.java:92, 23.08%>
	<org.jgrapht.generate.GraphGeneratorTest: void testHyperCubeGraphGenerator()>:
		<org.jgrapht.generate.GraphGeneratorTest.java:265, 50.00%>
		<org.jgrapht.generate.GraphGeneratorTest.java:266, 50.00%>
	<org.jgrapht.generate.GraphGeneratorTest: void testStarGraphGenerator()>:
		<org.jgrapht.generate.GraphGeneratorTest.java:287, 35.71%>
		<org.jgrapht.generate.GraphGeneratorTest.java:288, 35.71%>
		<org.jgrapht.generate.GraphGeneratorTest.java:289, 42.86%>
	<org.jgrapht.generate.RandomGraphGeneratorTest: void testGenerateDirectedGraph()>:
		<org.jgrapht.generate.RandomGraphGeneratorTest.java:70, 20.00%>
	<org.jgrapht.generate.RandomGraphGeneratorTest: void testGenerateListenableUndirectedGraph()>:
		<org.jgrapht.generate.RandomGraphGeneratorTest.java:89, 20.00%>
	<org.jgrapht.graph.DefaultDirectedGraphTest: void testEdgesOf()>:
		<org.jgrapht.graph.DefaultDirectedGraphTest.java:117, 75.00%>
		<org.jgrapht.graph.DefaultDirectedGraphTest.java:118, 75.00%>
	<org.jgrapht.graph.DefaultDirectedGraphTest: void testGetAllEdges()>:
		<org.jgrapht.graph.DefaultDirectedGraphTest.java:130, 100.00%>
	<org.jgrapht.graph.DefaultDirectedGraphTest: void testInDegreeOf()>:
		<org.jgrapht.graph.DefaultDirectedGraphTest.java:141, 83.33%>
		<org.jgrapht.graph.DefaultDirectedGraphTest.java:142, 83.33%>
	<org.jgrapht.graph.DefaultDirectedGraphTest: void testOutDegreeOf()>:
		<org.jgrapht.graph.DefaultDirectedGraphTest.java:153, 83.33%>
		<org.jgrapht.graph.DefaultDirectedGraphTest.java:154, 83.33%>
	<org.jgrapht.graph.GenericGraphsTest: void testEqualButNotSameVertex()>:
		<org.jgrapht.graph.GenericGraphsTest.java:145, 40.00%>
		<org.jgrapht.graph.GenericGraphsTest.java:146, 40.00%>

Relevant Assertion clone sets (4):
Set (score: 1.00, ccsize: 2, packages: 1, classes: 1): 
	<org.jgrapht.alg.VertexCoversTest: void testFind2ApproximationCover()>:
		<org.jgrapht.alg.VertexCoversTest.java:74, 60.00%>
	<org.jgrapht.alg.VertexCoversTest: void testFindGreedyCover()>:
		<org.jgrapht.alg.VertexCoversTest.java:89, 50.00%>
Set (score: 0.67, ccsize: 3, packages: 1, classes: 2): 
	<org.jgrapht.alg.BiconnectivityInspectorTest: void testLinearGraph(int)>:
		<org.jgrapht.alg.BiconnectivityInspectorTest.java:88, 40.00%>
	<org.jgrapht.alg.BlockCutpointGraphTest: void testLinearGraph(int)>:
		<org.jgrapht.alg.BlockCutpointGraphTest.java:121, 33.33%>
		<org.jgrapht.alg.BlockCutpointGraphTest.java:125, 33.33%>
Set (score: 0.67, ccsize: 3, packages: 1, classes: 2): 
	<org.jgrapht.alg.BiconnectivityInspectorTest: void testNotBiconnected()>:
		<org.jgrapht.alg.BiconnectivityInspectorTest.java:100, 55.56%>
	<org.jgrapht.alg.BlockCutpointGraphTest: void testNotBiconnected()>:
		<org.jgrapht.alg.BlockCutpointGraphTest.java:135, 41.67%>
		<org.jgrapht.alg.BlockCutpointGraphTest.java:139, 41.67%>
Set (score: 0.50, ccsize: 3, packages: 1, classes: 1): 
	<org.jgrapht.alg.KSPExampleTest: void testFourReturnedPathsJGraphT()>:
		<org.jgrapht.alg.KSPExampleTest.java:60, 55.56%>
	<org.jgrapht.alg.KSPExampleTest: void testThreeReturnedPathsJGraphT()>:
		<org.jgrapht.alg.KSPExampleTest.java:72, 60.00%>
	<org.jgrapht.alg.KSPExampleTest: void testTwoReturnedPathsJGraphT()>:
		<org.jgrapht.alg.KSPExampleTest.java:84, 60.00%>
==============================================

[49] Set (editDistance: 1, isComplete: false, packages: 8, classes: 12): 
Centroid (size: 2): <org.jgrapht.experimental.isomorphism.IsomorphismInspectorTest: void assertIsomorphic(org.jgrapht.Graph[],boolean,org.jgrapht.experimental.equivalence.EquivalenceComparator,org.jgrapht.experimental.equivalence.EquivalenceComparator)>

Methods (19): 
	<org.jgrapht.EnhancedTestCase: void assertFalse()>:
		<org.jgrapht.EnhancedTestCase.java:79, 100.00%>
	<org.jgrapht.EnhancedTestCase: void assertTrue()>:
		<org.jgrapht.EnhancedTestCase.java:87, 100.00%>
	<org.jgrapht.alg.BlockCutpointGraphTest: void testGetBlock(org.jgrapht.alg.BlockCutpointGraph)>:
		<org.jgrapht.alg.BlockCutpointGraphTest.java:88, 33.33%>
		<org.jgrapht.alg.BlockCutpointGraphTest.java:94, 19.05%>
	<org.jgrapht.alg.EdmondsBlossomShrinkingTest: void testOne()>:
		<org.jgrapht.alg.EdmondsBlossomShrinkingTest.java:80, 23.81%>
		<org.jgrapht.alg.EdmondsBlossomShrinkingTest.java:81, 19.05%>
		<org.jgrapht.alg.EdmondsBlossomShrinkingTest.java:82, 19.05%>
	<org.jgrapht.alg.KShortestPathCostTest: void verifyWeightsConsistency(java.util.List,java.util.List)>:
		<org.jgrapht.alg.KShortestPathCostTest.java:294, 53.85%>
	<org.jgrapht.alg.KruskalMinimumSpanningTreeTest: void testMinimumSpanningTree()>:
		<org.jgrapht.alg.KruskalMinimumSpanningTreeTest.java:80, 19.05%>
		<org.jgrapht.alg.KruskalMinimumSpanningTreeTest.java:84, 38.10%>
	<org.jgrapht.alg.VertexCoversTest: void testFind2ApproximationCover()>:
		<org.jgrapht.alg.VertexCoversTest.java:74, 60.00%>
	<org.jgrapht.alg.VertexCoversTest: void testFindGreedyCover()>:
		<org.jgrapht.alg.VertexCoversTest.java:89, 50.00%>
	<org.jgrapht.experimental.dag.DirectedAcyclicGraphTest: void testCycleDetectionInRandomGraphBuild()>:
		<org.jgrapht.experimental.dag.DirectedAcyclicGraphTest.java:131, 14.29%>
		<org.jgrapht.experimental.dag.DirectedAcyclicGraphTest.java:141, 12.24%>
		<org.jgrapht.experimental.dag.DirectedAcyclicGraphTest.java:152, 6.12%>
	<org.jgrapht.experimental.equivalence.EquivalenceGroupCreatorTest: void testOneComparator(org.jgrapht.experimental.equivalence.EquivalenceComparator,int)>:
		<org.jgrapht.experimental.equivalence.EquivalenceGroupCreatorTest.java:152, 23.53%>
		<org.jgrapht.experimental.equivalence.EquivalenceGroupCreatorTest.java:157, 41.18%>
	<org.jgrapht.experimental.isomorphism.IsomorphismInspectorTest: void assertIsomorphic(org.jgrapht.Graph[],boolean,org.jgrapht.experimental.equivalence.EquivalenceComparator,org.jgrapht.experimental.equivalence.EquivalenceComparator)>:
		<org.jgrapht.experimental.isomorphism.IsomorphismInspectorTest.java:138, 28.57%>
		<org.jgrapht.experimental.isomorphism.IsomorphismInspectorTest.java:140, 28.57%>
	<org.jgrapht.generate.RandomGraphGeneratorTest: void testGenerateDirectedGraph()>:
		<org.jgrapht.generate.RandomGraphGeneratorTest.java:70, 20.00%>
	<org.jgrapht.generate.RandomGraphGeneratorTest: void testGenerateListenableUndirectedGraph()>:
		<org.jgrapht.generate.RandomGraphGeneratorTest.java:89, 20.00%>
	<org.jgrapht.graph.EqualsAndHashCodeTest: void testDefaultDirectedGraph()>:
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:105, 6.52%>
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:106, 10.87%>
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:108, 13.04%>
	<org.jgrapht.graph.EqualsAndHashCodeTest: void testGraphsWithNonIntrusiveEdge()>:
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:187, 3.90%>
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:188, 6.49%>
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:190, 7.79%>
	<org.jgrapht.graph.EqualsAndHashCodeTest: void testGrapshWithCustomEdges()>:
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:268, 7.69%>
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:269, 12.82%>
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:271, 15.38%>
	<org.jgrapht.graph.EqualsAndHashCodeTest: void testPseudograph()>:
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:230, 5.08%>
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:231, 8.47%>
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:233, 10.17%>
	<org.jgrapht.graph.EqualsAndHashCodeTest: void testSimpleGraph()>:
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:148, 6.52%>
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:149, 10.87%>
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:151, 13.04%>
	<org.jgrapht.util.FibonacciHeapTest: void testGrowReplaceShrink()>:
		<org.jgrapht.util.FibonacciHeapTest.java:88, 17.65%>
		<org.jgrapht.util.FibonacciHeapTest.java:91, 17.65%>

Relevant Assertion clone sets (3):
Set (score: 1.00, ccsize: 2, packages: 1, classes: 1): 
	<org.jgrapht.alg.VertexCoversTest: void testFind2ApproximationCover()>:
		<org.jgrapht.alg.VertexCoversTest.java:74, 60.00%>
	<org.jgrapht.alg.VertexCoversTest: void testFindGreedyCover()>:
		<org.jgrapht.alg.VertexCoversTest.java:89, 50.00%>
Set (score: 0.50, ccsize: 4, packages: 1, classes: 1): 
	<org.jgrapht.graph.EqualsAndHashCodeTest: void testDefaultDirectedGraph()>:
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:106, 10.87%>
	<org.jgrapht.graph.EqualsAndHashCodeTest: void testGraphsWithNonIntrusiveEdge()>:
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:188, 6.49%>
Set (score: 0.50, ccsize: 4, packages: 1, classes: 1): 
	<org.jgrapht.graph.EqualsAndHashCodeTest: void testGrapshWithCustomEdges()>:
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:269, 12.82%>
	<org.jgrapht.graph.EqualsAndHashCodeTest: void testSimpleGraph()>:
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:149, 10.87%>
==============================================

[50] Set (editDistance: 1, isComplete: false, packages: 5, classes: 9): 
Centroid (size: 2): <org.jgrapht.experimental.permutation.CompoundPermutationIterTest: void testGetNext()>

Methods (14): 
	<org.jgrapht.alg.BiconnectivityInspectorTest: void testBiconnected()>:
		<org.jgrapht.alg.BiconnectivityInspectorTest.java:64, 30.00%>
		<org.jgrapht.alg.BiconnectivityInspectorTest.java:65, 50.00%>
		<org.jgrapht.alg.BiconnectivityInspectorTest.java:66, 50.00%>
	<org.jgrapht.alg.BronKerboschCliqueFinderTest: void testFindAll()>:
		<org.jgrapht.alg.BronKerboschCliqueFinderTest.java:143, 26.32%>
		<org.jgrapht.alg.BronKerboschCliqueFinderTest.java:175, 21.05%>
	<org.jgrapht.alg.BronKerboschCliqueFinderTest: void testFindBiggest()>:
		<org.jgrapht.alg.BronKerboschCliqueFinderTest.java:119, 41.67%>
		<org.jgrapht.alg.BronKerboschCliqueFinderTest.java:129, 58.33%>
	<org.jgrapht.alg.ChromaticNumberTest: void testChromaticNumber()>:
		<org.jgrapht.alg.ChromaticNumberTest.java:78, 18.75%>
		<org.jgrapht.alg.ChromaticNumberTest.java:83, 31.25%>
		<org.jgrapht.alg.ChromaticNumberTest.java:100, 18.75%>
	<org.jgrapht.alg.KSPExampleTest: void testFourReturnedPathsJGraphT()>:
		<org.jgrapht.alg.KSPExampleTest.java:60, 55.56%>
	<org.jgrapht.alg.KSPExampleTest: void testThreeReturnedPathsJGraphT()>:
		<org.jgrapht.alg.KSPExampleTest.java:72, 60.00%>
	<org.jgrapht.alg.KSPExampleTest: void testTwoReturnedPathsJGraphT()>:
		<org.jgrapht.alg.KSPExampleTest.java:84, 60.00%>
	<org.jgrapht.experimental.equivalence.EquivalenceGroupCreatorTest: void testOneComparator(org.jgrapht.experimental.equivalence.EquivalenceComparator,int)>:
		<org.jgrapht.experimental.equivalence.EquivalenceGroupCreatorTest.java:152, 23.53%>
		<org.jgrapht.experimental.equivalence.EquivalenceGroupCreatorTest.java:157, 41.18%>
	<org.jgrapht.experimental.permutation.CompoundPermutationIterTest: void testGetNext()>:
		<org.jgrapht.experimental.permutation.CompoundPermutationIterTest.java:96, 40.00%>
		<org.jgrapht.experimental.permutation.CompoundPermutationIterTest.java:127, 40.00%>
	<org.jgrapht.generate.GraphGeneratorTest: void testCompleteGraphGenerator()>:
		<org.jgrapht.generate.GraphGeneratorTest.java:185, 62.50%>
	<org.jgrapht.generate.GraphGeneratorTest: void testEmptyGraphGenerator()>:
		<org.jgrapht.generate.GraphGeneratorTest.java:90, 38.46%>
		<org.jgrapht.generate.GraphGeneratorTest.java:91, 38.46%>
		<org.jgrapht.generate.GraphGeneratorTest.java:92, 23.08%>
	<org.jgrapht.generate.GraphGeneratorTest: void testStarGraphGenerator()>:
		<org.jgrapht.generate.GraphGeneratorTest.java:287, 35.71%>
		<org.jgrapht.generate.GraphGeneratorTest.java:288, 35.71%>
		<org.jgrapht.generate.GraphGeneratorTest.java:289, 42.86%>
	<org.jgrapht.graph.DefaultDirectedGraphTest: void testGetAllEdges()>:
		<org.jgrapht.graph.DefaultDirectedGraphTest.java:130, 100.00%>
	<org.jgrapht.graph.SimpleDirectedGraphTest: void testEdgesOf()>:
		<org.jgrapht.graph.SimpleDirectedGraphTest.java:232, 46.67%>
		<org.jgrapht.graph.SimpleDirectedGraphTest.java:233, 60.00%>
		<org.jgrapht.graph.SimpleDirectedGraphTest.java:243, 20.00%>

Relevant Assertion clone sets (1):
Set (score: 0.50, ccsize: 3, packages: 1, classes: 1): 
	<org.jgrapht.alg.KSPExampleTest: void testFourReturnedPathsJGraphT()>:
		<org.jgrapht.alg.KSPExampleTest.java:60, 55.56%>
	<org.jgrapht.alg.KSPExampleTest: void testThreeReturnedPathsJGraphT()>:
		<org.jgrapht.alg.KSPExampleTest.java:72, 60.00%>
	<org.jgrapht.alg.KSPExampleTest: void testTwoReturnedPathsJGraphT()>:
		<org.jgrapht.alg.KSPExampleTest.java:84, 60.00%>
==============================================

[51] Set (editDistance: 1, isComplete: false, packages: 4, classes: 9): 
Centroid (size: 2): <org.jgrapht.ext.MatrixExporterTest: void testLaplacian()>

Methods (13): 
	<org.jgrapht.experimental.GraphReaderTest: void testGraphReader()>:
		<org.jgrapht.experimental.GraphReaderTest.java:88, 27.27%>
	<org.jgrapht.experimental.GraphReaderTest: void testGraphReaderWeighted()>:
		<org.jgrapht.experimental.GraphReaderTest.java:116, 23.08%>
	<org.jgrapht.ext.DOTExporterTest: void testUndirected()>:
		<org.jgrapht.ext.DOTExporterTest.java:110, 41.67%>
	<org.jgrapht.ext.GmlExporterTest: void testUndirected()>:
		<org.jgrapht.ext.GmlExporterTest.java:117, 62.50%>
	<org.jgrapht.ext.MatrixExporterTest: void testAdjacencyDirected()>:
		<org.jgrapht.ext.MatrixExporterTest.java:149, 62.50%>
	<org.jgrapht.ext.MatrixExporterTest: void testAdjacencyUndirected()>:
		<org.jgrapht.ext.MatrixExporterTest.java:133, 62.50%>
	<org.jgrapht.ext.MatrixExporterTest: void testLaplacian()>:
		<org.jgrapht.ext.MatrixExporterTest.java:113, 38.46%>
		<org.jgrapht.ext.MatrixExporterTest.java:117, 38.46%>
	<org.jgrapht.graph.AsUndirectedGraphTest: void testAddEdge()>:
		<org.jgrapht.graph.AsUndirectedGraphTest.java:89, 100.00%>
	<org.jgrapht.graph.DefaultDirectedGraphTest: void testVertexOrderDeterminism()>:
		<org.jgrapht.graph.DefaultDirectedGraphTest.java:165, 76.92%>
		<org.jgrapht.graph.DefaultDirectedGraphTest.java:166, 76.92%>
		<org.jgrapht.graph.DefaultDirectedGraphTest.java:167, 76.92%>
	<org.jgrapht.graph.GenericGraphsTest: void testAlissaHacker()>:
		<org.jgrapht.graph.GenericGraphsTest.java:134, 83.33%>
	<org.jgrapht.traverse.ClosestFirstIteratorTest: void testNoStart()>:
		<org.jgrapht.traverse.ClosestFirstIteratorTest.java:103, 53.85%>
	<org.jgrapht.traverse.ClosestFirstIteratorTest: void testRadius()>:
		<org.jgrapht.traverse.ClosestFirstIteratorTest.java:80, 53.85%>
	<org.jgrapht.traverse.DepthFirstIteratorTest: void testBug1169182()>:
		<org.jgrapht.traverse.DepthFirstIteratorTest.java:149, 16.00%>

Relevant Assertion clone sets (2):
Set (score: 1.00, ccsize: 2, packages: 1, classes: 1): 
	<org.jgrapht.experimental.GraphReaderTest: void testGraphReader()>:
		<org.jgrapht.experimental.GraphReaderTest.java:88, 27.27%>
	<org.jgrapht.experimental.GraphReaderTest: void testGraphReaderWeighted()>:
		<org.jgrapht.experimental.GraphReaderTest.java:116, 23.08%>
Set (score: 0.67, ccsize: 2, packages: 1, classes: 2): 
	<org.jgrapht.ext.DOTExporterTest: void testUndirected()>:
		<org.jgrapht.ext.DOTExporterTest.java:110, 41.67%>
	<org.jgrapht.ext.GmlExporterTest: void testUndirected()>:
		<org.jgrapht.ext.GmlExporterTest.java:117, 62.50%>
==============================================

[52] Set (editDistance: 1, isComplete: false, packages: 4, classes: 8): 
Centroid (size: 2): <org.jgrapht.generate.GraphGeneratorTest: void testCompleteBipartiteGraphGenerator()>

Methods (14): 
	<org.jgrapht.alg.BiconnectivityInspectorTest: void testBiconnected()>:
		<org.jgrapht.alg.BiconnectivityInspectorTest.java:64, 30.00%>
		<org.jgrapht.alg.BiconnectivityInspectorTest.java:65, 50.00%>
		<org.jgrapht.alg.BiconnectivityInspectorTest.java:66, 50.00%>
	<org.jgrapht.alg.BronKerboschCliqueFinderTest: void testFindAll()>:
		<org.jgrapht.alg.BronKerboschCliqueFinderTest.java:143, 26.32%>
		<org.jgrapht.alg.BronKerboschCliqueFinderTest.java:175, 21.05%>
	<org.jgrapht.alg.BronKerboschCliqueFinderTest: void testFindBiggest()>:
		<org.jgrapht.alg.BronKerboschCliqueFinderTest.java:119, 41.67%>
		<org.jgrapht.alg.BronKerboschCliqueFinderTest.java:129, 58.33%>
	<org.jgrapht.alg.ChromaticNumberTest: void testChromaticNumber()>:
		<org.jgrapht.alg.ChromaticNumberTest.java:78, 18.75%>
		<org.jgrapht.alg.ChromaticNumberTest.java:83, 31.25%>
		<org.jgrapht.alg.ChromaticNumberTest.java:100, 18.75%>
	<org.jgrapht.alg.KSPExampleTest: void testFourReturnedPathsJGraphT()>:
		<org.jgrapht.alg.KSPExampleTest.java:60, 55.56%>
	<org.jgrapht.alg.KSPExampleTest: void testThreeReturnedPathsJGraphT()>:
		<org.jgrapht.alg.KSPExampleTest.java:72, 60.00%>
	<org.jgrapht.alg.KSPExampleTest: void testTwoReturnedPathsJGraphT()>:
		<org.jgrapht.alg.KSPExampleTest.java:84, 60.00%>
	<org.jgrapht.experimental.equivalence.EquivalenceGroupCreatorTest: void testOneComparator(org.jgrapht.experimental.equivalence.EquivalenceComparator,int)>:
		<org.jgrapht.experimental.equivalence.EquivalenceGroupCreatorTest.java:152, 23.53%>
		<org.jgrapht.experimental.equivalence.EquivalenceGroupCreatorTest.java:157, 41.18%>
	<org.jgrapht.generate.GraphGeneratorTest: void testCompleteBipartiteGraphGenerator()>:
		<org.jgrapht.generate.GraphGeneratorTest.java:243, 50.00%>
		<org.jgrapht.generate.GraphGeneratorTest.java:244, 50.00%>
	<org.jgrapht.generate.GraphGeneratorTest: void testCompleteGraphGenerator()>:
		<org.jgrapht.generate.GraphGeneratorTest.java:185, 62.50%>
	<org.jgrapht.generate.GraphGeneratorTest: void testEmptyGraphGenerator()>:
		<org.jgrapht.generate.GraphGeneratorTest.java:90, 38.46%>
		<org.jgrapht.generate.GraphGeneratorTest.java:91, 38.46%>
		<org.jgrapht.generate.GraphGeneratorTest.java:92, 23.08%>
	<org.jgrapht.generate.GraphGeneratorTest: void testStarGraphGenerator()>:
		<org.jgrapht.generate.GraphGeneratorTest.java:287, 35.71%>
		<org.jgrapht.generate.GraphGeneratorTest.java:288, 35.71%>
		<org.jgrapht.generate.GraphGeneratorTest.java:289, 42.86%>
	<org.jgrapht.graph.DefaultDirectedGraphTest: void testGetAllEdges()>:
		<org.jgrapht.graph.DefaultDirectedGraphTest.java:130, 100.00%>
	<org.jgrapht.graph.SimpleDirectedGraphTest: void testEdgesOf()>:
		<org.jgrapht.graph.SimpleDirectedGraphTest.java:232, 46.67%>
		<org.jgrapht.graph.SimpleDirectedGraphTest.java:233, 60.00%>
		<org.jgrapht.graph.SimpleDirectedGraphTest.java:243, 20.00%>

Relevant Assertion clone sets (1):
Set (score: 0.50, ccsize: 3, packages: 1, classes: 1): 
	<org.jgrapht.alg.KSPExampleTest: void testFourReturnedPathsJGraphT()>:
		<org.jgrapht.alg.KSPExampleTest.java:60, 55.56%>
	<org.jgrapht.alg.KSPExampleTest: void testThreeReturnedPathsJGraphT()>:
		<org.jgrapht.alg.KSPExampleTest.java:72, 60.00%>
	<org.jgrapht.alg.KSPExampleTest: void testTwoReturnedPathsJGraphT()>:
		<org.jgrapht.alg.KSPExampleTest.java:84, 60.00%>
==============================================

[53] Set (editDistance: 1, isComplete: false, packages: 4, classes: 8): 
Centroid (size: 2): <org.jgrapht.generate.GraphGeneratorTest: void testHyperCubeGraphGenerator()>

Methods (14): 
	<org.jgrapht.alg.BiconnectivityInspectorTest: void testBiconnected()>:
		<org.jgrapht.alg.BiconnectivityInspectorTest.java:64, 30.00%>
		<org.jgrapht.alg.BiconnectivityInspectorTest.java:65, 50.00%>
		<org.jgrapht.alg.BiconnectivityInspectorTest.java:66, 50.00%>
	<org.jgrapht.alg.BronKerboschCliqueFinderTest: void testFindAll()>:
		<org.jgrapht.alg.BronKerboschCliqueFinderTest.java:143, 26.32%>
		<org.jgrapht.alg.BronKerboschCliqueFinderTest.java:175, 21.05%>
	<org.jgrapht.alg.BronKerboschCliqueFinderTest: void testFindBiggest()>:
		<org.jgrapht.alg.BronKerboschCliqueFinderTest.java:119, 41.67%>
		<org.jgrapht.alg.BronKerboschCliqueFinderTest.java:129, 58.33%>
	<org.jgrapht.alg.ChromaticNumberTest: void testChromaticNumber()>:
		<org.jgrapht.alg.ChromaticNumberTest.java:78, 18.75%>
		<org.jgrapht.alg.ChromaticNumberTest.java:83, 31.25%>
		<org.jgrapht.alg.ChromaticNumberTest.java:100, 18.75%>
	<org.jgrapht.alg.KSPExampleTest: void testFourReturnedPathsJGraphT()>:
		<org.jgrapht.alg.KSPExampleTest.java:60, 55.56%>
	<org.jgrapht.alg.KSPExampleTest: void testThreeReturnedPathsJGraphT()>:
		<org.jgrapht.alg.KSPExampleTest.java:72, 60.00%>
	<org.jgrapht.alg.KSPExampleTest: void testTwoReturnedPathsJGraphT()>:
		<org.jgrapht.alg.KSPExampleTest.java:84, 60.00%>
	<org.jgrapht.experimental.equivalence.EquivalenceGroupCreatorTest: void testOneComparator(org.jgrapht.experimental.equivalence.EquivalenceComparator,int)>:
		<org.jgrapht.experimental.equivalence.EquivalenceGroupCreatorTest.java:152, 23.53%>
		<org.jgrapht.experimental.equivalence.EquivalenceGroupCreatorTest.java:157, 41.18%>
	<org.jgrapht.generate.GraphGeneratorTest: void testCompleteGraphGenerator()>:
		<org.jgrapht.generate.GraphGeneratorTest.java:185, 62.50%>
	<org.jgrapht.generate.GraphGeneratorTest: void testEmptyGraphGenerator()>:
		<org.jgrapht.generate.GraphGeneratorTest.java:90, 38.46%>
		<org.jgrapht.generate.GraphGeneratorTest.java:91, 38.46%>
		<org.jgrapht.generate.GraphGeneratorTest.java:92, 23.08%>
	<org.jgrapht.generate.GraphGeneratorTest: void testHyperCubeGraphGenerator()>:
		<org.jgrapht.generate.GraphGeneratorTest.java:265, 50.00%>
		<org.jgrapht.generate.GraphGeneratorTest.java:266, 50.00%>
	<org.jgrapht.generate.GraphGeneratorTest: void testStarGraphGenerator()>:
		<org.jgrapht.generate.GraphGeneratorTest.java:287, 35.71%>
		<org.jgrapht.generate.GraphGeneratorTest.java:288, 35.71%>
		<org.jgrapht.generate.GraphGeneratorTest.java:289, 42.86%>
	<org.jgrapht.graph.DefaultDirectedGraphTest: void testGetAllEdges()>:
		<org.jgrapht.graph.DefaultDirectedGraphTest.java:130, 100.00%>
	<org.jgrapht.graph.SimpleDirectedGraphTest: void testEdgesOf()>:
		<org.jgrapht.graph.SimpleDirectedGraphTest.java:232, 46.67%>
		<org.jgrapht.graph.SimpleDirectedGraphTest.java:233, 60.00%>
		<org.jgrapht.graph.SimpleDirectedGraphTest.java:243, 20.00%>

Relevant Assertion clone sets (1):
Set (score: 0.50, ccsize: 3, packages: 1, classes: 1): 
	<org.jgrapht.alg.KSPExampleTest: void testFourReturnedPathsJGraphT()>:
		<org.jgrapht.alg.KSPExampleTest.java:60, 55.56%>
	<org.jgrapht.alg.KSPExampleTest: void testThreeReturnedPathsJGraphT()>:
		<org.jgrapht.alg.KSPExampleTest.java:72, 60.00%>
	<org.jgrapht.alg.KSPExampleTest: void testTwoReturnedPathsJGraphT()>:
		<org.jgrapht.alg.KSPExampleTest.java:84, 60.00%>
==============================================

[54] Set (editDistance: 1, isComplete: false, packages: 4, classes: 8): 
Centroid (size: 2): <org.jgrapht.graph.DefaultDirectedGraphTest: void testEdgesOf()>

Methods (14): 
	<org.jgrapht.alg.BiconnectivityInspectorTest: void testBiconnected()>:
		<org.jgrapht.alg.BiconnectivityInspectorTest.java:64, 30.00%>
		<org.jgrapht.alg.BiconnectivityInspectorTest.java:65, 50.00%>
		<org.jgrapht.alg.BiconnectivityInspectorTest.java:66, 50.00%>
	<org.jgrapht.alg.BronKerboschCliqueFinderTest: void testFindAll()>:
		<org.jgrapht.alg.BronKerboschCliqueFinderTest.java:143, 26.32%>
		<org.jgrapht.alg.BronKerboschCliqueFinderTest.java:175, 21.05%>
	<org.jgrapht.alg.BronKerboschCliqueFinderTest: void testFindBiggest()>:
		<org.jgrapht.alg.BronKerboschCliqueFinderTest.java:119, 41.67%>
		<org.jgrapht.alg.BronKerboschCliqueFinderTest.java:129, 58.33%>
	<org.jgrapht.alg.ChromaticNumberTest: void testChromaticNumber()>:
		<org.jgrapht.alg.ChromaticNumberTest.java:78, 18.75%>
		<org.jgrapht.alg.ChromaticNumberTest.java:83, 31.25%>
		<org.jgrapht.alg.ChromaticNumberTest.java:100, 18.75%>
	<org.jgrapht.alg.KSPExampleTest: void testFourReturnedPathsJGraphT()>:
		<org.jgrapht.alg.KSPExampleTest.java:60, 55.56%>
	<org.jgrapht.alg.KSPExampleTest: void testThreeReturnedPathsJGraphT()>:
		<org.jgrapht.alg.KSPExampleTest.java:72, 60.00%>
	<org.jgrapht.alg.KSPExampleTest: void testTwoReturnedPathsJGraphT()>:
		<org.jgrapht.alg.KSPExampleTest.java:84, 60.00%>
	<org.jgrapht.experimental.equivalence.EquivalenceGroupCreatorTest: void testOneComparator(org.jgrapht.experimental.equivalence.EquivalenceComparator,int)>:
		<org.jgrapht.experimental.equivalence.EquivalenceGroupCreatorTest.java:152, 23.53%>
		<org.jgrapht.experimental.equivalence.EquivalenceGroupCreatorTest.java:157, 41.18%>
	<org.jgrapht.generate.GraphGeneratorTest: void testCompleteGraphGenerator()>:
		<org.jgrapht.generate.GraphGeneratorTest.java:185, 62.50%>
	<org.jgrapht.generate.GraphGeneratorTest: void testEmptyGraphGenerator()>:
		<org.jgrapht.generate.GraphGeneratorTest.java:90, 38.46%>
		<org.jgrapht.generate.GraphGeneratorTest.java:91, 38.46%>
		<org.jgrapht.generate.GraphGeneratorTest.java:92, 23.08%>
	<org.jgrapht.generate.GraphGeneratorTest: void testStarGraphGenerator()>:
		<org.jgrapht.generate.GraphGeneratorTest.java:287, 35.71%>
		<org.jgrapht.generate.GraphGeneratorTest.java:288, 35.71%>
		<org.jgrapht.generate.GraphGeneratorTest.java:289, 42.86%>
	<org.jgrapht.graph.DefaultDirectedGraphTest: void testEdgesOf()>:
		<org.jgrapht.graph.DefaultDirectedGraphTest.java:117, 75.00%>
		<org.jgrapht.graph.DefaultDirectedGraphTest.java:118, 75.00%>
	<org.jgrapht.graph.DefaultDirectedGraphTest: void testGetAllEdges()>:
		<org.jgrapht.graph.DefaultDirectedGraphTest.java:130, 100.00%>
	<org.jgrapht.graph.SimpleDirectedGraphTest: void testEdgesOf()>:
		<org.jgrapht.graph.SimpleDirectedGraphTest.java:232, 46.67%>
		<org.jgrapht.graph.SimpleDirectedGraphTest.java:233, 60.00%>
		<org.jgrapht.graph.SimpleDirectedGraphTest.java:243, 20.00%>

Relevant Assertion clone sets (1):
Set (score: 0.50, ccsize: 3, packages: 1, classes: 1): 
	<org.jgrapht.alg.KSPExampleTest: void testFourReturnedPathsJGraphT()>:
		<org.jgrapht.alg.KSPExampleTest.java:60, 55.56%>
	<org.jgrapht.alg.KSPExampleTest: void testThreeReturnedPathsJGraphT()>:
		<org.jgrapht.alg.KSPExampleTest.java:72, 60.00%>
	<org.jgrapht.alg.KSPExampleTest: void testTwoReturnedPathsJGraphT()>:
		<org.jgrapht.alg.KSPExampleTest.java:84, 60.00%>
==============================================

[55] Set (editDistance: 1, isComplete: false, packages: 4, classes: 8): 
Centroid (size: 2): <org.jgrapht.graph.DefaultDirectedGraphTest: void testInDegreeOf()>

Methods (14): 
	<org.jgrapht.alg.BiconnectivityInspectorTest: void testBiconnected()>:
		<org.jgrapht.alg.BiconnectivityInspectorTest.java:64, 30.00%>
		<org.jgrapht.alg.BiconnectivityInspectorTest.java:65, 50.00%>
		<org.jgrapht.alg.BiconnectivityInspectorTest.java:66, 50.00%>
	<org.jgrapht.alg.BronKerboschCliqueFinderTest: void testFindAll()>:
		<org.jgrapht.alg.BronKerboschCliqueFinderTest.java:143, 26.32%>
		<org.jgrapht.alg.BronKerboschCliqueFinderTest.java:175, 21.05%>
	<org.jgrapht.alg.BronKerboschCliqueFinderTest: void testFindBiggest()>:
		<org.jgrapht.alg.BronKerboschCliqueFinderTest.java:119, 41.67%>
		<org.jgrapht.alg.BronKerboschCliqueFinderTest.java:129, 58.33%>
	<org.jgrapht.alg.ChromaticNumberTest: void testChromaticNumber()>:
		<org.jgrapht.alg.ChromaticNumberTest.java:78, 18.75%>
		<org.jgrapht.alg.ChromaticNumberTest.java:83, 31.25%>
		<org.jgrapht.alg.ChromaticNumberTest.java:100, 18.75%>
	<org.jgrapht.alg.KSPExampleTest: void testFourReturnedPathsJGraphT()>:
		<org.jgrapht.alg.KSPExampleTest.java:60, 55.56%>
	<org.jgrapht.alg.KSPExampleTest: void testThreeReturnedPathsJGraphT()>:
		<org.jgrapht.alg.KSPExampleTest.java:72, 60.00%>
	<org.jgrapht.alg.KSPExampleTest: void testTwoReturnedPathsJGraphT()>:
		<org.jgrapht.alg.KSPExampleTest.java:84, 60.00%>
	<org.jgrapht.experimental.equivalence.EquivalenceGroupCreatorTest: void testOneComparator(org.jgrapht.experimental.equivalence.EquivalenceComparator,int)>:
		<org.jgrapht.experimental.equivalence.EquivalenceGroupCreatorTest.java:152, 23.53%>
		<org.jgrapht.experimental.equivalence.EquivalenceGroupCreatorTest.java:157, 41.18%>
	<org.jgrapht.generate.GraphGeneratorTest: void testCompleteGraphGenerator()>:
		<org.jgrapht.generate.GraphGeneratorTest.java:185, 62.50%>
	<org.jgrapht.generate.GraphGeneratorTest: void testEmptyGraphGenerator()>:
		<org.jgrapht.generate.GraphGeneratorTest.java:90, 38.46%>
		<org.jgrapht.generate.GraphGeneratorTest.java:91, 38.46%>
		<org.jgrapht.generate.GraphGeneratorTest.java:92, 23.08%>
	<org.jgrapht.generate.GraphGeneratorTest: void testStarGraphGenerator()>:
		<org.jgrapht.generate.GraphGeneratorTest.java:287, 35.71%>
		<org.jgrapht.generate.GraphGeneratorTest.java:288, 35.71%>
		<org.jgrapht.generate.GraphGeneratorTest.java:289, 42.86%>
	<org.jgrapht.graph.DefaultDirectedGraphTest: void testGetAllEdges()>:
		<org.jgrapht.graph.DefaultDirectedGraphTest.java:130, 100.00%>
	<org.jgrapht.graph.DefaultDirectedGraphTest: void testInDegreeOf()>:
		<org.jgrapht.graph.DefaultDirectedGraphTest.java:141, 83.33%>
		<org.jgrapht.graph.DefaultDirectedGraphTest.java:142, 83.33%>
	<org.jgrapht.graph.SimpleDirectedGraphTest: void testEdgesOf()>:
		<org.jgrapht.graph.SimpleDirectedGraphTest.java:232, 46.67%>
		<org.jgrapht.graph.SimpleDirectedGraphTest.java:233, 60.00%>
		<org.jgrapht.graph.SimpleDirectedGraphTest.java:243, 20.00%>

Relevant Assertion clone sets (1):
Set (score: 0.50, ccsize: 3, packages: 1, classes: 1): 
	<org.jgrapht.alg.KSPExampleTest: void testFourReturnedPathsJGraphT()>:
		<org.jgrapht.alg.KSPExampleTest.java:60, 55.56%>
	<org.jgrapht.alg.KSPExampleTest: void testThreeReturnedPathsJGraphT()>:
		<org.jgrapht.alg.KSPExampleTest.java:72, 60.00%>
	<org.jgrapht.alg.KSPExampleTest: void testTwoReturnedPathsJGraphT()>:
		<org.jgrapht.alg.KSPExampleTest.java:84, 60.00%>
==============================================

[56] Set (editDistance: 1, isComplete: false, packages: 4, classes: 8): 
Centroid (size: 2): <org.jgrapht.graph.DefaultDirectedGraphTest: void testOutDegreeOf()>

Methods (14): 
	<org.jgrapht.alg.BiconnectivityInspectorTest: void testBiconnected()>:
		<org.jgrapht.alg.BiconnectivityInspectorTest.java:64, 30.00%>
		<org.jgrapht.alg.BiconnectivityInspectorTest.java:65, 50.00%>
		<org.jgrapht.alg.BiconnectivityInspectorTest.java:66, 50.00%>
	<org.jgrapht.alg.BronKerboschCliqueFinderTest: void testFindAll()>:
		<org.jgrapht.alg.BronKerboschCliqueFinderTest.java:143, 26.32%>
		<org.jgrapht.alg.BronKerboschCliqueFinderTest.java:175, 21.05%>
	<org.jgrapht.alg.BronKerboschCliqueFinderTest: void testFindBiggest()>:
		<org.jgrapht.alg.BronKerboschCliqueFinderTest.java:119, 41.67%>
		<org.jgrapht.alg.BronKerboschCliqueFinderTest.java:129, 58.33%>
	<org.jgrapht.alg.ChromaticNumberTest: void testChromaticNumber()>:
		<org.jgrapht.alg.ChromaticNumberTest.java:78, 18.75%>
		<org.jgrapht.alg.ChromaticNumberTest.java:83, 31.25%>
		<org.jgrapht.alg.ChromaticNumberTest.java:100, 18.75%>
	<org.jgrapht.alg.KSPExampleTest: void testFourReturnedPathsJGraphT()>:
		<org.jgrapht.alg.KSPExampleTest.java:60, 55.56%>
	<org.jgrapht.alg.KSPExampleTest: void testThreeReturnedPathsJGraphT()>:
		<org.jgrapht.alg.KSPExampleTest.java:72, 60.00%>
	<org.jgrapht.alg.KSPExampleTest: void testTwoReturnedPathsJGraphT()>:
		<org.jgrapht.alg.KSPExampleTest.java:84, 60.00%>
	<org.jgrapht.experimental.equivalence.EquivalenceGroupCreatorTest: void testOneComparator(org.jgrapht.experimental.equivalence.EquivalenceComparator,int)>:
		<org.jgrapht.experimental.equivalence.EquivalenceGroupCreatorTest.java:152, 23.53%>
		<org.jgrapht.experimental.equivalence.EquivalenceGroupCreatorTest.java:157, 41.18%>
	<org.jgrapht.generate.GraphGeneratorTest: void testCompleteGraphGenerator()>:
		<org.jgrapht.generate.GraphGeneratorTest.java:185, 62.50%>
	<org.jgrapht.generate.GraphGeneratorTest: void testEmptyGraphGenerator()>:
		<org.jgrapht.generate.GraphGeneratorTest.java:90, 38.46%>
		<org.jgrapht.generate.GraphGeneratorTest.java:91, 38.46%>
		<org.jgrapht.generate.GraphGeneratorTest.java:92, 23.08%>
	<org.jgrapht.generate.GraphGeneratorTest: void testStarGraphGenerator()>:
		<org.jgrapht.generate.GraphGeneratorTest.java:287, 35.71%>
		<org.jgrapht.generate.GraphGeneratorTest.java:288, 35.71%>
		<org.jgrapht.generate.GraphGeneratorTest.java:289, 42.86%>
	<org.jgrapht.graph.DefaultDirectedGraphTest: void testGetAllEdges()>:
		<org.jgrapht.graph.DefaultDirectedGraphTest.java:130, 100.00%>
	<org.jgrapht.graph.DefaultDirectedGraphTest: void testOutDegreeOf()>:
		<org.jgrapht.graph.DefaultDirectedGraphTest.java:153, 83.33%>
		<org.jgrapht.graph.DefaultDirectedGraphTest.java:154, 83.33%>
	<org.jgrapht.graph.SimpleDirectedGraphTest: void testEdgesOf()>:
		<org.jgrapht.graph.SimpleDirectedGraphTest.java:232, 46.67%>
		<org.jgrapht.graph.SimpleDirectedGraphTest.java:233, 60.00%>
		<org.jgrapht.graph.SimpleDirectedGraphTest.java:243, 20.00%>

Relevant Assertion clone sets (1):
Set (score: 0.50, ccsize: 3, packages: 1, classes: 1): 
	<org.jgrapht.alg.KSPExampleTest: void testFourReturnedPathsJGraphT()>:
		<org.jgrapht.alg.KSPExampleTest.java:60, 55.56%>
	<org.jgrapht.alg.KSPExampleTest: void testThreeReturnedPathsJGraphT()>:
		<org.jgrapht.alg.KSPExampleTest.java:72, 60.00%>
	<org.jgrapht.alg.KSPExampleTest: void testTwoReturnedPathsJGraphT()>:
		<org.jgrapht.alg.KSPExampleTest.java:84, 60.00%>
==============================================

[57] Set (editDistance: 1, isComplete: false, packages: 4, classes: 9): 
Centroid (size: 2): <org.jgrapht.graph.GenericGraphsTest: void testEqualButNotSameVertex()>

Methods (14): 
	<org.jgrapht.alg.BiconnectivityInspectorTest: void testBiconnected()>:
		<org.jgrapht.alg.BiconnectivityInspectorTest.java:64, 30.00%>
		<org.jgrapht.alg.BiconnectivityInspectorTest.java:65, 50.00%>
		<org.jgrapht.alg.BiconnectivityInspectorTest.java:66, 50.00%>
	<org.jgrapht.alg.BronKerboschCliqueFinderTest: void testFindAll()>:
		<org.jgrapht.alg.BronKerboschCliqueFinderTest.java:143, 26.32%>
		<org.jgrapht.alg.BronKerboschCliqueFinderTest.java:175, 21.05%>
	<org.jgrapht.alg.BronKerboschCliqueFinderTest: void testFindBiggest()>:
		<org.jgrapht.alg.BronKerboschCliqueFinderTest.java:119, 41.67%>
		<org.jgrapht.alg.BronKerboschCliqueFinderTest.java:129, 58.33%>
	<org.jgrapht.alg.ChromaticNumberTest: void testChromaticNumber()>:
		<org.jgrapht.alg.ChromaticNumberTest.java:78, 18.75%>
		<org.jgrapht.alg.ChromaticNumberTest.java:83, 31.25%>
		<org.jgrapht.alg.ChromaticNumberTest.java:100, 18.75%>
	<org.jgrapht.alg.KSPExampleTest: void testFourReturnedPathsJGraphT()>:
		<org.jgrapht.alg.KSPExampleTest.java:60, 55.56%>
	<org.jgrapht.alg.KSPExampleTest: void testThreeReturnedPathsJGraphT()>:
		<org.jgrapht.alg.KSPExampleTest.java:72, 60.00%>
	<org.jgrapht.alg.KSPExampleTest: void testTwoReturnedPathsJGraphT()>:
		<org.jgrapht.alg.KSPExampleTest.java:84, 60.00%>
	<org.jgrapht.experimental.equivalence.EquivalenceGroupCreatorTest: void testOneComparator(org.jgrapht.experimental.equivalence.EquivalenceComparator,int)>:
		<org.jgrapht.experimental.equivalence.EquivalenceGroupCreatorTest.java:152, 23.53%>
		<org.jgrapht.experimental.equivalence.EquivalenceGroupCreatorTest.java:157, 41.18%>
	<org.jgrapht.generate.GraphGeneratorTest: void testCompleteGraphGenerator()>:
		<org.jgrapht.generate.GraphGeneratorTest.java:185, 62.50%>
	<org.jgrapht.generate.GraphGeneratorTest: void testEmptyGraphGenerator()>:
		<org.jgrapht.generate.GraphGeneratorTest.java:90, 38.46%>
		<org.jgrapht.generate.GraphGeneratorTest.java:91, 38.46%>
		<org.jgrapht.generate.GraphGeneratorTest.java:92, 23.08%>
	<org.jgrapht.generate.GraphGeneratorTest: void testStarGraphGenerator()>:
		<org.jgrapht.generate.GraphGeneratorTest.java:287, 35.71%>
		<org.jgrapht.generate.GraphGeneratorTest.java:288, 35.71%>
		<org.jgrapht.generate.GraphGeneratorTest.java:289, 42.86%>
	<org.jgrapht.graph.DefaultDirectedGraphTest: void testGetAllEdges()>:
		<org.jgrapht.graph.DefaultDirectedGraphTest.java:130, 100.00%>
	<org.jgrapht.graph.GenericGraphsTest: void testEqualButNotSameVertex()>:
		<org.jgrapht.graph.GenericGraphsTest.java:145, 40.00%>
		<org.jgrapht.graph.GenericGraphsTest.java:146, 40.00%>
	<org.jgrapht.graph.SimpleDirectedGraphTest: void testEdgesOf()>:
		<org.jgrapht.graph.SimpleDirectedGraphTest.java:232, 46.67%>
		<org.jgrapht.graph.SimpleDirectedGraphTest.java:233, 60.00%>
		<org.jgrapht.graph.SimpleDirectedGraphTest.java:243, 20.00%>

Relevant Assertion clone sets (1):
Set (score: 0.50, ccsize: 3, packages: 1, classes: 1): 
	<org.jgrapht.alg.KSPExampleTest: void testFourReturnedPathsJGraphT()>:
		<org.jgrapht.alg.KSPExampleTest.java:60, 55.56%>
	<org.jgrapht.alg.KSPExampleTest: void testThreeReturnedPathsJGraphT()>:
		<org.jgrapht.alg.KSPExampleTest.java:72, 60.00%>
	<org.jgrapht.alg.KSPExampleTest: void testTwoReturnedPathsJGraphT()>:
		<org.jgrapht.alg.KSPExampleTest.java:84, 60.00%>
==============================================

[58] Set (editDistance: 1, isComplete: false, packages: 4, classes: 10): 
Centroid (size: 2): <org.jgrapht.traverse.AbstractGraphIteratorTest: void testDirectedGraph()>

Methods (13): 
	<org.jgrapht.experimental.GraphReaderTest: void testGraphReader()>:
		<org.jgrapht.experimental.GraphReaderTest.java:88, 27.27%>
	<org.jgrapht.experimental.GraphReaderTest: void testGraphReaderWeighted()>:
		<org.jgrapht.experimental.GraphReaderTest.java:116, 23.08%>
	<org.jgrapht.ext.DOTExporterTest: void testUndirected()>:
		<org.jgrapht.ext.DOTExporterTest.java:110, 41.67%>
	<org.jgrapht.ext.GmlExporterTest: void testUndirected()>:
		<org.jgrapht.ext.GmlExporterTest.java:117, 62.50%>
	<org.jgrapht.ext.MatrixExporterTest: void testAdjacencyDirected()>:
		<org.jgrapht.ext.MatrixExporterTest.java:149, 62.50%>
	<org.jgrapht.ext.MatrixExporterTest: void testAdjacencyUndirected()>:
		<org.jgrapht.ext.MatrixExporterTest.java:133, 62.50%>
	<org.jgrapht.graph.AsUndirectedGraphTest: void testAddEdge()>:
		<org.jgrapht.graph.AsUndirectedGraphTest.java:89, 100.00%>
	<org.jgrapht.graph.DefaultDirectedGraphTest: void testVertexOrderDeterminism()>:
		<org.jgrapht.graph.DefaultDirectedGraphTest.java:165, 76.92%>
		<org.jgrapht.graph.DefaultDirectedGraphTest.java:166, 76.92%>
		<org.jgrapht.graph.DefaultDirectedGraphTest.java:167, 76.92%>
	<org.jgrapht.graph.GenericGraphsTest: void testAlissaHacker()>:
		<org.jgrapht.graph.GenericGraphsTest.java:134, 83.33%>
	<org.jgrapht.traverse.AbstractGraphIteratorTest: void testDirectedGraph()>:
		<org.jgrapht.traverse.AbstractGraphIteratorTest.java:86, 47.06%>
		<org.jgrapht.traverse.AbstractGraphIteratorTest.java:88, 52.94%>
	<org.jgrapht.traverse.ClosestFirstIteratorTest: void testNoStart()>:
		<org.jgrapht.traverse.ClosestFirstIteratorTest.java:103, 53.85%>
	<org.jgrapht.traverse.ClosestFirstIteratorTest: void testRadius()>:
		<org.jgrapht.traverse.ClosestFirstIteratorTest.java:80, 53.85%>
	<org.jgrapht.traverse.DepthFirstIteratorTest: void testBug1169182()>:
		<org.jgrapht.traverse.DepthFirstIteratorTest.java:149, 16.00%>

Relevant Assertion clone sets (2):
Set (score: 1.00, ccsize: 2, packages: 1, classes: 1): 
	<org.jgrapht.experimental.GraphReaderTest: void testGraphReader()>:
		<org.jgrapht.experimental.GraphReaderTest.java:88, 27.27%>
	<org.jgrapht.experimental.GraphReaderTest: void testGraphReaderWeighted()>:
		<org.jgrapht.experimental.GraphReaderTest.java:116, 23.08%>
Set (score: 0.67, ccsize: 2, packages: 1, classes: 2): 
	<org.jgrapht.ext.DOTExporterTest: void testUndirected()>:
		<org.jgrapht.ext.DOTExporterTest.java:110, 41.67%>
	<org.jgrapht.ext.GmlExporterTest: void testUndirected()>:
		<org.jgrapht.ext.GmlExporterTest.java:117, 62.50%>
==============================================

[59] Set (editDistance: 1, isComplete: false, packages: 4, classes: 10): 
Centroid (size: 2): <org.jgrapht.traverse.TopologicalOrderIteratorTest: void testRecipe()>

Methods (13): 
	<org.jgrapht.experimental.GraphReaderTest: void testGraphReader()>:
		<org.jgrapht.experimental.GraphReaderTest.java:88, 27.27%>
	<org.jgrapht.experimental.GraphReaderTest: void testGraphReaderWeighted()>:
		<org.jgrapht.experimental.GraphReaderTest.java:116, 23.08%>
	<org.jgrapht.ext.DOTExporterTest: void testUndirected()>:
		<org.jgrapht.ext.DOTExporterTest.java:110, 41.67%>
	<org.jgrapht.ext.GmlExporterTest: void testUndirected()>:
		<org.jgrapht.ext.GmlExporterTest.java:117, 62.50%>
	<org.jgrapht.ext.MatrixExporterTest: void testAdjacencyDirected()>:
		<org.jgrapht.ext.MatrixExporterTest.java:149, 62.50%>
	<org.jgrapht.ext.MatrixExporterTest: void testAdjacencyUndirected()>:
		<org.jgrapht.ext.MatrixExporterTest.java:133, 62.50%>
	<org.jgrapht.graph.AsUndirectedGraphTest: void testAddEdge()>:
		<org.jgrapht.graph.AsUndirectedGraphTest.java:89, 100.00%>
	<org.jgrapht.graph.DefaultDirectedGraphTest: void testVertexOrderDeterminism()>:
		<org.jgrapht.graph.DefaultDirectedGraphTest.java:165, 76.92%>
		<org.jgrapht.graph.DefaultDirectedGraphTest.java:166, 76.92%>
		<org.jgrapht.graph.DefaultDirectedGraphTest.java:167, 76.92%>
	<org.jgrapht.graph.GenericGraphsTest: void testAlissaHacker()>:
		<org.jgrapht.graph.GenericGraphsTest.java:134, 83.33%>
	<org.jgrapht.traverse.ClosestFirstIteratorTest: void testNoStart()>:
		<org.jgrapht.traverse.ClosestFirstIteratorTest.java:103, 53.85%>
	<org.jgrapht.traverse.ClosestFirstIteratorTest: void testRadius()>:
		<org.jgrapht.traverse.ClosestFirstIteratorTest.java:80, 53.85%>
	<org.jgrapht.traverse.DepthFirstIteratorTest: void testBug1169182()>:
		<org.jgrapht.traverse.DepthFirstIteratorTest.java:149, 16.00%>
	<org.jgrapht.traverse.TopologicalOrderIteratorTest: void testRecipe()>:
		<org.jgrapht.traverse.TopologicalOrderIteratorTest.java:109, 9.62%>
		<org.jgrapht.traverse.TopologicalOrderIteratorTest.java:121, 9.62%>

Relevant Assertion clone sets (2):
Set (score: 1.00, ccsize: 2, packages: 1, classes: 1): 
	<org.jgrapht.experimental.GraphReaderTest: void testGraphReader()>:
		<org.jgrapht.experimental.GraphReaderTest.java:88, 27.27%>
	<org.jgrapht.experimental.GraphReaderTest: void testGraphReaderWeighted()>:
		<org.jgrapht.experimental.GraphReaderTest.java:116, 23.08%>
Set (score: 0.67, ccsize: 2, packages: 1, classes: 2): 
	<org.jgrapht.ext.DOTExporterTest: void testUndirected()>:
		<org.jgrapht.ext.DOTExporterTest.java:110, 41.67%>
	<org.jgrapht.ext.GmlExporterTest: void testUndirected()>:
		<org.jgrapht.ext.GmlExporterTest.java:117, 62.50%>
==============================================

[60] Set (editDistance: 1, isComplete: false, packages: 5, classes: 9): 
Centroid (size: 2): <org.jgrapht.util.FibonacciHeapTest: void testGrowReplaceShrink()>

Methods (14): 
	<org.jgrapht.EnhancedTestCase: void assertFalse()>:
		<org.jgrapht.EnhancedTestCase.java:79, 100.00%>
	<org.jgrapht.EnhancedTestCase: void assertTrue()>:
		<org.jgrapht.EnhancedTestCase.java:87, 100.00%>
	<org.jgrapht.alg.FloydWarshallShortestPathsTest: void testCompareWithDijkstra()>:
		<org.jgrapht.alg.FloydWarshallShortestPathsTest.java:96, 7.41%>
		<org.jgrapht.alg.FloydWarshallShortestPathsTest.java:121, 7.41%>
	<org.jgrapht.alg.HamiltonianCycleTest: void testHamiltonianCycle()>:
		<org.jgrapht.alg.HamiltonianCycleTest.java:79, 33.33%>
		<org.jgrapht.alg.HamiltonianCycleTest.java:89, 27.78%>
	<org.jgrapht.alg.KShortestPathCostTest: void verifyShortestPathsInIncreasingOrderOfWeight(org.jgrapht.Graph)>:
		<org.jgrapht.alg.KShortestPathCostTest.java:222, 30.77%>
		<org.jgrapht.alg.KShortestPathCostTest.java:225, 30.77%>
	<org.jgrapht.alg.KShortestPathCostTest: void verifyWeightsConsistency(java.util.List,java.util.List)>:
		<org.jgrapht.alg.KShortestPathCostTest.java:294, 53.85%>
	<org.jgrapht.alg.StoerWagnerMinimumCutTest: void testMinCut14()>:
		<org.jgrapht.alg.StoerWagnerMinimumCutTest.java:97, 16.67%>
	<org.jgrapht.alg.StoerWagnerMinimumCutTest: void testMinCutDisconnected()>:
		<org.jgrapht.alg.StoerWagnerMinimumCutTest.java:124, 22.73%>
	<org.jgrapht.alg.VertexCoversTest: void testFind2ApproximationCover()>:
		<org.jgrapht.alg.VertexCoversTest.java:74, 60.00%>
	<org.jgrapht.alg.VertexCoversTest: void testFindGreedyCover()>:
		<org.jgrapht.alg.VertexCoversTest.java:89, 50.00%>
	<org.jgrapht.experimental.isomorphism.IsomorphismInspectorTest: void assertIsomorphic(org.jgrapht.Graph[],boolean,org.jgrapht.experimental.equivalence.EquivalenceComparator,org.jgrapht.experimental.equivalence.EquivalenceComparator)>:
		<org.jgrapht.experimental.isomorphism.IsomorphismInspectorTest.java:138, 28.57%>
		<org.jgrapht.experimental.isomorphism.IsomorphismInspectorTest.java:140, 28.57%>
	<org.jgrapht.generate.RandomGraphGeneratorTest: void testGenerateDirectedGraph()>:
		<org.jgrapht.generate.RandomGraphGeneratorTest.java:70, 20.00%>
	<org.jgrapht.generate.RandomGraphGeneratorTest: void testGenerateListenableUndirectedGraph()>:
		<org.jgrapht.generate.RandomGraphGeneratorTest.java:89, 20.00%>
	<org.jgrapht.util.FibonacciHeapTest: void testGrowReplaceShrink()>:
		<org.jgrapht.util.FibonacciHeapTest.java:88, 17.65%>
		<org.jgrapht.util.FibonacciHeapTest.java:91, 17.65%>

Relevant Assertion clone sets (1):
Set (score: 1.00, ccsize: 2, packages: 1, classes: 1): 
	<org.jgrapht.alg.VertexCoversTest: void testFind2ApproximationCover()>:
		<org.jgrapht.alg.VertexCoversTest.java:74, 60.00%>
	<org.jgrapht.alg.VertexCoversTest: void testFindGreedyCover()>:
		<org.jgrapht.alg.VertexCoversTest.java:89, 50.00%>
==============================================

[61] Set (editDistance: 1, isComplete: false, packages: 2, classes: 4): 
Centroid (size: 5): <org.jgrapht.alg.KShortestPathCostTest: void testPicture1Graph()>

Methods (5): 
	<org.jgrapht.alg.KShortestPathCostTest: void testPicture1Graph()>:
		<org.jgrapht.alg.KShortestPathCostTest.java:97, 18.42%>
		<org.jgrapht.alg.KShortestPathCostTest.java:106, 10.53%>
		<org.jgrapht.alg.KShortestPathCostTest.java:111, 18.42%>
		<org.jgrapht.alg.KShortestPathCostTest.java:120, 10.53%>
		<org.jgrapht.alg.KShortestPathCostTest.java:131, 21.05%>
	<org.jgrapht.alg.ShortestPathTestCase: void testPathBetween()>:
		<org.jgrapht.alg.ShortestPathTestCase.java:86, 21.74%>
		<org.jgrapht.alg.ShortestPathTestCase.java:89, 26.09%>
		<org.jgrapht.alg.ShortestPathTestCase.java:96, 34.78%>
		<org.jgrapht.alg.ShortestPathTestCase.java:104, 47.83%>
	<org.jgrapht.graph.AsUnweightedGraphTest: void checkView(org.jgrapht.WeightedGraph,org.jgrapht.Graph)>:
		<org.jgrapht.graph.AsUnweightedGraphTest.java:120, 17.39%>
		<org.jgrapht.graph.AsUnweightedGraphTest.java:126, 17.39%>
		<org.jgrapht.graph.AsUnweightedGraphTest.java:132, 17.39%>
		<org.jgrapht.graph.AsUnweightedGraphTest.java:136, 17.39%>
	<org.jgrapht.graph.SubgraphTest: void testInducedSubgraphListener()>:
		<org.jgrapht.graph.SubgraphTest.java:86, 50.00%>
		<org.jgrapht.graph.SubgraphTest.java:87, 50.00%>
		<org.jgrapht.graph.SubgraphTest.java:91, 50.00%>
		<org.jgrapht.graph.SubgraphTest.java:92, 50.00%>
	<org.jgrapht.graph.SubgraphTest: void testSubgraphListener()>:
		<org.jgrapht.graph.SubgraphTest.java:139, 43.75%>
		<org.jgrapht.graph.SubgraphTest.java:140, 43.75%>
		<org.jgrapht.graph.SubgraphTest.java:145, 31.25%>
		<org.jgrapht.graph.SubgraphTest.java:146, 43.75%>

Relevant Assertion clone sets (0):
==============================================

[62] Set (editDistance: 1, isComplete: false, packages: 2, classes: 2): 
Centroid (size: 5): <org.jgrapht.alg.KShortestPathKValuesTest: void testMaxSizeValueCompleteGraph6()>

Methods (2): 
	<org.jgrapht.alg.KShortestPathKValuesTest: void testMaxSizeValueCompleteGraph6()>:
		<org.jgrapht.alg.KShortestPathKValuesTest.java:86, 31.58%>
		<org.jgrapht.alg.KShortestPathKValuesTest.java:87, 31.58%>
		<org.jgrapht.alg.KShortestPathKValuesTest.java:88, 31.58%>
		<org.jgrapht.alg.KShortestPathKValuesTest.java:89, 31.58%>
		<org.jgrapht.alg.KShortestPathKValuesTest.java:90, 31.58%>
	<org.jgrapht.graph.AsUndirectedGraphTest: void testDegreeOf()>:
		<org.jgrapht.graph.AsUndirectedGraphTest.java:111, 46.15%>
		<org.jgrapht.graph.AsUndirectedGraphTest.java:112, 61.54%>
		<org.jgrapht.graph.AsUndirectedGraphTest.java:113, 76.92%>
		<org.jgrapht.graph.AsUndirectedGraphTest.java:114, 92.31%>

Relevant Assertion clone sets (0):
==============================================

[63] Set (editDistance: 1, isComplete: false, packages: 2, classes: 3): 
Centroid (size: 4): <org.jgrapht.alg.ShortestPathTestCase: void testPathBetween()>

Methods (3): 
	<org.jgrapht.alg.KShortestPathCostTest: void testPicture1Graph()>:
		<org.jgrapht.alg.KShortestPathCostTest.java:97, 18.42%>
		<org.jgrapht.alg.KShortestPathCostTest.java:106, 10.53%>
		<org.jgrapht.alg.KShortestPathCostTest.java:111, 18.42%>
		<org.jgrapht.alg.KShortestPathCostTest.java:120, 10.53%>
		<org.jgrapht.alg.KShortestPathCostTest.java:131, 21.05%>
	<org.jgrapht.alg.ShortestPathTestCase: void testPathBetween()>:
		<org.jgrapht.alg.ShortestPathTestCase.java:86, 21.74%>
		<org.jgrapht.alg.ShortestPathTestCase.java:89, 26.09%>
		<org.jgrapht.alg.ShortestPathTestCase.java:96, 34.78%>
		<org.jgrapht.alg.ShortestPathTestCase.java:104, 47.83%>
	<org.jgrapht.graph.AsUndirectedGraphTest: void testGetEdge()>:
		<org.jgrapht.graph.AsUndirectedGraphTest.java:137, 44.00%>
		<org.jgrapht.graph.AsUndirectedGraphTest.java:140, 68.00%>
		<org.jgrapht.graph.AsUndirectedGraphTest.java:144, 92.00%>

Relevant Assertion clone sets (0):
==============================================

[64] Set (editDistance: 1, isComplete: false, packages: 2, classes: 4): 
Centroid (size: 4): <org.jgrapht.graph.AsUndirectedGraphTest: void testDegreeOf()>

Methods (4): 
	<org.jgrapht.alg.ChromaticNumberTest: void testChromaticNumber()>:
		<org.jgrapht.alg.ChromaticNumberTest.java:78, 18.75%>
		<org.jgrapht.alg.ChromaticNumberTest.java:83, 31.25%>
		<org.jgrapht.alg.ChromaticNumberTest.java:100, 18.75%>
	<org.jgrapht.alg.KShortestPathKValuesTest: void testMaxSizeValueCompleteGraph6()>:
		<org.jgrapht.alg.KShortestPathKValuesTest.java:86, 31.58%>
		<org.jgrapht.alg.KShortestPathKValuesTest.java:87, 31.58%>
		<org.jgrapht.alg.KShortestPathKValuesTest.java:88, 31.58%>
		<org.jgrapht.alg.KShortestPathKValuesTest.java:89, 31.58%>
		<org.jgrapht.alg.KShortestPathKValuesTest.java:90, 31.58%>
	<org.jgrapht.graph.AsUndirectedGraphTest: void testDegreeOf()>:
		<org.jgrapht.graph.AsUndirectedGraphTest.java:111, 46.15%>
		<org.jgrapht.graph.AsUndirectedGraphTest.java:112, 61.54%>
		<org.jgrapht.graph.AsUndirectedGraphTest.java:113, 76.92%>
		<org.jgrapht.graph.AsUndirectedGraphTest.java:114, 92.31%>
	<org.jgrapht.graph.SimpleDirectedGraphTest: void testEdgesOf()>:
		<org.jgrapht.graph.SimpleDirectedGraphTest.java:232, 46.67%>
		<org.jgrapht.graph.SimpleDirectedGraphTest.java:233, 60.00%>
		<org.jgrapht.graph.SimpleDirectedGraphTest.java:243, 20.00%>

Relevant Assertion clone sets (0):
==============================================

[65] Set (editDistance: 1, isComplete: false, packages: 2, classes: 3): 
Centroid (size: 4): <org.jgrapht.graph.AsUnweightedGraphTest: void checkView(org.jgrapht.WeightedGraph,org.jgrapht.Graph)>

Methods (3): 
	<org.jgrapht.alg.KShortestPathCostTest: void testPicture1Graph()>:
		<org.jgrapht.alg.KShortestPathCostTest.java:97, 18.42%>
		<org.jgrapht.alg.KShortestPathCostTest.java:106, 10.53%>
		<org.jgrapht.alg.KShortestPathCostTest.java:111, 18.42%>
		<org.jgrapht.alg.KShortestPathCostTest.java:120, 10.53%>
		<org.jgrapht.alg.KShortestPathCostTest.java:131, 21.05%>
	<org.jgrapht.graph.AsUndirectedGraphTest: void testGetEdge()>:
		<org.jgrapht.graph.AsUndirectedGraphTest.java:137, 44.00%>
		<org.jgrapht.graph.AsUndirectedGraphTest.java:140, 68.00%>
		<org.jgrapht.graph.AsUndirectedGraphTest.java:144, 92.00%>
	<org.jgrapht.graph.AsUnweightedGraphTest: void checkView(org.jgrapht.WeightedGraph,org.jgrapht.Graph)>:
		<org.jgrapht.graph.AsUnweightedGraphTest.java:120, 17.39%>
		<org.jgrapht.graph.AsUnweightedGraphTest.java:126, 17.39%>
		<org.jgrapht.graph.AsUnweightedGraphTest.java:132, 17.39%>
		<org.jgrapht.graph.AsUnweightedGraphTest.java:136, 17.39%>

Relevant Assertion clone sets (0):
==============================================

[66] Set (editDistance: 1, isComplete: false, packages: 2, classes: 3): 
Centroid (size: 4): <org.jgrapht.graph.SubgraphTest: void testInducedSubgraphListener()>

Methods (3): 
	<org.jgrapht.alg.KShortestPathCostTest: void testPicture1Graph()>:
		<org.jgrapht.alg.KShortestPathCostTest.java:97, 18.42%>
		<org.jgrapht.alg.KShortestPathCostTest.java:106, 10.53%>
		<org.jgrapht.alg.KShortestPathCostTest.java:111, 18.42%>
		<org.jgrapht.alg.KShortestPathCostTest.java:120, 10.53%>
		<org.jgrapht.alg.KShortestPathCostTest.java:131, 21.05%>
	<org.jgrapht.graph.AsUndirectedGraphTest: void testGetEdge()>:
		<org.jgrapht.graph.AsUndirectedGraphTest.java:137, 44.00%>
		<org.jgrapht.graph.AsUndirectedGraphTest.java:140, 68.00%>
		<org.jgrapht.graph.AsUndirectedGraphTest.java:144, 92.00%>
	<org.jgrapht.graph.SubgraphTest: void testInducedSubgraphListener()>:
		<org.jgrapht.graph.SubgraphTest.java:86, 50.00%>
		<org.jgrapht.graph.SubgraphTest.java:87, 50.00%>
		<org.jgrapht.graph.SubgraphTest.java:91, 50.00%>
		<org.jgrapht.graph.SubgraphTest.java:92, 50.00%>

Relevant Assertion clone sets (0):
==============================================

[67] Set (editDistance: 1, isComplete: false, packages: 2, classes: 3): 
Centroid (size: 4): <org.jgrapht.graph.SubgraphTest: void testSubgraphListener()>

Methods (3): 
	<org.jgrapht.alg.KShortestPathCostTest: void testPicture1Graph()>:
		<org.jgrapht.alg.KShortestPathCostTest.java:97, 18.42%>
		<org.jgrapht.alg.KShortestPathCostTest.java:106, 10.53%>
		<org.jgrapht.alg.KShortestPathCostTest.java:111, 18.42%>
		<org.jgrapht.alg.KShortestPathCostTest.java:120, 10.53%>
		<org.jgrapht.alg.KShortestPathCostTest.java:131, 21.05%>
	<org.jgrapht.graph.AsUndirectedGraphTest: void testGetEdge()>:
		<org.jgrapht.graph.AsUndirectedGraphTest.java:137, 44.00%>
		<org.jgrapht.graph.AsUndirectedGraphTest.java:140, 68.00%>
		<org.jgrapht.graph.AsUndirectedGraphTest.java:144, 92.00%>
	<org.jgrapht.graph.SubgraphTest: void testSubgraphListener()>:
		<org.jgrapht.graph.SubgraphTest.java:139, 43.75%>
		<org.jgrapht.graph.SubgraphTest.java:140, 43.75%>
		<org.jgrapht.graph.SubgraphTest.java:145, 31.25%>
		<org.jgrapht.graph.SubgraphTest.java:146, 43.75%>

Relevant Assertion clone sets (0):
==============================================

[68] Set (editDistance: 1, isComplete: false, packages: 2, classes: 5): 
Centroid (size: 3): <org.jgrapht.alg.ConnectivityInspectorTest: void testStronglyConnected1()>

Methods (5): 
	<org.jgrapht.alg.BellmanFordShortestPathTest: void testWithNegativeEdges()>:
		<org.jgrapht.alg.BellmanFordShortestPathTest.java:120, 45.45%>
		<org.jgrapht.alg.BellmanFordShortestPathTest.java:127, 63.64%>
	<org.jgrapht.alg.BlockCutpointGraphTest: void testGetBlock(org.jgrapht.alg.BlockCutpointGraph)>:
		<org.jgrapht.alg.BlockCutpointGraphTest.java:88, 33.33%>
		<org.jgrapht.alg.BlockCutpointGraphTest.java:94, 19.05%>
	<org.jgrapht.alg.ConnectivityInspectorTest: void testStronglyConnected1()>:
		<org.jgrapht.alg.ConnectivityInspectorTest.java:211, 16.00%>
		<org.jgrapht.alg.ConnectivityInspectorTest.java:222, 12.00%>
		<org.jgrapht.alg.ConnectivityInspectorTest.java:225, 16.00%>
	<org.jgrapht.alg.KruskalMinimumSpanningTreeTest: void testMinimumSpanningTree()>:
		<org.jgrapht.alg.KruskalMinimumSpanningTreeTest.java:80, 19.05%>
		<org.jgrapht.alg.KruskalMinimumSpanningTreeTest.java:84, 38.10%>
	<org.jgrapht.graph.AsUndirectedGraphTest: void testGetEdge()>:
		<org.jgrapht.graph.AsUndirectedGraphTest.java:137, 44.00%>
		<org.jgrapht.graph.AsUndirectedGraphTest.java:140, 68.00%>
		<org.jgrapht.graph.AsUndirectedGraphTest.java:144, 92.00%>

Relevant Assertion clone sets (0):
==============================================

[69] Set (editDistance: 1, isComplete: false, packages: 2, classes: 5): 
Centroid (size: 3): <org.jgrapht.alg.ConnectivityInspectorTest: void testStronglyConnected2()>

Methods (5): 
	<org.jgrapht.alg.BellmanFordShortestPathTest: void testWithNegativeEdges()>:
		<org.jgrapht.alg.BellmanFordShortestPathTest.java:120, 45.45%>
		<org.jgrapht.alg.BellmanFordShortestPathTest.java:127, 63.64%>
	<org.jgrapht.alg.BlockCutpointGraphTest: void testGetBlock(org.jgrapht.alg.BlockCutpointGraph)>:
		<org.jgrapht.alg.BlockCutpointGraphTest.java:88, 33.33%>
		<org.jgrapht.alg.BlockCutpointGraphTest.java:94, 19.05%>
	<org.jgrapht.alg.ConnectivityInspectorTest: void testStronglyConnected2()>:
		<org.jgrapht.alg.ConnectivityInspectorTest.java:268, 16.00%>
		<org.jgrapht.alg.ConnectivityInspectorTest.java:279, 12.00%>
		<org.jgrapht.alg.ConnectivityInspectorTest.java:282, 16.00%>
	<org.jgrapht.alg.KruskalMinimumSpanningTreeTest: void testMinimumSpanningTree()>:
		<org.jgrapht.alg.KruskalMinimumSpanningTreeTest.java:80, 19.05%>
		<org.jgrapht.alg.KruskalMinimumSpanningTreeTest.java:84, 38.10%>
	<org.jgrapht.graph.AsUndirectedGraphTest: void testGetEdge()>:
		<org.jgrapht.graph.AsUndirectedGraphTest.java:137, 44.00%>
		<org.jgrapht.graph.AsUndirectedGraphTest.java:140, 68.00%>
		<org.jgrapht.graph.AsUndirectedGraphTest.java:144, 92.00%>

Relevant Assertion clone sets (0):
==============================================

[70] Set (editDistance: 1, isComplete: false, packages: 2, classes: 5): 
Centroid (size: 3): <org.jgrapht.alg.ConnectivityInspectorTest: void testStronglyConnected3()>

Methods (5): 
	<org.jgrapht.alg.BellmanFordShortestPathTest: void testWithNegativeEdges()>:
		<org.jgrapht.alg.BellmanFordShortestPathTest.java:120, 45.45%>
		<org.jgrapht.alg.BellmanFordShortestPathTest.java:127, 63.64%>
	<org.jgrapht.alg.BlockCutpointGraphTest: void testGetBlock(org.jgrapht.alg.BlockCutpointGraph)>:
		<org.jgrapht.alg.BlockCutpointGraphTest.java:88, 33.33%>
		<org.jgrapht.alg.BlockCutpointGraphTest.java:94, 19.05%>
	<org.jgrapht.alg.ConnectivityInspectorTest: void testStronglyConnected3()>:
		<org.jgrapht.alg.ConnectivityInspectorTest.java:325, 17.39%>
		<org.jgrapht.alg.ConnectivityInspectorTest.java:337, 13.04%>
		<org.jgrapht.alg.ConnectivityInspectorTest.java:340, 17.39%>
	<org.jgrapht.alg.KruskalMinimumSpanningTreeTest: void testMinimumSpanningTree()>:
		<org.jgrapht.alg.KruskalMinimumSpanningTreeTest.java:80, 19.05%>
		<org.jgrapht.alg.KruskalMinimumSpanningTreeTest.java:84, 38.10%>
	<org.jgrapht.graph.AsUndirectedGraphTest: void testGetEdge()>:
		<org.jgrapht.graph.AsUndirectedGraphTest.java:137, 44.00%>
		<org.jgrapht.graph.AsUndirectedGraphTest.java:140, 68.00%>
		<org.jgrapht.graph.AsUndirectedGraphTest.java:144, 92.00%>

Relevant Assertion clone sets (0):
==============================================

[71] Set (editDistance: 1, isComplete: false, packages: 4, classes: 7): 
Centroid (size: 3): <org.jgrapht.alg.EdmondsBlossomShrinkingTest: void testOne()>

Methods (8): 
	<org.jgrapht.alg.EdmondsBlossomShrinkingTest: void testOne()>:
		<org.jgrapht.alg.EdmondsBlossomShrinkingTest.java:80, 23.81%>
		<org.jgrapht.alg.EdmondsBlossomShrinkingTest.java:81, 19.05%>
		<org.jgrapht.alg.EdmondsBlossomShrinkingTest.java:82, 19.05%>
	<org.jgrapht.alg.FloydWarshallShortestPathsTest: void testCompareWithDijkstra()>:
		<org.jgrapht.alg.FloydWarshallShortestPathsTest.java:96, 7.41%>
		<org.jgrapht.alg.FloydWarshallShortestPathsTest.java:121, 7.41%>
	<org.jgrapht.alg.HamiltonianCycleTest: void testHamiltonianCycle()>:
		<org.jgrapht.alg.HamiltonianCycleTest.java:79, 33.33%>
		<org.jgrapht.alg.HamiltonianCycleTest.java:89, 27.78%>
	<org.jgrapht.alg.KShortestPathCostTest: void verifyShortestPathsInIncreasingOrderOfWeight(org.jgrapht.Graph)>:
		<org.jgrapht.alg.KShortestPathCostTest.java:222, 30.77%>
		<org.jgrapht.alg.KShortestPathCostTest.java:225, 30.77%>
	<org.jgrapht.experimental.equivalence.EquivalenceGroupCreatorTest: void testOneComparator(org.jgrapht.experimental.equivalence.EquivalenceComparator,int)>:
		<org.jgrapht.experimental.equivalence.EquivalenceGroupCreatorTest.java:152, 23.53%>
		<org.jgrapht.experimental.equivalence.EquivalenceGroupCreatorTest.java:157, 41.18%>
	<org.jgrapht.experimental.isomorphism.IsomorphismInspectorTest: void assertIsomorphic(org.jgrapht.Graph[],boolean,org.jgrapht.experimental.equivalence.EquivalenceComparator,org.jgrapht.experimental.equivalence.EquivalenceComparator)>:
		<org.jgrapht.experimental.isomorphism.IsomorphismInspectorTest.java:138, 28.57%>
		<org.jgrapht.experimental.isomorphism.IsomorphismInspectorTest.java:140, 28.57%>
	<org.jgrapht.generate.GraphGeneratorTest: void testEmptyGraphGenerator()>:
		<org.jgrapht.generate.GraphGeneratorTest.java:90, 38.46%>
		<org.jgrapht.generate.GraphGeneratorTest.java:91, 38.46%>
		<org.jgrapht.generate.GraphGeneratorTest.java:92, 23.08%>
	<org.jgrapht.generate.GraphGeneratorTest: void testStarGraphGenerator()>:
		<org.jgrapht.generate.GraphGeneratorTest.java:287, 35.71%>
		<org.jgrapht.generate.GraphGeneratorTest.java:288, 35.71%>
		<org.jgrapht.generate.GraphGeneratorTest.java:289, 42.86%>

Relevant Assertion clone sets (0):
==============================================

[72] Set (editDistance: 1, isComplete: false, packages: 3, classes: 7): 
Centroid (size: 3): <org.jgrapht.experimental.dag.DirectedAcyclicGraphTest: void testCycleDetectionInRandomGraphBuild()>

Methods (7): 
	<org.jgrapht.alg.BlockCutpointGraphTest: void testGetBlock(org.jgrapht.alg.BlockCutpointGraph)>:
		<org.jgrapht.alg.BlockCutpointGraphTest.java:88, 33.33%>
		<org.jgrapht.alg.BlockCutpointGraphTest.java:94, 19.05%>
	<org.jgrapht.alg.FloydWarshallShortestPathsTest: void testCompareWithDijkstra()>:
		<org.jgrapht.alg.FloydWarshallShortestPathsTest.java:96, 7.41%>
		<org.jgrapht.alg.FloydWarshallShortestPathsTest.java:121, 7.41%>
	<org.jgrapht.alg.HamiltonianCycleTest: void testHamiltonianCycle()>:
		<org.jgrapht.alg.HamiltonianCycleTest.java:79, 33.33%>
		<org.jgrapht.alg.HamiltonianCycleTest.java:89, 27.78%>
	<org.jgrapht.alg.KShortestPathCostTest: void verifyShortestPathsInIncreasingOrderOfWeight(org.jgrapht.Graph)>:
		<org.jgrapht.alg.KShortestPathCostTest.java:222, 30.77%>
		<org.jgrapht.alg.KShortestPathCostTest.java:225, 30.77%>
	<org.jgrapht.alg.KruskalMinimumSpanningTreeTest: void testMinimumSpanningTree()>:
		<org.jgrapht.alg.KruskalMinimumSpanningTreeTest.java:80, 19.05%>
		<org.jgrapht.alg.KruskalMinimumSpanningTreeTest.java:84, 38.10%>
	<org.jgrapht.experimental.dag.DirectedAcyclicGraphTest: void testCycleDetectionInRandomGraphBuild()>:
		<org.jgrapht.experimental.dag.DirectedAcyclicGraphTest.java:131, 14.29%>
		<org.jgrapht.experimental.dag.DirectedAcyclicGraphTest.java:141, 12.24%>
		<org.jgrapht.experimental.dag.DirectedAcyclicGraphTest.java:152, 6.12%>
	<org.jgrapht.experimental.isomorphism.IsomorphismInspectorTest: void assertIsomorphic(org.jgrapht.Graph[],boolean,org.jgrapht.experimental.equivalence.EquivalenceComparator,org.jgrapht.experimental.equivalence.EquivalenceComparator)>:
		<org.jgrapht.experimental.isomorphism.IsomorphismInspectorTest.java:138, 28.57%>
		<org.jgrapht.experimental.isomorphism.IsomorphismInspectorTest.java:140, 28.57%>

Relevant Assertion clone sets (0):
==============================================

[73] Set (editDistance: 1, isComplete: false, packages: 3, classes: 4): 
Centroid (size: 3): <org.jgrapht.graph.DefaultDirectedGraphTest: void testVertexOrderDeterminism()>

Methods (4): 
	<org.jgrapht.ext.MatrixExporterTest: void testLaplacian()>:
		<org.jgrapht.ext.MatrixExporterTest.java:113, 38.46%>
		<org.jgrapht.ext.MatrixExporterTest.java:117, 38.46%>
	<org.jgrapht.graph.DefaultDirectedGraphTest: void testVertexOrderDeterminism()>:
		<org.jgrapht.graph.DefaultDirectedGraphTest.java:165, 76.92%>
		<org.jgrapht.graph.DefaultDirectedGraphTest.java:166, 76.92%>
		<org.jgrapht.graph.DefaultDirectedGraphTest.java:167, 76.92%>
	<org.jgrapht.traverse.AbstractGraphIteratorTest: void testDirectedGraph()>:
		<org.jgrapht.traverse.AbstractGraphIteratorTest.java:86, 47.06%>
		<org.jgrapht.traverse.AbstractGraphIteratorTest.java:88, 52.94%>
	<org.jgrapht.traverse.TopologicalOrderIteratorTest: void testRecipe()>:
		<org.jgrapht.traverse.TopologicalOrderIteratorTest.java:109, 9.62%>
		<org.jgrapht.traverse.TopologicalOrderIteratorTest.java:121, 9.62%>

Relevant Assertion clone sets (0):
==============================================

[74] Set (editDistance: 1, isComplete: false, packages: 2, classes: 4): 
Centroid (size: 3): <org.jgrapht.graph.SimpleDirectedGraphTest: void testAddEdgeEdge()>

Methods (7): 
	<org.jgrapht.alg.ConnectivityInspectorTest: void testDirectedGraph()>:
		<org.jgrapht.alg.ConnectivityInspectorTest.java:139, 57.14%>
		<org.jgrapht.alg.ConnectivityInspectorTest.java:143, 57.14%>
	<org.jgrapht.alg.TransitiveClosureTest: void testLinearGraph()>:
		<org.jgrapht.alg.TransitiveClosureTest.java:75, 47.83%>
		<org.jgrapht.alg.TransitiveClosureTest.java:78, 43.48%>
	<org.jgrapht.alg.TransitiveClosureTest: void testRingGraph()>:
		<org.jgrapht.alg.TransitiveClosureTest.java:107, 45.45%>
		<org.jgrapht.alg.TransitiveClosureTest.java:110, 50.00%>
	<org.jgrapht.graph.AsUndirectedGraphTest: void testAddVertex()>:
		<org.jgrapht.graph.AsUndirectedGraphTest.java:102, 85.71%>
		<org.jgrapht.graph.AsUndirectedGraphTest.java:103, 100.00%>
	<org.jgrapht.graph.AsUndirectedGraphTest: void testRemoveEdge()>:
		<org.jgrapht.graph.AsUndirectedGraphTest.java:155, 88.89%>
		<org.jgrapht.graph.AsUndirectedGraphTest.java:156, 111.11%>
	<org.jgrapht.graph.AsUndirectedGraphTest: void testRemoveVertex()>:
		<org.jgrapht.graph.AsUndirectedGraphTest.java:165, 88.89%>
		<org.jgrapht.graph.AsUndirectedGraphTest.java:166, 111.11%>
	<org.jgrapht.graph.SimpleDirectedGraphTest: void testAddEdgeEdge()>:
		<org.jgrapht.graph.SimpleDirectedGraphTest.java:112, 56.25%>
		<org.jgrapht.graph.SimpleDirectedGraphTest.java:113, 65.63%>
		<org.jgrapht.graph.SimpleDirectedGraphTest.java:114, 75.00%>

Relevant Assertion clone sets (0):
==============================================

[75] Set (editDistance: 1, isComplete: false, packages: 5, classes: 5): 
Centroid (size: 2): <org.jgrapht.alg.ConnectivityInspectorTest: void testDirectedGraph()>

Methods (5): 
	<org.jgrapht.alg.ConnectivityInspectorTest: void testDirectedGraph()>:
		<org.jgrapht.alg.ConnectivityInspectorTest.java:139, 57.14%>
		<org.jgrapht.alg.ConnectivityInspectorTest.java:143, 57.14%>
	<org.jgrapht.alg.util.UnionFindTest: void testIdentical(java.lang.String[],java.util.ArrayList,org.jgrapht.alg.util.UnionFind)>:
		<org.jgrapht.alg.util.UnionFindTest.java:131, 41.18%>
	<org.jgrapht.experimental.dag.DirectedAcyclicGraphTest: void testTopoIterationOrderLinearGraph()>:
		<org.jgrapht.experimental.dag.DirectedAcyclicGraphTest.java:181, 29.41%>
		<org.jgrapht.experimental.dag.DirectedAcyclicGraphTest.java:182, 41.18%>
	<org.jgrapht.experimental.isomorphism.IsomorphismInspectorTest: void assertIsomorphicStopAfterFirstMatch(org.jgrapht.Graph[],boolean,boolean,org.jgrapht.experimental.equivalence.EquivalenceComparator,org.jgrapht.experimental.equivalence.EquivalenceComparator)>:
		<org.jgrapht.experimental.isomorphism.IsomorphismInspectorTest.java:485, 14.71%>
	<org.jgrapht.graph.SimpleDirectedGraphTest: void testAddEdgeEdge()>:
		<org.jgrapht.graph.SimpleDirectedGraphTest.java:112, 56.25%>
		<org.jgrapht.graph.SimpleDirectedGraphTest.java:113, 65.63%>
		<org.jgrapht.graph.SimpleDirectedGraphTest.java:114, 75.00%>

Relevant Assertion clone sets (0):
==============================================

[76] Set (editDistance: 1, isComplete: false, packages: 3, classes: 8): 
Centroid (size: 2): <org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest: void testBipartiteMatching1()>

Methods (13): 
	<org.jgrapht.alg.BellmanFordShortestPathTest: void testWithNegativeEdges()>:
		<org.jgrapht.alg.BellmanFordShortestPathTest.java:120, 45.45%>
		<org.jgrapht.alg.BellmanFordShortestPathTest.java:127, 63.64%>
	<org.jgrapht.alg.BronKerboschCliqueFinderTest: void testFindAll()>:
		<org.jgrapht.alg.BronKerboschCliqueFinderTest.java:143, 26.32%>
		<org.jgrapht.alg.BronKerboschCliqueFinderTest.java:175, 21.05%>
	<org.jgrapht.alg.BronKerboschCliqueFinderTest: void testFindBiggest()>:
		<org.jgrapht.alg.BronKerboschCliqueFinderTest.java:119, 41.67%>
		<org.jgrapht.alg.BronKerboschCliqueFinderTest.java:129, 58.33%>
	<org.jgrapht.alg.ConnectivityInspectorTest: void testStronglyConnected4()>:
		<org.jgrapht.alg.ConnectivityInspectorTest.java:371, 30.77%>
	<org.jgrapht.alg.FloydWarshallShortestPathsTest: void testDiameter()>:
		<org.jgrapht.alg.FloydWarshallShortestPathsTest.java:161, 57.14%>
	<org.jgrapht.alg.FloydWarshallShortestPathsTest: void testEdgeLessDiameter()>:
		<org.jgrapht.alg.FloydWarshallShortestPathsTest.java:182, 40.00%>
	<org.jgrapht.alg.FloydWarshallShortestPathsTest: void testEmptyDiameter()>:
		<org.jgrapht.alg.FloydWarshallShortestPathsTest.java:170, 50.00%>
	<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest: void testBipartiteMatching1()>:
		<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest.java:83, 6.76%>
		<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest.java:86, 6.76%>
	<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest: void testEmptyMatching()>:
		<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest.java:128, 33.33%>
	<org.jgrapht.experimental.alg.ColoringTest: void testBacktrackColoring()>:
		<org.jgrapht.experimental.alg.ColoringTest.java:97, 50.00%>
	<org.jgrapht.experimental.alg.ColoringTest: void testGreedyColoring()>:
		<org.jgrapht.experimental.alg.ColoringTest.java:77, 50.00%>
	<org.jgrapht.graph.AsUnweightedGraphTest: void constructWeighted(org.jgrapht.WeightedGraph)>:
		<org.jgrapht.graph.AsUnweightedGraphTest.java:110, 57.14%>
	<org.jgrapht.graph.SimpleDirectedGraphTest: void testIncomingOutgoingEdgesOf()>:
		<org.jgrapht.graph.SimpleDirectedGraphTest.java:315, 128.57%>

Relevant Assertion clone sets (0):
==============================================

[77] Set (editDistance: 1, isComplete: false, packages: 3, classes: 8): 
Centroid (size: 2): <org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest: void testBipartiteMatching2()>

Methods (13): 
	<org.jgrapht.alg.BellmanFordShortestPathTest: void testWithNegativeEdges()>:
		<org.jgrapht.alg.BellmanFordShortestPathTest.java:120, 45.45%>
		<org.jgrapht.alg.BellmanFordShortestPathTest.java:127, 63.64%>
	<org.jgrapht.alg.BronKerboschCliqueFinderTest: void testFindAll()>:
		<org.jgrapht.alg.BronKerboschCliqueFinderTest.java:143, 26.32%>
		<org.jgrapht.alg.BronKerboschCliqueFinderTest.java:175, 21.05%>
	<org.jgrapht.alg.BronKerboschCliqueFinderTest: void testFindBiggest()>:
		<org.jgrapht.alg.BronKerboschCliqueFinderTest.java:119, 41.67%>
		<org.jgrapht.alg.BronKerboschCliqueFinderTest.java:129, 58.33%>
	<org.jgrapht.alg.ConnectivityInspectorTest: void testStronglyConnected4()>:
		<org.jgrapht.alg.ConnectivityInspectorTest.java:371, 30.77%>
	<org.jgrapht.alg.FloydWarshallShortestPathsTest: void testDiameter()>:
		<org.jgrapht.alg.FloydWarshallShortestPathsTest.java:161, 57.14%>
	<org.jgrapht.alg.FloydWarshallShortestPathsTest: void testEdgeLessDiameter()>:
		<org.jgrapht.alg.FloydWarshallShortestPathsTest.java:182, 40.00%>
	<org.jgrapht.alg.FloydWarshallShortestPathsTest: void testEmptyDiameter()>:
		<org.jgrapht.alg.FloydWarshallShortestPathsTest.java:170, 50.00%>
	<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest: void testBipartiteMatching2()>:
		<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest.java:112, 5.21%>
		<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest.java:115, 5.21%>
	<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest: void testEmptyMatching()>:
		<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest.java:128, 33.33%>
	<org.jgrapht.experimental.alg.ColoringTest: void testBacktrackColoring()>:
		<org.jgrapht.experimental.alg.ColoringTest.java:97, 50.00%>
	<org.jgrapht.experimental.alg.ColoringTest: void testGreedyColoring()>:
		<org.jgrapht.experimental.alg.ColoringTest.java:77, 50.00%>
	<org.jgrapht.graph.AsUnweightedGraphTest: void constructWeighted(org.jgrapht.WeightedGraph)>:
		<org.jgrapht.graph.AsUnweightedGraphTest.java:110, 57.14%>
	<org.jgrapht.graph.SimpleDirectedGraphTest: void testIncomingOutgoingEdgesOf()>:
		<org.jgrapht.graph.SimpleDirectedGraphTest.java:315, 128.57%>

Relevant Assertion clone sets (0):
==============================================

[78] Set (editDistance: 1, isComplete: false, packages: 5, classes: 5): 
Centroid (size: 2): <org.jgrapht.alg.TransitiveClosureTest: void testLinearGraph()>

Methods (5): 
	<org.jgrapht.alg.TransitiveClosureTest: void testLinearGraph()>:
		<org.jgrapht.alg.TransitiveClosureTest.java:75, 47.83%>
		<org.jgrapht.alg.TransitiveClosureTest.java:78, 43.48%>
	<org.jgrapht.alg.util.UnionFindTest: void testIdentical(java.lang.String[],java.util.ArrayList,org.jgrapht.alg.util.UnionFind)>:
		<org.jgrapht.alg.util.UnionFindTest.java:131, 41.18%>
	<org.jgrapht.experimental.dag.DirectedAcyclicGraphTest: void testTopoIterationOrderLinearGraph()>:
		<org.jgrapht.experimental.dag.DirectedAcyclicGraphTest.java:181, 29.41%>
		<org.jgrapht.experimental.dag.DirectedAcyclicGraphTest.java:182, 41.18%>
	<org.jgrapht.experimental.isomorphism.IsomorphismInspectorTest: void assertIsomorphicStopAfterFirstMatch(org.jgrapht.Graph[],boolean,boolean,org.jgrapht.experimental.equivalence.EquivalenceComparator,org.jgrapht.experimental.equivalence.EquivalenceComparator)>:
		<org.jgrapht.experimental.isomorphism.IsomorphismInspectorTest.java:485, 14.71%>
	<org.jgrapht.graph.SimpleDirectedGraphTest: void testAddEdgeEdge()>:
		<org.jgrapht.graph.SimpleDirectedGraphTest.java:112, 56.25%>
		<org.jgrapht.graph.SimpleDirectedGraphTest.java:113, 65.63%>
		<org.jgrapht.graph.SimpleDirectedGraphTest.java:114, 75.00%>

Relevant Assertion clone sets (0):
==============================================

[79] Set (editDistance: 1, isComplete: false, packages: 5, classes: 5): 
Centroid (size: 2): <org.jgrapht.alg.TransitiveClosureTest: void testRingGraph()>

Methods (5): 
	<org.jgrapht.alg.TransitiveClosureTest: void testRingGraph()>:
		<org.jgrapht.alg.TransitiveClosureTest.java:107, 45.45%>
		<org.jgrapht.alg.TransitiveClosureTest.java:110, 50.00%>
	<org.jgrapht.alg.util.UnionFindTest: void testIdentical(java.lang.String[],java.util.ArrayList,org.jgrapht.alg.util.UnionFind)>:
		<org.jgrapht.alg.util.UnionFindTest.java:131, 41.18%>
	<org.jgrapht.experimental.dag.DirectedAcyclicGraphTest: void testTopoIterationOrderLinearGraph()>:
		<org.jgrapht.experimental.dag.DirectedAcyclicGraphTest.java:181, 29.41%>
		<org.jgrapht.experimental.dag.DirectedAcyclicGraphTest.java:182, 41.18%>
	<org.jgrapht.experimental.isomorphism.IsomorphismInspectorTest: void assertIsomorphicStopAfterFirstMatch(org.jgrapht.Graph[],boolean,boolean,org.jgrapht.experimental.equivalence.EquivalenceComparator,org.jgrapht.experimental.equivalence.EquivalenceComparator)>:
		<org.jgrapht.experimental.isomorphism.IsomorphismInspectorTest.java:485, 14.71%>
	<org.jgrapht.graph.SimpleDirectedGraphTest: void testAddEdgeEdge()>:
		<org.jgrapht.graph.SimpleDirectedGraphTest.java:112, 56.25%>
		<org.jgrapht.graph.SimpleDirectedGraphTest.java:113, 65.63%>
		<org.jgrapht.graph.SimpleDirectedGraphTest.java:114, 75.00%>

Relevant Assertion clone sets (0):
==============================================

[80] Set (editDistance: 1, isComplete: false, packages: 5, classes: 6): 
Centroid (size: 2): <org.jgrapht.experimental.dag.DirectedAcyclicGraphTest: void testTopoIterationOrderLinearGraph()>

Methods (9): 
	<org.jgrapht.alg.ConnectivityInspectorTest: void testDirectedGraph()>:
		<org.jgrapht.alg.ConnectivityInspectorTest.java:139, 57.14%>
		<org.jgrapht.alg.ConnectivityInspectorTest.java:143, 57.14%>
	<org.jgrapht.alg.TransitiveClosureTest: void testLinearGraph()>:
		<org.jgrapht.alg.TransitiveClosureTest.java:75, 47.83%>
		<org.jgrapht.alg.TransitiveClosureTest.java:78, 43.48%>
	<org.jgrapht.alg.TransitiveClosureTest: void testRingGraph()>:
		<org.jgrapht.alg.TransitiveClosureTest.java:107, 45.45%>
		<org.jgrapht.alg.TransitiveClosureTest.java:110, 50.00%>
	<org.jgrapht.alg.util.UnionFindTest: void testIdentical(java.lang.String[],java.util.ArrayList,org.jgrapht.alg.util.UnionFind)>:
		<org.jgrapht.alg.util.UnionFindTest.java:131, 41.18%>
	<org.jgrapht.experimental.dag.DirectedAcyclicGraphTest: void testTopoIterationOrderLinearGraph()>:
		<org.jgrapht.experimental.dag.DirectedAcyclicGraphTest.java:181, 29.41%>
		<org.jgrapht.experimental.dag.DirectedAcyclicGraphTest.java:182, 41.18%>
	<org.jgrapht.experimental.isomorphism.IsomorphismInspectorTest: void assertIsomorphicStopAfterFirstMatch(org.jgrapht.Graph[],boolean,boolean,org.jgrapht.experimental.equivalence.EquivalenceComparator,org.jgrapht.experimental.equivalence.EquivalenceComparator)>:
		<org.jgrapht.experimental.isomorphism.IsomorphismInspectorTest.java:485, 14.71%>
	<org.jgrapht.graph.AsUndirectedGraphTest: void testAddVertex()>:
		<org.jgrapht.graph.AsUndirectedGraphTest.java:102, 85.71%>
		<org.jgrapht.graph.AsUndirectedGraphTest.java:103, 100.00%>
	<org.jgrapht.graph.AsUndirectedGraphTest: void testRemoveEdge()>:
		<org.jgrapht.graph.AsUndirectedGraphTest.java:155, 88.89%>
		<org.jgrapht.graph.AsUndirectedGraphTest.java:156, 111.11%>
	<org.jgrapht.graph.AsUndirectedGraphTest: void testRemoveVertex()>:
		<org.jgrapht.graph.AsUndirectedGraphTest.java:165, 88.89%>
		<org.jgrapht.graph.AsUndirectedGraphTest.java:166, 111.11%>

Relevant Assertion clone sets (0):
==============================================

[81] Set (editDistance: 1, isComplete: false, packages: 4, classes: 5): 
Centroid (size: 2): <org.jgrapht.graph.AsUndirectedGraphTest: void testAddVertex()>

Methods (5): 
	<org.jgrapht.alg.util.UnionFindTest: void testIdentical(java.lang.String[],java.util.ArrayList,org.jgrapht.alg.util.UnionFind)>:
		<org.jgrapht.alg.util.UnionFindTest.java:131, 41.18%>
	<org.jgrapht.experimental.dag.DirectedAcyclicGraphTest: void testTopoIterationOrderLinearGraph()>:
		<org.jgrapht.experimental.dag.DirectedAcyclicGraphTest.java:181, 29.41%>
		<org.jgrapht.experimental.dag.DirectedAcyclicGraphTest.java:182, 41.18%>
	<org.jgrapht.experimental.isomorphism.IsomorphismInspectorTest: void assertIsomorphicStopAfterFirstMatch(org.jgrapht.Graph[],boolean,boolean,org.jgrapht.experimental.equivalence.EquivalenceComparator,org.jgrapht.experimental.equivalence.EquivalenceComparator)>:
		<org.jgrapht.experimental.isomorphism.IsomorphismInspectorTest.java:485, 14.71%>
	<org.jgrapht.graph.AsUndirectedGraphTest: void testAddVertex()>:
		<org.jgrapht.graph.AsUndirectedGraphTest.java:102, 85.71%>
		<org.jgrapht.graph.AsUndirectedGraphTest.java:103, 100.00%>
	<org.jgrapht.graph.SimpleDirectedGraphTest: void testAddEdgeEdge()>:
		<org.jgrapht.graph.SimpleDirectedGraphTest.java:112, 56.25%>
		<org.jgrapht.graph.SimpleDirectedGraphTest.java:113, 65.63%>
		<org.jgrapht.graph.SimpleDirectedGraphTest.java:114, 75.00%>

Relevant Assertion clone sets (0):
==============================================

[82] Set (editDistance: 1, isComplete: false, packages: 4, classes: 5): 
Centroid (size: 2): <org.jgrapht.graph.AsUndirectedGraphTest: void testRemoveEdge()>

Methods (5): 
	<org.jgrapht.alg.util.UnionFindTest: void testIdentical(java.lang.String[],java.util.ArrayList,org.jgrapht.alg.util.UnionFind)>:
		<org.jgrapht.alg.util.UnionFindTest.java:131, 41.18%>
	<org.jgrapht.experimental.dag.DirectedAcyclicGraphTest: void testTopoIterationOrderLinearGraph()>:
		<org.jgrapht.experimental.dag.DirectedAcyclicGraphTest.java:181, 29.41%>
		<org.jgrapht.experimental.dag.DirectedAcyclicGraphTest.java:182, 41.18%>
	<org.jgrapht.experimental.isomorphism.IsomorphismInspectorTest: void assertIsomorphicStopAfterFirstMatch(org.jgrapht.Graph[],boolean,boolean,org.jgrapht.experimental.equivalence.EquivalenceComparator,org.jgrapht.experimental.equivalence.EquivalenceComparator)>:
		<org.jgrapht.experimental.isomorphism.IsomorphismInspectorTest.java:485, 14.71%>
	<org.jgrapht.graph.AsUndirectedGraphTest: void testRemoveEdge()>:
		<org.jgrapht.graph.AsUndirectedGraphTest.java:155, 88.89%>
		<org.jgrapht.graph.AsUndirectedGraphTest.java:156, 111.11%>
	<org.jgrapht.graph.SimpleDirectedGraphTest: void testAddEdgeEdge()>:
		<org.jgrapht.graph.SimpleDirectedGraphTest.java:112, 56.25%>
		<org.jgrapht.graph.SimpleDirectedGraphTest.java:113, 65.63%>
		<org.jgrapht.graph.SimpleDirectedGraphTest.java:114, 75.00%>

Relevant Assertion clone sets (0):
==============================================

[83] Set (editDistance: 1, isComplete: false, packages: 4, classes: 5): 
Centroid (size: 2): <org.jgrapht.graph.AsUndirectedGraphTest: void testRemoveVertex()>

Methods (5): 
	<org.jgrapht.alg.util.UnionFindTest: void testIdentical(java.lang.String[],java.util.ArrayList,org.jgrapht.alg.util.UnionFind)>:
		<org.jgrapht.alg.util.UnionFindTest.java:131, 41.18%>
	<org.jgrapht.experimental.dag.DirectedAcyclicGraphTest: void testTopoIterationOrderLinearGraph()>:
		<org.jgrapht.experimental.dag.DirectedAcyclicGraphTest.java:181, 29.41%>
		<org.jgrapht.experimental.dag.DirectedAcyclicGraphTest.java:182, 41.18%>
	<org.jgrapht.experimental.isomorphism.IsomorphismInspectorTest: void assertIsomorphicStopAfterFirstMatch(org.jgrapht.Graph[],boolean,boolean,org.jgrapht.experimental.equivalence.EquivalenceComparator,org.jgrapht.experimental.equivalence.EquivalenceComparator)>:
		<org.jgrapht.experimental.isomorphism.IsomorphismInspectorTest.java:485, 14.71%>
	<org.jgrapht.graph.AsUndirectedGraphTest: void testRemoveVertex()>:
		<org.jgrapht.graph.AsUndirectedGraphTest.java:165, 88.89%>
		<org.jgrapht.graph.AsUndirectedGraphTest.java:166, 111.11%>
	<org.jgrapht.graph.SimpleDirectedGraphTest: void testAddEdgeEdge()>:
		<org.jgrapht.graph.SimpleDirectedGraphTest.java:112, 56.25%>
		<org.jgrapht.graph.SimpleDirectedGraphTest.java:113, 65.63%>
		<org.jgrapht.graph.SimpleDirectedGraphTest.java:114, 75.00%>

Relevant Assertion clone sets (0):
==============================================

[84] Set (editDistance: 2, isComplete: false, packages: 1, classes: 2): 
Centroid (size: 11): <org.jgrapht.graph.AsWeightedGraphTest: void test1()>

Methods (3): 
	<org.jgrapht.graph.AsWeightedGraphTest: void test1()>:
		<org.jgrapht.graph.AsWeightedGraphTest.java:112, 5.88%>
		<org.jgrapht.graph.AsWeightedGraphTest.java:125, 5.88%>
		<org.jgrapht.graph.AsWeightedGraphTest.java:126, 5.88%>
		<org.jgrapht.graph.AsWeightedGraphTest.java:127, 5.88%>
		<org.jgrapht.graph.AsWeightedGraphTest.java:129, 5.88%>
		<org.jgrapht.graph.AsWeightedGraphTest.java:130, 5.88%>
		<org.jgrapht.graph.AsWeightedGraphTest.java:131, 5.88%>
		<org.jgrapht.graph.AsWeightedGraphTest.java:136, 5.88%>
		<org.jgrapht.graph.AsWeightedGraphTest.java:137, 5.88%>
		<org.jgrapht.graph.AsWeightedGraphTest.java:141, 5.88%>
		<org.jgrapht.graph.AsWeightedGraphTest.java:142, 5.88%>
	<org.jgrapht.graph.ListenableGraphTest: void testGraphListener()>:
		<org.jgrapht.graph.ListenableGraphTest.java:95, 66.67%>
		<org.jgrapht.graph.ListenableGraphTest.java:96, 62.50%>
		<org.jgrapht.graph.ListenableGraphTest.java:100, 66.67%>
		<org.jgrapht.graph.ListenableGraphTest.java:101, 62.50%>
		<org.jgrapht.graph.ListenableGraphTest.java:110, 70.83%>
		<org.jgrapht.graph.ListenableGraphTest.java:111, 62.50%>
		<org.jgrapht.graph.ListenableGraphTest.java:114, 12.50%>
		<org.jgrapht.graph.ListenableGraphTest.java:115, 70.83%>
		<org.jgrapht.graph.ListenableGraphTest.java:116, 62.50%>
		<org.jgrapht.graph.ListenableGraphTest.java:131, 62.50%>
		<org.jgrapht.graph.ListenableGraphTest.java:132, 62.50%>
		<org.jgrapht.graph.ListenableGraphTest.java:133, 62.50%>
		<org.jgrapht.graph.ListenableGraphTest.java:134, 62.50%>
	<org.jgrapht.graph.ListenableGraphTest: void testVertexSetListener()>:
		<org.jgrapht.graph.ListenableGraphTest.java:155, 66.67%>
		<org.jgrapht.graph.ListenableGraphTest.java:156, 62.50%>
		<org.jgrapht.graph.ListenableGraphTest.java:160, 66.67%>
		<org.jgrapht.graph.ListenableGraphTest.java:161, 62.50%>
		<org.jgrapht.graph.ListenableGraphTest.java:170, 62.50%>
		<org.jgrapht.graph.ListenableGraphTest.java:171, 62.50%>
		<org.jgrapht.graph.ListenableGraphTest.java:174, 12.50%>
		<org.jgrapht.graph.ListenableGraphTest.java:175, 62.50%>
		<org.jgrapht.graph.ListenableGraphTest.java:176, 62.50%>
		<org.jgrapht.graph.ListenableGraphTest.java:191, 62.50%>
		<org.jgrapht.graph.ListenableGraphTest.java:192, 62.50%>
		<org.jgrapht.graph.ListenableGraphTest.java:193, 62.50%>
		<org.jgrapht.graph.ListenableGraphTest.java:194, 62.50%>

Relevant Assertion clone sets (1):
Set (score: 1.00, ccsize: 2, packages: 1, classes: 1): 
	<org.jgrapht.graph.ListenableGraphTest: void testGraphListener()>:
		<org.jgrapht.graph.ListenableGraphTest.java:114, 12.50%>
	<org.jgrapht.graph.ListenableGraphTest: void testVertexSetListener()>:
		<org.jgrapht.graph.ListenableGraphTest.java:174, 12.50%>
==============================================

[85] Set (editDistance: 2, isComplete: false, packages: 3, classes: 4): 
Centroid (size: 5): <org.jgrapht.graph.EqualsAndHashCodeTest: void testAsWeightedGraphs()>

Methods (10): 
	<org.jgrapht.alg.BiconnectivityInspectorTest: void testBiconnected()>:
		<org.jgrapht.alg.BiconnectivityInspectorTest.java:64, 30.00%>
		<org.jgrapht.alg.BiconnectivityInspectorTest.java:65, 50.00%>
		<org.jgrapht.alg.BiconnectivityInspectorTest.java:66, 50.00%>
	<org.jgrapht.alg.EdmondsBlossomShrinkingTest: void testOne()>:
		<org.jgrapht.alg.EdmondsBlossomShrinkingTest.java:80, 23.81%>
		<org.jgrapht.alg.EdmondsBlossomShrinkingTest.java:81, 19.05%>
		<org.jgrapht.alg.EdmondsBlossomShrinkingTest.java:82, 19.05%>
	<org.jgrapht.generate.GraphGeneratorTest: void testEmptyGraphGenerator()>:
		<org.jgrapht.generate.GraphGeneratorTest.java:90, 38.46%>
		<org.jgrapht.generate.GraphGeneratorTest.java:91, 38.46%>
		<org.jgrapht.generate.GraphGeneratorTest.java:92, 23.08%>
	<org.jgrapht.generate.GraphGeneratorTest: void testStarGraphGenerator()>:
		<org.jgrapht.generate.GraphGeneratorTest.java:287, 35.71%>
		<org.jgrapht.generate.GraphGeneratorTest.java:288, 35.71%>
		<org.jgrapht.generate.GraphGeneratorTest.java:289, 42.86%>
	<org.jgrapht.graph.EqualsAndHashCodeTest: void testAsWeightedGraphs()>:
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:329, 5.17%>
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:330, 10.34%>
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:332, 5.17%>
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:333, 10.34%>
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:335, 8.62%>
	<org.jgrapht.graph.EqualsAndHashCodeTest: void testDefaultDirectedGraph()>:
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:105, 6.52%>
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:106, 10.87%>
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:108, 13.04%>
	<org.jgrapht.graph.EqualsAndHashCodeTest: void testGraphsWithNonIntrusiveEdge()>:
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:187, 3.90%>
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:188, 6.49%>
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:190, 7.79%>
	<org.jgrapht.graph.EqualsAndHashCodeTest: void testGrapshWithCustomEdges()>:
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:268, 7.69%>
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:269, 12.82%>
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:271, 15.38%>
	<org.jgrapht.graph.EqualsAndHashCodeTest: void testPseudograph()>:
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:230, 5.08%>
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:231, 8.47%>
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:233, 10.17%>
	<org.jgrapht.graph.EqualsAndHashCodeTest: void testSimpleGraph()>:
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:148, 6.52%>
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:149, 10.87%>
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:151, 13.04%>

Relevant Assertion clone sets (3):
Set (score: 1.00, ccsize: 2, packages: 1, classes: 1): 
	<org.jgrapht.graph.EqualsAndHashCodeTest: void testAsWeightedGraphs()>:
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:329, 5.17%>
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:332, 5.17%>
	<org.jgrapht.graph.EqualsAndHashCodeTest: void testDefaultDirectedGraph()>:
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:105, 6.52%>
	<org.jgrapht.graph.EqualsAndHashCodeTest: void testGraphsWithNonIntrusiveEdge()>:
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:187, 3.90%>
	<org.jgrapht.graph.EqualsAndHashCodeTest: void testGrapshWithCustomEdges()>:
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:268, 7.69%>
	<org.jgrapht.graph.EqualsAndHashCodeTest: void testPseudograph()>:
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:230, 5.08%>
	<org.jgrapht.graph.EqualsAndHashCodeTest: void testSimpleGraph()>:
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:148, 6.52%>
Set (score: 0.50, ccsize: 4, packages: 1, classes: 1): 
	<org.jgrapht.graph.EqualsAndHashCodeTest: void testDefaultDirectedGraph()>:
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:106, 10.87%>
	<org.jgrapht.graph.EqualsAndHashCodeTest: void testGraphsWithNonIntrusiveEdge()>:
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:188, 6.49%>
Set (score: 0.50, ccsize: 4, packages: 1, classes: 1): 
	<org.jgrapht.graph.EqualsAndHashCodeTest: void testGrapshWithCustomEdges()>:
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:269, 12.82%>
	<org.jgrapht.graph.EqualsAndHashCodeTest: void testSimpleGraph()>:
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:149, 10.87%>
==============================================

[86] Set (editDistance: 2, isComplete: false, packages: 2, classes: 7): 
Centroid (size: 4): <org.jgrapht.alg.EulerianCircuitTest: void testEulerianCircuit()>

Methods (7): 
	<org.jgrapht.alg.BiconnectivityInspectorTest: void testBiconnected()>:
		<org.jgrapht.alg.BiconnectivityInspectorTest.java:64, 30.00%>
		<org.jgrapht.alg.BiconnectivityInspectorTest.java:65, 50.00%>
		<org.jgrapht.alg.BiconnectivityInspectorTest.java:66, 50.00%>
	<org.jgrapht.alg.EdmondsBlossomShrinkingTest: void testOne()>:
		<org.jgrapht.alg.EdmondsBlossomShrinkingTest.java:80, 23.81%>
		<org.jgrapht.alg.EdmondsBlossomShrinkingTest.java:81, 19.05%>
		<org.jgrapht.alg.EdmondsBlossomShrinkingTest.java:82, 19.05%>
	<org.jgrapht.alg.EulerianCircuitTest: void testEulerianCircuit()>:
		<org.jgrapht.alg.EulerianCircuitTest.java:77, 11.76%>
		<org.jgrapht.alg.EulerianCircuitTest.java:78, 29.41%>
		<org.jgrapht.alg.EulerianCircuitTest.java:91, 11.76%>
		<org.jgrapht.alg.EulerianCircuitTest.java:95, 23.53%>
	<org.jgrapht.alg.FloydWarshallShortestPathsTest: void testCompareWithDijkstra()>:
		<org.jgrapht.alg.FloydWarshallShortestPathsTest.java:96, 7.41%>
		<org.jgrapht.alg.FloydWarshallShortestPathsTest.java:121, 7.41%>
	<org.jgrapht.alg.HamiltonianCycleTest: void testHamiltonianCycle()>:
		<org.jgrapht.alg.HamiltonianCycleTest.java:79, 33.33%>
		<org.jgrapht.alg.HamiltonianCycleTest.java:89, 27.78%>
	<org.jgrapht.alg.KShortestPathCostTest: void verifyShortestPathsInIncreasingOrderOfWeight(org.jgrapht.Graph)>:
		<org.jgrapht.alg.KShortestPathCostTest.java:222, 30.77%>
		<org.jgrapht.alg.KShortestPathCostTest.java:225, 30.77%>
	<org.jgrapht.experimental.isomorphism.IsomorphismInspectorTest: void assertIsomorphic(org.jgrapht.Graph[],boolean,org.jgrapht.experimental.equivalence.EquivalenceComparator,org.jgrapht.experimental.equivalence.EquivalenceComparator)>:
		<org.jgrapht.experimental.isomorphism.IsomorphismInspectorTest.java:138, 28.57%>
		<org.jgrapht.experimental.isomorphism.IsomorphismInspectorTest.java:140, 28.57%>

Relevant Assertion clone sets (1):
Set (score: 0.50, ccsize: 4, packages: 1, classes: 2): 
	<org.jgrapht.alg.EulerianCircuitTest: void testEulerianCircuit()>:
		<org.jgrapht.alg.EulerianCircuitTest.java:78, 29.41%>
	<org.jgrapht.alg.HamiltonianCycleTest: void testHamiltonianCycle()>:
		<org.jgrapht.alg.HamiltonianCycleTest.java:89, 27.78%>
==============================================

[87] Set (editDistance: 2, isComplete: false, packages: 1, classes: 2): 
Centroid (size: 4): <org.jgrapht.alg.KShortestPathCostTest: void testKShortestPathCompleteGraph4()>

Methods (3): 
	<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest: void testBipartiteMatching1()>:
		<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest.java:83, 6.76%>
		<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest.java:86, 6.76%>
	<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest: void testBipartiteMatching2()>:
		<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest.java:112, 5.21%>
		<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest.java:115, 5.21%>
	<org.jgrapht.alg.KShortestPathCostTest: void testKShortestPathCompleteGraph4()>:
		<org.jgrapht.alg.KShortestPathCostTest.java:68, 27.78%>
		<org.jgrapht.alg.KShortestPathCostTest.java:74, 33.33%>
		<org.jgrapht.alg.KShortestPathCostTest.java:76, 38.89%>
		<org.jgrapht.alg.KShortestPathCostTest.java:78, 38.89%>

Relevant Assertion clone sets (2):
Set (score: 0.67, ccsize: 2, packages: 1, classes: 1): 
	<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest: void testBipartiteMatching1()>:
		<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest.java:86, 6.76%>
	<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest: void testBipartiteMatching2()>:
		<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest.java:115, 5.21%>
Set (score: 0.50, ccsize: 2, packages: 1, classes: 1): 
	<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest: void testBipartiteMatching1()>:
		<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest.java:83, 6.76%>
	<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest: void testBipartiteMatching2()>:
		<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest.java:112, 5.21%>
==============================================

[88] Set (editDistance: 2, isComplete: false, packages: 2, classes: 4): 
Centroid (size: 4): <org.jgrapht.alg.ShortestPathTestCase: void testPathBetween()>

Methods (6): 
	<org.jgrapht.alg.BellmanFordShortestPathTest: void testWithNegativeEdges()>:
		<org.jgrapht.alg.BellmanFordShortestPathTest.java:120, 45.45%>
		<org.jgrapht.alg.BellmanFordShortestPathTest.java:127, 63.64%>
	<org.jgrapht.alg.ConnectivityInspectorTest: void testStronglyConnected1()>:
		<org.jgrapht.alg.ConnectivityInspectorTest.java:211, 16.00%>
		<org.jgrapht.alg.ConnectivityInspectorTest.java:222, 12.00%>
		<org.jgrapht.alg.ConnectivityInspectorTest.java:225, 16.00%>
	<org.jgrapht.alg.ConnectivityInspectorTest: void testStronglyConnected2()>:
		<org.jgrapht.alg.ConnectivityInspectorTest.java:268, 16.00%>
		<org.jgrapht.alg.ConnectivityInspectorTest.java:279, 12.00%>
		<org.jgrapht.alg.ConnectivityInspectorTest.java:282, 16.00%>
	<org.jgrapht.alg.ConnectivityInspectorTest: void testStronglyConnected3()>:
		<org.jgrapht.alg.ConnectivityInspectorTest.java:325, 17.39%>
		<org.jgrapht.alg.ConnectivityInspectorTest.java:337, 13.04%>
		<org.jgrapht.alg.ConnectivityInspectorTest.java:340, 17.39%>
	<org.jgrapht.alg.ShortestPathTestCase: void testPathBetween()>:
		<org.jgrapht.alg.ShortestPathTestCase.java:86, 21.74%>
		<org.jgrapht.alg.ShortestPathTestCase.java:89, 26.09%>
		<org.jgrapht.alg.ShortestPathTestCase.java:96, 34.78%>
		<org.jgrapht.alg.ShortestPathTestCase.java:104, 47.83%>
	<org.jgrapht.graph.AsUndirectedGraphTest: void testGetAllEdges()>:
		<org.jgrapht.graph.AsUndirectedGraphTest.java:123, 40.00%>
		<org.jgrapht.graph.AsUndirectedGraphTest.java:124, 65.00%>
		<org.jgrapht.graph.AsUndirectedGraphTest.java:128, 70.00%>
		<org.jgrapht.graph.AsUndirectedGraphTest.java:129, 80.00%>

Relevant Assertion clone sets (2):
Set (score: 1.00, ccsize: 2, packages: 1, classes: 1): 
	<org.jgrapht.alg.ConnectivityInspectorTest: void testStronglyConnected1()>:
		<org.jgrapht.alg.ConnectivityInspectorTest.java:222, 12.00%>
	<org.jgrapht.alg.ConnectivityInspectorTest: void testStronglyConnected2()>:
		<org.jgrapht.alg.ConnectivityInspectorTest.java:279, 12.00%>
	<org.jgrapht.alg.ConnectivityInspectorTest: void testStronglyConnected3()>:
		<org.jgrapht.alg.ConnectivityInspectorTest.java:337, 13.04%>
Set (score: 0.50, ccsize: 2, packages: 1, classes: 2): 
	<org.jgrapht.alg.BellmanFordShortestPathTest: void testWithNegativeEdges()>:
		<org.jgrapht.alg.BellmanFordShortestPathTest.java:120, 45.45%>
	<org.jgrapht.alg.ShortestPathTestCase: void testPathBetween()>:
		<org.jgrapht.alg.ShortestPathTestCase.java:86, 21.74%>
==============================================

[89] Set (editDistance: 2, isComplete: false, packages: 4, classes: 8): 
Centroid (size: 4): <org.jgrapht.graph.AsUndirectedGraphTest: void testDegreeOf()>

Methods (18): 
	<org.jgrapht.alg.BiconnectivityInspectorTest: void testBiconnected()>:
		<org.jgrapht.alg.BiconnectivityInspectorTest.java:64, 30.00%>
		<org.jgrapht.alg.BiconnectivityInspectorTest.java:65, 50.00%>
		<org.jgrapht.alg.BiconnectivityInspectorTest.java:66, 50.00%>
	<org.jgrapht.alg.BiconnectivityInspectorTest: void testLinearGraph(int)>:
		<org.jgrapht.alg.BiconnectivityInspectorTest.java:88, 40.00%>
		<org.jgrapht.alg.BiconnectivityInspectorTest.java:89, 40.00%>
	<org.jgrapht.alg.BiconnectivityInspectorTest: void testNotBiconnected()>:
		<org.jgrapht.alg.BiconnectivityInspectorTest.java:100, 55.56%>
		<org.jgrapht.alg.BiconnectivityInspectorTest.java:101, 55.56%>
	<org.jgrapht.alg.BlockCutpointGraphTest: void testBiconnected()>:
		<org.jgrapht.alg.BlockCutpointGraphTest.java:67, 41.67%>
		<org.jgrapht.alg.BlockCutpointGraphTest.java:71, 41.67%>
	<org.jgrapht.alg.BlockCutpointGraphTest: void testLinearGraph(int)>:
		<org.jgrapht.alg.BlockCutpointGraphTest.java:121, 33.33%>
		<org.jgrapht.alg.BlockCutpointGraphTest.java:125, 33.33%>
	<org.jgrapht.alg.BlockCutpointGraphTest: void testNotBiconnected()>:
		<org.jgrapht.alg.BlockCutpointGraphTest.java:135, 41.67%>
		<org.jgrapht.alg.BlockCutpointGraphTest.java:139, 41.67%>
	<org.jgrapht.experimental.permutation.CompoundPermutationIterTest: void testGetNext()>:
		<org.jgrapht.experimental.permutation.CompoundPermutationIterTest.java:96, 40.00%>
		<org.jgrapht.experimental.permutation.CompoundPermutationIterTest.java:127, 40.00%>
	<org.jgrapht.generate.GraphGeneratorTest: void testCompleteBipartiteGraphGenerator()>:
		<org.jgrapht.generate.GraphGeneratorTest.java:243, 50.00%>
		<org.jgrapht.generate.GraphGeneratorTest.java:244, 50.00%>
	<org.jgrapht.generate.GraphGeneratorTest: void testEmptyGraphGenerator()>:
		<org.jgrapht.generate.GraphGeneratorTest.java:90, 38.46%>
		<org.jgrapht.generate.GraphGeneratorTest.java:91, 38.46%>
		<org.jgrapht.generate.GraphGeneratorTest.java:92, 23.08%>
	<org.jgrapht.generate.GraphGeneratorTest: void testHyperCubeGraphGenerator()>:
		<org.jgrapht.generate.GraphGeneratorTest.java:265, 50.00%>
		<org.jgrapht.generate.GraphGeneratorTest.java:266, 50.00%>
	<org.jgrapht.generate.GraphGeneratorTest: void testStarGraphGenerator()>:
		<org.jgrapht.generate.GraphGeneratorTest.java:287, 35.71%>
		<org.jgrapht.generate.GraphGeneratorTest.java:288, 35.71%>
		<org.jgrapht.generate.GraphGeneratorTest.java:289, 42.86%>
	<org.jgrapht.graph.AsUndirectedGraphTest: void testDegreeOf()>:
		<org.jgrapht.graph.AsUndirectedGraphTest.java:111, 46.15%>
		<org.jgrapht.graph.AsUndirectedGraphTest.java:112, 61.54%>
		<org.jgrapht.graph.AsUndirectedGraphTest.java:113, 76.92%>
		<org.jgrapht.graph.AsUndirectedGraphTest.java:114, 92.31%>
	<org.jgrapht.graph.AsUndirectedGraphTest: void testGetAllEdges()>:
		<org.jgrapht.graph.AsUndirectedGraphTest.java:123, 40.00%>
		<org.jgrapht.graph.AsUndirectedGraphTest.java:124, 65.00%>
		<org.jgrapht.graph.AsUndirectedGraphTest.java:128, 70.00%>
		<org.jgrapht.graph.AsUndirectedGraphTest.java:129, 80.00%>
	<org.jgrapht.graph.DefaultDirectedGraphTest: void testEdgesOf()>:
		<org.jgrapht.graph.DefaultDirectedGraphTest.java:117, 75.00%>
		<org.jgrapht.graph.DefaultDirectedGraphTest.java:118, 75.00%>
	<org.jgrapht.graph.DefaultDirectedGraphTest: void testInDegreeOf()>:
		<org.jgrapht.graph.DefaultDirectedGraphTest.java:141, 83.33%>
		<org.jgrapht.graph.DefaultDirectedGraphTest.java:142, 83.33%>
	<org.jgrapht.graph.DefaultDirectedGraphTest: void testOutDegreeOf()>:
		<org.jgrapht.graph.DefaultDirectedGraphTest.java:153, 83.33%>
		<org.jgrapht.graph.DefaultDirectedGraphTest.java:154, 83.33%>
	<org.jgrapht.graph.GenericGraphsTest: void testEqualButNotSameVertex()>:
		<org.jgrapht.graph.GenericGraphsTest.java:145, 40.00%>
		<org.jgrapht.graph.GenericGraphsTest.java:146, 40.00%>
	<org.jgrapht.graph.SimpleDirectedGraphTest: void testRemoveEdgeEdge()>:
		<org.jgrapht.graph.SimpleDirectedGraphTest.java:341, 26.09%>
		<org.jgrapht.graph.SimpleDirectedGraphTest.java:343, 43.48%>
		<org.jgrapht.graph.SimpleDirectedGraphTest.java:344, 43.48%>
		<org.jgrapht.graph.SimpleDirectedGraphTest.java:345, 60.87%>
		<org.jgrapht.graph.SimpleDirectedGraphTest.java:346, 73.91%>

Relevant Assertion clone sets (3):
Set (score: 0.67, ccsize: 3, packages: 1, classes: 2): 
	<org.jgrapht.alg.BiconnectivityInspectorTest: void testBiconnected()>:
		<org.jgrapht.alg.BiconnectivityInspectorTest.java:65, 50.00%>
	<org.jgrapht.alg.BlockCutpointGraphTest: void testBiconnected()>:
		<org.jgrapht.alg.BlockCutpointGraphTest.java:67, 41.67%>
		<org.jgrapht.alg.BlockCutpointGraphTest.java:71, 41.67%>
Set (score: 0.67, ccsize: 3, packages: 1, classes: 2): 
	<org.jgrapht.alg.BiconnectivityInspectorTest: void testLinearGraph(int)>:
		<org.jgrapht.alg.BiconnectivityInspectorTest.java:88, 40.00%>
	<org.jgrapht.alg.BlockCutpointGraphTest: void testLinearGraph(int)>:
		<org.jgrapht.alg.BlockCutpointGraphTest.java:121, 33.33%>
		<org.jgrapht.alg.BlockCutpointGraphTest.java:125, 33.33%>
Set (score: 0.67, ccsize: 3, packages: 1, classes: 2): 
	<org.jgrapht.alg.BiconnectivityInspectorTest: void testNotBiconnected()>:
		<org.jgrapht.alg.BiconnectivityInspectorTest.java:100, 55.56%>
	<org.jgrapht.alg.BlockCutpointGraphTest: void testNotBiconnected()>:
		<org.jgrapht.alg.BlockCutpointGraphTest.java:135, 41.67%>
		<org.jgrapht.alg.BlockCutpointGraphTest.java:139, 41.67%>
==============================================

[90] Set (editDistance: 2, isComplete: false, packages: 4, classes: 15): 
Centroid (size: 4): <org.jgrapht.graph.AsUndirectedGraphTest: void testGetAllEdges()>

Methods (29): 
	<org.jgrapht.alg.BellmanFordShortestPathTest: void testWithNegativeEdges()>:
		<org.jgrapht.alg.BellmanFordShortestPathTest.java:120, 45.45%>
		<org.jgrapht.alg.BellmanFordShortestPathTest.java:127, 63.64%>
	<org.jgrapht.alg.BiconnectivityInspectorTest: void testLinearGraph(int)>:
		<org.jgrapht.alg.BiconnectivityInspectorTest.java:88, 40.00%>
		<org.jgrapht.alg.BiconnectivityInspectorTest.java:89, 40.00%>
	<org.jgrapht.alg.BiconnectivityInspectorTest: void testNotBiconnected()>:
		<org.jgrapht.alg.BiconnectivityInspectorTest.java:100, 55.56%>
		<org.jgrapht.alg.BiconnectivityInspectorTest.java:101, 55.56%>
	<org.jgrapht.alg.BlockCutpointGraphTest: void testBiconnected()>:
		<org.jgrapht.alg.BlockCutpointGraphTest.java:67, 41.67%>
		<org.jgrapht.alg.BlockCutpointGraphTest.java:71, 41.67%>
	<org.jgrapht.alg.BlockCutpointGraphTest: void testLinearGraph(int)>:
		<org.jgrapht.alg.BlockCutpointGraphTest.java:121, 33.33%>
		<org.jgrapht.alg.BlockCutpointGraphTest.java:125, 33.33%>
	<org.jgrapht.alg.BlockCutpointGraphTest: void testNotBiconnected()>:
		<org.jgrapht.alg.BlockCutpointGraphTest.java:135, 41.67%>
		<org.jgrapht.alg.BlockCutpointGraphTest.java:139, 41.67%>
	<org.jgrapht.alg.BronKerboschCliqueFinderTest: void testFindAll()>:
		<org.jgrapht.alg.BronKerboschCliqueFinderTest.java:143, 26.32%>
		<org.jgrapht.alg.BronKerboschCliqueFinderTest.java:175, 21.05%>
	<org.jgrapht.alg.BronKerboschCliqueFinderTest: void testFindBiggest()>:
		<org.jgrapht.alg.BronKerboschCliqueFinderTest.java:119, 41.67%>
		<org.jgrapht.alg.BronKerboschCliqueFinderTest.java:129, 58.33%>
	<org.jgrapht.alg.ChromaticNumberTest: void testChromaticNumber()>:
		<org.jgrapht.alg.ChromaticNumberTest.java:78, 18.75%>
		<org.jgrapht.alg.ChromaticNumberTest.java:83, 31.25%>
		<org.jgrapht.alg.ChromaticNumberTest.java:100, 18.75%>
	<org.jgrapht.alg.ConnectivityInspectorTest: void testStronglyConnected1()>:
		<org.jgrapht.alg.ConnectivityInspectorTest.java:211, 16.00%>
		<org.jgrapht.alg.ConnectivityInspectorTest.java:222, 12.00%>
		<org.jgrapht.alg.ConnectivityInspectorTest.java:225, 16.00%>
	<org.jgrapht.alg.ConnectivityInspectorTest: void testStronglyConnected2()>:
		<org.jgrapht.alg.ConnectivityInspectorTest.java:268, 16.00%>
		<org.jgrapht.alg.ConnectivityInspectorTest.java:279, 12.00%>
		<org.jgrapht.alg.ConnectivityInspectorTest.java:282, 16.00%>
	<org.jgrapht.alg.ConnectivityInspectorTest: void testStronglyConnected3()>:
		<org.jgrapht.alg.ConnectivityInspectorTest.java:325, 17.39%>
		<org.jgrapht.alg.ConnectivityInspectorTest.java:337, 13.04%>
		<org.jgrapht.alg.ConnectivityInspectorTest.java:340, 17.39%>
	<org.jgrapht.alg.ShortestPathTestCase: void testPathBetween()>:
		<org.jgrapht.alg.ShortestPathTestCase.java:86, 21.74%>
		<org.jgrapht.alg.ShortestPathTestCase.java:89, 26.09%>
		<org.jgrapht.alg.ShortestPathTestCase.java:96, 34.78%>
		<org.jgrapht.alg.ShortestPathTestCase.java:104, 47.83%>
	<org.jgrapht.experimental.permutation.CompoundPermutationIterTest: void testGetNext()>:
		<org.jgrapht.experimental.permutation.CompoundPermutationIterTest.java:96, 40.00%>
		<org.jgrapht.experimental.permutation.CompoundPermutationIterTest.java:127, 40.00%>
	<org.jgrapht.generate.GraphGeneratorTest: void testCompleteBipartiteGraphGenerator()>:
		<org.jgrapht.generate.GraphGeneratorTest.java:243, 50.00%>
		<org.jgrapht.generate.GraphGeneratorTest.java:244, 50.00%>
	<org.jgrapht.generate.GraphGeneratorTest: void testEmptyGraphGenerator()>:
		<org.jgrapht.generate.GraphGeneratorTest.java:90, 38.46%>
		<org.jgrapht.generate.GraphGeneratorTest.java:91, 38.46%>
		<org.jgrapht.generate.GraphGeneratorTest.java:92, 23.08%>
	<org.jgrapht.generate.GraphGeneratorTest: void testHyperCubeGraphGenerator()>:
		<org.jgrapht.generate.GraphGeneratorTest.java:265, 50.00%>
		<org.jgrapht.generate.GraphGeneratorTest.java:266, 50.00%>
	<org.jgrapht.generate.GraphGeneratorTest: void testStarGraphGenerator()>:
		<org.jgrapht.generate.GraphGeneratorTest.java:287, 35.71%>
		<org.jgrapht.generate.GraphGeneratorTest.java:288, 35.71%>
		<org.jgrapht.generate.GraphGeneratorTest.java:289, 42.86%>
	<org.jgrapht.graph.AsUndirectedGraphTest: void testDegreeOf()>:
		<org.jgrapht.graph.AsUndirectedGraphTest.java:111, 46.15%>
		<org.jgrapht.graph.AsUndirectedGraphTest.java:112, 61.54%>
		<org.jgrapht.graph.AsUndirectedGraphTest.java:113, 76.92%>
		<org.jgrapht.graph.AsUndirectedGraphTest.java:114, 92.31%>
	<org.jgrapht.graph.AsUndirectedGraphTest: void testGetAllEdges()>:
		<org.jgrapht.graph.AsUndirectedGraphTest.java:123, 40.00%>
		<org.jgrapht.graph.AsUndirectedGraphTest.java:124, 65.00%>
		<org.jgrapht.graph.AsUndirectedGraphTest.java:128, 70.00%>
		<org.jgrapht.graph.AsUndirectedGraphTest.java:129, 80.00%>
	<org.jgrapht.graph.AsUndirectedGraphTest: void testGetEdge()>:
		<org.jgrapht.graph.AsUndirectedGraphTest.java:137, 44.00%>
		<org.jgrapht.graph.AsUndirectedGraphTest.java:140, 68.00%>
		<org.jgrapht.graph.AsUndirectedGraphTest.java:144, 92.00%>
	<org.jgrapht.graph.AsUnweightedGraphTest: void checkView(org.jgrapht.WeightedGraph,org.jgrapht.Graph)>:
		<org.jgrapht.graph.AsUnweightedGraphTest.java:120, 17.39%>
		<org.jgrapht.graph.AsUnweightedGraphTest.java:126, 17.39%>
		<org.jgrapht.graph.AsUnweightedGraphTest.java:132, 17.39%>
		<org.jgrapht.graph.AsUnweightedGraphTest.java:136, 17.39%>
	<org.jgrapht.graph.DefaultDirectedGraphTest: void testEdgesOf()>:
		<org.jgrapht.graph.DefaultDirectedGraphTest.java:117, 75.00%>
		<org.jgrapht.graph.DefaultDirectedGraphTest.java:118, 75.00%>
	<org.jgrapht.graph.DefaultDirectedGraphTest: void testInDegreeOf()>:
		<org.jgrapht.graph.DefaultDirectedGraphTest.java:141, 83.33%>
		<org.jgrapht.graph.DefaultDirectedGraphTest.java:142, 83.33%>
	<org.jgrapht.graph.DefaultDirectedGraphTest: void testOutDegreeOf()>:
		<org.jgrapht.graph.DefaultDirectedGraphTest.java:153, 83.33%>
		<org.jgrapht.graph.DefaultDirectedGraphTest.java:154, 83.33%>
	<org.jgrapht.graph.GenericGraphsTest: void testEqualButNotSameVertex()>:
		<org.jgrapht.graph.GenericGraphsTest.java:145, 40.00%>
		<org.jgrapht.graph.GenericGraphsTest.java:146, 40.00%>
	<org.jgrapht.graph.SimpleDirectedGraphTest: void testEdgesOf()>:
		<org.jgrapht.graph.SimpleDirectedGraphTest.java:232, 46.67%>
		<org.jgrapht.graph.SimpleDirectedGraphTest.java:233, 60.00%>
		<org.jgrapht.graph.SimpleDirectedGraphTest.java:243, 20.00%>
	<org.jgrapht.graph.SubgraphTest: void testInducedSubgraphListener()>:
		<org.jgrapht.graph.SubgraphTest.java:86, 50.00%>
		<org.jgrapht.graph.SubgraphTest.java:87, 50.00%>
		<org.jgrapht.graph.SubgraphTest.java:91, 50.00%>
		<org.jgrapht.graph.SubgraphTest.java:92, 50.00%>
	<org.jgrapht.graph.SubgraphTest: void testSubgraphListener()>:
		<org.jgrapht.graph.SubgraphTest.java:139, 43.75%>
		<org.jgrapht.graph.SubgraphTest.java:140, 43.75%>
		<org.jgrapht.graph.SubgraphTest.java:145, 31.25%>
		<org.jgrapht.graph.SubgraphTest.java:146, 43.75%>

Relevant Assertion clone sets (4):
Set (score: 1.00, ccsize: 2, packages: 1, classes: 1): 
	<org.jgrapht.alg.ConnectivityInspectorTest: void testStronglyConnected1()>:
		<org.jgrapht.alg.ConnectivityInspectorTest.java:222, 12.00%>
	<org.jgrapht.alg.ConnectivityInspectorTest: void testStronglyConnected2()>:
		<org.jgrapht.alg.ConnectivityInspectorTest.java:279, 12.00%>
	<org.jgrapht.alg.ConnectivityInspectorTest: void testStronglyConnected3()>:
		<org.jgrapht.alg.ConnectivityInspectorTest.java:337, 13.04%>
Set (score: 0.67, ccsize: 3, packages: 1, classes: 2): 
	<org.jgrapht.alg.BiconnectivityInspectorTest: void testLinearGraph(int)>:
		<org.jgrapht.alg.BiconnectivityInspectorTest.java:88, 40.00%>
	<org.jgrapht.alg.BlockCutpointGraphTest: void testLinearGraph(int)>:
		<org.jgrapht.alg.BlockCutpointGraphTest.java:121, 33.33%>
		<org.jgrapht.alg.BlockCutpointGraphTest.java:125, 33.33%>
Set (score: 0.67, ccsize: 3, packages: 1, classes: 2): 
	<org.jgrapht.alg.BiconnectivityInspectorTest: void testNotBiconnected()>:
		<org.jgrapht.alg.BiconnectivityInspectorTest.java:100, 55.56%>
	<org.jgrapht.alg.BlockCutpointGraphTest: void testNotBiconnected()>:
		<org.jgrapht.alg.BlockCutpointGraphTest.java:135, 41.67%>
		<org.jgrapht.alg.BlockCutpointGraphTest.java:139, 41.67%>
Set (score: 0.50, ccsize: 2, packages: 1, classes: 2): 
	<org.jgrapht.alg.BellmanFordShortestPathTest: void testWithNegativeEdges()>:
		<org.jgrapht.alg.BellmanFordShortestPathTest.java:120, 45.45%>
	<org.jgrapht.alg.ShortestPathTestCase: void testPathBetween()>:
		<org.jgrapht.alg.ShortestPathTestCase.java:86, 21.74%>
==============================================

[91] Set (editDistance: 2, isComplete: false, packages: 2, classes: 4): 
Centroid (size: 4): <org.jgrapht.graph.AsUnweightedGraphTest: void checkView(org.jgrapht.WeightedGraph,org.jgrapht.Graph)>

Methods (6): 
	<org.jgrapht.alg.BellmanFordShortestPathTest: void testWithNegativeEdges()>:
		<org.jgrapht.alg.BellmanFordShortestPathTest.java:120, 45.45%>
		<org.jgrapht.alg.BellmanFordShortestPathTest.java:127, 63.64%>
	<org.jgrapht.alg.ConnectivityInspectorTest: void testStronglyConnected1()>:
		<org.jgrapht.alg.ConnectivityInspectorTest.java:211, 16.00%>
		<org.jgrapht.alg.ConnectivityInspectorTest.java:222, 12.00%>
		<org.jgrapht.alg.ConnectivityInspectorTest.java:225, 16.00%>
	<org.jgrapht.alg.ConnectivityInspectorTest: void testStronglyConnected2()>:
		<org.jgrapht.alg.ConnectivityInspectorTest.java:268, 16.00%>
		<org.jgrapht.alg.ConnectivityInspectorTest.java:279, 12.00%>
		<org.jgrapht.alg.ConnectivityInspectorTest.java:282, 16.00%>
	<org.jgrapht.alg.ConnectivityInspectorTest: void testStronglyConnected3()>:
		<org.jgrapht.alg.ConnectivityInspectorTest.java:325, 17.39%>
		<org.jgrapht.alg.ConnectivityInspectorTest.java:337, 13.04%>
		<org.jgrapht.alg.ConnectivityInspectorTest.java:340, 17.39%>
	<org.jgrapht.graph.AsUndirectedGraphTest: void testGetAllEdges()>:
		<org.jgrapht.graph.AsUndirectedGraphTest.java:123, 40.00%>
		<org.jgrapht.graph.AsUndirectedGraphTest.java:124, 65.00%>
		<org.jgrapht.graph.AsUndirectedGraphTest.java:128, 70.00%>
		<org.jgrapht.graph.AsUndirectedGraphTest.java:129, 80.00%>
	<org.jgrapht.graph.AsUnweightedGraphTest: void checkView(org.jgrapht.WeightedGraph,org.jgrapht.Graph)>:
		<org.jgrapht.graph.AsUnweightedGraphTest.java:120, 17.39%>
		<org.jgrapht.graph.AsUnweightedGraphTest.java:126, 17.39%>
		<org.jgrapht.graph.AsUnweightedGraphTest.java:132, 17.39%>
		<org.jgrapht.graph.AsUnweightedGraphTest.java:136, 17.39%>

Relevant Assertion clone sets (1):
Set (score: 1.00, ccsize: 2, packages: 1, classes: 1): 
	<org.jgrapht.alg.ConnectivityInspectorTest: void testStronglyConnected1()>:
		<org.jgrapht.alg.ConnectivityInspectorTest.java:222, 12.00%>
	<org.jgrapht.alg.ConnectivityInspectorTest: void testStronglyConnected2()>:
		<org.jgrapht.alg.ConnectivityInspectorTest.java:279, 12.00%>
	<org.jgrapht.alg.ConnectivityInspectorTest: void testStronglyConnected3()>:
		<org.jgrapht.alg.ConnectivityInspectorTest.java:337, 13.04%>
==============================================

[92] Set (editDistance: 2, isComplete: false, packages: 2, classes: 4): 
Centroid (size: 4): <org.jgrapht.graph.SubgraphTest: void testInducedSubgraphListener()>

Methods (6): 
	<org.jgrapht.alg.BellmanFordShortestPathTest: void testWithNegativeEdges()>:
		<org.jgrapht.alg.BellmanFordShortestPathTest.java:120, 45.45%>
		<org.jgrapht.alg.BellmanFordShortestPathTest.java:127, 63.64%>
	<org.jgrapht.alg.ConnectivityInspectorTest: void testStronglyConnected1()>:
		<org.jgrapht.alg.ConnectivityInspectorTest.java:211, 16.00%>
		<org.jgrapht.alg.ConnectivityInspectorTest.java:222, 12.00%>
		<org.jgrapht.alg.ConnectivityInspectorTest.java:225, 16.00%>
	<org.jgrapht.alg.ConnectivityInspectorTest: void testStronglyConnected2()>:
		<org.jgrapht.alg.ConnectivityInspectorTest.java:268, 16.00%>
		<org.jgrapht.alg.ConnectivityInspectorTest.java:279, 12.00%>
		<org.jgrapht.alg.ConnectivityInspectorTest.java:282, 16.00%>
	<org.jgrapht.alg.ConnectivityInspectorTest: void testStronglyConnected3()>:
		<org.jgrapht.alg.ConnectivityInspectorTest.java:325, 17.39%>
		<org.jgrapht.alg.ConnectivityInspectorTest.java:337, 13.04%>
		<org.jgrapht.alg.ConnectivityInspectorTest.java:340, 17.39%>
	<org.jgrapht.graph.AsUndirectedGraphTest: void testGetAllEdges()>:
		<org.jgrapht.graph.AsUndirectedGraphTest.java:123, 40.00%>
		<org.jgrapht.graph.AsUndirectedGraphTest.java:124, 65.00%>
		<org.jgrapht.graph.AsUndirectedGraphTest.java:128, 70.00%>
		<org.jgrapht.graph.AsUndirectedGraphTest.java:129, 80.00%>
	<org.jgrapht.graph.SubgraphTest: void testInducedSubgraphListener()>:
		<org.jgrapht.graph.SubgraphTest.java:86, 50.00%>
		<org.jgrapht.graph.SubgraphTest.java:87, 50.00%>
		<org.jgrapht.graph.SubgraphTest.java:91, 50.00%>
		<org.jgrapht.graph.SubgraphTest.java:92, 50.00%>

Relevant Assertion clone sets (1):
Set (score: 1.00, ccsize: 2, packages: 1, classes: 1): 
	<org.jgrapht.alg.ConnectivityInspectorTest: void testStronglyConnected1()>:
		<org.jgrapht.alg.ConnectivityInspectorTest.java:222, 12.00%>
	<org.jgrapht.alg.ConnectivityInspectorTest: void testStronglyConnected2()>:
		<org.jgrapht.alg.ConnectivityInspectorTest.java:279, 12.00%>
	<org.jgrapht.alg.ConnectivityInspectorTest: void testStronglyConnected3()>:
		<org.jgrapht.alg.ConnectivityInspectorTest.java:337, 13.04%>
==============================================

[93] Set (editDistance: 2, isComplete: false, packages: 2, classes: 4): 
Centroid (size: 4): <org.jgrapht.graph.SubgraphTest: void testSubgraphListener()>

Methods (6): 
	<org.jgrapht.alg.BellmanFordShortestPathTest: void testWithNegativeEdges()>:
		<org.jgrapht.alg.BellmanFordShortestPathTest.java:120, 45.45%>
		<org.jgrapht.alg.BellmanFordShortestPathTest.java:127, 63.64%>
	<org.jgrapht.alg.ConnectivityInspectorTest: void testStronglyConnected1()>:
		<org.jgrapht.alg.ConnectivityInspectorTest.java:211, 16.00%>
		<org.jgrapht.alg.ConnectivityInspectorTest.java:222, 12.00%>
		<org.jgrapht.alg.ConnectivityInspectorTest.java:225, 16.00%>
	<org.jgrapht.alg.ConnectivityInspectorTest: void testStronglyConnected2()>:
		<org.jgrapht.alg.ConnectivityInspectorTest.java:268, 16.00%>
		<org.jgrapht.alg.ConnectivityInspectorTest.java:279, 12.00%>
		<org.jgrapht.alg.ConnectivityInspectorTest.java:282, 16.00%>
	<org.jgrapht.alg.ConnectivityInspectorTest: void testStronglyConnected3()>:
		<org.jgrapht.alg.ConnectivityInspectorTest.java:325, 17.39%>
		<org.jgrapht.alg.ConnectivityInspectorTest.java:337, 13.04%>
		<org.jgrapht.alg.ConnectivityInspectorTest.java:340, 17.39%>
	<org.jgrapht.graph.AsUndirectedGraphTest: void testGetAllEdges()>:
		<org.jgrapht.graph.AsUndirectedGraphTest.java:123, 40.00%>
		<org.jgrapht.graph.AsUndirectedGraphTest.java:124, 65.00%>
		<org.jgrapht.graph.AsUndirectedGraphTest.java:128, 70.00%>
		<org.jgrapht.graph.AsUndirectedGraphTest.java:129, 80.00%>
	<org.jgrapht.graph.SubgraphTest: void testSubgraphListener()>:
		<org.jgrapht.graph.SubgraphTest.java:139, 43.75%>
		<org.jgrapht.graph.SubgraphTest.java:140, 43.75%>
		<org.jgrapht.graph.SubgraphTest.java:145, 31.25%>
		<org.jgrapht.graph.SubgraphTest.java:146, 43.75%>

Relevant Assertion clone sets (1):
Set (score: 1.00, ccsize: 2, packages: 1, classes: 1): 
	<org.jgrapht.alg.ConnectivityInspectorTest: void testStronglyConnected1()>:
		<org.jgrapht.alg.ConnectivityInspectorTest.java:222, 12.00%>
	<org.jgrapht.alg.ConnectivityInspectorTest: void testStronglyConnected2()>:
		<org.jgrapht.alg.ConnectivityInspectorTest.java:279, 12.00%>
	<org.jgrapht.alg.ConnectivityInspectorTest: void testStronglyConnected3()>:
		<org.jgrapht.alg.ConnectivityInspectorTest.java:337, 13.04%>
==============================================

[94] Set (editDistance: 2, isComplete: false, packages: 8, classes: 18): 
Centroid (size: 3): <org.jgrapht.alg.BiconnectivityInspectorTest: void testBiconnected()>

Methods (27): 
	<org.jgrapht.EnhancedTestCase: void assertFalse()>:
		<org.jgrapht.EnhancedTestCase.java:79, 100.00%>
	<org.jgrapht.EnhancedTestCase: void assertTrue()>:
		<org.jgrapht.EnhancedTestCase.java:87, 100.00%>
	<org.jgrapht.alg.BiconnectivityInspectorTest: void testBiconnected()>:
		<org.jgrapht.alg.BiconnectivityInspectorTest.java:64, 30.00%>
		<org.jgrapht.alg.BiconnectivityInspectorTest.java:65, 50.00%>
		<org.jgrapht.alg.BiconnectivityInspectorTest.java:66, 50.00%>
	<org.jgrapht.alg.BronKerboschCliqueFinderTest: void testFindAll()>:
		<org.jgrapht.alg.BronKerboschCliqueFinderTest.java:143, 26.32%>
		<org.jgrapht.alg.BronKerboschCliqueFinderTest.java:175, 21.05%>
	<org.jgrapht.alg.BronKerboschCliqueFinderTest: void testFindBiggest()>:
		<org.jgrapht.alg.BronKerboschCliqueFinderTest.java:119, 41.67%>
		<org.jgrapht.alg.BronKerboschCliqueFinderTest.java:129, 58.33%>
	<org.jgrapht.alg.EulerianCircuitTest: void testEulerianCircuit()>:
		<org.jgrapht.alg.EulerianCircuitTest.java:77, 11.76%>
		<org.jgrapht.alg.EulerianCircuitTest.java:78, 29.41%>
		<org.jgrapht.alg.EulerianCircuitTest.java:91, 11.76%>
		<org.jgrapht.alg.EulerianCircuitTest.java:95, 23.53%>
	<org.jgrapht.alg.FloydWarshallShortestPathsTest: void testCompareWithDijkstra()>:
		<org.jgrapht.alg.FloydWarshallShortestPathsTest.java:96, 7.41%>
		<org.jgrapht.alg.FloydWarshallShortestPathsTest.java:121, 7.41%>
	<org.jgrapht.alg.HamiltonianCycleTest: void testHamiltonianCycle()>:
		<org.jgrapht.alg.HamiltonianCycleTest.java:79, 33.33%>
		<org.jgrapht.alg.HamiltonianCycleTest.java:89, 27.78%>
	<org.jgrapht.alg.KSPExampleTest: void testFourReturnedPathsJGraphT()>:
		<org.jgrapht.alg.KSPExampleTest.java:60, 55.56%>
	<org.jgrapht.alg.KSPExampleTest: void testThreeReturnedPathsJGraphT()>:
		<org.jgrapht.alg.KSPExampleTest.java:72, 60.00%>
	<org.jgrapht.alg.KSPExampleTest: void testTwoReturnedPathsJGraphT()>:
		<org.jgrapht.alg.KSPExampleTest.java:84, 60.00%>
	<org.jgrapht.alg.KShortestPathCostTest: void verifyShortestPathsInIncreasingOrderOfWeight(org.jgrapht.Graph)>:
		<org.jgrapht.alg.KShortestPathCostTest.java:222, 30.77%>
		<org.jgrapht.alg.KShortestPathCostTest.java:225, 30.77%>
	<org.jgrapht.alg.KShortestPathCostTest: void verifyWeightsConsistency(java.util.List,java.util.List)>:
		<org.jgrapht.alg.KShortestPathCostTest.java:294, 53.85%>
	<org.jgrapht.alg.VertexCoversTest: void testFind2ApproximationCover()>:
		<org.jgrapht.alg.VertexCoversTest.java:74, 60.00%>
	<org.jgrapht.alg.VertexCoversTest: void testFindGreedyCover()>:
		<org.jgrapht.alg.VertexCoversTest.java:89, 50.00%>
	<org.jgrapht.experimental.dag.DirectedAcyclicGraphTest: void testCycleDetectionInRandomGraphBuild()>:
		<org.jgrapht.experimental.dag.DirectedAcyclicGraphTest.java:131, 14.29%>
		<org.jgrapht.experimental.dag.DirectedAcyclicGraphTest.java:141, 12.24%>
		<org.jgrapht.experimental.dag.DirectedAcyclicGraphTest.java:152, 6.12%>
	<org.jgrapht.experimental.equivalence.EquivalenceGroupCreatorTest: void testOneComparator(org.jgrapht.experimental.equivalence.EquivalenceComparator,int)>:
		<org.jgrapht.experimental.equivalence.EquivalenceGroupCreatorTest.java:152, 23.53%>
		<org.jgrapht.experimental.equivalence.EquivalenceGroupCreatorTest.java:157, 41.18%>
	<org.jgrapht.experimental.isomorphism.IsomorphismInspectorTest: void assertIsomorphic(org.jgrapht.Graph[],boolean,org.jgrapht.experimental.equivalence.EquivalenceComparator,org.jgrapht.experimental.equivalence.EquivalenceComparator)>:
		<org.jgrapht.experimental.isomorphism.IsomorphismInspectorTest.java:138, 28.57%>
		<org.jgrapht.experimental.isomorphism.IsomorphismInspectorTest.java:140, 28.57%>
	<org.jgrapht.generate.GraphGeneratorTest: void testCompleteGraphGenerator()>:
		<org.jgrapht.generate.GraphGeneratorTest.java:185, 62.50%>
	<org.jgrapht.generate.GraphGeneratorTest: void testEmptyGraphGenerator()>:
		<org.jgrapht.generate.GraphGeneratorTest.java:90, 38.46%>
		<org.jgrapht.generate.GraphGeneratorTest.java:91, 38.46%>
		<org.jgrapht.generate.GraphGeneratorTest.java:92, 23.08%>
	<org.jgrapht.generate.GraphGeneratorTest: void testStarGraphGenerator()>:
		<org.jgrapht.generate.GraphGeneratorTest.java:287, 35.71%>
		<org.jgrapht.generate.GraphGeneratorTest.java:288, 35.71%>
		<org.jgrapht.generate.GraphGeneratorTest.java:289, 42.86%>
	<org.jgrapht.generate.RandomGraphGeneratorTest: void testGenerateDirectedGraph()>:
		<org.jgrapht.generate.RandomGraphGeneratorTest.java:70, 20.00%>
	<org.jgrapht.generate.RandomGraphGeneratorTest: void testGenerateListenableUndirectedGraph()>:
		<org.jgrapht.generate.RandomGraphGeneratorTest.java:89, 20.00%>
	<org.jgrapht.graph.AsUndirectedGraphTest: void testDegreeOf()>:
		<org.jgrapht.graph.AsUndirectedGraphTest.java:111, 46.15%>
		<org.jgrapht.graph.AsUndirectedGraphTest.java:112, 61.54%>
		<org.jgrapht.graph.AsUndirectedGraphTest.java:113, 76.92%>
		<org.jgrapht.graph.AsUndirectedGraphTest.java:114, 92.31%>
	<org.jgrapht.graph.DefaultDirectedGraphTest: void testGetAllEdges()>:
		<org.jgrapht.graph.DefaultDirectedGraphTest.java:130, 100.00%>
	<org.jgrapht.graph.EqualsAndHashCodeTest: void testAsWeightedGraphs()>:
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:329, 5.17%>
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:330, 10.34%>
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:332, 5.17%>
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:333, 10.34%>
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:335, 8.62%>
	<org.jgrapht.util.FibonacciHeapTest: void testGrowReplaceShrink()>:
		<org.jgrapht.util.FibonacciHeapTest.java:88, 17.65%>
		<org.jgrapht.util.FibonacciHeapTest.java:91, 17.65%>

Relevant Assertion clone sets (3):
Set (score: 1.00, ccsize: 2, packages: 1, classes: 1): 
	<org.jgrapht.alg.VertexCoversTest: void testFind2ApproximationCover()>:
		<org.jgrapht.alg.VertexCoversTest.java:74, 60.00%>
	<org.jgrapht.alg.VertexCoversTest: void testFindGreedyCover()>:
		<org.jgrapht.alg.VertexCoversTest.java:89, 50.00%>
Set (score: 0.50, ccsize: 4, packages: 1, classes: 2): 
	<org.jgrapht.alg.EulerianCircuitTest: void testEulerianCircuit()>:
		<org.jgrapht.alg.EulerianCircuitTest.java:78, 29.41%>
	<org.jgrapht.alg.HamiltonianCycleTest: void testHamiltonianCycle()>:
		<org.jgrapht.alg.HamiltonianCycleTest.java:89, 27.78%>
Set (score: 0.50, ccsize: 3, packages: 1, classes: 1): 
	<org.jgrapht.alg.KSPExampleTest: void testFourReturnedPathsJGraphT()>:
		<org.jgrapht.alg.KSPExampleTest.java:60, 55.56%>
	<org.jgrapht.alg.KSPExampleTest: void testThreeReturnedPathsJGraphT()>:
		<org.jgrapht.alg.KSPExampleTest.java:72, 60.00%>
	<org.jgrapht.alg.KSPExampleTest: void testTwoReturnedPathsJGraphT()>:
		<org.jgrapht.alg.KSPExampleTest.java:84, 60.00%>
==============================================

[95] Set (editDistance: 2, isComplete: false, packages: 4, classes: 11): 
Centroid (size: 3): <org.jgrapht.alg.ChromaticNumberTest: void testChromaticNumber()>

Methods (18): 
	<org.jgrapht.alg.BronKerboschCliqueFinderTest: void testFindAll()>:
		<org.jgrapht.alg.BronKerboschCliqueFinderTest.java:143, 26.32%>
		<org.jgrapht.alg.BronKerboschCliqueFinderTest.java:175, 21.05%>
	<org.jgrapht.alg.BronKerboschCliqueFinderTest: void testFindBiggest()>:
		<org.jgrapht.alg.BronKerboschCliqueFinderTest.java:119, 41.67%>
		<org.jgrapht.alg.BronKerboschCliqueFinderTest.java:129, 58.33%>
	<org.jgrapht.alg.ChromaticNumberTest: void testChromaticNumber()>:
		<org.jgrapht.alg.ChromaticNumberTest.java:78, 18.75%>
		<org.jgrapht.alg.ChromaticNumberTest.java:83, 31.25%>
		<org.jgrapht.alg.ChromaticNumberTest.java:100, 18.75%>
	<org.jgrapht.alg.EdmondsBlossomShrinkingTest: void testOne()>:
		<org.jgrapht.alg.EdmondsBlossomShrinkingTest.java:80, 23.81%>
		<org.jgrapht.alg.EdmondsBlossomShrinkingTest.java:81, 19.05%>
		<org.jgrapht.alg.EdmondsBlossomShrinkingTest.java:82, 19.05%>
	<org.jgrapht.alg.KSPExampleTest: void testFourReturnedPathsJGraphT()>:
		<org.jgrapht.alg.KSPExampleTest.java:60, 55.56%>
	<org.jgrapht.alg.KSPExampleTest: void testThreeReturnedPathsJGraphT()>:
		<org.jgrapht.alg.KSPExampleTest.java:72, 60.00%>
	<org.jgrapht.alg.KSPExampleTest: void testTwoReturnedPathsJGraphT()>:
		<org.jgrapht.alg.KSPExampleTest.java:84, 60.00%>
	<org.jgrapht.alg.KShortestPathKValuesTest: void testMaxSizeValueCompleteGraph6()>:
		<org.jgrapht.alg.KShortestPathKValuesTest.java:86, 31.58%>
		<org.jgrapht.alg.KShortestPathKValuesTest.java:87, 31.58%>
		<org.jgrapht.alg.KShortestPathKValuesTest.java:88, 31.58%>
		<org.jgrapht.alg.KShortestPathKValuesTest.java:89, 31.58%>
		<org.jgrapht.alg.KShortestPathKValuesTest.java:90, 31.58%>
	<org.jgrapht.experimental.equivalence.EquivalenceGroupCreatorTest: void testOneComparator(org.jgrapht.experimental.equivalence.EquivalenceComparator,int)>:
		<org.jgrapht.experimental.equivalence.EquivalenceGroupCreatorTest.java:152, 23.53%>
		<org.jgrapht.experimental.equivalence.EquivalenceGroupCreatorTest.java:157, 41.18%>
	<org.jgrapht.generate.GraphGeneratorTest: void testCompleteGraphGenerator()>:
		<org.jgrapht.generate.GraphGeneratorTest.java:185, 62.50%>
	<org.jgrapht.graph.AsUndirectedGraphTest: void testGetAllEdges()>:
		<org.jgrapht.graph.AsUndirectedGraphTest.java:123, 40.00%>
		<org.jgrapht.graph.AsUndirectedGraphTest.java:124, 65.00%>
		<org.jgrapht.graph.AsUndirectedGraphTest.java:128, 70.00%>
		<org.jgrapht.graph.AsUndirectedGraphTest.java:129, 80.00%>
	<org.jgrapht.graph.DefaultDirectedGraphTest: void testGetAllEdges()>:
		<org.jgrapht.graph.DefaultDirectedGraphTest.java:130, 100.00%>
	<org.jgrapht.graph.EqualsAndHashCodeTest: void testDefaultDirectedGraph()>:
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:105, 6.52%>
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:106, 10.87%>
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:108, 13.04%>
	<org.jgrapht.graph.EqualsAndHashCodeTest: void testGraphsWithNonIntrusiveEdge()>:
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:187, 3.90%>
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:188, 6.49%>
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:190, 7.79%>
	<org.jgrapht.graph.EqualsAndHashCodeTest: void testGrapshWithCustomEdges()>:
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:268, 7.69%>
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:269, 12.82%>
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:271, 15.38%>
	<org.jgrapht.graph.EqualsAndHashCodeTest: void testPseudograph()>:
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:230, 5.08%>
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:231, 8.47%>
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:233, 10.17%>
	<org.jgrapht.graph.EqualsAndHashCodeTest: void testSimpleGraph()>:
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:148, 6.52%>
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:149, 10.87%>
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:151, 13.04%>
	<org.jgrapht.graph.SimpleDirectedGraphTest: void testRemoveEdgeEdge()>:
		<org.jgrapht.graph.SimpleDirectedGraphTest.java:341, 26.09%>
		<org.jgrapht.graph.SimpleDirectedGraphTest.java:343, 43.48%>
		<org.jgrapht.graph.SimpleDirectedGraphTest.java:344, 43.48%>
		<org.jgrapht.graph.SimpleDirectedGraphTest.java:345, 60.87%>
		<org.jgrapht.graph.SimpleDirectedGraphTest.java:346, 73.91%>

Relevant Assertion clone sets (3):
Set (score: 0.50, ccsize: 4, packages: 1, classes: 1): 
	<org.jgrapht.graph.EqualsAndHashCodeTest: void testDefaultDirectedGraph()>:
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:106, 10.87%>
	<org.jgrapht.graph.EqualsAndHashCodeTest: void testGraphsWithNonIntrusiveEdge()>:
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:188, 6.49%>
Set (score: 0.50, ccsize: 4, packages: 1, classes: 1): 
	<org.jgrapht.graph.EqualsAndHashCodeTest: void testGrapshWithCustomEdges()>:
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:269, 12.82%>
	<org.jgrapht.graph.EqualsAndHashCodeTest: void testSimpleGraph()>:
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:149, 10.87%>
Set (score: 0.50, ccsize: 3, packages: 1, classes: 1): 
	<org.jgrapht.alg.KSPExampleTest: void testFourReturnedPathsJGraphT()>:
		<org.jgrapht.alg.KSPExampleTest.java:60, 55.56%>
	<org.jgrapht.alg.KSPExampleTest: void testThreeReturnedPathsJGraphT()>:
		<org.jgrapht.alg.KSPExampleTest.java:72, 60.00%>
	<org.jgrapht.alg.KSPExampleTest: void testTwoReturnedPathsJGraphT()>:
		<org.jgrapht.alg.KSPExampleTest.java:84, 60.00%>
==============================================

[96] Set (editDistance: 2, isComplete: false, packages: 9, classes: 21): 
Centroid (size: 3): <org.jgrapht.alg.ConnectivityInspectorTest: void testStronglyConnected1()>

Methods (39): 
	<org.jgrapht.EnhancedTestCase: void assertFalse()>:
		<org.jgrapht.EnhancedTestCase.java:79, 100.00%>
	<org.jgrapht.EnhancedTestCase: void assertTrue()>:
		<org.jgrapht.EnhancedTestCase.java:87, 100.00%>
	<org.jgrapht.alg.BronKerboschCliqueFinderTest: void testFindAll()>:
		<org.jgrapht.alg.BronKerboschCliqueFinderTest.java:143, 26.32%>
		<org.jgrapht.alg.BronKerboschCliqueFinderTest.java:175, 21.05%>
	<org.jgrapht.alg.BronKerboschCliqueFinderTest: void testFindBiggest()>:
		<org.jgrapht.alg.BronKerboschCliqueFinderTest.java:119, 41.67%>
		<org.jgrapht.alg.BronKerboschCliqueFinderTest.java:129, 58.33%>
	<org.jgrapht.alg.ConnectivityInspectorTest: void testStronglyConnected1()>:
		<org.jgrapht.alg.ConnectivityInspectorTest.java:211, 16.00%>
		<org.jgrapht.alg.ConnectivityInspectorTest.java:222, 12.00%>
		<org.jgrapht.alg.ConnectivityInspectorTest.java:225, 16.00%>
	<org.jgrapht.alg.ConnectivityInspectorTest: void testStronglyConnected4()>:
		<org.jgrapht.alg.ConnectivityInspectorTest.java:371, 30.77%>
	<org.jgrapht.alg.EdmondsBlossomShrinkingTest: void testOne()>:
		<org.jgrapht.alg.EdmondsBlossomShrinkingTest.java:80, 23.81%>
		<org.jgrapht.alg.EdmondsBlossomShrinkingTest.java:81, 19.05%>
		<org.jgrapht.alg.EdmondsBlossomShrinkingTest.java:82, 19.05%>
	<org.jgrapht.alg.FloydWarshallShortestPathsTest: void testCompareWithDijkstra()>:
		<org.jgrapht.alg.FloydWarshallShortestPathsTest.java:96, 7.41%>
		<org.jgrapht.alg.FloydWarshallShortestPathsTest.java:121, 7.41%>
	<org.jgrapht.alg.FloydWarshallShortestPathsTest: void testDiameter()>:
		<org.jgrapht.alg.FloydWarshallShortestPathsTest.java:161, 57.14%>
	<org.jgrapht.alg.FloydWarshallShortestPathsTest: void testEdgeLessDiameter()>:
		<org.jgrapht.alg.FloydWarshallShortestPathsTest.java:182, 40.00%>
	<org.jgrapht.alg.FloydWarshallShortestPathsTest: void testEmptyDiameter()>:
		<org.jgrapht.alg.FloydWarshallShortestPathsTest.java:170, 50.00%>
	<org.jgrapht.alg.HamiltonianCycleTest: void testHamiltonianCycle()>:
		<org.jgrapht.alg.HamiltonianCycleTest.java:79, 33.33%>
		<org.jgrapht.alg.HamiltonianCycleTest.java:89, 27.78%>
	<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest: void testBipartiteMatching1()>:
		<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest.java:83, 6.76%>
		<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest.java:86, 6.76%>
	<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest: void testBipartiteMatching2()>:
		<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest.java:112, 5.21%>
		<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest.java:115, 5.21%>
	<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest: void testEmptyMatching()>:
		<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest.java:128, 33.33%>
	<org.jgrapht.alg.KShortestPathCostTest: void verifyShortestPathsInIncreasingOrderOfWeight(org.jgrapht.Graph)>:
		<org.jgrapht.alg.KShortestPathCostTest.java:222, 30.77%>
		<org.jgrapht.alg.KShortestPathCostTest.java:225, 30.77%>
	<org.jgrapht.alg.KShortestPathCostTest: void verifyWeightsConsistency(java.util.List,java.util.List)>:
		<org.jgrapht.alg.KShortestPathCostTest.java:294, 53.85%>
	<org.jgrapht.alg.ShortestPathTestCase: void testPathBetween()>:
		<org.jgrapht.alg.ShortestPathTestCase.java:86, 21.74%>
		<org.jgrapht.alg.ShortestPathTestCase.java:89, 26.09%>
		<org.jgrapht.alg.ShortestPathTestCase.java:96, 34.78%>
		<org.jgrapht.alg.ShortestPathTestCase.java:104, 47.83%>
	<org.jgrapht.alg.VertexCoversTest: void testFind2ApproximationCover()>:
		<org.jgrapht.alg.VertexCoversTest.java:74, 60.00%>
	<org.jgrapht.alg.VertexCoversTest: void testFindGreedyCover()>:
		<org.jgrapht.alg.VertexCoversTest.java:89, 50.00%>
	<org.jgrapht.experimental.alg.ColoringTest: void testBacktrackColoring()>:
		<org.jgrapht.experimental.alg.ColoringTest.java:97, 50.00%>
	<org.jgrapht.experimental.alg.ColoringTest: void testGreedyColoring()>:
		<org.jgrapht.experimental.alg.ColoringTest.java:77, 50.00%>
	<org.jgrapht.experimental.dag.DirectedAcyclicGraphTest: void testCycleDetectionInRandomGraphBuild()>:
		<org.jgrapht.experimental.dag.DirectedAcyclicGraphTest.java:131, 14.29%>
		<org.jgrapht.experimental.dag.DirectedAcyclicGraphTest.java:141, 12.24%>
		<org.jgrapht.experimental.dag.DirectedAcyclicGraphTest.java:152, 6.12%>
	<org.jgrapht.experimental.equivalence.EquivalenceGroupCreatorTest: void testOneComparator(org.jgrapht.experimental.equivalence.EquivalenceComparator,int)>:
		<org.jgrapht.experimental.equivalence.EquivalenceGroupCreatorTest.java:152, 23.53%>
		<org.jgrapht.experimental.equivalence.EquivalenceGroupCreatorTest.java:157, 41.18%>
	<org.jgrapht.experimental.isomorphism.IsomorphismInspectorTest: void assertIsomorphic(org.jgrapht.Graph[],boolean,org.jgrapht.experimental.equivalence.EquivalenceComparator,org.jgrapht.experimental.equivalence.EquivalenceComparator)>:
		<org.jgrapht.experimental.isomorphism.IsomorphismInspectorTest.java:138, 28.57%>
		<org.jgrapht.experimental.isomorphism.IsomorphismInspectorTest.java:140, 28.57%>
	<org.jgrapht.generate.RandomGraphGeneratorTest: void testGenerateDirectedGraph()>:
		<org.jgrapht.generate.RandomGraphGeneratorTest.java:70, 20.00%>
	<org.jgrapht.generate.RandomGraphGeneratorTest: void testGenerateListenableUndirectedGraph()>:
		<org.jgrapht.generate.RandomGraphGeneratorTest.java:89, 20.00%>
	<org.jgrapht.graph.AsUndirectedGraphTest: void testGetAllEdges()>:
		<org.jgrapht.graph.AsUndirectedGraphTest.java:123, 40.00%>
		<org.jgrapht.graph.AsUndirectedGraphTest.java:124, 65.00%>
		<org.jgrapht.graph.AsUndirectedGraphTest.java:128, 70.00%>
		<org.jgrapht.graph.AsUndirectedGraphTest.java:129, 80.00%>
	<org.jgrapht.graph.AsUnweightedGraphTest: void checkView(org.jgrapht.WeightedGraph,org.jgrapht.Graph)>:
		<org.jgrapht.graph.AsUnweightedGraphTest.java:120, 17.39%>
		<org.jgrapht.graph.AsUnweightedGraphTest.java:126, 17.39%>
		<org.jgrapht.graph.AsUnweightedGraphTest.java:132, 17.39%>
		<org.jgrapht.graph.AsUnweightedGraphTest.java:136, 17.39%>
	<org.jgrapht.graph.AsUnweightedGraphTest: void constructWeighted(org.jgrapht.WeightedGraph)>:
		<org.jgrapht.graph.AsUnweightedGraphTest.java:110, 57.14%>
	<org.jgrapht.graph.EqualsAndHashCodeTest: void testDefaultDirectedGraph()>:
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:105, 6.52%>
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:106, 10.87%>
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:108, 13.04%>
	<org.jgrapht.graph.EqualsAndHashCodeTest: void testGraphsWithNonIntrusiveEdge()>:
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:187, 3.90%>
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:188, 6.49%>
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:190, 7.79%>
	<org.jgrapht.graph.EqualsAndHashCodeTest: void testGrapshWithCustomEdges()>:
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:268, 7.69%>
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:269, 12.82%>
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:271, 15.38%>
	<org.jgrapht.graph.EqualsAndHashCodeTest: void testPseudograph()>:
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:230, 5.08%>
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:231, 8.47%>
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:233, 10.17%>
	<org.jgrapht.graph.EqualsAndHashCodeTest: void testSimpleGraph()>:
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:148, 6.52%>
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:149, 10.87%>
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:151, 13.04%>
	<org.jgrapht.graph.SimpleDirectedGraphTest: void testIncomingOutgoingEdgesOf()>:
		<org.jgrapht.graph.SimpleDirectedGraphTest.java:315, 128.57%>
	<org.jgrapht.graph.SubgraphTest: void testInducedSubgraphListener()>:
		<org.jgrapht.graph.SubgraphTest.java:86, 50.00%>
		<org.jgrapht.graph.SubgraphTest.java:87, 50.00%>
		<org.jgrapht.graph.SubgraphTest.java:91, 50.00%>
		<org.jgrapht.graph.SubgraphTest.java:92, 50.00%>
	<org.jgrapht.graph.SubgraphTest: void testSubgraphListener()>:
		<org.jgrapht.graph.SubgraphTest.java:139, 43.75%>
		<org.jgrapht.graph.SubgraphTest.java:140, 43.75%>
		<org.jgrapht.graph.SubgraphTest.java:145, 31.25%>
		<org.jgrapht.graph.SubgraphTest.java:146, 43.75%>
	<org.jgrapht.util.FibonacciHeapTest: void testGrowReplaceShrink()>:
		<org.jgrapht.util.FibonacciHeapTest.java:88, 17.65%>
		<org.jgrapht.util.FibonacciHeapTest.java:91, 17.65%>

Relevant Assertion clone sets (5):
Set (score: 1.00, ccsize: 2, packages: 1, classes: 1): 
	<org.jgrapht.alg.VertexCoversTest: void testFind2ApproximationCover()>:
		<org.jgrapht.alg.VertexCoversTest.java:74, 60.00%>
	<org.jgrapht.alg.VertexCoversTest: void testFindGreedyCover()>:
		<org.jgrapht.alg.VertexCoversTest.java:89, 50.00%>
Set (score: 0.67, ccsize: 2, packages: 1, classes: 1): 
	<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest: void testBipartiteMatching1()>:
		<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest.java:86, 6.76%>
	<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest: void testBipartiteMatching2()>:
		<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest.java:115, 5.21%>
Set (score: 0.50, ccsize: 4, packages: 1, classes: 1): 
	<org.jgrapht.graph.EqualsAndHashCodeTest: void testDefaultDirectedGraph()>:
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:106, 10.87%>
	<org.jgrapht.graph.EqualsAndHashCodeTest: void testGraphsWithNonIntrusiveEdge()>:
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:188, 6.49%>
Set (score: 0.50, ccsize: 4, packages: 1, classes: 1): 
	<org.jgrapht.graph.EqualsAndHashCodeTest: void testGrapshWithCustomEdges()>:
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:269, 12.82%>
	<org.jgrapht.graph.EqualsAndHashCodeTest: void testSimpleGraph()>:
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:149, 10.87%>
Set (score: 0.50, ccsize: 2, packages: 1, classes: 1): 
	<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest: void testBipartiteMatching1()>:
		<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest.java:83, 6.76%>
	<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest: void testBipartiteMatching2()>:
		<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest.java:112, 5.21%>
==============================================

[97] Set (editDistance: 2, isComplete: false, packages: 9, classes: 21): 
Centroid (size: 3): <org.jgrapht.alg.ConnectivityInspectorTest: void testStronglyConnected2()>

Methods (39): 
	<org.jgrapht.EnhancedTestCase: void assertFalse()>:
		<org.jgrapht.EnhancedTestCase.java:79, 100.00%>
	<org.jgrapht.EnhancedTestCase: void assertTrue()>:
		<org.jgrapht.EnhancedTestCase.java:87, 100.00%>
	<org.jgrapht.alg.BronKerboschCliqueFinderTest: void testFindAll()>:
		<org.jgrapht.alg.BronKerboschCliqueFinderTest.java:143, 26.32%>
		<org.jgrapht.alg.BronKerboschCliqueFinderTest.java:175, 21.05%>
	<org.jgrapht.alg.BronKerboschCliqueFinderTest: void testFindBiggest()>:
		<org.jgrapht.alg.BronKerboschCliqueFinderTest.java:119, 41.67%>
		<org.jgrapht.alg.BronKerboschCliqueFinderTest.java:129, 58.33%>
	<org.jgrapht.alg.ConnectivityInspectorTest: void testStronglyConnected2()>:
		<org.jgrapht.alg.ConnectivityInspectorTest.java:268, 16.00%>
		<org.jgrapht.alg.ConnectivityInspectorTest.java:279, 12.00%>
		<org.jgrapht.alg.ConnectivityInspectorTest.java:282, 16.00%>
	<org.jgrapht.alg.ConnectivityInspectorTest: void testStronglyConnected4()>:
		<org.jgrapht.alg.ConnectivityInspectorTest.java:371, 30.77%>
	<org.jgrapht.alg.EdmondsBlossomShrinkingTest: void testOne()>:
		<org.jgrapht.alg.EdmondsBlossomShrinkingTest.java:80, 23.81%>
		<org.jgrapht.alg.EdmondsBlossomShrinkingTest.java:81, 19.05%>
		<org.jgrapht.alg.EdmondsBlossomShrinkingTest.java:82, 19.05%>
	<org.jgrapht.alg.FloydWarshallShortestPathsTest: void testCompareWithDijkstra()>:
		<org.jgrapht.alg.FloydWarshallShortestPathsTest.java:96, 7.41%>
		<org.jgrapht.alg.FloydWarshallShortestPathsTest.java:121, 7.41%>
	<org.jgrapht.alg.FloydWarshallShortestPathsTest: void testDiameter()>:
		<org.jgrapht.alg.FloydWarshallShortestPathsTest.java:161, 57.14%>
	<org.jgrapht.alg.FloydWarshallShortestPathsTest: void testEdgeLessDiameter()>:
		<org.jgrapht.alg.FloydWarshallShortestPathsTest.java:182, 40.00%>
	<org.jgrapht.alg.FloydWarshallShortestPathsTest: void testEmptyDiameter()>:
		<org.jgrapht.alg.FloydWarshallShortestPathsTest.java:170, 50.00%>
	<org.jgrapht.alg.HamiltonianCycleTest: void testHamiltonianCycle()>:
		<org.jgrapht.alg.HamiltonianCycleTest.java:79, 33.33%>
		<org.jgrapht.alg.HamiltonianCycleTest.java:89, 27.78%>
	<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest: void testBipartiteMatching1()>:
		<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest.java:83, 6.76%>
		<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest.java:86, 6.76%>
	<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest: void testBipartiteMatching2()>:
		<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest.java:112, 5.21%>
		<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest.java:115, 5.21%>
	<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest: void testEmptyMatching()>:
		<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest.java:128, 33.33%>
	<org.jgrapht.alg.KShortestPathCostTest: void verifyShortestPathsInIncreasingOrderOfWeight(org.jgrapht.Graph)>:
		<org.jgrapht.alg.KShortestPathCostTest.java:222, 30.77%>
		<org.jgrapht.alg.KShortestPathCostTest.java:225, 30.77%>
	<org.jgrapht.alg.KShortestPathCostTest: void verifyWeightsConsistency(java.util.List,java.util.List)>:
		<org.jgrapht.alg.KShortestPathCostTest.java:294, 53.85%>
	<org.jgrapht.alg.ShortestPathTestCase: void testPathBetween()>:
		<org.jgrapht.alg.ShortestPathTestCase.java:86, 21.74%>
		<org.jgrapht.alg.ShortestPathTestCase.java:89, 26.09%>
		<org.jgrapht.alg.ShortestPathTestCase.java:96, 34.78%>
		<org.jgrapht.alg.ShortestPathTestCase.java:104, 47.83%>
	<org.jgrapht.alg.VertexCoversTest: void testFind2ApproximationCover()>:
		<org.jgrapht.alg.VertexCoversTest.java:74, 60.00%>
	<org.jgrapht.alg.VertexCoversTest: void testFindGreedyCover()>:
		<org.jgrapht.alg.VertexCoversTest.java:89, 50.00%>
	<org.jgrapht.experimental.alg.ColoringTest: void testBacktrackColoring()>:
		<org.jgrapht.experimental.alg.ColoringTest.java:97, 50.00%>
	<org.jgrapht.experimental.alg.ColoringTest: void testGreedyColoring()>:
		<org.jgrapht.experimental.alg.ColoringTest.java:77, 50.00%>
	<org.jgrapht.experimental.dag.DirectedAcyclicGraphTest: void testCycleDetectionInRandomGraphBuild()>:
		<org.jgrapht.experimental.dag.DirectedAcyclicGraphTest.java:131, 14.29%>
		<org.jgrapht.experimental.dag.DirectedAcyclicGraphTest.java:141, 12.24%>
		<org.jgrapht.experimental.dag.DirectedAcyclicGraphTest.java:152, 6.12%>
	<org.jgrapht.experimental.equivalence.EquivalenceGroupCreatorTest: void testOneComparator(org.jgrapht.experimental.equivalence.EquivalenceComparator,int)>:
		<org.jgrapht.experimental.equivalence.EquivalenceGroupCreatorTest.java:152, 23.53%>
		<org.jgrapht.experimental.equivalence.EquivalenceGroupCreatorTest.java:157, 41.18%>
	<org.jgrapht.experimental.isomorphism.IsomorphismInspectorTest: void assertIsomorphic(org.jgrapht.Graph[],boolean,org.jgrapht.experimental.equivalence.EquivalenceComparator,org.jgrapht.experimental.equivalence.EquivalenceComparator)>:
		<org.jgrapht.experimental.isomorphism.IsomorphismInspectorTest.java:138, 28.57%>
		<org.jgrapht.experimental.isomorphism.IsomorphismInspectorTest.java:140, 28.57%>
	<org.jgrapht.generate.RandomGraphGeneratorTest: void testGenerateDirectedGraph()>:
		<org.jgrapht.generate.RandomGraphGeneratorTest.java:70, 20.00%>
	<org.jgrapht.generate.RandomGraphGeneratorTest: void testGenerateListenableUndirectedGraph()>:
		<org.jgrapht.generate.RandomGraphGeneratorTest.java:89, 20.00%>
	<org.jgrapht.graph.AsUndirectedGraphTest: void testGetAllEdges()>:
		<org.jgrapht.graph.AsUndirectedGraphTest.java:123, 40.00%>
		<org.jgrapht.graph.AsUndirectedGraphTest.java:124, 65.00%>
		<org.jgrapht.graph.AsUndirectedGraphTest.java:128, 70.00%>
		<org.jgrapht.graph.AsUndirectedGraphTest.java:129, 80.00%>
	<org.jgrapht.graph.AsUnweightedGraphTest: void checkView(org.jgrapht.WeightedGraph,org.jgrapht.Graph)>:
		<org.jgrapht.graph.AsUnweightedGraphTest.java:120, 17.39%>
		<org.jgrapht.graph.AsUnweightedGraphTest.java:126, 17.39%>
		<org.jgrapht.graph.AsUnweightedGraphTest.java:132, 17.39%>
		<org.jgrapht.graph.AsUnweightedGraphTest.java:136, 17.39%>
	<org.jgrapht.graph.AsUnweightedGraphTest: void constructWeighted(org.jgrapht.WeightedGraph)>:
		<org.jgrapht.graph.AsUnweightedGraphTest.java:110, 57.14%>
	<org.jgrapht.graph.EqualsAndHashCodeTest: void testDefaultDirectedGraph()>:
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:105, 6.52%>
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:106, 10.87%>
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:108, 13.04%>
	<org.jgrapht.graph.EqualsAndHashCodeTest: void testGraphsWithNonIntrusiveEdge()>:
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:187, 3.90%>
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:188, 6.49%>
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:190, 7.79%>
	<org.jgrapht.graph.EqualsAndHashCodeTest: void testGrapshWithCustomEdges()>:
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:268, 7.69%>
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:269, 12.82%>
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:271, 15.38%>
	<org.jgrapht.graph.EqualsAndHashCodeTest: void testPseudograph()>:
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:230, 5.08%>
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:231, 8.47%>
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:233, 10.17%>
	<org.jgrapht.graph.EqualsAndHashCodeTest: void testSimpleGraph()>:
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:148, 6.52%>
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:149, 10.87%>
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:151, 13.04%>
	<org.jgrapht.graph.SimpleDirectedGraphTest: void testIncomingOutgoingEdgesOf()>:
		<org.jgrapht.graph.SimpleDirectedGraphTest.java:315, 128.57%>
	<org.jgrapht.graph.SubgraphTest: void testInducedSubgraphListener()>:
		<org.jgrapht.graph.SubgraphTest.java:86, 50.00%>
		<org.jgrapht.graph.SubgraphTest.java:87, 50.00%>
		<org.jgrapht.graph.SubgraphTest.java:91, 50.00%>
		<org.jgrapht.graph.SubgraphTest.java:92, 50.00%>
	<org.jgrapht.graph.SubgraphTest: void testSubgraphListener()>:
		<org.jgrapht.graph.SubgraphTest.java:139, 43.75%>
		<org.jgrapht.graph.SubgraphTest.java:140, 43.75%>
		<org.jgrapht.graph.SubgraphTest.java:145, 31.25%>
		<org.jgrapht.graph.SubgraphTest.java:146, 43.75%>
	<org.jgrapht.util.FibonacciHeapTest: void testGrowReplaceShrink()>:
		<org.jgrapht.util.FibonacciHeapTest.java:88, 17.65%>
		<org.jgrapht.util.FibonacciHeapTest.java:91, 17.65%>

Relevant Assertion clone sets (5):
Set (score: 1.00, ccsize: 2, packages: 1, classes: 1): 
	<org.jgrapht.alg.VertexCoversTest: void testFind2ApproximationCover()>:
		<org.jgrapht.alg.VertexCoversTest.java:74, 60.00%>
	<org.jgrapht.alg.VertexCoversTest: void testFindGreedyCover()>:
		<org.jgrapht.alg.VertexCoversTest.java:89, 50.00%>
Set (score: 0.67, ccsize: 2, packages: 1, classes: 1): 
	<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest: void testBipartiteMatching1()>:
		<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest.java:86, 6.76%>
	<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest: void testBipartiteMatching2()>:
		<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest.java:115, 5.21%>
Set (score: 0.50, ccsize: 4, packages: 1, classes: 1): 
	<org.jgrapht.graph.EqualsAndHashCodeTest: void testDefaultDirectedGraph()>:
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:106, 10.87%>
	<org.jgrapht.graph.EqualsAndHashCodeTest: void testGraphsWithNonIntrusiveEdge()>:
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:188, 6.49%>
Set (score: 0.50, ccsize: 4, packages: 1, classes: 1): 
	<org.jgrapht.graph.EqualsAndHashCodeTest: void testGrapshWithCustomEdges()>:
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:269, 12.82%>
	<org.jgrapht.graph.EqualsAndHashCodeTest: void testSimpleGraph()>:
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:149, 10.87%>
Set (score: 0.50, ccsize: 2, packages: 1, classes: 1): 
	<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest: void testBipartiteMatching1()>:
		<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest.java:83, 6.76%>
	<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest: void testBipartiteMatching2()>:
		<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest.java:112, 5.21%>
==============================================

[98] Set (editDistance: 2, isComplete: false, packages: 9, classes: 21): 
Centroid (size: 3): <org.jgrapht.alg.ConnectivityInspectorTest: void testStronglyConnected3()>

Methods (39): 
	<org.jgrapht.EnhancedTestCase: void assertFalse()>:
		<org.jgrapht.EnhancedTestCase.java:79, 100.00%>
	<org.jgrapht.EnhancedTestCase: void assertTrue()>:
		<org.jgrapht.EnhancedTestCase.java:87, 100.00%>
	<org.jgrapht.alg.BronKerboschCliqueFinderTest: void testFindAll()>:
		<org.jgrapht.alg.BronKerboschCliqueFinderTest.java:143, 26.32%>
		<org.jgrapht.alg.BronKerboschCliqueFinderTest.java:175, 21.05%>
	<org.jgrapht.alg.BronKerboschCliqueFinderTest: void testFindBiggest()>:
		<org.jgrapht.alg.BronKerboschCliqueFinderTest.java:119, 41.67%>
		<org.jgrapht.alg.BronKerboschCliqueFinderTest.java:129, 58.33%>
	<org.jgrapht.alg.ConnectivityInspectorTest: void testStronglyConnected3()>:
		<org.jgrapht.alg.ConnectivityInspectorTest.java:325, 17.39%>
		<org.jgrapht.alg.ConnectivityInspectorTest.java:337, 13.04%>
		<org.jgrapht.alg.ConnectivityInspectorTest.java:340, 17.39%>
	<org.jgrapht.alg.ConnectivityInspectorTest: void testStronglyConnected4()>:
		<org.jgrapht.alg.ConnectivityInspectorTest.java:371, 30.77%>
	<org.jgrapht.alg.EdmondsBlossomShrinkingTest: void testOne()>:
		<org.jgrapht.alg.EdmondsBlossomShrinkingTest.java:80, 23.81%>
		<org.jgrapht.alg.EdmondsBlossomShrinkingTest.java:81, 19.05%>
		<org.jgrapht.alg.EdmondsBlossomShrinkingTest.java:82, 19.05%>
	<org.jgrapht.alg.FloydWarshallShortestPathsTest: void testCompareWithDijkstra()>:
		<org.jgrapht.alg.FloydWarshallShortestPathsTest.java:96, 7.41%>
		<org.jgrapht.alg.FloydWarshallShortestPathsTest.java:121, 7.41%>
	<org.jgrapht.alg.FloydWarshallShortestPathsTest: void testDiameter()>:
		<org.jgrapht.alg.FloydWarshallShortestPathsTest.java:161, 57.14%>
	<org.jgrapht.alg.FloydWarshallShortestPathsTest: void testEdgeLessDiameter()>:
		<org.jgrapht.alg.FloydWarshallShortestPathsTest.java:182, 40.00%>
	<org.jgrapht.alg.FloydWarshallShortestPathsTest: void testEmptyDiameter()>:
		<org.jgrapht.alg.FloydWarshallShortestPathsTest.java:170, 50.00%>
	<org.jgrapht.alg.HamiltonianCycleTest: void testHamiltonianCycle()>:
		<org.jgrapht.alg.HamiltonianCycleTest.java:79, 33.33%>
		<org.jgrapht.alg.HamiltonianCycleTest.java:89, 27.78%>
	<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest: void testBipartiteMatching1()>:
		<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest.java:83, 6.76%>
		<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest.java:86, 6.76%>
	<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest: void testBipartiteMatching2()>:
		<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest.java:112, 5.21%>
		<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest.java:115, 5.21%>
	<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest: void testEmptyMatching()>:
		<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest.java:128, 33.33%>
	<org.jgrapht.alg.KShortestPathCostTest: void verifyShortestPathsInIncreasingOrderOfWeight(org.jgrapht.Graph)>:
		<org.jgrapht.alg.KShortestPathCostTest.java:222, 30.77%>
		<org.jgrapht.alg.KShortestPathCostTest.java:225, 30.77%>
	<org.jgrapht.alg.KShortestPathCostTest: void verifyWeightsConsistency(java.util.List,java.util.List)>:
		<org.jgrapht.alg.KShortestPathCostTest.java:294, 53.85%>
	<org.jgrapht.alg.ShortestPathTestCase: void testPathBetween()>:
		<org.jgrapht.alg.ShortestPathTestCase.java:86, 21.74%>
		<org.jgrapht.alg.ShortestPathTestCase.java:89, 26.09%>
		<org.jgrapht.alg.ShortestPathTestCase.java:96, 34.78%>
		<org.jgrapht.alg.ShortestPathTestCase.java:104, 47.83%>
	<org.jgrapht.alg.VertexCoversTest: void testFind2ApproximationCover()>:
		<org.jgrapht.alg.VertexCoversTest.java:74, 60.00%>
	<org.jgrapht.alg.VertexCoversTest: void testFindGreedyCover()>:
		<org.jgrapht.alg.VertexCoversTest.java:89, 50.00%>
	<org.jgrapht.experimental.alg.ColoringTest: void testBacktrackColoring()>:
		<org.jgrapht.experimental.alg.ColoringTest.java:97, 50.00%>
	<org.jgrapht.experimental.alg.ColoringTest: void testGreedyColoring()>:
		<org.jgrapht.experimental.alg.ColoringTest.java:77, 50.00%>
	<org.jgrapht.experimental.dag.DirectedAcyclicGraphTest: void testCycleDetectionInRandomGraphBuild()>:
		<org.jgrapht.experimental.dag.DirectedAcyclicGraphTest.java:131, 14.29%>
		<org.jgrapht.experimental.dag.DirectedAcyclicGraphTest.java:141, 12.24%>
		<org.jgrapht.experimental.dag.DirectedAcyclicGraphTest.java:152, 6.12%>
	<org.jgrapht.experimental.equivalence.EquivalenceGroupCreatorTest: void testOneComparator(org.jgrapht.experimental.equivalence.EquivalenceComparator,int)>:
		<org.jgrapht.experimental.equivalence.EquivalenceGroupCreatorTest.java:152, 23.53%>
		<org.jgrapht.experimental.equivalence.EquivalenceGroupCreatorTest.java:157, 41.18%>
	<org.jgrapht.experimental.isomorphism.IsomorphismInspectorTest: void assertIsomorphic(org.jgrapht.Graph[],boolean,org.jgrapht.experimental.equivalence.EquivalenceComparator,org.jgrapht.experimental.equivalence.EquivalenceComparator)>:
		<org.jgrapht.experimental.isomorphism.IsomorphismInspectorTest.java:138, 28.57%>
		<org.jgrapht.experimental.isomorphism.IsomorphismInspectorTest.java:140, 28.57%>
	<org.jgrapht.generate.RandomGraphGeneratorTest: void testGenerateDirectedGraph()>:
		<org.jgrapht.generate.RandomGraphGeneratorTest.java:70, 20.00%>
	<org.jgrapht.generate.RandomGraphGeneratorTest: void testGenerateListenableUndirectedGraph()>:
		<org.jgrapht.generate.RandomGraphGeneratorTest.java:89, 20.00%>
	<org.jgrapht.graph.AsUndirectedGraphTest: void testGetAllEdges()>:
		<org.jgrapht.graph.AsUndirectedGraphTest.java:123, 40.00%>
		<org.jgrapht.graph.AsUndirectedGraphTest.java:124, 65.00%>
		<org.jgrapht.graph.AsUndirectedGraphTest.java:128, 70.00%>
		<org.jgrapht.graph.AsUndirectedGraphTest.java:129, 80.00%>
	<org.jgrapht.graph.AsUnweightedGraphTest: void checkView(org.jgrapht.WeightedGraph,org.jgrapht.Graph)>:
		<org.jgrapht.graph.AsUnweightedGraphTest.java:120, 17.39%>
		<org.jgrapht.graph.AsUnweightedGraphTest.java:126, 17.39%>
		<org.jgrapht.graph.AsUnweightedGraphTest.java:132, 17.39%>
		<org.jgrapht.graph.AsUnweightedGraphTest.java:136, 17.39%>
	<org.jgrapht.graph.AsUnweightedGraphTest: void constructWeighted(org.jgrapht.WeightedGraph)>:
		<org.jgrapht.graph.AsUnweightedGraphTest.java:110, 57.14%>
	<org.jgrapht.graph.EqualsAndHashCodeTest: void testDefaultDirectedGraph()>:
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:105, 6.52%>
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:106, 10.87%>
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:108, 13.04%>
	<org.jgrapht.graph.EqualsAndHashCodeTest: void testGraphsWithNonIntrusiveEdge()>:
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:187, 3.90%>
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:188, 6.49%>
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:190, 7.79%>
	<org.jgrapht.graph.EqualsAndHashCodeTest: void testGrapshWithCustomEdges()>:
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:268, 7.69%>
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:269, 12.82%>
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:271, 15.38%>
	<org.jgrapht.graph.EqualsAndHashCodeTest: void testPseudograph()>:
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:230, 5.08%>
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:231, 8.47%>
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:233, 10.17%>
	<org.jgrapht.graph.EqualsAndHashCodeTest: void testSimpleGraph()>:
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:148, 6.52%>
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:149, 10.87%>
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:151, 13.04%>
	<org.jgrapht.graph.SimpleDirectedGraphTest: void testIncomingOutgoingEdgesOf()>:
		<org.jgrapht.graph.SimpleDirectedGraphTest.java:315, 128.57%>
	<org.jgrapht.graph.SubgraphTest: void testInducedSubgraphListener()>:
		<org.jgrapht.graph.SubgraphTest.java:86, 50.00%>
		<org.jgrapht.graph.SubgraphTest.java:87, 50.00%>
		<org.jgrapht.graph.SubgraphTest.java:91, 50.00%>
		<org.jgrapht.graph.SubgraphTest.java:92, 50.00%>
	<org.jgrapht.graph.SubgraphTest: void testSubgraphListener()>:
		<org.jgrapht.graph.SubgraphTest.java:139, 43.75%>
		<org.jgrapht.graph.SubgraphTest.java:140, 43.75%>
		<org.jgrapht.graph.SubgraphTest.java:145, 31.25%>
		<org.jgrapht.graph.SubgraphTest.java:146, 43.75%>
	<org.jgrapht.util.FibonacciHeapTest: void testGrowReplaceShrink()>:
		<org.jgrapht.util.FibonacciHeapTest.java:88, 17.65%>
		<org.jgrapht.util.FibonacciHeapTest.java:91, 17.65%>

Relevant Assertion clone sets (5):
Set (score: 1.00, ccsize: 2, packages: 1, classes: 1): 
	<org.jgrapht.alg.VertexCoversTest: void testFind2ApproximationCover()>:
		<org.jgrapht.alg.VertexCoversTest.java:74, 60.00%>
	<org.jgrapht.alg.VertexCoversTest: void testFindGreedyCover()>:
		<org.jgrapht.alg.VertexCoversTest.java:89, 50.00%>
Set (score: 0.67, ccsize: 2, packages: 1, classes: 1): 
	<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest: void testBipartiteMatching1()>:
		<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest.java:86, 6.76%>
	<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest: void testBipartiteMatching2()>:
		<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest.java:115, 5.21%>
Set (score: 0.50, ccsize: 4, packages: 1, classes: 1): 
	<org.jgrapht.graph.EqualsAndHashCodeTest: void testDefaultDirectedGraph()>:
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:106, 10.87%>
	<org.jgrapht.graph.EqualsAndHashCodeTest: void testGraphsWithNonIntrusiveEdge()>:
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:188, 6.49%>
Set (score: 0.50, ccsize: 4, packages: 1, classes: 1): 
	<org.jgrapht.graph.EqualsAndHashCodeTest: void testGrapshWithCustomEdges()>:
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:269, 12.82%>
	<org.jgrapht.graph.EqualsAndHashCodeTest: void testSimpleGraph()>:
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:149, 10.87%>
Set (score: 0.50, ccsize: 2, packages: 1, classes: 1): 
	<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest: void testBipartiteMatching1()>:
		<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest.java:83, 6.76%>
	<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest: void testBipartiteMatching2()>:
		<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest.java:112, 5.21%>
==============================================

[99] Set (editDistance: 2, isComplete: false, packages: 7, classes: 22): 
Centroid (size: 3): <org.jgrapht.alg.EdmondsBlossomShrinkingTest: void testOne()>

Methods (44): 
	<org.jgrapht.EnhancedTestCase: void assertFalse()>:
		<org.jgrapht.EnhancedTestCase.java:79, 100.00%>
	<org.jgrapht.EnhancedTestCase: void assertTrue()>:
		<org.jgrapht.EnhancedTestCase.java:87, 100.00%>
	<org.jgrapht.alg.BiconnectivityInspectorTest: void testLinearGraph(int)>:
		<org.jgrapht.alg.BiconnectivityInspectorTest.java:88, 40.00%>
		<org.jgrapht.alg.BiconnectivityInspectorTest.java:89, 40.00%>
	<org.jgrapht.alg.BiconnectivityInspectorTest: void testNotBiconnected()>:
		<org.jgrapht.alg.BiconnectivityInspectorTest.java:100, 55.56%>
		<org.jgrapht.alg.BiconnectivityInspectorTest.java:101, 55.56%>
	<org.jgrapht.alg.BlockCutpointGraphTest: void testBiconnected()>:
		<org.jgrapht.alg.BlockCutpointGraphTest.java:67, 41.67%>
		<org.jgrapht.alg.BlockCutpointGraphTest.java:71, 41.67%>
	<org.jgrapht.alg.BlockCutpointGraphTest: void testGetBlock(org.jgrapht.alg.BlockCutpointGraph)>:
		<org.jgrapht.alg.BlockCutpointGraphTest.java:88, 33.33%>
		<org.jgrapht.alg.BlockCutpointGraphTest.java:94, 19.05%>
	<org.jgrapht.alg.BlockCutpointGraphTest: void testLinearGraph(int)>:
		<org.jgrapht.alg.BlockCutpointGraphTest.java:121, 33.33%>
		<org.jgrapht.alg.BlockCutpointGraphTest.java:125, 33.33%>
	<org.jgrapht.alg.BlockCutpointGraphTest: void testNotBiconnected()>:
		<org.jgrapht.alg.BlockCutpointGraphTest.java:135, 41.67%>
		<org.jgrapht.alg.BlockCutpointGraphTest.java:139, 41.67%>
	<org.jgrapht.alg.BronKerboschCliqueFinderTest: void testFindAll()>:
		<org.jgrapht.alg.BronKerboschCliqueFinderTest.java:143, 26.32%>
		<org.jgrapht.alg.BronKerboschCliqueFinderTest.java:175, 21.05%>
	<org.jgrapht.alg.BronKerboschCliqueFinderTest: void testFindBiggest()>:
		<org.jgrapht.alg.BronKerboschCliqueFinderTest.java:119, 41.67%>
		<org.jgrapht.alg.BronKerboschCliqueFinderTest.java:129, 58.33%>
	<org.jgrapht.alg.ChromaticNumberTest: void testChromaticNumber()>:
		<org.jgrapht.alg.ChromaticNumberTest.java:78, 18.75%>
		<org.jgrapht.alg.ChromaticNumberTest.java:83, 31.25%>
		<org.jgrapht.alg.ChromaticNumberTest.java:100, 18.75%>
	<org.jgrapht.alg.ConnectivityInspectorTest: void testStronglyConnected1()>:
		<org.jgrapht.alg.ConnectivityInspectorTest.java:211, 16.00%>
		<org.jgrapht.alg.ConnectivityInspectorTest.java:222, 12.00%>
		<org.jgrapht.alg.ConnectivityInspectorTest.java:225, 16.00%>
	<org.jgrapht.alg.ConnectivityInspectorTest: void testStronglyConnected2()>:
		<org.jgrapht.alg.ConnectivityInspectorTest.java:268, 16.00%>
		<org.jgrapht.alg.ConnectivityInspectorTest.java:279, 12.00%>
		<org.jgrapht.alg.ConnectivityInspectorTest.java:282, 16.00%>
	<org.jgrapht.alg.ConnectivityInspectorTest: void testStronglyConnected3()>:
		<org.jgrapht.alg.ConnectivityInspectorTest.java:325, 17.39%>
		<org.jgrapht.alg.ConnectivityInspectorTest.java:337, 13.04%>
		<org.jgrapht.alg.ConnectivityInspectorTest.java:340, 17.39%>
	<org.jgrapht.alg.EdmondsBlossomShrinkingTest: void testOne()>:
		<org.jgrapht.alg.EdmondsBlossomShrinkingTest.java:80, 23.81%>
		<org.jgrapht.alg.EdmondsBlossomShrinkingTest.java:81, 19.05%>
		<org.jgrapht.alg.EdmondsBlossomShrinkingTest.java:82, 19.05%>
	<org.jgrapht.alg.EulerianCircuitTest: void testEulerianCircuit()>:
		<org.jgrapht.alg.EulerianCircuitTest.java:77, 11.76%>
		<org.jgrapht.alg.EulerianCircuitTest.java:78, 29.41%>
		<org.jgrapht.alg.EulerianCircuitTest.java:91, 11.76%>
		<org.jgrapht.alg.EulerianCircuitTest.java:95, 23.53%>
	<org.jgrapht.alg.KSPExampleTest: void testFourReturnedPathsJGraphT()>:
		<org.jgrapht.alg.KSPExampleTest.java:60, 55.56%>
	<org.jgrapht.alg.KSPExampleTest: void testThreeReturnedPathsJGraphT()>:
		<org.jgrapht.alg.KSPExampleTest.java:72, 60.00%>
	<org.jgrapht.alg.KSPExampleTest: void testTwoReturnedPathsJGraphT()>:
		<org.jgrapht.alg.KSPExampleTest.java:84, 60.00%>
	<org.jgrapht.alg.KShortestPathCostTest: void verifyWeightsConsistency(java.util.List,java.util.List)>:
		<org.jgrapht.alg.KShortestPathCostTest.java:294, 53.85%>
	<org.jgrapht.alg.KruskalMinimumSpanningTreeTest: void testMinimumSpanningTree()>:
		<org.jgrapht.alg.KruskalMinimumSpanningTreeTest.java:80, 19.05%>
		<org.jgrapht.alg.KruskalMinimumSpanningTreeTest.java:84, 38.10%>
	<org.jgrapht.alg.VertexCoversTest: void testFind2ApproximationCover()>:
		<org.jgrapht.alg.VertexCoversTest.java:74, 60.00%>
	<org.jgrapht.alg.VertexCoversTest: void testFindGreedyCover()>:
		<org.jgrapht.alg.VertexCoversTest.java:89, 50.00%>
	<org.jgrapht.experimental.dag.DirectedAcyclicGraphTest: void testCycleDetectionInRandomGraphBuild()>:
		<org.jgrapht.experimental.dag.DirectedAcyclicGraphTest.java:131, 14.29%>
		<org.jgrapht.experimental.dag.DirectedAcyclicGraphTest.java:141, 12.24%>
		<org.jgrapht.experimental.dag.DirectedAcyclicGraphTest.java:152, 6.12%>
	<org.jgrapht.experimental.permutation.CompoundPermutationIterTest: void testGetNext()>:
		<org.jgrapht.experimental.permutation.CompoundPermutationIterTest.java:96, 40.00%>
		<org.jgrapht.experimental.permutation.CompoundPermutationIterTest.java:127, 40.00%>
	<org.jgrapht.generate.GraphGeneratorTest: void testCompleteBipartiteGraphGenerator()>:
		<org.jgrapht.generate.GraphGeneratorTest.java:243, 50.00%>
		<org.jgrapht.generate.GraphGeneratorTest.java:244, 50.00%>
	<org.jgrapht.generate.GraphGeneratorTest: void testCompleteGraphGenerator()>:
		<org.jgrapht.generate.GraphGeneratorTest.java:185, 62.50%>
	<org.jgrapht.generate.GraphGeneratorTest: void testHyperCubeGraphGenerator()>:
		<org.jgrapht.generate.GraphGeneratorTest.java:265, 50.00%>
		<org.jgrapht.generate.GraphGeneratorTest.java:266, 50.00%>
	<org.jgrapht.generate.RandomGraphGeneratorTest: void testGenerateDirectedGraph()>:
		<org.jgrapht.generate.RandomGraphGeneratorTest.java:70, 20.00%>
	<org.jgrapht.generate.RandomGraphGeneratorTest: void testGenerateListenableUndirectedGraph()>:
		<org.jgrapht.generate.RandomGraphGeneratorTest.java:89, 20.00%>
	<org.jgrapht.graph.CloneTest: void testCloneSpecificsBug()>:
		<org.jgrapht.graph.CloneTest.java:87, 35.29%>
		<org.jgrapht.graph.CloneTest.java:88, 23.53%>
		<org.jgrapht.graph.CloneTest.java:89, 23.53%>
		<org.jgrapht.graph.CloneTest.java:90, 23.53%>
		<org.jgrapht.graph.CloneTest.java:91, 29.41%>
	<org.jgrapht.graph.DefaultDirectedGraphTest: void testEdgesOf()>:
		<org.jgrapht.graph.DefaultDirectedGraphTest.java:117, 75.00%>
		<org.jgrapht.graph.DefaultDirectedGraphTest.java:118, 75.00%>
	<org.jgrapht.graph.DefaultDirectedGraphTest: void testGetAllEdges()>:
		<org.jgrapht.graph.DefaultDirectedGraphTest.java:130, 100.00%>
	<org.jgrapht.graph.DefaultDirectedGraphTest: void testInDegreeOf()>:
		<org.jgrapht.graph.DefaultDirectedGraphTest.java:141, 83.33%>
		<org.jgrapht.graph.DefaultDirectedGraphTest.java:142, 83.33%>
	<org.jgrapht.graph.DefaultDirectedGraphTest: void testOutDegreeOf()>:
		<org.jgrapht.graph.DefaultDirectedGraphTest.java:153, 83.33%>
		<org.jgrapht.graph.DefaultDirectedGraphTest.java:154, 83.33%>
	<org.jgrapht.graph.EqualsAndHashCodeTest: void testAsWeightedGraphs()>:
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:329, 5.17%>
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:330, 10.34%>
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:332, 5.17%>
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:333, 10.34%>
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:335, 8.62%>
	<org.jgrapht.graph.EqualsAndHashCodeTest: void testDefaultDirectedGraph()>:
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:105, 6.52%>
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:106, 10.87%>
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:108, 13.04%>
	<org.jgrapht.graph.EqualsAndHashCodeTest: void testGraphsWithNonIntrusiveEdge()>:
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:187, 3.90%>
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:188, 6.49%>
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:190, 7.79%>
	<org.jgrapht.graph.EqualsAndHashCodeTest: void testGrapshWithCustomEdges()>:
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:268, 7.69%>
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:269, 12.82%>
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:271, 15.38%>
	<org.jgrapht.graph.EqualsAndHashCodeTest: void testPseudograph()>:
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:230, 5.08%>
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:231, 8.47%>
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:233, 10.17%>
	<org.jgrapht.graph.EqualsAndHashCodeTest: void testSimpleGraph()>:
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:148, 6.52%>
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:149, 10.87%>
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:151, 13.04%>
	<org.jgrapht.graph.GenericGraphsTest: void testEqualButNotSameVertex()>:
		<org.jgrapht.graph.GenericGraphsTest.java:145, 40.00%>
		<org.jgrapht.graph.GenericGraphsTest.java:146, 40.00%>
	<org.jgrapht.graph.SimpleDirectedGraphTest: void testEdgesOf()>:
		<org.jgrapht.graph.SimpleDirectedGraphTest.java:232, 46.67%>
		<org.jgrapht.graph.SimpleDirectedGraphTest.java:233, 60.00%>
		<org.jgrapht.graph.SimpleDirectedGraphTest.java:243, 20.00%>
	<org.jgrapht.util.FibonacciHeapTest: void testGrowReplaceShrink()>:
		<org.jgrapht.util.FibonacciHeapTest.java:88, 17.65%>
		<org.jgrapht.util.FibonacciHeapTest.java:91, 17.65%>

Relevant Assertion clone sets (8):
Set (score: 1.00, ccsize: 2, packages: 1, classes: 1): 
	<org.jgrapht.alg.ConnectivityInspectorTest: void testStronglyConnected1()>:
		<org.jgrapht.alg.ConnectivityInspectorTest.java:222, 12.00%>
	<org.jgrapht.alg.ConnectivityInspectorTest: void testStronglyConnected2()>:
		<org.jgrapht.alg.ConnectivityInspectorTest.java:279, 12.00%>
	<org.jgrapht.alg.ConnectivityInspectorTest: void testStronglyConnected3()>:
		<org.jgrapht.alg.ConnectivityInspectorTest.java:337, 13.04%>
Set (score: 1.00, ccsize: 2, packages: 1, classes: 1): 
	<org.jgrapht.alg.VertexCoversTest: void testFind2ApproximationCover()>:
		<org.jgrapht.alg.VertexCoversTest.java:74, 60.00%>
	<org.jgrapht.alg.VertexCoversTest: void testFindGreedyCover()>:
		<org.jgrapht.alg.VertexCoversTest.java:89, 50.00%>
Set (score: 1.00, ccsize: 2, packages: 1, classes: 1): 
	<org.jgrapht.graph.EqualsAndHashCodeTest: void testAsWeightedGraphs()>:
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:329, 5.17%>
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:332, 5.17%>
	<org.jgrapht.graph.EqualsAndHashCodeTest: void testDefaultDirectedGraph()>:
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:105, 6.52%>
	<org.jgrapht.graph.EqualsAndHashCodeTest: void testGraphsWithNonIntrusiveEdge()>:
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:187, 3.90%>
	<org.jgrapht.graph.EqualsAndHashCodeTest: void testGrapshWithCustomEdges()>:
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:268, 7.69%>
	<org.jgrapht.graph.EqualsAndHashCodeTest: void testPseudograph()>:
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:230, 5.08%>
	<org.jgrapht.graph.EqualsAndHashCodeTest: void testSimpleGraph()>:
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:148, 6.52%>
Set (score: 0.67, ccsize: 3, packages: 1, classes: 2): 
	<org.jgrapht.alg.BiconnectivityInspectorTest: void testLinearGraph(int)>:
		<org.jgrapht.alg.BiconnectivityInspectorTest.java:88, 40.00%>
	<org.jgrapht.alg.BlockCutpointGraphTest: void testLinearGraph(int)>:
		<org.jgrapht.alg.BlockCutpointGraphTest.java:121, 33.33%>
		<org.jgrapht.alg.BlockCutpointGraphTest.java:125, 33.33%>
Set (score: 0.67, ccsize: 3, packages: 1, classes: 2): 
	<org.jgrapht.alg.BiconnectivityInspectorTest: void testNotBiconnected()>:
		<org.jgrapht.alg.BiconnectivityInspectorTest.java:100, 55.56%>
	<org.jgrapht.alg.BlockCutpointGraphTest: void testNotBiconnected()>:
		<org.jgrapht.alg.BlockCutpointGraphTest.java:135, 41.67%>
		<org.jgrapht.alg.BlockCutpointGraphTest.java:139, 41.67%>
Set (score: 0.50, ccsize: 4, packages: 1, classes: 1): 
	<org.jgrapht.graph.EqualsAndHashCodeTest: void testDefaultDirectedGraph()>:
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:106, 10.87%>
	<org.jgrapht.graph.EqualsAndHashCodeTest: void testGraphsWithNonIntrusiveEdge()>:
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:188, 6.49%>
Set (score: 0.50, ccsize: 4, packages: 1, classes: 1): 
	<org.jgrapht.graph.EqualsAndHashCodeTest: void testGrapshWithCustomEdges()>:
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:269, 12.82%>
	<org.jgrapht.graph.EqualsAndHashCodeTest: void testSimpleGraph()>:
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:149, 10.87%>
Set (score: 0.50, ccsize: 3, packages: 1, classes: 1): 
	<org.jgrapht.alg.KSPExampleTest: void testFourReturnedPathsJGraphT()>:
		<org.jgrapht.alg.KSPExampleTest.java:60, 55.56%>
	<org.jgrapht.alg.KSPExampleTest: void testThreeReturnedPathsJGraphT()>:
		<org.jgrapht.alg.KSPExampleTest.java:72, 60.00%>
	<org.jgrapht.alg.KSPExampleTest: void testTwoReturnedPathsJGraphT()>:
		<org.jgrapht.alg.KSPExampleTest.java:84, 60.00%>
==============================================

[100] Set (editDistance: 2, isComplete: false, packages: 1, classes: 1): 
Centroid (size: 3): <org.jgrapht.alg.KSPDiscardsValidPathsTest: void testBrunoMaoili()>

Methods (2): 
	<org.jgrapht.alg.KSPDiscardsValidPathsTest: void testBrunoMaoili()>:
		<org.jgrapht.alg.KSPDiscardsValidPathsTest.java:133, 38.89%>
		<org.jgrapht.alg.KSPDiscardsValidPathsTest.java:136, 38.89%>
		<org.jgrapht.alg.KSPDiscardsValidPathsTest.java:139, 38.89%>
	<org.jgrapht.alg.KSPDiscardsValidPathsTest: void testNot3connectedGraph()>:
		<org.jgrapht.alg.KSPDiscardsValidPathsTest.java:102, 87.50%>

Relevant Assertion clone sets (1):
Set (score: 0.73, ccsize: 6, packages: 1, classes: 1): 
	<org.jgrapht.alg.KSPDiscardsValidPathsTest: void testBrunoMaoili()>:
		<org.jgrapht.alg.KSPDiscardsValidPathsTest.java:136, 38.89%>
	<org.jgrapht.alg.KSPDiscardsValidPathsTest: void testNot3connectedGraph()>:
		<org.jgrapht.alg.KSPDiscardsValidPathsTest.java:102, 87.50%>
==============================================

[101] Set (editDistance: 2, isComplete: false, packages: 8, classes: 21): 
Centroid (size: 3): <org.jgrapht.experimental.dag.DirectedAcyclicGraphTest: void testCycleDetectionInRandomGraphBuild()>

Methods (40): 
	<org.jgrapht.EnhancedTestCase: void assertFalse()>:
		<org.jgrapht.EnhancedTestCase.java:79, 100.00%>
	<org.jgrapht.EnhancedTestCase: void assertTrue()>:
		<org.jgrapht.EnhancedTestCase.java:87, 100.00%>
	<org.jgrapht.alg.BellmanFordShortestPathTest: void testWithNegativeEdges()>:
		<org.jgrapht.alg.BellmanFordShortestPathTest.java:120, 45.45%>
		<org.jgrapht.alg.BellmanFordShortestPathTest.java:127, 63.64%>
	<org.jgrapht.alg.BiconnectivityInspectorTest: void testBiconnected()>:
		<org.jgrapht.alg.BiconnectivityInspectorTest.java:64, 30.00%>
		<org.jgrapht.alg.BiconnectivityInspectorTest.java:65, 50.00%>
		<org.jgrapht.alg.BiconnectivityInspectorTest.java:66, 50.00%>
	<org.jgrapht.alg.BronKerboschCliqueFinderTest: void testFindAll()>:
		<org.jgrapht.alg.BronKerboschCliqueFinderTest.java:143, 26.32%>
		<org.jgrapht.alg.BronKerboschCliqueFinderTest.java:175, 21.05%>
	<org.jgrapht.alg.BronKerboschCliqueFinderTest: void testFindBiggest()>:
		<org.jgrapht.alg.BronKerboschCliqueFinderTest.java:119, 41.67%>
		<org.jgrapht.alg.BronKerboschCliqueFinderTest.java:129, 58.33%>
	<org.jgrapht.alg.ConnectivityInspectorTest: void testStronglyConnected1()>:
		<org.jgrapht.alg.ConnectivityInspectorTest.java:211, 16.00%>
		<org.jgrapht.alg.ConnectivityInspectorTest.java:222, 12.00%>
		<org.jgrapht.alg.ConnectivityInspectorTest.java:225, 16.00%>
	<org.jgrapht.alg.ConnectivityInspectorTest: void testStronglyConnected2()>:
		<org.jgrapht.alg.ConnectivityInspectorTest.java:268, 16.00%>
		<org.jgrapht.alg.ConnectivityInspectorTest.java:279, 12.00%>
		<org.jgrapht.alg.ConnectivityInspectorTest.java:282, 16.00%>
	<org.jgrapht.alg.ConnectivityInspectorTest: void testStronglyConnected3()>:
		<org.jgrapht.alg.ConnectivityInspectorTest.java:325, 17.39%>
		<org.jgrapht.alg.ConnectivityInspectorTest.java:337, 13.04%>
		<org.jgrapht.alg.ConnectivityInspectorTest.java:340, 17.39%>
	<org.jgrapht.alg.ConnectivityInspectorTest: void testStronglyConnected4()>:
		<org.jgrapht.alg.ConnectivityInspectorTest.java:371, 30.77%>
	<org.jgrapht.alg.EdmondsBlossomShrinkingTest: void testOne()>:
		<org.jgrapht.alg.EdmondsBlossomShrinkingTest.java:80, 23.81%>
		<org.jgrapht.alg.EdmondsBlossomShrinkingTest.java:81, 19.05%>
		<org.jgrapht.alg.EdmondsBlossomShrinkingTest.java:82, 19.05%>
	<org.jgrapht.alg.FloydWarshallShortestPathsTest: void testDiameter()>:
		<org.jgrapht.alg.FloydWarshallShortestPathsTest.java:161, 57.14%>
	<org.jgrapht.alg.FloydWarshallShortestPathsTest: void testEdgeLessDiameter()>:
		<org.jgrapht.alg.FloydWarshallShortestPathsTest.java:182, 40.00%>
	<org.jgrapht.alg.FloydWarshallShortestPathsTest: void testEmptyDiameter()>:
		<org.jgrapht.alg.FloydWarshallShortestPathsTest.java:170, 50.00%>
	<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest: void testBipartiteMatching1()>:
		<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest.java:83, 6.76%>
		<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest.java:86, 6.76%>
	<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest: void testBipartiteMatching2()>:
		<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest.java:112, 5.21%>
		<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest.java:115, 5.21%>
	<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest: void testEmptyMatching()>:
		<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest.java:128, 33.33%>
	<org.jgrapht.alg.KShortestPathCostTest: void verifyWeightsConsistency(java.util.List,java.util.List)>:
		<org.jgrapht.alg.KShortestPathCostTest.java:294, 53.85%>
	<org.jgrapht.alg.VertexCoversTest: void testFind2ApproximationCover()>:
		<org.jgrapht.alg.VertexCoversTest.java:74, 60.00%>
	<org.jgrapht.alg.VertexCoversTest: void testFindGreedyCover()>:
		<org.jgrapht.alg.VertexCoversTest.java:89, 50.00%>
	<org.jgrapht.experimental.alg.ColoringTest: void testBacktrackColoring()>:
		<org.jgrapht.experimental.alg.ColoringTest.java:97, 50.00%>
	<org.jgrapht.experimental.alg.ColoringTest: void testGreedyColoring()>:
		<org.jgrapht.experimental.alg.ColoringTest.java:77, 50.00%>
	<org.jgrapht.experimental.dag.DirectedAcyclicGraphTest: void testCycleDetectionInRandomGraphBuild()>:
		<org.jgrapht.experimental.dag.DirectedAcyclicGraphTest.java:131, 14.29%>
		<org.jgrapht.experimental.dag.DirectedAcyclicGraphTest.java:141, 12.24%>
		<org.jgrapht.experimental.dag.DirectedAcyclicGraphTest.java:152, 6.12%>
	<org.jgrapht.experimental.equivalence.EquivalenceGroupCreatorTest: void testOneComparator(org.jgrapht.experimental.equivalence.EquivalenceComparator,int)>:
		<org.jgrapht.experimental.equivalence.EquivalenceGroupCreatorTest.java:152, 23.53%>
		<org.jgrapht.experimental.equivalence.EquivalenceGroupCreatorTest.java:157, 41.18%>
	<org.jgrapht.generate.GraphGeneratorTest: void testEmptyGraphGenerator()>:
		<org.jgrapht.generate.GraphGeneratorTest.java:90, 38.46%>
		<org.jgrapht.generate.GraphGeneratorTest.java:91, 38.46%>
		<org.jgrapht.generate.GraphGeneratorTest.java:92, 23.08%>
	<org.jgrapht.generate.GraphGeneratorTest: void testStarGraphGenerator()>:
		<org.jgrapht.generate.GraphGeneratorTest.java:287, 35.71%>
		<org.jgrapht.generate.GraphGeneratorTest.java:288, 35.71%>
		<org.jgrapht.generate.GraphGeneratorTest.java:289, 42.86%>
	<org.jgrapht.generate.RandomGraphGeneratorTest: void testGenerateDirectedGraph()>:
		<org.jgrapht.generate.RandomGraphGeneratorTest.java:70, 20.00%>
	<org.jgrapht.generate.RandomGraphGeneratorTest: void testGenerateListenableUndirectedGraph()>:
		<org.jgrapht.generate.RandomGraphGeneratorTest.java:89, 20.00%>
	<org.jgrapht.graph.AsUndirectedGraphTest: void testGetEdge()>:
		<org.jgrapht.graph.AsUndirectedGraphTest.java:137, 44.00%>
		<org.jgrapht.graph.AsUndirectedGraphTest.java:140, 68.00%>
		<org.jgrapht.graph.AsUndirectedGraphTest.java:144, 92.00%>
	<org.jgrapht.graph.AsUnweightedGraphTest: void constructWeighted(org.jgrapht.WeightedGraph)>:
		<org.jgrapht.graph.AsUnweightedGraphTest.java:110, 57.14%>
	<org.jgrapht.graph.EqualsAndHashCodeTest: void testDefaultDirectedGraph()>:
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:105, 6.52%>
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:106, 10.87%>
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:108, 13.04%>
	<org.jgrapht.graph.EqualsAndHashCodeTest: void testGraphsWithNonIntrusiveEdge()>:
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:187, 3.90%>
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:188, 6.49%>
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:190, 7.79%>
	<org.jgrapht.graph.EqualsAndHashCodeTest: void testGrapshWithCustomEdges()>:
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:268, 7.69%>
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:269, 12.82%>
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:271, 15.38%>
	<org.jgrapht.graph.EqualsAndHashCodeTest: void testPseudograph()>:
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:230, 5.08%>
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:231, 8.47%>
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:233, 10.17%>
	<org.jgrapht.graph.EqualsAndHashCodeTest: void testSimpleGraph()>:
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:148, 6.52%>
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:149, 10.87%>
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:151, 13.04%>
	<org.jgrapht.graph.SimpleDirectedGraphTest: void testIncomingOutgoingEdgesOf()>:
		<org.jgrapht.graph.SimpleDirectedGraphTest.java:315, 128.57%>
	<org.jgrapht.util.FibonacciHeapTest: void testAddRemoveOne()>:
		<org.jgrapht.util.FibonacciHeapTest.java:57, 25.00%>
		<org.jgrapht.util.FibonacciHeapTest.java:59, 25.00%>
		<org.jgrapht.util.FibonacciHeapTest.java:61, 50.00%>
		<org.jgrapht.util.FibonacciHeapTest.java:62, 25.00%>
	<org.jgrapht.util.FibonacciHeapTest: void testGrowReplaceShrink()>:
		<org.jgrapht.util.FibonacciHeapTest.java:88, 17.65%>
		<org.jgrapht.util.FibonacciHeapTest.java:91, 17.65%>
	<org.jgrapht.util.PrefetchIteratorTest: void testEnumInterface()>:
		<org.jgrapht.util.PrefetchIteratorTest.java:71, 33.33%>
		<org.jgrapht.util.PrefetchIteratorTest.java:72, 41.67%>
		<org.jgrapht.util.PrefetchIteratorTest.java:74, 33.33%>
		<org.jgrapht.util.PrefetchIteratorTest.java:81, 16.67%>
	<org.jgrapht.util.PrefetchIteratorTest: void testIteratorInterface()>:
		<org.jgrapht.util.PrefetchIteratorTest.java:54, 33.33%>
		<org.jgrapht.util.PrefetchIteratorTest.java:55, 41.67%>
		<org.jgrapht.util.PrefetchIteratorTest.java:57, 33.33%>
		<org.jgrapht.util.PrefetchIteratorTest.java:64, 16.67%>

Relevant Assertion clone sets (6):
Set (score: 1.00, ccsize: 2, packages: 1, classes: 1): 
	<org.jgrapht.alg.ConnectivityInspectorTest: void testStronglyConnected1()>:
		<org.jgrapht.alg.ConnectivityInspectorTest.java:222, 12.00%>
	<org.jgrapht.alg.ConnectivityInspectorTest: void testStronglyConnected2()>:
		<org.jgrapht.alg.ConnectivityInspectorTest.java:279, 12.00%>
	<org.jgrapht.alg.ConnectivityInspectorTest: void testStronglyConnected3()>:
		<org.jgrapht.alg.ConnectivityInspectorTest.java:337, 13.04%>
Set (score: 1.00, ccsize: 2, packages: 1, classes: 1): 
	<org.jgrapht.alg.VertexCoversTest: void testFind2ApproximationCover()>:
		<org.jgrapht.alg.VertexCoversTest.java:74, 60.00%>
	<org.jgrapht.alg.VertexCoversTest: void testFindGreedyCover()>:
		<org.jgrapht.alg.VertexCoversTest.java:89, 50.00%>
Set (score: 0.67, ccsize: 2, packages: 1, classes: 1): 
	<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest: void testBipartiteMatching1()>:
		<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest.java:86, 6.76%>
	<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest: void testBipartiteMatching2()>:
		<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest.java:115, 5.21%>
Set (score: 0.50, ccsize: 4, packages: 1, classes: 1): 
	<org.jgrapht.graph.EqualsAndHashCodeTest: void testDefaultDirectedGraph()>:
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:106, 10.87%>
	<org.jgrapht.graph.EqualsAndHashCodeTest: void testGraphsWithNonIntrusiveEdge()>:
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:188, 6.49%>
Set (score: 0.50, ccsize: 4, packages: 1, classes: 1): 
	<org.jgrapht.graph.EqualsAndHashCodeTest: void testGrapshWithCustomEdges()>:
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:269, 12.82%>
	<org.jgrapht.graph.EqualsAndHashCodeTest: void testSimpleGraph()>:
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:149, 10.87%>
Set (score: 0.50, ccsize: 2, packages: 1, classes: 1): 
	<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest: void testBipartiteMatching1()>:
		<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest.java:83, 6.76%>
	<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest: void testBipartiteMatching2()>:
		<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest.java:112, 5.21%>
==============================================

[102] Set (editDistance: 2, isComplete: false, packages: 6, classes: 18): 
Centroid (size: 3): <org.jgrapht.generate.GraphGeneratorTest: void testEmptyGraphGenerator()>

Methods (27): 
	<org.jgrapht.EnhancedTestCase: void assertFalse()>:
		<org.jgrapht.EnhancedTestCase.java:79, 100.00%>
	<org.jgrapht.EnhancedTestCase: void assertTrue()>:
		<org.jgrapht.EnhancedTestCase.java:87, 100.00%>
	<org.jgrapht.alg.BiconnectivityInspectorTest: void testBiconnected()>:
		<org.jgrapht.alg.BiconnectivityInspectorTest.java:64, 30.00%>
		<org.jgrapht.alg.BiconnectivityInspectorTest.java:65, 50.00%>
		<org.jgrapht.alg.BiconnectivityInspectorTest.java:66, 50.00%>
	<org.jgrapht.alg.BlockCutpointGraphTest: void testGetBlock(org.jgrapht.alg.BlockCutpointGraph)>:
		<org.jgrapht.alg.BlockCutpointGraphTest.java:88, 33.33%>
		<org.jgrapht.alg.BlockCutpointGraphTest.java:94, 19.05%>
	<org.jgrapht.alg.BronKerboschCliqueFinderTest: void testFindAll()>:
		<org.jgrapht.alg.BronKerboschCliqueFinderTest.java:143, 26.32%>
		<org.jgrapht.alg.BronKerboschCliqueFinderTest.java:175, 21.05%>
	<org.jgrapht.alg.BronKerboschCliqueFinderTest: void testFindBiggest()>:
		<org.jgrapht.alg.BronKerboschCliqueFinderTest.java:119, 41.67%>
		<org.jgrapht.alg.BronKerboschCliqueFinderTest.java:129, 58.33%>
	<org.jgrapht.alg.FloydWarshallShortestPathsTest: void testCompareWithDijkstra()>:
		<org.jgrapht.alg.FloydWarshallShortestPathsTest.java:96, 7.41%>
		<org.jgrapht.alg.FloydWarshallShortestPathsTest.java:121, 7.41%>
	<org.jgrapht.alg.HamiltonianCycleTest: void testHamiltonianCycle()>:
		<org.jgrapht.alg.HamiltonianCycleTest.java:79, 33.33%>
		<org.jgrapht.alg.HamiltonianCycleTest.java:89, 27.78%>
	<org.jgrapht.alg.KSPExampleTest: void testFourReturnedPathsJGraphT()>:
		<org.jgrapht.alg.KSPExampleTest.java:60, 55.56%>
	<org.jgrapht.alg.KSPExampleTest: void testThreeReturnedPathsJGraphT()>:
		<org.jgrapht.alg.KSPExampleTest.java:72, 60.00%>
	<org.jgrapht.alg.KSPExampleTest: void testTwoReturnedPathsJGraphT()>:
		<org.jgrapht.alg.KSPExampleTest.java:84, 60.00%>
	<org.jgrapht.alg.KShortestPathCostTest: void verifyShortestPathsInIncreasingOrderOfWeight(org.jgrapht.Graph)>:
		<org.jgrapht.alg.KShortestPathCostTest.java:222, 30.77%>
		<org.jgrapht.alg.KShortestPathCostTest.java:225, 30.77%>
	<org.jgrapht.alg.KShortestPathCostTest: void verifyWeightsConsistency(java.util.List,java.util.List)>:
		<org.jgrapht.alg.KShortestPathCostTest.java:294, 53.85%>
	<org.jgrapht.alg.KruskalMinimumSpanningTreeTest: void testMinimumSpanningTree()>:
		<org.jgrapht.alg.KruskalMinimumSpanningTreeTest.java:80, 19.05%>
		<org.jgrapht.alg.KruskalMinimumSpanningTreeTest.java:84, 38.10%>
	<org.jgrapht.alg.VertexCoversTest: void testFind2ApproximationCover()>:
		<org.jgrapht.alg.VertexCoversTest.java:74, 60.00%>
	<org.jgrapht.alg.VertexCoversTest: void testFindGreedyCover()>:
		<org.jgrapht.alg.VertexCoversTest.java:89, 50.00%>
	<org.jgrapht.experimental.dag.DirectedAcyclicGraphTest: void testCycleDetectionInRandomGraphBuild()>:
		<org.jgrapht.experimental.dag.DirectedAcyclicGraphTest.java:131, 14.29%>
		<org.jgrapht.experimental.dag.DirectedAcyclicGraphTest.java:141, 12.24%>
		<org.jgrapht.experimental.dag.DirectedAcyclicGraphTest.java:152, 6.12%>
	<org.jgrapht.experimental.isomorphism.IsomorphismInspectorTest: void assertIsomorphic(org.jgrapht.Graph[],boolean,org.jgrapht.experimental.equivalence.EquivalenceComparator,org.jgrapht.experimental.equivalence.EquivalenceComparator)>:
		<org.jgrapht.experimental.isomorphism.IsomorphismInspectorTest.java:138, 28.57%>
		<org.jgrapht.experimental.isomorphism.IsomorphismInspectorTest.java:140, 28.57%>
	<org.jgrapht.generate.GraphGeneratorTest: void testCompleteGraphGenerator()>:
		<org.jgrapht.generate.GraphGeneratorTest.java:185, 62.50%>
	<org.jgrapht.generate.GraphGeneratorTest: void testEmptyGraphGenerator()>:
		<org.jgrapht.generate.GraphGeneratorTest.java:90, 38.46%>
		<org.jgrapht.generate.GraphGeneratorTest.java:91, 38.46%>
		<org.jgrapht.generate.GraphGeneratorTest.java:92, 23.08%>
	<org.jgrapht.generate.RandomGraphGeneratorTest: void testGenerateDirectedGraph()>:
		<org.jgrapht.generate.RandomGraphGeneratorTest.java:70, 20.00%>
	<org.jgrapht.generate.RandomGraphGeneratorTest: void testGenerateListenableUndirectedGraph()>:
		<org.jgrapht.generate.RandomGraphGeneratorTest.java:89, 20.00%>
	<org.jgrapht.graph.AsUndirectedGraphTest: void testDegreeOf()>:
		<org.jgrapht.graph.AsUndirectedGraphTest.java:111, 46.15%>
		<org.jgrapht.graph.AsUndirectedGraphTest.java:112, 61.54%>
		<org.jgrapht.graph.AsUndirectedGraphTest.java:113, 76.92%>
		<org.jgrapht.graph.AsUndirectedGraphTest.java:114, 92.31%>
	<org.jgrapht.graph.AsUndirectedGraphTest: void testGetAllEdges()>:
		<org.jgrapht.graph.AsUndirectedGraphTest.java:123, 40.00%>
		<org.jgrapht.graph.AsUndirectedGraphTest.java:124, 65.00%>
		<org.jgrapht.graph.AsUndirectedGraphTest.java:128, 70.00%>
		<org.jgrapht.graph.AsUndirectedGraphTest.java:129, 80.00%>
	<org.jgrapht.graph.DefaultDirectedGraphTest: void testGetAllEdges()>:
		<org.jgrapht.graph.DefaultDirectedGraphTest.java:130, 100.00%>
	<org.jgrapht.graph.EqualsAndHashCodeTest: void testAsWeightedGraphs()>:
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:329, 5.17%>
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:330, 10.34%>
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:332, 5.17%>
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:333, 10.34%>
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:335, 8.62%>
	<org.jgrapht.graph.SimpleDirectedGraphTest: void testRemoveEdgeEdge()>:
		<org.jgrapht.graph.SimpleDirectedGraphTest.java:341, 26.09%>
		<org.jgrapht.graph.SimpleDirectedGraphTest.java:343, 43.48%>
		<org.jgrapht.graph.SimpleDirectedGraphTest.java:344, 43.48%>
		<org.jgrapht.graph.SimpleDirectedGraphTest.java:345, 60.87%>
		<org.jgrapht.graph.SimpleDirectedGraphTest.java:346, 73.91%>

Relevant Assertion clone sets (2):
Set (score: 1.00, ccsize: 2, packages: 1, classes: 1): 
	<org.jgrapht.alg.VertexCoversTest: void testFind2ApproximationCover()>:
		<org.jgrapht.alg.VertexCoversTest.java:74, 60.00%>
	<org.jgrapht.alg.VertexCoversTest: void testFindGreedyCover()>:
		<org.jgrapht.alg.VertexCoversTest.java:89, 50.00%>
Set (score: 0.50, ccsize: 3, packages: 1, classes: 1): 
	<org.jgrapht.alg.KSPExampleTest: void testFourReturnedPathsJGraphT()>:
		<org.jgrapht.alg.KSPExampleTest.java:60, 55.56%>
	<org.jgrapht.alg.KSPExampleTest: void testThreeReturnedPathsJGraphT()>:
		<org.jgrapht.alg.KSPExampleTest.java:72, 60.00%>
	<org.jgrapht.alg.KSPExampleTest: void testTwoReturnedPathsJGraphT()>:
		<org.jgrapht.alg.KSPExampleTest.java:84, 60.00%>
==============================================

[103] Set (editDistance: 2, isComplete: false, packages: 6, classes: 18): 
Centroid (size: 3): <org.jgrapht.generate.GraphGeneratorTest: void testStarGraphGenerator()>

Methods (27): 
	<org.jgrapht.EnhancedTestCase: void assertFalse()>:
		<org.jgrapht.EnhancedTestCase.java:79, 100.00%>
	<org.jgrapht.EnhancedTestCase: void assertTrue()>:
		<org.jgrapht.EnhancedTestCase.java:87, 100.00%>
	<org.jgrapht.alg.BiconnectivityInspectorTest: void testBiconnected()>:
		<org.jgrapht.alg.BiconnectivityInspectorTest.java:64, 30.00%>
		<org.jgrapht.alg.BiconnectivityInspectorTest.java:65, 50.00%>
		<org.jgrapht.alg.BiconnectivityInspectorTest.java:66, 50.00%>
	<org.jgrapht.alg.BlockCutpointGraphTest: void testGetBlock(org.jgrapht.alg.BlockCutpointGraph)>:
		<org.jgrapht.alg.BlockCutpointGraphTest.java:88, 33.33%>
		<org.jgrapht.alg.BlockCutpointGraphTest.java:94, 19.05%>
	<org.jgrapht.alg.BronKerboschCliqueFinderTest: void testFindAll()>:
		<org.jgrapht.alg.BronKerboschCliqueFinderTest.java:143, 26.32%>
		<org.jgrapht.alg.BronKerboschCliqueFinderTest.java:175, 21.05%>
	<org.jgrapht.alg.BronKerboschCliqueFinderTest: void testFindBiggest()>:
		<org.jgrapht.alg.BronKerboschCliqueFinderTest.java:119, 41.67%>
		<org.jgrapht.alg.BronKerboschCliqueFinderTest.java:129, 58.33%>
	<org.jgrapht.alg.FloydWarshallShortestPathsTest: void testCompareWithDijkstra()>:
		<org.jgrapht.alg.FloydWarshallShortestPathsTest.java:96, 7.41%>
		<org.jgrapht.alg.FloydWarshallShortestPathsTest.java:121, 7.41%>
	<org.jgrapht.alg.HamiltonianCycleTest: void testHamiltonianCycle()>:
		<org.jgrapht.alg.HamiltonianCycleTest.java:79, 33.33%>
		<org.jgrapht.alg.HamiltonianCycleTest.java:89, 27.78%>
	<org.jgrapht.alg.KSPExampleTest: void testFourReturnedPathsJGraphT()>:
		<org.jgrapht.alg.KSPExampleTest.java:60, 55.56%>
	<org.jgrapht.alg.KSPExampleTest: void testThreeReturnedPathsJGraphT()>:
		<org.jgrapht.alg.KSPExampleTest.java:72, 60.00%>
	<org.jgrapht.alg.KSPExampleTest: void testTwoReturnedPathsJGraphT()>:
		<org.jgrapht.alg.KSPExampleTest.java:84, 60.00%>
	<org.jgrapht.alg.KShortestPathCostTest: void verifyShortestPathsInIncreasingOrderOfWeight(org.jgrapht.Graph)>:
		<org.jgrapht.alg.KShortestPathCostTest.java:222, 30.77%>
		<org.jgrapht.alg.KShortestPathCostTest.java:225, 30.77%>
	<org.jgrapht.alg.KShortestPathCostTest: void verifyWeightsConsistency(java.util.List,java.util.List)>:
		<org.jgrapht.alg.KShortestPathCostTest.java:294, 53.85%>
	<org.jgrapht.alg.KruskalMinimumSpanningTreeTest: void testMinimumSpanningTree()>:
		<org.jgrapht.alg.KruskalMinimumSpanningTreeTest.java:80, 19.05%>
		<org.jgrapht.alg.KruskalMinimumSpanningTreeTest.java:84, 38.10%>
	<org.jgrapht.alg.VertexCoversTest: void testFind2ApproximationCover()>:
		<org.jgrapht.alg.VertexCoversTest.java:74, 60.00%>
	<org.jgrapht.alg.VertexCoversTest: void testFindGreedyCover()>:
		<org.jgrapht.alg.VertexCoversTest.java:89, 50.00%>
	<org.jgrapht.experimental.dag.DirectedAcyclicGraphTest: void testCycleDetectionInRandomGraphBuild()>:
		<org.jgrapht.experimental.dag.DirectedAcyclicGraphTest.java:131, 14.29%>
		<org.jgrapht.experimental.dag.DirectedAcyclicGraphTest.java:141, 12.24%>
		<org.jgrapht.experimental.dag.DirectedAcyclicGraphTest.java:152, 6.12%>
	<org.jgrapht.experimental.isomorphism.IsomorphismInspectorTest: void assertIsomorphic(org.jgrapht.Graph[],boolean,org.jgrapht.experimental.equivalence.EquivalenceComparator,org.jgrapht.experimental.equivalence.EquivalenceComparator)>:
		<org.jgrapht.experimental.isomorphism.IsomorphismInspectorTest.java:138, 28.57%>
		<org.jgrapht.experimental.isomorphism.IsomorphismInspectorTest.java:140, 28.57%>
	<org.jgrapht.generate.GraphGeneratorTest: void testCompleteGraphGenerator()>:
		<org.jgrapht.generate.GraphGeneratorTest.java:185, 62.50%>
	<org.jgrapht.generate.GraphGeneratorTest: void testStarGraphGenerator()>:
		<org.jgrapht.generate.GraphGeneratorTest.java:287, 35.71%>
		<org.jgrapht.generate.GraphGeneratorTest.java:288, 35.71%>
		<org.jgrapht.generate.GraphGeneratorTest.java:289, 42.86%>
	<org.jgrapht.generate.RandomGraphGeneratorTest: void testGenerateDirectedGraph()>:
		<org.jgrapht.generate.RandomGraphGeneratorTest.java:70, 20.00%>
	<org.jgrapht.generate.RandomGraphGeneratorTest: void testGenerateListenableUndirectedGraph()>:
		<org.jgrapht.generate.RandomGraphGeneratorTest.java:89, 20.00%>
	<org.jgrapht.graph.AsUndirectedGraphTest: void testDegreeOf()>:
		<org.jgrapht.graph.AsUndirectedGraphTest.java:111, 46.15%>
		<org.jgrapht.graph.AsUndirectedGraphTest.java:112, 61.54%>
		<org.jgrapht.graph.AsUndirectedGraphTest.java:113, 76.92%>
		<org.jgrapht.graph.AsUndirectedGraphTest.java:114, 92.31%>
	<org.jgrapht.graph.AsUndirectedGraphTest: void testGetAllEdges()>:
		<org.jgrapht.graph.AsUndirectedGraphTest.java:123, 40.00%>
		<org.jgrapht.graph.AsUndirectedGraphTest.java:124, 65.00%>
		<org.jgrapht.graph.AsUndirectedGraphTest.java:128, 70.00%>
		<org.jgrapht.graph.AsUndirectedGraphTest.java:129, 80.00%>
	<org.jgrapht.graph.DefaultDirectedGraphTest: void testGetAllEdges()>:
		<org.jgrapht.graph.DefaultDirectedGraphTest.java:130, 100.00%>
	<org.jgrapht.graph.EqualsAndHashCodeTest: void testAsWeightedGraphs()>:
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:329, 5.17%>
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:330, 10.34%>
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:332, 5.17%>
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:333, 10.34%>
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:335, 8.62%>
	<org.jgrapht.graph.SimpleDirectedGraphTest: void testRemoveEdgeEdge()>:
		<org.jgrapht.graph.SimpleDirectedGraphTest.java:341, 26.09%>
		<org.jgrapht.graph.SimpleDirectedGraphTest.java:343, 43.48%>
		<org.jgrapht.graph.SimpleDirectedGraphTest.java:344, 43.48%>
		<org.jgrapht.graph.SimpleDirectedGraphTest.java:345, 60.87%>
		<org.jgrapht.graph.SimpleDirectedGraphTest.java:346, 73.91%>

Relevant Assertion clone sets (2):
Set (score: 1.00, ccsize: 2, packages: 1, classes: 1): 
	<org.jgrapht.alg.VertexCoversTest: void testFind2ApproximationCover()>:
		<org.jgrapht.alg.VertexCoversTest.java:74, 60.00%>
	<org.jgrapht.alg.VertexCoversTest: void testFindGreedyCover()>:
		<org.jgrapht.alg.VertexCoversTest.java:89, 50.00%>
Set (score: 0.50, ccsize: 3, packages: 1, classes: 1): 
	<org.jgrapht.alg.KSPExampleTest: void testFourReturnedPathsJGraphT()>:
		<org.jgrapht.alg.KSPExampleTest.java:60, 55.56%>
	<org.jgrapht.alg.KSPExampleTest: void testThreeReturnedPathsJGraphT()>:
		<org.jgrapht.alg.KSPExampleTest.java:72, 60.00%>
	<org.jgrapht.alg.KSPExampleTest: void testTwoReturnedPathsJGraphT()>:
		<org.jgrapht.alg.KSPExampleTest.java:84, 60.00%>
==============================================

[104] Set (editDistance: 2, isComplete: false, packages: 4, classes: 12): 
Centroid (size: 3): <org.jgrapht.graph.AsUndirectedGraphTest: void testGetEdge()>

Methods (19): 
	<org.jgrapht.alg.BlockCutpointGraphTest: void testGetBlock(org.jgrapht.alg.BlockCutpointGraph)>:
		<org.jgrapht.alg.BlockCutpointGraphTest.java:88, 33.33%>
		<org.jgrapht.alg.BlockCutpointGraphTest.java:94, 19.05%>
	<org.jgrapht.alg.BronKerboschCliqueFinderTest: void testFindAll()>:
		<org.jgrapht.alg.BronKerboschCliqueFinderTest.java:143, 26.32%>
		<org.jgrapht.alg.BronKerboschCliqueFinderTest.java:175, 21.05%>
	<org.jgrapht.alg.BronKerboschCliqueFinderTest: void testFindBiggest()>:
		<org.jgrapht.alg.BronKerboschCliqueFinderTest.java:119, 41.67%>
		<org.jgrapht.alg.BronKerboschCliqueFinderTest.java:129, 58.33%>
	<org.jgrapht.alg.ConnectivityInspectorTest: void testStronglyConnected4()>:
		<org.jgrapht.alg.ConnectivityInspectorTest.java:371, 30.77%>
	<org.jgrapht.alg.FloydWarshallShortestPathsTest: void testDiameter()>:
		<org.jgrapht.alg.FloydWarshallShortestPathsTest.java:161, 57.14%>
	<org.jgrapht.alg.FloydWarshallShortestPathsTest: void testEdgeLessDiameter()>:
		<org.jgrapht.alg.FloydWarshallShortestPathsTest.java:182, 40.00%>
	<org.jgrapht.alg.FloydWarshallShortestPathsTest: void testEmptyDiameter()>:
		<org.jgrapht.alg.FloydWarshallShortestPathsTest.java:170, 50.00%>
	<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest: void testBipartiteMatching1()>:
		<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest.java:83, 6.76%>
		<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest.java:86, 6.76%>
	<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest: void testBipartiteMatching2()>:
		<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest.java:112, 5.21%>
		<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest.java:115, 5.21%>
	<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest: void testEmptyMatching()>:
		<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest.java:128, 33.33%>
	<org.jgrapht.alg.KShortestPathCostTest: void testPicture1Graph()>:
		<org.jgrapht.alg.KShortestPathCostTest.java:97, 18.42%>
		<org.jgrapht.alg.KShortestPathCostTest.java:106, 10.53%>
		<org.jgrapht.alg.KShortestPathCostTest.java:111, 18.42%>
		<org.jgrapht.alg.KShortestPathCostTest.java:120, 10.53%>
		<org.jgrapht.alg.KShortestPathCostTest.java:131, 21.05%>
	<org.jgrapht.alg.KruskalMinimumSpanningTreeTest: void testMinimumSpanningTree()>:
		<org.jgrapht.alg.KruskalMinimumSpanningTreeTest.java:80, 19.05%>
		<org.jgrapht.alg.KruskalMinimumSpanningTreeTest.java:84, 38.10%>
	<org.jgrapht.experimental.alg.ColoringTest: void testBacktrackColoring()>:
		<org.jgrapht.experimental.alg.ColoringTest.java:97, 50.00%>
	<org.jgrapht.experimental.alg.ColoringTest: void testGreedyColoring()>:
		<org.jgrapht.experimental.alg.ColoringTest.java:77, 50.00%>
	<org.jgrapht.experimental.dag.DirectedAcyclicGraphTest: void testCycleDetectionInRandomGraphBuild()>:
		<org.jgrapht.experimental.dag.DirectedAcyclicGraphTest.java:131, 14.29%>
		<org.jgrapht.experimental.dag.DirectedAcyclicGraphTest.java:141, 12.24%>
		<org.jgrapht.experimental.dag.DirectedAcyclicGraphTest.java:152, 6.12%>
	<org.jgrapht.graph.AsUndirectedGraphTest: void testGetAllEdges()>:
		<org.jgrapht.graph.AsUndirectedGraphTest.java:123, 40.00%>
		<org.jgrapht.graph.AsUndirectedGraphTest.java:124, 65.00%>
		<org.jgrapht.graph.AsUndirectedGraphTest.java:128, 70.00%>
		<org.jgrapht.graph.AsUndirectedGraphTest.java:129, 80.00%>
	<org.jgrapht.graph.AsUndirectedGraphTest: void testGetEdge()>:
		<org.jgrapht.graph.AsUndirectedGraphTest.java:137, 44.00%>
		<org.jgrapht.graph.AsUndirectedGraphTest.java:140, 68.00%>
		<org.jgrapht.graph.AsUndirectedGraphTest.java:144, 92.00%>
	<org.jgrapht.graph.AsUnweightedGraphTest: void constructWeighted(org.jgrapht.WeightedGraph)>:
		<org.jgrapht.graph.AsUnweightedGraphTest.java:110, 57.14%>
	<org.jgrapht.graph.SimpleDirectedGraphTest: void testIncomingOutgoingEdgesOf()>:
		<org.jgrapht.graph.SimpleDirectedGraphTest.java:315, 128.57%>

Relevant Assertion clone sets (2):
Set (score: 0.67, ccsize: 2, packages: 1, classes: 1): 
	<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest: void testBipartiteMatching1()>:
		<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest.java:86, 6.76%>
	<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest: void testBipartiteMatching2()>:
		<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest.java:115, 5.21%>
Set (score: 0.50, ccsize: 2, packages: 1, classes: 1): 
	<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest: void testBipartiteMatching1()>:
		<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest.java:83, 6.76%>
	<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest: void testBipartiteMatching2()>:
		<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest.java:112, 5.21%>
==============================================

[105] Set (editDistance: 2, isComplete: false, packages: 4, classes: 9): 
Centroid (size: 3): <org.jgrapht.graph.DefaultDirectedGraphTest: void testVertexOrderDeterminism()>

Methods (12): 
	<org.jgrapht.experimental.GraphReaderTest: void testGraphReader()>:
		<org.jgrapht.experimental.GraphReaderTest.java:88, 27.27%>
	<org.jgrapht.experimental.GraphReaderTest: void testGraphReaderWeighted()>:
		<org.jgrapht.experimental.GraphReaderTest.java:116, 23.08%>
	<org.jgrapht.ext.DOTExporterTest: void testUndirected()>:
		<org.jgrapht.ext.DOTExporterTest.java:110, 41.67%>
	<org.jgrapht.ext.GmlExporterTest: void testUndirected()>:
		<org.jgrapht.ext.GmlExporterTest.java:117, 62.50%>
	<org.jgrapht.ext.MatrixExporterTest: void testAdjacencyDirected()>:
		<org.jgrapht.ext.MatrixExporterTest.java:149, 62.50%>
	<org.jgrapht.ext.MatrixExporterTest: void testAdjacencyUndirected()>:
		<org.jgrapht.ext.MatrixExporterTest.java:133, 62.50%>
	<org.jgrapht.graph.AsUndirectedGraphTest: void testAddEdge()>:
		<org.jgrapht.graph.AsUndirectedGraphTest.java:89, 100.00%>
	<org.jgrapht.graph.DefaultDirectedGraphTest: void testVertexOrderDeterminism()>:
		<org.jgrapht.graph.DefaultDirectedGraphTest.java:165, 76.92%>
		<org.jgrapht.graph.DefaultDirectedGraphTest.java:166, 76.92%>
		<org.jgrapht.graph.DefaultDirectedGraphTest.java:167, 76.92%>
	<org.jgrapht.graph.GenericGraphsTest: void testAlissaHacker()>:
		<org.jgrapht.graph.GenericGraphsTest.java:134, 83.33%>
	<org.jgrapht.traverse.ClosestFirstIteratorTest: void testNoStart()>:
		<org.jgrapht.traverse.ClosestFirstIteratorTest.java:103, 53.85%>
	<org.jgrapht.traverse.ClosestFirstIteratorTest: void testRadius()>:
		<org.jgrapht.traverse.ClosestFirstIteratorTest.java:80, 53.85%>
	<org.jgrapht.traverse.DepthFirstIteratorTest: void testBug1169182()>:
		<org.jgrapht.traverse.DepthFirstIteratorTest.java:149, 16.00%>

Relevant Assertion clone sets (2):
Set (score: 1.00, ccsize: 2, packages: 1, classes: 1): 
	<org.jgrapht.experimental.GraphReaderTest: void testGraphReader()>:
		<org.jgrapht.experimental.GraphReaderTest.java:88, 27.27%>
	<org.jgrapht.experimental.GraphReaderTest: void testGraphReaderWeighted()>:
		<org.jgrapht.experimental.GraphReaderTest.java:116, 23.08%>
Set (score: 0.67, ccsize: 2, packages: 1, classes: 2): 
	<org.jgrapht.ext.DOTExporterTest: void testUndirected()>:
		<org.jgrapht.ext.DOTExporterTest.java:110, 41.67%>
	<org.jgrapht.ext.GmlExporterTest: void testUndirected()>:
		<org.jgrapht.ext.GmlExporterTest.java:117, 62.50%>
==============================================

[106] Set (editDistance: 2, isComplete: false, packages: 8, classes: 20): 
Centroid (size: 3): <org.jgrapht.graph.EqualsAndHashCodeTest: void testDefaultDirectedGraph()>

Methods (37): 
	<org.jgrapht.EnhancedTestCase: void assertFalse()>:
		<org.jgrapht.EnhancedTestCase.java:79, 100.00%>
	<org.jgrapht.EnhancedTestCase: void assertTrue()>:
		<org.jgrapht.EnhancedTestCase.java:87, 100.00%>
	<org.jgrapht.alg.BiconnectivityInspectorTest: void testLinearGraph(int)>:
		<org.jgrapht.alg.BiconnectivityInspectorTest.java:88, 40.00%>
		<org.jgrapht.alg.BiconnectivityInspectorTest.java:89, 40.00%>
	<org.jgrapht.alg.BiconnectivityInspectorTest: void testNotBiconnected()>:
		<org.jgrapht.alg.BiconnectivityInspectorTest.java:100, 55.56%>
		<org.jgrapht.alg.BiconnectivityInspectorTest.java:101, 55.56%>
	<org.jgrapht.alg.BlockCutpointGraphTest: void testBiconnected()>:
		<org.jgrapht.alg.BlockCutpointGraphTest.java:67, 41.67%>
		<org.jgrapht.alg.BlockCutpointGraphTest.java:71, 41.67%>
	<org.jgrapht.alg.BlockCutpointGraphTest: void testGetBlock(org.jgrapht.alg.BlockCutpointGraph)>:
		<org.jgrapht.alg.BlockCutpointGraphTest.java:88, 33.33%>
		<org.jgrapht.alg.BlockCutpointGraphTest.java:94, 19.05%>
	<org.jgrapht.alg.BlockCutpointGraphTest: void testLinearGraph(int)>:
		<org.jgrapht.alg.BlockCutpointGraphTest.java:121, 33.33%>
		<org.jgrapht.alg.BlockCutpointGraphTest.java:125, 33.33%>
	<org.jgrapht.alg.BlockCutpointGraphTest: void testNotBiconnected()>:
		<org.jgrapht.alg.BlockCutpointGraphTest.java:135, 41.67%>
		<org.jgrapht.alg.BlockCutpointGraphTest.java:139, 41.67%>
	<org.jgrapht.alg.ChromaticNumberTest: void testChromaticNumber()>:
		<org.jgrapht.alg.ChromaticNumberTest.java:78, 18.75%>
		<org.jgrapht.alg.ChromaticNumberTest.java:83, 31.25%>
		<org.jgrapht.alg.ChromaticNumberTest.java:100, 18.75%>
	<org.jgrapht.alg.ConnectivityInspectorTest: void testStronglyConnected1()>:
		<org.jgrapht.alg.ConnectivityInspectorTest.java:211, 16.00%>
		<org.jgrapht.alg.ConnectivityInspectorTest.java:222, 12.00%>
		<org.jgrapht.alg.ConnectivityInspectorTest.java:225, 16.00%>
	<org.jgrapht.alg.ConnectivityInspectorTest: void testStronglyConnected2()>:
		<org.jgrapht.alg.ConnectivityInspectorTest.java:268, 16.00%>
		<org.jgrapht.alg.ConnectivityInspectorTest.java:279, 12.00%>
		<org.jgrapht.alg.ConnectivityInspectorTest.java:282, 16.00%>
	<org.jgrapht.alg.ConnectivityInspectorTest: void testStronglyConnected3()>:
		<org.jgrapht.alg.ConnectivityInspectorTest.java:325, 17.39%>
		<org.jgrapht.alg.ConnectivityInspectorTest.java:337, 13.04%>
		<org.jgrapht.alg.ConnectivityInspectorTest.java:340, 17.39%>
	<org.jgrapht.alg.EdmondsBlossomShrinkingTest: void testOne()>:
		<org.jgrapht.alg.EdmondsBlossomShrinkingTest.java:80, 23.81%>
		<org.jgrapht.alg.EdmondsBlossomShrinkingTest.java:81, 19.05%>
		<org.jgrapht.alg.EdmondsBlossomShrinkingTest.java:82, 19.05%>
	<org.jgrapht.alg.KSPExampleTest: void testFourReturnedPathsJGraphT()>:
		<org.jgrapht.alg.KSPExampleTest.java:60, 55.56%>
	<org.jgrapht.alg.KSPExampleTest: void testThreeReturnedPathsJGraphT()>:
		<org.jgrapht.alg.KSPExampleTest.java:72, 60.00%>
	<org.jgrapht.alg.KSPExampleTest: void testTwoReturnedPathsJGraphT()>:
		<org.jgrapht.alg.KSPExampleTest.java:84, 60.00%>
	<org.jgrapht.alg.KShortestPathCostTest: void verifyWeightsConsistency(java.util.List,java.util.List)>:
		<org.jgrapht.alg.KShortestPathCostTest.java:294, 53.85%>
	<org.jgrapht.alg.KruskalMinimumSpanningTreeTest: void testMinimumSpanningTree()>:
		<org.jgrapht.alg.KruskalMinimumSpanningTreeTest.java:80, 19.05%>
		<org.jgrapht.alg.KruskalMinimumSpanningTreeTest.java:84, 38.10%>
	<org.jgrapht.alg.VertexCoversTest: void testFind2ApproximationCover()>:
		<org.jgrapht.alg.VertexCoversTest.java:74, 60.00%>
	<org.jgrapht.alg.VertexCoversTest: void testFindGreedyCover()>:
		<org.jgrapht.alg.VertexCoversTest.java:89, 50.00%>
	<org.jgrapht.experimental.dag.DirectedAcyclicGraphTest: void testCycleDetectionInRandomGraphBuild()>:
		<org.jgrapht.experimental.dag.DirectedAcyclicGraphTest.java:131, 14.29%>
		<org.jgrapht.experimental.dag.DirectedAcyclicGraphTest.java:141, 12.24%>
		<org.jgrapht.experimental.dag.DirectedAcyclicGraphTest.java:152, 6.12%>
	<org.jgrapht.experimental.equivalence.EquivalenceGroupCreatorTest: void testOneComparator(org.jgrapht.experimental.equivalence.EquivalenceComparator,int)>:
		<org.jgrapht.experimental.equivalence.EquivalenceGroupCreatorTest.java:152, 23.53%>
		<org.jgrapht.experimental.equivalence.EquivalenceGroupCreatorTest.java:157, 41.18%>
	<org.jgrapht.experimental.permutation.CompoundPermutationIterTest: void testGetNext()>:
		<org.jgrapht.experimental.permutation.CompoundPermutationIterTest.java:96, 40.00%>
		<org.jgrapht.experimental.permutation.CompoundPermutationIterTest.java:127, 40.00%>
	<org.jgrapht.generate.GraphGeneratorTest: void testCompleteBipartiteGraphGenerator()>:
		<org.jgrapht.generate.GraphGeneratorTest.java:243, 50.00%>
		<org.jgrapht.generate.GraphGeneratorTest.java:244, 50.00%>
	<org.jgrapht.generate.GraphGeneratorTest: void testCompleteGraphGenerator()>:
		<org.jgrapht.generate.GraphGeneratorTest.java:185, 62.50%>
	<org.jgrapht.generate.GraphGeneratorTest: void testHyperCubeGraphGenerator()>:
		<org.jgrapht.generate.GraphGeneratorTest.java:265, 50.00%>
		<org.jgrapht.generate.GraphGeneratorTest.java:266, 50.00%>
	<org.jgrapht.generate.RandomGraphGeneratorTest: void testGenerateDirectedGraph()>:
		<org.jgrapht.generate.RandomGraphGeneratorTest.java:70, 20.00%>
	<org.jgrapht.generate.RandomGraphGeneratorTest: void testGenerateListenableUndirectedGraph()>:
		<org.jgrapht.generate.RandomGraphGeneratorTest.java:89, 20.00%>
	<org.jgrapht.graph.DefaultDirectedGraphTest: void testEdgesOf()>:
		<org.jgrapht.graph.DefaultDirectedGraphTest.java:117, 75.00%>
		<org.jgrapht.graph.DefaultDirectedGraphTest.java:118, 75.00%>
	<org.jgrapht.graph.DefaultDirectedGraphTest: void testGetAllEdges()>:
		<org.jgrapht.graph.DefaultDirectedGraphTest.java:130, 100.00%>
	<org.jgrapht.graph.DefaultDirectedGraphTest: void testInDegreeOf()>:
		<org.jgrapht.graph.DefaultDirectedGraphTest.java:141, 83.33%>
		<org.jgrapht.graph.DefaultDirectedGraphTest.java:142, 83.33%>
	<org.jgrapht.graph.DefaultDirectedGraphTest: void testOutDegreeOf()>:
		<org.jgrapht.graph.DefaultDirectedGraphTest.java:153, 83.33%>
		<org.jgrapht.graph.DefaultDirectedGraphTest.java:154, 83.33%>
	<org.jgrapht.graph.EqualsAndHashCodeTest: void testAsWeightedGraphs()>:
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:329, 5.17%>
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:330, 10.34%>
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:332, 5.17%>
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:333, 10.34%>
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:335, 8.62%>
	<org.jgrapht.graph.EqualsAndHashCodeTest: void testDefaultDirectedGraph()>:
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:105, 6.52%>
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:106, 10.87%>
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:108, 13.04%>
	<org.jgrapht.graph.GenericGraphsTest: void testEqualButNotSameVertex()>:
		<org.jgrapht.graph.GenericGraphsTest.java:145, 40.00%>
		<org.jgrapht.graph.GenericGraphsTest.java:146, 40.00%>
	<org.jgrapht.graph.SimpleDirectedGraphTest: void testEdgesOf()>:
		<org.jgrapht.graph.SimpleDirectedGraphTest.java:232, 46.67%>
		<org.jgrapht.graph.SimpleDirectedGraphTest.java:233, 60.00%>
		<org.jgrapht.graph.SimpleDirectedGraphTest.java:243, 20.00%>
	<org.jgrapht.util.FibonacciHeapTest: void testGrowReplaceShrink()>:
		<org.jgrapht.util.FibonacciHeapTest.java:88, 17.65%>
		<org.jgrapht.util.FibonacciHeapTest.java:91, 17.65%>

Relevant Assertion clone sets (5):
Set (score: 1.00, ccsize: 2, packages: 1, classes: 1): 
	<org.jgrapht.alg.ConnectivityInspectorTest: void testStronglyConnected1()>:
		<org.jgrapht.alg.ConnectivityInspectorTest.java:222, 12.00%>
	<org.jgrapht.alg.ConnectivityInspectorTest: void testStronglyConnected2()>:
		<org.jgrapht.alg.ConnectivityInspectorTest.java:279, 12.00%>
	<org.jgrapht.alg.ConnectivityInspectorTest: void testStronglyConnected3()>:
		<org.jgrapht.alg.ConnectivityInspectorTest.java:337, 13.04%>
Set (score: 1.00, ccsize: 2, packages: 1, classes: 1): 
	<org.jgrapht.alg.VertexCoversTest: void testFind2ApproximationCover()>:
		<org.jgrapht.alg.VertexCoversTest.java:74, 60.00%>
	<org.jgrapht.alg.VertexCoversTest: void testFindGreedyCover()>:
		<org.jgrapht.alg.VertexCoversTest.java:89, 50.00%>
Set (score: 0.67, ccsize: 3, packages: 1, classes: 2): 
	<org.jgrapht.alg.BiconnectivityInspectorTest: void testLinearGraph(int)>:
		<org.jgrapht.alg.BiconnectivityInspectorTest.java:88, 40.00%>
	<org.jgrapht.alg.BlockCutpointGraphTest: void testLinearGraph(int)>:
		<org.jgrapht.alg.BlockCutpointGraphTest.java:121, 33.33%>
		<org.jgrapht.alg.BlockCutpointGraphTest.java:125, 33.33%>
Set (score: 0.67, ccsize: 3, packages: 1, classes: 2): 
	<org.jgrapht.alg.BiconnectivityInspectorTest: void testNotBiconnected()>:
		<org.jgrapht.alg.BiconnectivityInspectorTest.java:100, 55.56%>
	<org.jgrapht.alg.BlockCutpointGraphTest: void testNotBiconnected()>:
		<org.jgrapht.alg.BlockCutpointGraphTest.java:135, 41.67%>
		<org.jgrapht.alg.BlockCutpointGraphTest.java:139, 41.67%>
Set (score: 0.50, ccsize: 3, packages: 1, classes: 1): 
	<org.jgrapht.alg.KSPExampleTest: void testFourReturnedPathsJGraphT()>:
		<org.jgrapht.alg.KSPExampleTest.java:60, 55.56%>
	<org.jgrapht.alg.KSPExampleTest: void testThreeReturnedPathsJGraphT()>:
		<org.jgrapht.alg.KSPExampleTest.java:72, 60.00%>
	<org.jgrapht.alg.KSPExampleTest: void testTwoReturnedPathsJGraphT()>:
		<org.jgrapht.alg.KSPExampleTest.java:84, 60.00%>
==============================================

[107] Set (editDistance: 2, isComplete: false, packages: 8, classes: 20): 
Centroid (size: 3): <org.jgrapht.graph.EqualsAndHashCodeTest: void testGraphsWithNonIntrusiveEdge()>

Methods (37): 
	<org.jgrapht.EnhancedTestCase: void assertFalse()>:
		<org.jgrapht.EnhancedTestCase.java:79, 100.00%>
	<org.jgrapht.EnhancedTestCase: void assertTrue()>:
		<org.jgrapht.EnhancedTestCase.java:87, 100.00%>
	<org.jgrapht.alg.BiconnectivityInspectorTest: void testLinearGraph(int)>:
		<org.jgrapht.alg.BiconnectivityInspectorTest.java:88, 40.00%>
		<org.jgrapht.alg.BiconnectivityInspectorTest.java:89, 40.00%>
	<org.jgrapht.alg.BiconnectivityInspectorTest: void testNotBiconnected()>:
		<org.jgrapht.alg.BiconnectivityInspectorTest.java:100, 55.56%>
		<org.jgrapht.alg.BiconnectivityInspectorTest.java:101, 55.56%>
	<org.jgrapht.alg.BlockCutpointGraphTest: void testBiconnected()>:
		<org.jgrapht.alg.BlockCutpointGraphTest.java:67, 41.67%>
		<org.jgrapht.alg.BlockCutpointGraphTest.java:71, 41.67%>
	<org.jgrapht.alg.BlockCutpointGraphTest: void testGetBlock(org.jgrapht.alg.BlockCutpointGraph)>:
		<org.jgrapht.alg.BlockCutpointGraphTest.java:88, 33.33%>
		<org.jgrapht.alg.BlockCutpointGraphTest.java:94, 19.05%>
	<org.jgrapht.alg.BlockCutpointGraphTest: void testLinearGraph(int)>:
		<org.jgrapht.alg.BlockCutpointGraphTest.java:121, 33.33%>
		<org.jgrapht.alg.BlockCutpointGraphTest.java:125, 33.33%>
	<org.jgrapht.alg.BlockCutpointGraphTest: void testNotBiconnected()>:
		<org.jgrapht.alg.BlockCutpointGraphTest.java:135, 41.67%>
		<org.jgrapht.alg.BlockCutpointGraphTest.java:139, 41.67%>
	<org.jgrapht.alg.ChromaticNumberTest: void testChromaticNumber()>:
		<org.jgrapht.alg.ChromaticNumberTest.java:78, 18.75%>
		<org.jgrapht.alg.ChromaticNumberTest.java:83, 31.25%>
		<org.jgrapht.alg.ChromaticNumberTest.java:100, 18.75%>
	<org.jgrapht.alg.ConnectivityInspectorTest: void testStronglyConnected1()>:
		<org.jgrapht.alg.ConnectivityInspectorTest.java:211, 16.00%>
		<org.jgrapht.alg.ConnectivityInspectorTest.java:222, 12.00%>
		<org.jgrapht.alg.ConnectivityInspectorTest.java:225, 16.00%>
	<org.jgrapht.alg.ConnectivityInspectorTest: void testStronglyConnected2()>:
		<org.jgrapht.alg.ConnectivityInspectorTest.java:268, 16.00%>
		<org.jgrapht.alg.ConnectivityInspectorTest.java:279, 12.00%>
		<org.jgrapht.alg.ConnectivityInspectorTest.java:282, 16.00%>
	<org.jgrapht.alg.ConnectivityInspectorTest: void testStronglyConnected3()>:
		<org.jgrapht.alg.ConnectivityInspectorTest.java:325, 17.39%>
		<org.jgrapht.alg.ConnectivityInspectorTest.java:337, 13.04%>
		<org.jgrapht.alg.ConnectivityInspectorTest.java:340, 17.39%>
	<org.jgrapht.alg.EdmondsBlossomShrinkingTest: void testOne()>:
		<org.jgrapht.alg.EdmondsBlossomShrinkingTest.java:80, 23.81%>
		<org.jgrapht.alg.EdmondsBlossomShrinkingTest.java:81, 19.05%>
		<org.jgrapht.alg.EdmondsBlossomShrinkingTest.java:82, 19.05%>
	<org.jgrapht.alg.KSPExampleTest: void testFourReturnedPathsJGraphT()>:
		<org.jgrapht.alg.KSPExampleTest.java:60, 55.56%>
	<org.jgrapht.alg.KSPExampleTest: void testThreeReturnedPathsJGraphT()>:
		<org.jgrapht.alg.KSPExampleTest.java:72, 60.00%>
	<org.jgrapht.alg.KSPExampleTest: void testTwoReturnedPathsJGraphT()>:
		<org.jgrapht.alg.KSPExampleTest.java:84, 60.00%>
	<org.jgrapht.alg.KShortestPathCostTest: void verifyWeightsConsistency(java.util.List,java.util.List)>:
		<org.jgrapht.alg.KShortestPathCostTest.java:294, 53.85%>
	<org.jgrapht.alg.KruskalMinimumSpanningTreeTest: void testMinimumSpanningTree()>:
		<org.jgrapht.alg.KruskalMinimumSpanningTreeTest.java:80, 19.05%>
		<org.jgrapht.alg.KruskalMinimumSpanningTreeTest.java:84, 38.10%>
	<org.jgrapht.alg.VertexCoversTest: void testFind2ApproximationCover()>:
		<org.jgrapht.alg.VertexCoversTest.java:74, 60.00%>
	<org.jgrapht.alg.VertexCoversTest: void testFindGreedyCover()>:
		<org.jgrapht.alg.VertexCoversTest.java:89, 50.00%>
	<org.jgrapht.experimental.dag.DirectedAcyclicGraphTest: void testCycleDetectionInRandomGraphBuild()>:
		<org.jgrapht.experimental.dag.DirectedAcyclicGraphTest.java:131, 14.29%>
		<org.jgrapht.experimental.dag.DirectedAcyclicGraphTest.java:141, 12.24%>
		<org.jgrapht.experimental.dag.DirectedAcyclicGraphTest.java:152, 6.12%>
	<org.jgrapht.experimental.equivalence.EquivalenceGroupCreatorTest: void testOneComparator(org.jgrapht.experimental.equivalence.EquivalenceComparator,int)>:
		<org.jgrapht.experimental.equivalence.EquivalenceGroupCreatorTest.java:152, 23.53%>
		<org.jgrapht.experimental.equivalence.EquivalenceGroupCreatorTest.java:157, 41.18%>
	<org.jgrapht.experimental.permutation.CompoundPermutationIterTest: void testGetNext()>:
		<org.jgrapht.experimental.permutation.CompoundPermutationIterTest.java:96, 40.00%>
		<org.jgrapht.experimental.permutation.CompoundPermutationIterTest.java:127, 40.00%>
	<org.jgrapht.generate.GraphGeneratorTest: void testCompleteBipartiteGraphGenerator()>:
		<org.jgrapht.generate.GraphGeneratorTest.java:243, 50.00%>
		<org.jgrapht.generate.GraphGeneratorTest.java:244, 50.00%>
	<org.jgrapht.generate.GraphGeneratorTest: void testCompleteGraphGenerator()>:
		<org.jgrapht.generate.GraphGeneratorTest.java:185, 62.50%>
	<org.jgrapht.generate.GraphGeneratorTest: void testHyperCubeGraphGenerator()>:
		<org.jgrapht.generate.GraphGeneratorTest.java:265, 50.00%>
		<org.jgrapht.generate.GraphGeneratorTest.java:266, 50.00%>
	<org.jgrapht.generate.RandomGraphGeneratorTest: void testGenerateDirectedGraph()>:
		<org.jgrapht.generate.RandomGraphGeneratorTest.java:70, 20.00%>
	<org.jgrapht.generate.RandomGraphGeneratorTest: void testGenerateListenableUndirectedGraph()>:
		<org.jgrapht.generate.RandomGraphGeneratorTest.java:89, 20.00%>
	<org.jgrapht.graph.DefaultDirectedGraphTest: void testEdgesOf()>:
		<org.jgrapht.graph.DefaultDirectedGraphTest.java:117, 75.00%>
		<org.jgrapht.graph.DefaultDirectedGraphTest.java:118, 75.00%>
	<org.jgrapht.graph.DefaultDirectedGraphTest: void testGetAllEdges()>:
		<org.jgrapht.graph.DefaultDirectedGraphTest.java:130, 100.00%>
	<org.jgrapht.graph.DefaultDirectedGraphTest: void testInDegreeOf()>:
		<org.jgrapht.graph.DefaultDirectedGraphTest.java:141, 83.33%>
		<org.jgrapht.graph.DefaultDirectedGraphTest.java:142, 83.33%>
	<org.jgrapht.graph.DefaultDirectedGraphTest: void testOutDegreeOf()>:
		<org.jgrapht.graph.DefaultDirectedGraphTest.java:153, 83.33%>
		<org.jgrapht.graph.DefaultDirectedGraphTest.java:154, 83.33%>
	<org.jgrapht.graph.EqualsAndHashCodeTest: void testAsWeightedGraphs()>:
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:329, 5.17%>
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:330, 10.34%>
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:332, 5.17%>
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:333, 10.34%>
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:335, 8.62%>
	<org.jgrapht.graph.EqualsAndHashCodeTest: void testGraphsWithNonIntrusiveEdge()>:
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:187, 3.90%>
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:188, 6.49%>
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:190, 7.79%>
	<org.jgrapht.graph.GenericGraphsTest: void testEqualButNotSameVertex()>:
		<org.jgrapht.graph.GenericGraphsTest.java:145, 40.00%>
		<org.jgrapht.graph.GenericGraphsTest.java:146, 40.00%>
	<org.jgrapht.graph.SimpleDirectedGraphTest: void testEdgesOf()>:
		<org.jgrapht.graph.SimpleDirectedGraphTest.java:232, 46.67%>
		<org.jgrapht.graph.SimpleDirectedGraphTest.java:233, 60.00%>
		<org.jgrapht.graph.SimpleDirectedGraphTest.java:243, 20.00%>
	<org.jgrapht.util.FibonacciHeapTest: void testGrowReplaceShrink()>:
		<org.jgrapht.util.FibonacciHeapTest.java:88, 17.65%>
		<org.jgrapht.util.FibonacciHeapTest.java:91, 17.65%>

Relevant Assertion clone sets (5):
Set (score: 1.00, ccsize: 2, packages: 1, classes: 1): 
	<org.jgrapht.alg.ConnectivityInspectorTest: void testStronglyConnected1()>:
		<org.jgrapht.alg.ConnectivityInspectorTest.java:222, 12.00%>
	<org.jgrapht.alg.ConnectivityInspectorTest: void testStronglyConnected2()>:
		<org.jgrapht.alg.ConnectivityInspectorTest.java:279, 12.00%>
	<org.jgrapht.alg.ConnectivityInspectorTest: void testStronglyConnected3()>:
		<org.jgrapht.alg.ConnectivityInspectorTest.java:337, 13.04%>
Set (score: 1.00, ccsize: 2, packages: 1, classes: 1): 
	<org.jgrapht.alg.VertexCoversTest: void testFind2ApproximationCover()>:
		<org.jgrapht.alg.VertexCoversTest.java:74, 60.00%>
	<org.jgrapht.alg.VertexCoversTest: void testFindGreedyCover()>:
		<org.jgrapht.alg.VertexCoversTest.java:89, 50.00%>
Set (score: 0.67, ccsize: 3, packages: 1, classes: 2): 
	<org.jgrapht.alg.BiconnectivityInspectorTest: void testLinearGraph(int)>:
		<org.jgrapht.alg.BiconnectivityInspectorTest.java:88, 40.00%>
	<org.jgrapht.alg.BlockCutpointGraphTest: void testLinearGraph(int)>:
		<org.jgrapht.alg.BlockCutpointGraphTest.java:121, 33.33%>
		<org.jgrapht.alg.BlockCutpointGraphTest.java:125, 33.33%>
Set (score: 0.67, ccsize: 3, packages: 1, classes: 2): 
	<org.jgrapht.alg.BiconnectivityInspectorTest: void testNotBiconnected()>:
		<org.jgrapht.alg.BiconnectivityInspectorTest.java:100, 55.56%>
	<org.jgrapht.alg.BlockCutpointGraphTest: void testNotBiconnected()>:
		<org.jgrapht.alg.BlockCutpointGraphTest.java:135, 41.67%>
		<org.jgrapht.alg.BlockCutpointGraphTest.java:139, 41.67%>
Set (score: 0.50, ccsize: 3, packages: 1, classes: 1): 
	<org.jgrapht.alg.KSPExampleTest: void testFourReturnedPathsJGraphT()>:
		<org.jgrapht.alg.KSPExampleTest.java:60, 55.56%>
	<org.jgrapht.alg.KSPExampleTest: void testThreeReturnedPathsJGraphT()>:
		<org.jgrapht.alg.KSPExampleTest.java:72, 60.00%>
	<org.jgrapht.alg.KSPExampleTest: void testTwoReturnedPathsJGraphT()>:
		<org.jgrapht.alg.KSPExampleTest.java:84, 60.00%>
==============================================

[108] Set (editDistance: 2, isComplete: false, packages: 8, classes: 20): 
Centroid (size: 3): <org.jgrapht.graph.EqualsAndHashCodeTest: void testGrapshWithCustomEdges()>

Methods (37): 
	<org.jgrapht.EnhancedTestCase: void assertFalse()>:
		<org.jgrapht.EnhancedTestCase.java:79, 100.00%>
	<org.jgrapht.EnhancedTestCase: void assertTrue()>:
		<org.jgrapht.EnhancedTestCase.java:87, 100.00%>
	<org.jgrapht.alg.BiconnectivityInspectorTest: void testLinearGraph(int)>:
		<org.jgrapht.alg.BiconnectivityInspectorTest.java:88, 40.00%>
		<org.jgrapht.alg.BiconnectivityInspectorTest.java:89, 40.00%>
	<org.jgrapht.alg.BiconnectivityInspectorTest: void testNotBiconnected()>:
		<org.jgrapht.alg.BiconnectivityInspectorTest.java:100, 55.56%>
		<org.jgrapht.alg.BiconnectivityInspectorTest.java:101, 55.56%>
	<org.jgrapht.alg.BlockCutpointGraphTest: void testBiconnected()>:
		<org.jgrapht.alg.BlockCutpointGraphTest.java:67, 41.67%>
		<org.jgrapht.alg.BlockCutpointGraphTest.java:71, 41.67%>
	<org.jgrapht.alg.BlockCutpointGraphTest: void testGetBlock(org.jgrapht.alg.BlockCutpointGraph)>:
		<org.jgrapht.alg.BlockCutpointGraphTest.java:88, 33.33%>
		<org.jgrapht.alg.BlockCutpointGraphTest.java:94, 19.05%>
	<org.jgrapht.alg.BlockCutpointGraphTest: void testLinearGraph(int)>:
		<org.jgrapht.alg.BlockCutpointGraphTest.java:121, 33.33%>
		<org.jgrapht.alg.BlockCutpointGraphTest.java:125, 33.33%>
	<org.jgrapht.alg.BlockCutpointGraphTest: void testNotBiconnected()>:
		<org.jgrapht.alg.BlockCutpointGraphTest.java:135, 41.67%>
		<org.jgrapht.alg.BlockCutpointGraphTest.java:139, 41.67%>
	<org.jgrapht.alg.ChromaticNumberTest: void testChromaticNumber()>:
		<org.jgrapht.alg.ChromaticNumberTest.java:78, 18.75%>
		<org.jgrapht.alg.ChromaticNumberTest.java:83, 31.25%>
		<org.jgrapht.alg.ChromaticNumberTest.java:100, 18.75%>
	<org.jgrapht.alg.ConnectivityInspectorTest: void testStronglyConnected1()>:
		<org.jgrapht.alg.ConnectivityInspectorTest.java:211, 16.00%>
		<org.jgrapht.alg.ConnectivityInspectorTest.java:222, 12.00%>
		<org.jgrapht.alg.ConnectivityInspectorTest.java:225, 16.00%>
	<org.jgrapht.alg.ConnectivityInspectorTest: void testStronglyConnected2()>:
		<org.jgrapht.alg.ConnectivityInspectorTest.java:268, 16.00%>
		<org.jgrapht.alg.ConnectivityInspectorTest.java:279, 12.00%>
		<org.jgrapht.alg.ConnectivityInspectorTest.java:282, 16.00%>
	<org.jgrapht.alg.ConnectivityInspectorTest: void testStronglyConnected3()>:
		<org.jgrapht.alg.ConnectivityInspectorTest.java:325, 17.39%>
		<org.jgrapht.alg.ConnectivityInspectorTest.java:337, 13.04%>
		<org.jgrapht.alg.ConnectivityInspectorTest.java:340, 17.39%>
	<org.jgrapht.alg.EdmondsBlossomShrinkingTest: void testOne()>:
		<org.jgrapht.alg.EdmondsBlossomShrinkingTest.java:80, 23.81%>
		<org.jgrapht.alg.EdmondsBlossomShrinkingTest.java:81, 19.05%>
		<org.jgrapht.alg.EdmondsBlossomShrinkingTest.java:82, 19.05%>
	<org.jgrapht.alg.KSPExampleTest: void testFourReturnedPathsJGraphT()>:
		<org.jgrapht.alg.KSPExampleTest.java:60, 55.56%>
	<org.jgrapht.alg.KSPExampleTest: void testThreeReturnedPathsJGraphT()>:
		<org.jgrapht.alg.KSPExampleTest.java:72, 60.00%>
	<org.jgrapht.alg.KSPExampleTest: void testTwoReturnedPathsJGraphT()>:
		<org.jgrapht.alg.KSPExampleTest.java:84, 60.00%>
	<org.jgrapht.alg.KShortestPathCostTest: void verifyWeightsConsistency(java.util.List,java.util.List)>:
		<org.jgrapht.alg.KShortestPathCostTest.java:294, 53.85%>
	<org.jgrapht.alg.KruskalMinimumSpanningTreeTest: void testMinimumSpanningTree()>:
		<org.jgrapht.alg.KruskalMinimumSpanningTreeTest.java:80, 19.05%>
		<org.jgrapht.alg.KruskalMinimumSpanningTreeTest.java:84, 38.10%>
	<org.jgrapht.alg.VertexCoversTest: void testFind2ApproximationCover()>:
		<org.jgrapht.alg.VertexCoversTest.java:74, 60.00%>
	<org.jgrapht.alg.VertexCoversTest: void testFindGreedyCover()>:
		<org.jgrapht.alg.VertexCoversTest.java:89, 50.00%>
	<org.jgrapht.experimental.dag.DirectedAcyclicGraphTest: void testCycleDetectionInRandomGraphBuild()>:
		<org.jgrapht.experimental.dag.DirectedAcyclicGraphTest.java:131, 14.29%>
		<org.jgrapht.experimental.dag.DirectedAcyclicGraphTest.java:141, 12.24%>
		<org.jgrapht.experimental.dag.DirectedAcyclicGraphTest.java:152, 6.12%>
	<org.jgrapht.experimental.equivalence.EquivalenceGroupCreatorTest: void testOneComparator(org.jgrapht.experimental.equivalence.EquivalenceComparator,int)>:
		<org.jgrapht.experimental.equivalence.EquivalenceGroupCreatorTest.java:152, 23.53%>
		<org.jgrapht.experimental.equivalence.EquivalenceGroupCreatorTest.java:157, 41.18%>
	<org.jgrapht.experimental.permutation.CompoundPermutationIterTest: void testGetNext()>:
		<org.jgrapht.experimental.permutation.CompoundPermutationIterTest.java:96, 40.00%>
		<org.jgrapht.experimental.permutation.CompoundPermutationIterTest.java:127, 40.00%>
	<org.jgrapht.generate.GraphGeneratorTest: void testCompleteBipartiteGraphGenerator()>:
		<org.jgrapht.generate.GraphGeneratorTest.java:243, 50.00%>
		<org.jgrapht.generate.GraphGeneratorTest.java:244, 50.00%>
	<org.jgrapht.generate.GraphGeneratorTest: void testCompleteGraphGenerator()>:
		<org.jgrapht.generate.GraphGeneratorTest.java:185, 62.50%>
	<org.jgrapht.generate.GraphGeneratorTest: void testHyperCubeGraphGenerator()>:
		<org.jgrapht.generate.GraphGeneratorTest.java:265, 50.00%>
		<org.jgrapht.generate.GraphGeneratorTest.java:266, 50.00%>
	<org.jgrapht.generate.RandomGraphGeneratorTest: void testGenerateDirectedGraph()>:
		<org.jgrapht.generate.RandomGraphGeneratorTest.java:70, 20.00%>
	<org.jgrapht.generate.RandomGraphGeneratorTest: void testGenerateListenableUndirectedGraph()>:
		<org.jgrapht.generate.RandomGraphGeneratorTest.java:89, 20.00%>
	<org.jgrapht.graph.DefaultDirectedGraphTest: void testEdgesOf()>:
		<org.jgrapht.graph.DefaultDirectedGraphTest.java:117, 75.00%>
		<org.jgrapht.graph.DefaultDirectedGraphTest.java:118, 75.00%>
	<org.jgrapht.graph.DefaultDirectedGraphTest: void testGetAllEdges()>:
		<org.jgrapht.graph.DefaultDirectedGraphTest.java:130, 100.00%>
	<org.jgrapht.graph.DefaultDirectedGraphTest: void testInDegreeOf()>:
		<org.jgrapht.graph.DefaultDirectedGraphTest.java:141, 83.33%>
		<org.jgrapht.graph.DefaultDirectedGraphTest.java:142, 83.33%>
	<org.jgrapht.graph.DefaultDirectedGraphTest: void testOutDegreeOf()>:
		<org.jgrapht.graph.DefaultDirectedGraphTest.java:153, 83.33%>
		<org.jgrapht.graph.DefaultDirectedGraphTest.java:154, 83.33%>
	<org.jgrapht.graph.EqualsAndHashCodeTest: void testAsWeightedGraphs()>:
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:329, 5.17%>
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:330, 10.34%>
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:332, 5.17%>
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:333, 10.34%>
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:335, 8.62%>
	<org.jgrapht.graph.EqualsAndHashCodeTest: void testGrapshWithCustomEdges()>:
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:268, 7.69%>
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:269, 12.82%>
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:271, 15.38%>
	<org.jgrapht.graph.GenericGraphsTest: void testEqualButNotSameVertex()>:
		<org.jgrapht.graph.GenericGraphsTest.java:145, 40.00%>
		<org.jgrapht.graph.GenericGraphsTest.java:146, 40.00%>
	<org.jgrapht.graph.SimpleDirectedGraphTest: void testEdgesOf()>:
		<org.jgrapht.graph.SimpleDirectedGraphTest.java:232, 46.67%>
		<org.jgrapht.graph.SimpleDirectedGraphTest.java:233, 60.00%>
		<org.jgrapht.graph.SimpleDirectedGraphTest.java:243, 20.00%>
	<org.jgrapht.util.FibonacciHeapTest: void testGrowReplaceShrink()>:
		<org.jgrapht.util.FibonacciHeapTest.java:88, 17.65%>
		<org.jgrapht.util.FibonacciHeapTest.java:91, 17.65%>

Relevant Assertion clone sets (5):
Set (score: 1.00, ccsize: 2, packages: 1, classes: 1): 
	<org.jgrapht.alg.ConnectivityInspectorTest: void testStronglyConnected1()>:
		<org.jgrapht.alg.ConnectivityInspectorTest.java:222, 12.00%>
	<org.jgrapht.alg.ConnectivityInspectorTest: void testStronglyConnected2()>:
		<org.jgrapht.alg.ConnectivityInspectorTest.java:279, 12.00%>
	<org.jgrapht.alg.ConnectivityInspectorTest: void testStronglyConnected3()>:
		<org.jgrapht.alg.ConnectivityInspectorTest.java:337, 13.04%>
Set (score: 1.00, ccsize: 2, packages: 1, classes: 1): 
	<org.jgrapht.alg.VertexCoversTest: void testFind2ApproximationCover()>:
		<org.jgrapht.alg.VertexCoversTest.java:74, 60.00%>
	<org.jgrapht.alg.VertexCoversTest: void testFindGreedyCover()>:
		<org.jgrapht.alg.VertexCoversTest.java:89, 50.00%>
Set (score: 0.67, ccsize: 3, packages: 1, classes: 2): 
	<org.jgrapht.alg.BiconnectivityInspectorTest: void testLinearGraph(int)>:
		<org.jgrapht.alg.BiconnectivityInspectorTest.java:88, 40.00%>
	<org.jgrapht.alg.BlockCutpointGraphTest: void testLinearGraph(int)>:
		<org.jgrapht.alg.BlockCutpointGraphTest.java:121, 33.33%>
		<org.jgrapht.alg.BlockCutpointGraphTest.java:125, 33.33%>
Set (score: 0.67, ccsize: 3, packages: 1, classes: 2): 
	<org.jgrapht.alg.BiconnectivityInspectorTest: void testNotBiconnected()>:
		<org.jgrapht.alg.BiconnectivityInspectorTest.java:100, 55.56%>
	<org.jgrapht.alg.BlockCutpointGraphTest: void testNotBiconnected()>:
		<org.jgrapht.alg.BlockCutpointGraphTest.java:135, 41.67%>
		<org.jgrapht.alg.BlockCutpointGraphTest.java:139, 41.67%>
Set (score: 0.50, ccsize: 3, packages: 1, classes: 1): 
	<org.jgrapht.alg.KSPExampleTest: void testFourReturnedPathsJGraphT()>:
		<org.jgrapht.alg.KSPExampleTest.java:60, 55.56%>
	<org.jgrapht.alg.KSPExampleTest: void testThreeReturnedPathsJGraphT()>:
		<org.jgrapht.alg.KSPExampleTest.java:72, 60.00%>
	<org.jgrapht.alg.KSPExampleTest: void testTwoReturnedPathsJGraphT()>:
		<org.jgrapht.alg.KSPExampleTest.java:84, 60.00%>
==============================================

[109] Set (editDistance: 2, isComplete: false, packages: 8, classes: 20): 
Centroid (size: 3): <org.jgrapht.graph.EqualsAndHashCodeTest: void testPseudograph()>

Methods (37): 
	<org.jgrapht.EnhancedTestCase: void assertFalse()>:
		<org.jgrapht.EnhancedTestCase.java:79, 100.00%>
	<org.jgrapht.EnhancedTestCase: void assertTrue()>:
		<org.jgrapht.EnhancedTestCase.java:87, 100.00%>
	<org.jgrapht.alg.BiconnectivityInspectorTest: void testLinearGraph(int)>:
		<org.jgrapht.alg.BiconnectivityInspectorTest.java:88, 40.00%>
		<org.jgrapht.alg.BiconnectivityInspectorTest.java:89, 40.00%>
	<org.jgrapht.alg.BiconnectivityInspectorTest: void testNotBiconnected()>:
		<org.jgrapht.alg.BiconnectivityInspectorTest.java:100, 55.56%>
		<org.jgrapht.alg.BiconnectivityInspectorTest.java:101, 55.56%>
	<org.jgrapht.alg.BlockCutpointGraphTest: void testBiconnected()>:
		<org.jgrapht.alg.BlockCutpointGraphTest.java:67, 41.67%>
		<org.jgrapht.alg.BlockCutpointGraphTest.java:71, 41.67%>
	<org.jgrapht.alg.BlockCutpointGraphTest: void testGetBlock(org.jgrapht.alg.BlockCutpointGraph)>:
		<org.jgrapht.alg.BlockCutpointGraphTest.java:88, 33.33%>
		<org.jgrapht.alg.BlockCutpointGraphTest.java:94, 19.05%>
	<org.jgrapht.alg.BlockCutpointGraphTest: void testLinearGraph(int)>:
		<org.jgrapht.alg.BlockCutpointGraphTest.java:121, 33.33%>
		<org.jgrapht.alg.BlockCutpointGraphTest.java:125, 33.33%>
	<org.jgrapht.alg.BlockCutpointGraphTest: void testNotBiconnected()>:
		<org.jgrapht.alg.BlockCutpointGraphTest.java:135, 41.67%>
		<org.jgrapht.alg.BlockCutpointGraphTest.java:139, 41.67%>
	<org.jgrapht.alg.ChromaticNumberTest: void testChromaticNumber()>:
		<org.jgrapht.alg.ChromaticNumberTest.java:78, 18.75%>
		<org.jgrapht.alg.ChromaticNumberTest.java:83, 31.25%>
		<org.jgrapht.alg.ChromaticNumberTest.java:100, 18.75%>
	<org.jgrapht.alg.ConnectivityInspectorTest: void testStronglyConnected1()>:
		<org.jgrapht.alg.ConnectivityInspectorTest.java:211, 16.00%>
		<org.jgrapht.alg.ConnectivityInspectorTest.java:222, 12.00%>
		<org.jgrapht.alg.ConnectivityInspectorTest.java:225, 16.00%>
	<org.jgrapht.alg.ConnectivityInspectorTest: void testStronglyConnected2()>:
		<org.jgrapht.alg.ConnectivityInspectorTest.java:268, 16.00%>
		<org.jgrapht.alg.ConnectivityInspectorTest.java:279, 12.00%>
		<org.jgrapht.alg.ConnectivityInspectorTest.java:282, 16.00%>
	<org.jgrapht.alg.ConnectivityInspectorTest: void testStronglyConnected3()>:
		<org.jgrapht.alg.ConnectivityInspectorTest.java:325, 17.39%>
		<org.jgrapht.alg.ConnectivityInspectorTest.java:337, 13.04%>
		<org.jgrapht.alg.ConnectivityInspectorTest.java:340, 17.39%>
	<org.jgrapht.alg.EdmondsBlossomShrinkingTest: void testOne()>:
		<org.jgrapht.alg.EdmondsBlossomShrinkingTest.java:80, 23.81%>
		<org.jgrapht.alg.EdmondsBlossomShrinkingTest.java:81, 19.05%>
		<org.jgrapht.alg.EdmondsBlossomShrinkingTest.java:82, 19.05%>
	<org.jgrapht.alg.KSPExampleTest: void testFourReturnedPathsJGraphT()>:
		<org.jgrapht.alg.KSPExampleTest.java:60, 55.56%>
	<org.jgrapht.alg.KSPExampleTest: void testThreeReturnedPathsJGraphT()>:
		<org.jgrapht.alg.KSPExampleTest.java:72, 60.00%>
	<org.jgrapht.alg.KSPExampleTest: void testTwoReturnedPathsJGraphT()>:
		<org.jgrapht.alg.KSPExampleTest.java:84, 60.00%>
	<org.jgrapht.alg.KShortestPathCostTest: void verifyWeightsConsistency(java.util.List,java.util.List)>:
		<org.jgrapht.alg.KShortestPathCostTest.java:294, 53.85%>
	<org.jgrapht.alg.KruskalMinimumSpanningTreeTest: void testMinimumSpanningTree()>:
		<org.jgrapht.alg.KruskalMinimumSpanningTreeTest.java:80, 19.05%>
		<org.jgrapht.alg.KruskalMinimumSpanningTreeTest.java:84, 38.10%>
	<org.jgrapht.alg.VertexCoversTest: void testFind2ApproximationCover()>:
		<org.jgrapht.alg.VertexCoversTest.java:74, 60.00%>
	<org.jgrapht.alg.VertexCoversTest: void testFindGreedyCover()>:
		<org.jgrapht.alg.VertexCoversTest.java:89, 50.00%>
	<org.jgrapht.experimental.dag.DirectedAcyclicGraphTest: void testCycleDetectionInRandomGraphBuild()>:
		<org.jgrapht.experimental.dag.DirectedAcyclicGraphTest.java:131, 14.29%>
		<org.jgrapht.experimental.dag.DirectedAcyclicGraphTest.java:141, 12.24%>
		<org.jgrapht.experimental.dag.DirectedAcyclicGraphTest.java:152, 6.12%>
	<org.jgrapht.experimental.equivalence.EquivalenceGroupCreatorTest: void testOneComparator(org.jgrapht.experimental.equivalence.EquivalenceComparator,int)>:
		<org.jgrapht.experimental.equivalence.EquivalenceGroupCreatorTest.java:152, 23.53%>
		<org.jgrapht.experimental.equivalence.EquivalenceGroupCreatorTest.java:157, 41.18%>
	<org.jgrapht.experimental.permutation.CompoundPermutationIterTest: void testGetNext()>:
		<org.jgrapht.experimental.permutation.CompoundPermutationIterTest.java:96, 40.00%>
		<org.jgrapht.experimental.permutation.CompoundPermutationIterTest.java:127, 40.00%>
	<org.jgrapht.generate.GraphGeneratorTest: void testCompleteBipartiteGraphGenerator()>:
		<org.jgrapht.generate.GraphGeneratorTest.java:243, 50.00%>
		<org.jgrapht.generate.GraphGeneratorTest.java:244, 50.00%>
	<org.jgrapht.generate.GraphGeneratorTest: void testCompleteGraphGenerator()>:
		<org.jgrapht.generate.GraphGeneratorTest.java:185, 62.50%>
	<org.jgrapht.generate.GraphGeneratorTest: void testHyperCubeGraphGenerator()>:
		<org.jgrapht.generate.GraphGeneratorTest.java:265, 50.00%>
		<org.jgrapht.generate.GraphGeneratorTest.java:266, 50.00%>
	<org.jgrapht.generate.RandomGraphGeneratorTest: void testGenerateDirectedGraph()>:
		<org.jgrapht.generate.RandomGraphGeneratorTest.java:70, 20.00%>
	<org.jgrapht.generate.RandomGraphGeneratorTest: void testGenerateListenableUndirectedGraph()>:
		<org.jgrapht.generate.RandomGraphGeneratorTest.java:89, 20.00%>
	<org.jgrapht.graph.DefaultDirectedGraphTest: void testEdgesOf()>:
		<org.jgrapht.graph.DefaultDirectedGraphTest.java:117, 75.00%>
		<org.jgrapht.graph.DefaultDirectedGraphTest.java:118, 75.00%>
	<org.jgrapht.graph.DefaultDirectedGraphTest: void testGetAllEdges()>:
		<org.jgrapht.graph.DefaultDirectedGraphTest.java:130, 100.00%>
	<org.jgrapht.graph.DefaultDirectedGraphTest: void testInDegreeOf()>:
		<org.jgrapht.graph.DefaultDirectedGraphTest.java:141, 83.33%>
		<org.jgrapht.graph.DefaultDirectedGraphTest.java:142, 83.33%>
	<org.jgrapht.graph.DefaultDirectedGraphTest: void testOutDegreeOf()>:
		<org.jgrapht.graph.DefaultDirectedGraphTest.java:153, 83.33%>
		<org.jgrapht.graph.DefaultDirectedGraphTest.java:154, 83.33%>
	<org.jgrapht.graph.EqualsAndHashCodeTest: void testAsWeightedGraphs()>:
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:329, 5.17%>
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:330, 10.34%>
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:332, 5.17%>
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:333, 10.34%>
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:335, 8.62%>
	<org.jgrapht.graph.EqualsAndHashCodeTest: void testPseudograph()>:
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:230, 5.08%>
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:231, 8.47%>
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:233, 10.17%>
	<org.jgrapht.graph.GenericGraphsTest: void testEqualButNotSameVertex()>:
		<org.jgrapht.graph.GenericGraphsTest.java:145, 40.00%>
		<org.jgrapht.graph.GenericGraphsTest.java:146, 40.00%>
	<org.jgrapht.graph.SimpleDirectedGraphTest: void testEdgesOf()>:
		<org.jgrapht.graph.SimpleDirectedGraphTest.java:232, 46.67%>
		<org.jgrapht.graph.SimpleDirectedGraphTest.java:233, 60.00%>
		<org.jgrapht.graph.SimpleDirectedGraphTest.java:243, 20.00%>
	<org.jgrapht.util.FibonacciHeapTest: void testGrowReplaceShrink()>:
		<org.jgrapht.util.FibonacciHeapTest.java:88, 17.65%>
		<org.jgrapht.util.FibonacciHeapTest.java:91, 17.65%>

Relevant Assertion clone sets (5):
Set (score: 1.00, ccsize: 2, packages: 1, classes: 1): 
	<org.jgrapht.alg.ConnectivityInspectorTest: void testStronglyConnected1()>:
		<org.jgrapht.alg.ConnectivityInspectorTest.java:222, 12.00%>
	<org.jgrapht.alg.ConnectivityInspectorTest: void testStronglyConnected2()>:
		<org.jgrapht.alg.ConnectivityInspectorTest.java:279, 12.00%>
	<org.jgrapht.alg.ConnectivityInspectorTest: void testStronglyConnected3()>:
		<org.jgrapht.alg.ConnectivityInspectorTest.java:337, 13.04%>
Set (score: 1.00, ccsize: 2, packages: 1, classes: 1): 
	<org.jgrapht.alg.VertexCoversTest: void testFind2ApproximationCover()>:
		<org.jgrapht.alg.VertexCoversTest.java:74, 60.00%>
	<org.jgrapht.alg.VertexCoversTest: void testFindGreedyCover()>:
		<org.jgrapht.alg.VertexCoversTest.java:89, 50.00%>
Set (score: 0.67, ccsize: 3, packages: 1, classes: 2): 
	<org.jgrapht.alg.BiconnectivityInspectorTest: void testLinearGraph(int)>:
		<org.jgrapht.alg.BiconnectivityInspectorTest.java:88, 40.00%>
	<org.jgrapht.alg.BlockCutpointGraphTest: void testLinearGraph(int)>:
		<org.jgrapht.alg.BlockCutpointGraphTest.java:121, 33.33%>
		<org.jgrapht.alg.BlockCutpointGraphTest.java:125, 33.33%>
Set (score: 0.67, ccsize: 3, packages: 1, classes: 2): 
	<org.jgrapht.alg.BiconnectivityInspectorTest: void testNotBiconnected()>:
		<org.jgrapht.alg.BiconnectivityInspectorTest.java:100, 55.56%>
	<org.jgrapht.alg.BlockCutpointGraphTest: void testNotBiconnected()>:
		<org.jgrapht.alg.BlockCutpointGraphTest.java:135, 41.67%>
		<org.jgrapht.alg.BlockCutpointGraphTest.java:139, 41.67%>
Set (score: 0.50, ccsize: 3, packages: 1, classes: 1): 
	<org.jgrapht.alg.KSPExampleTest: void testFourReturnedPathsJGraphT()>:
		<org.jgrapht.alg.KSPExampleTest.java:60, 55.56%>
	<org.jgrapht.alg.KSPExampleTest: void testThreeReturnedPathsJGraphT()>:
		<org.jgrapht.alg.KSPExampleTest.java:72, 60.00%>
	<org.jgrapht.alg.KSPExampleTest: void testTwoReturnedPathsJGraphT()>:
		<org.jgrapht.alg.KSPExampleTest.java:84, 60.00%>
==============================================

[110] Set (editDistance: 2, isComplete: false, packages: 8, classes: 20): 
Centroid (size: 3): <org.jgrapht.graph.EqualsAndHashCodeTest: void testSimpleGraph()>

Methods (37): 
	<org.jgrapht.EnhancedTestCase: void assertFalse()>:
		<org.jgrapht.EnhancedTestCase.java:79, 100.00%>
	<org.jgrapht.EnhancedTestCase: void assertTrue()>:
		<org.jgrapht.EnhancedTestCase.java:87, 100.00%>
	<org.jgrapht.alg.BiconnectivityInspectorTest: void testLinearGraph(int)>:
		<org.jgrapht.alg.BiconnectivityInspectorTest.java:88, 40.00%>
		<org.jgrapht.alg.BiconnectivityInspectorTest.java:89, 40.00%>
	<org.jgrapht.alg.BiconnectivityInspectorTest: void testNotBiconnected()>:
		<org.jgrapht.alg.BiconnectivityInspectorTest.java:100, 55.56%>
		<org.jgrapht.alg.BiconnectivityInspectorTest.java:101, 55.56%>
	<org.jgrapht.alg.BlockCutpointGraphTest: void testBiconnected()>:
		<org.jgrapht.alg.BlockCutpointGraphTest.java:67, 41.67%>
		<org.jgrapht.alg.BlockCutpointGraphTest.java:71, 41.67%>
	<org.jgrapht.alg.BlockCutpointGraphTest: void testGetBlock(org.jgrapht.alg.BlockCutpointGraph)>:
		<org.jgrapht.alg.BlockCutpointGraphTest.java:88, 33.33%>
		<org.jgrapht.alg.BlockCutpointGraphTest.java:94, 19.05%>
	<org.jgrapht.alg.BlockCutpointGraphTest: void testLinearGraph(int)>:
		<org.jgrapht.alg.BlockCutpointGraphTest.java:121, 33.33%>
		<org.jgrapht.alg.BlockCutpointGraphTest.java:125, 33.33%>
	<org.jgrapht.alg.BlockCutpointGraphTest: void testNotBiconnected()>:
		<org.jgrapht.alg.BlockCutpointGraphTest.java:135, 41.67%>
		<org.jgrapht.alg.BlockCutpointGraphTest.java:139, 41.67%>
	<org.jgrapht.alg.ChromaticNumberTest: void testChromaticNumber()>:
		<org.jgrapht.alg.ChromaticNumberTest.java:78, 18.75%>
		<org.jgrapht.alg.ChromaticNumberTest.java:83, 31.25%>
		<org.jgrapht.alg.ChromaticNumberTest.java:100, 18.75%>
	<org.jgrapht.alg.ConnectivityInspectorTest: void testStronglyConnected1()>:
		<org.jgrapht.alg.ConnectivityInspectorTest.java:211, 16.00%>
		<org.jgrapht.alg.ConnectivityInspectorTest.java:222, 12.00%>
		<org.jgrapht.alg.ConnectivityInspectorTest.java:225, 16.00%>
	<org.jgrapht.alg.ConnectivityInspectorTest: void testStronglyConnected2()>:
		<org.jgrapht.alg.ConnectivityInspectorTest.java:268, 16.00%>
		<org.jgrapht.alg.ConnectivityInspectorTest.java:279, 12.00%>
		<org.jgrapht.alg.ConnectivityInspectorTest.java:282, 16.00%>
	<org.jgrapht.alg.ConnectivityInspectorTest: void testStronglyConnected3()>:
		<org.jgrapht.alg.ConnectivityInspectorTest.java:325, 17.39%>
		<org.jgrapht.alg.ConnectivityInspectorTest.java:337, 13.04%>
		<org.jgrapht.alg.ConnectivityInspectorTest.java:340, 17.39%>
	<org.jgrapht.alg.EdmondsBlossomShrinkingTest: void testOne()>:
		<org.jgrapht.alg.EdmondsBlossomShrinkingTest.java:80, 23.81%>
		<org.jgrapht.alg.EdmondsBlossomShrinkingTest.java:81, 19.05%>
		<org.jgrapht.alg.EdmondsBlossomShrinkingTest.java:82, 19.05%>
	<org.jgrapht.alg.KSPExampleTest: void testFourReturnedPathsJGraphT()>:
		<org.jgrapht.alg.KSPExampleTest.java:60, 55.56%>
	<org.jgrapht.alg.KSPExampleTest: void testThreeReturnedPathsJGraphT()>:
		<org.jgrapht.alg.KSPExampleTest.java:72, 60.00%>
	<org.jgrapht.alg.KSPExampleTest: void testTwoReturnedPathsJGraphT()>:
		<org.jgrapht.alg.KSPExampleTest.java:84, 60.00%>
	<org.jgrapht.alg.KShortestPathCostTest: void verifyWeightsConsistency(java.util.List,java.util.List)>:
		<org.jgrapht.alg.KShortestPathCostTest.java:294, 53.85%>
	<org.jgrapht.alg.KruskalMinimumSpanningTreeTest: void testMinimumSpanningTree()>:
		<org.jgrapht.alg.KruskalMinimumSpanningTreeTest.java:80, 19.05%>
		<org.jgrapht.alg.KruskalMinimumSpanningTreeTest.java:84, 38.10%>
	<org.jgrapht.alg.VertexCoversTest: void testFind2ApproximationCover()>:
		<org.jgrapht.alg.VertexCoversTest.java:74, 60.00%>
	<org.jgrapht.alg.VertexCoversTest: void testFindGreedyCover()>:
		<org.jgrapht.alg.VertexCoversTest.java:89, 50.00%>
	<org.jgrapht.experimental.dag.DirectedAcyclicGraphTest: void testCycleDetectionInRandomGraphBuild()>:
		<org.jgrapht.experimental.dag.DirectedAcyclicGraphTest.java:131, 14.29%>
		<org.jgrapht.experimental.dag.DirectedAcyclicGraphTest.java:141, 12.24%>
		<org.jgrapht.experimental.dag.DirectedAcyclicGraphTest.java:152, 6.12%>
	<org.jgrapht.experimental.equivalence.EquivalenceGroupCreatorTest: void testOneComparator(org.jgrapht.experimental.equivalence.EquivalenceComparator,int)>:
		<org.jgrapht.experimental.equivalence.EquivalenceGroupCreatorTest.java:152, 23.53%>
		<org.jgrapht.experimental.equivalence.EquivalenceGroupCreatorTest.java:157, 41.18%>
	<org.jgrapht.experimental.permutation.CompoundPermutationIterTest: void testGetNext()>:
		<org.jgrapht.experimental.permutation.CompoundPermutationIterTest.java:96, 40.00%>
		<org.jgrapht.experimental.permutation.CompoundPermutationIterTest.java:127, 40.00%>
	<org.jgrapht.generate.GraphGeneratorTest: void testCompleteBipartiteGraphGenerator()>:
		<org.jgrapht.generate.GraphGeneratorTest.java:243, 50.00%>
		<org.jgrapht.generate.GraphGeneratorTest.java:244, 50.00%>
	<org.jgrapht.generate.GraphGeneratorTest: void testCompleteGraphGenerator()>:
		<org.jgrapht.generate.GraphGeneratorTest.java:185, 62.50%>
	<org.jgrapht.generate.GraphGeneratorTest: void testHyperCubeGraphGenerator()>:
		<org.jgrapht.generate.GraphGeneratorTest.java:265, 50.00%>
		<org.jgrapht.generate.GraphGeneratorTest.java:266, 50.00%>
	<org.jgrapht.generate.RandomGraphGeneratorTest: void testGenerateDirectedGraph()>:
		<org.jgrapht.generate.RandomGraphGeneratorTest.java:70, 20.00%>
	<org.jgrapht.generate.RandomGraphGeneratorTest: void testGenerateListenableUndirectedGraph()>:
		<org.jgrapht.generate.RandomGraphGeneratorTest.java:89, 20.00%>
	<org.jgrapht.graph.DefaultDirectedGraphTest: void testEdgesOf()>:
		<org.jgrapht.graph.DefaultDirectedGraphTest.java:117, 75.00%>
		<org.jgrapht.graph.DefaultDirectedGraphTest.java:118, 75.00%>
	<org.jgrapht.graph.DefaultDirectedGraphTest: void testGetAllEdges()>:
		<org.jgrapht.graph.DefaultDirectedGraphTest.java:130, 100.00%>
	<org.jgrapht.graph.DefaultDirectedGraphTest: void testInDegreeOf()>:
		<org.jgrapht.graph.DefaultDirectedGraphTest.java:141, 83.33%>
		<org.jgrapht.graph.DefaultDirectedGraphTest.java:142, 83.33%>
	<org.jgrapht.graph.DefaultDirectedGraphTest: void testOutDegreeOf()>:
		<org.jgrapht.graph.DefaultDirectedGraphTest.java:153, 83.33%>
		<org.jgrapht.graph.DefaultDirectedGraphTest.java:154, 83.33%>
	<org.jgrapht.graph.EqualsAndHashCodeTest: void testAsWeightedGraphs()>:
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:329, 5.17%>
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:330, 10.34%>
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:332, 5.17%>
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:333, 10.34%>
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:335, 8.62%>
	<org.jgrapht.graph.EqualsAndHashCodeTest: void testSimpleGraph()>:
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:148, 6.52%>
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:149, 10.87%>
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:151, 13.04%>
	<org.jgrapht.graph.GenericGraphsTest: void testEqualButNotSameVertex()>:
		<org.jgrapht.graph.GenericGraphsTest.java:145, 40.00%>
		<org.jgrapht.graph.GenericGraphsTest.java:146, 40.00%>
	<org.jgrapht.graph.SimpleDirectedGraphTest: void testEdgesOf()>:
		<org.jgrapht.graph.SimpleDirectedGraphTest.java:232, 46.67%>
		<org.jgrapht.graph.SimpleDirectedGraphTest.java:233, 60.00%>
		<org.jgrapht.graph.SimpleDirectedGraphTest.java:243, 20.00%>
	<org.jgrapht.util.FibonacciHeapTest: void testGrowReplaceShrink()>:
		<org.jgrapht.util.FibonacciHeapTest.java:88, 17.65%>
		<org.jgrapht.util.FibonacciHeapTest.java:91, 17.65%>

Relevant Assertion clone sets (5):
Set (score: 1.00, ccsize: 2, packages: 1, classes: 1): 
	<org.jgrapht.alg.ConnectivityInspectorTest: void testStronglyConnected1()>:
		<org.jgrapht.alg.ConnectivityInspectorTest.java:222, 12.00%>
	<org.jgrapht.alg.ConnectivityInspectorTest: void testStronglyConnected2()>:
		<org.jgrapht.alg.ConnectivityInspectorTest.java:279, 12.00%>
	<org.jgrapht.alg.ConnectivityInspectorTest: void testStronglyConnected3()>:
		<org.jgrapht.alg.ConnectivityInspectorTest.java:337, 13.04%>
Set (score: 1.00, ccsize: 2, packages: 1, classes: 1): 
	<org.jgrapht.alg.VertexCoversTest: void testFind2ApproximationCover()>:
		<org.jgrapht.alg.VertexCoversTest.java:74, 60.00%>
	<org.jgrapht.alg.VertexCoversTest: void testFindGreedyCover()>:
		<org.jgrapht.alg.VertexCoversTest.java:89, 50.00%>
Set (score: 0.67, ccsize: 3, packages: 1, classes: 2): 
	<org.jgrapht.alg.BiconnectivityInspectorTest: void testLinearGraph(int)>:
		<org.jgrapht.alg.BiconnectivityInspectorTest.java:88, 40.00%>
	<org.jgrapht.alg.BlockCutpointGraphTest: void testLinearGraph(int)>:
		<org.jgrapht.alg.BlockCutpointGraphTest.java:121, 33.33%>
		<org.jgrapht.alg.BlockCutpointGraphTest.java:125, 33.33%>
Set (score: 0.67, ccsize: 3, packages: 1, classes: 2): 
	<org.jgrapht.alg.BiconnectivityInspectorTest: void testNotBiconnected()>:
		<org.jgrapht.alg.BiconnectivityInspectorTest.java:100, 55.56%>
	<org.jgrapht.alg.BlockCutpointGraphTest: void testNotBiconnected()>:
		<org.jgrapht.alg.BlockCutpointGraphTest.java:135, 41.67%>
		<org.jgrapht.alg.BlockCutpointGraphTest.java:139, 41.67%>
Set (score: 0.50, ccsize: 3, packages: 1, classes: 1): 
	<org.jgrapht.alg.KSPExampleTest: void testFourReturnedPathsJGraphT()>:
		<org.jgrapht.alg.KSPExampleTest.java:60, 55.56%>
	<org.jgrapht.alg.KSPExampleTest: void testThreeReturnedPathsJGraphT()>:
		<org.jgrapht.alg.KSPExampleTest.java:72, 60.00%>
	<org.jgrapht.alg.KSPExampleTest: void testTwoReturnedPathsJGraphT()>:
		<org.jgrapht.alg.KSPExampleTest.java:84, 60.00%>
==============================================

[111] Set (editDistance: 2, isComplete: false, packages: 4, classes: 10): 
Centroid (size: 3): <org.jgrapht.graph.SimpleDirectedGraphTest: void testEdgesOf()>

Methods (18): 
	<org.jgrapht.alg.BronKerboschCliqueFinderTest: void testFindAll()>:
		<org.jgrapht.alg.BronKerboschCliqueFinderTest.java:143, 26.32%>
		<org.jgrapht.alg.BronKerboschCliqueFinderTest.java:175, 21.05%>
	<org.jgrapht.alg.BronKerboschCliqueFinderTest: void testFindBiggest()>:
		<org.jgrapht.alg.BronKerboschCliqueFinderTest.java:119, 41.67%>
		<org.jgrapht.alg.BronKerboschCliqueFinderTest.java:129, 58.33%>
	<org.jgrapht.alg.EdmondsBlossomShrinkingTest: void testOne()>:
		<org.jgrapht.alg.EdmondsBlossomShrinkingTest.java:80, 23.81%>
		<org.jgrapht.alg.EdmondsBlossomShrinkingTest.java:81, 19.05%>
		<org.jgrapht.alg.EdmondsBlossomShrinkingTest.java:82, 19.05%>
	<org.jgrapht.alg.KSPExampleTest: void testFourReturnedPathsJGraphT()>:
		<org.jgrapht.alg.KSPExampleTest.java:60, 55.56%>
	<org.jgrapht.alg.KSPExampleTest: void testThreeReturnedPathsJGraphT()>:
		<org.jgrapht.alg.KSPExampleTest.java:72, 60.00%>
	<org.jgrapht.alg.KSPExampleTest: void testTwoReturnedPathsJGraphT()>:
		<org.jgrapht.alg.KSPExampleTest.java:84, 60.00%>
	<org.jgrapht.alg.KShortestPathKValuesTest: void testMaxSizeValueCompleteGraph6()>:
		<org.jgrapht.alg.KShortestPathKValuesTest.java:86, 31.58%>
		<org.jgrapht.alg.KShortestPathKValuesTest.java:87, 31.58%>
		<org.jgrapht.alg.KShortestPathKValuesTest.java:88, 31.58%>
		<org.jgrapht.alg.KShortestPathKValuesTest.java:89, 31.58%>
		<org.jgrapht.alg.KShortestPathKValuesTest.java:90, 31.58%>
	<org.jgrapht.experimental.equivalence.EquivalenceGroupCreatorTest: void testOneComparator(org.jgrapht.experimental.equivalence.EquivalenceComparator,int)>:
		<org.jgrapht.experimental.equivalence.EquivalenceGroupCreatorTest.java:152, 23.53%>
		<org.jgrapht.experimental.equivalence.EquivalenceGroupCreatorTest.java:157, 41.18%>
	<org.jgrapht.generate.GraphGeneratorTest: void testCompleteGraphGenerator()>:
		<org.jgrapht.generate.GraphGeneratorTest.java:185, 62.50%>
	<org.jgrapht.graph.AsUndirectedGraphTest: void testGetAllEdges()>:
		<org.jgrapht.graph.AsUndirectedGraphTest.java:123, 40.00%>
		<org.jgrapht.graph.AsUndirectedGraphTest.java:124, 65.00%>
		<org.jgrapht.graph.AsUndirectedGraphTest.java:128, 70.00%>
		<org.jgrapht.graph.AsUndirectedGraphTest.java:129, 80.00%>
	<org.jgrapht.graph.DefaultDirectedGraphTest: void testGetAllEdges()>:
		<org.jgrapht.graph.DefaultDirectedGraphTest.java:130, 100.00%>
	<org.jgrapht.graph.EqualsAndHashCodeTest: void testDefaultDirectedGraph()>:
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:105, 6.52%>
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:106, 10.87%>
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:108, 13.04%>
	<org.jgrapht.graph.EqualsAndHashCodeTest: void testGraphsWithNonIntrusiveEdge()>:
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:187, 3.90%>
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:188, 6.49%>
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:190, 7.79%>
	<org.jgrapht.graph.EqualsAndHashCodeTest: void testGrapshWithCustomEdges()>:
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:268, 7.69%>
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:269, 12.82%>
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:271, 15.38%>
	<org.jgrapht.graph.EqualsAndHashCodeTest: void testPseudograph()>:
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:230, 5.08%>
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:231, 8.47%>
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:233, 10.17%>
	<org.jgrapht.graph.EqualsAndHashCodeTest: void testSimpleGraph()>:
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:148, 6.52%>
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:149, 10.87%>
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:151, 13.04%>
	<org.jgrapht.graph.SimpleDirectedGraphTest: void testEdgesOf()>:
		<org.jgrapht.graph.SimpleDirectedGraphTest.java:232, 46.67%>
		<org.jgrapht.graph.SimpleDirectedGraphTest.java:233, 60.00%>
		<org.jgrapht.graph.SimpleDirectedGraphTest.java:243, 20.00%>
	<org.jgrapht.graph.SimpleDirectedGraphTest: void testRemoveEdgeEdge()>:
		<org.jgrapht.graph.SimpleDirectedGraphTest.java:341, 26.09%>
		<org.jgrapht.graph.SimpleDirectedGraphTest.java:343, 43.48%>
		<org.jgrapht.graph.SimpleDirectedGraphTest.java:344, 43.48%>
		<org.jgrapht.graph.SimpleDirectedGraphTest.java:345, 60.87%>
		<org.jgrapht.graph.SimpleDirectedGraphTest.java:346, 73.91%>

Relevant Assertion clone sets (3):
Set (score: 0.50, ccsize: 4, packages: 1, classes: 1): 
	<org.jgrapht.graph.EqualsAndHashCodeTest: void testDefaultDirectedGraph()>:
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:106, 10.87%>
	<org.jgrapht.graph.EqualsAndHashCodeTest: void testGraphsWithNonIntrusiveEdge()>:
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:188, 6.49%>
Set (score: 0.50, ccsize: 4, packages: 1, classes: 1): 
	<org.jgrapht.graph.EqualsAndHashCodeTest: void testGrapshWithCustomEdges()>:
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:269, 12.82%>
	<org.jgrapht.graph.EqualsAndHashCodeTest: void testSimpleGraph()>:
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:149, 10.87%>
Set (score: 0.50, ccsize: 3, packages: 1, classes: 1): 
	<org.jgrapht.alg.KSPExampleTest: void testFourReturnedPathsJGraphT()>:
		<org.jgrapht.alg.KSPExampleTest.java:60, 55.56%>
	<org.jgrapht.alg.KSPExampleTest: void testThreeReturnedPathsJGraphT()>:
		<org.jgrapht.alg.KSPExampleTest.java:72, 60.00%>
	<org.jgrapht.alg.KSPExampleTest: void testTwoReturnedPathsJGraphT()>:
		<org.jgrapht.alg.KSPExampleTest.java:84, 60.00%>
==============================================

[112] Set (editDistance: 2, isComplete: false, packages: 13, classes: 36): 
Centroid (size: 2): <org.jgrapht.alg.BellmanFordShortestPathTest: void testWithNegativeEdges()>

Methods (68): 
	<org.jgrapht.EnhancedTestCase: void assertFalse()>:
		<org.jgrapht.EnhancedTestCase.java:79, 100.00%>
	<org.jgrapht.EnhancedTestCase: void assertTrue()>:
		<org.jgrapht.EnhancedTestCase.java:87, 100.00%>
	<org.jgrapht.alg.BellmanFordShortestPathTest: void testWithNegativeEdges()>:
		<org.jgrapht.alg.BellmanFordShortestPathTest.java:120, 45.45%>
		<org.jgrapht.alg.BellmanFordShortestPathTest.java:127, 63.64%>
	<org.jgrapht.alg.BiconnectivityInspectorTest: void testLinearGraph(int)>:
		<org.jgrapht.alg.BiconnectivityInspectorTest.java:88, 40.00%>
		<org.jgrapht.alg.BiconnectivityInspectorTest.java:89, 40.00%>
	<org.jgrapht.alg.BiconnectivityInspectorTest: void testNotBiconnected()>:
		<org.jgrapht.alg.BiconnectivityInspectorTest.java:100, 55.56%>
		<org.jgrapht.alg.BiconnectivityInspectorTest.java:101, 55.56%>
	<org.jgrapht.alg.BlockCutpointGraphTest: void testBiconnected()>:
		<org.jgrapht.alg.BlockCutpointGraphTest.java:67, 41.67%>
		<org.jgrapht.alg.BlockCutpointGraphTest.java:71, 41.67%>
	<org.jgrapht.alg.BlockCutpointGraphTest: void testLinearGraph(int)>:
		<org.jgrapht.alg.BlockCutpointGraphTest.java:121, 33.33%>
		<org.jgrapht.alg.BlockCutpointGraphTest.java:125, 33.33%>
	<org.jgrapht.alg.BlockCutpointGraphTest: void testNotBiconnected()>:
		<org.jgrapht.alg.BlockCutpointGraphTest.java:135, 41.67%>
		<org.jgrapht.alg.BlockCutpointGraphTest.java:139, 41.67%>
	<org.jgrapht.alg.ConnectivityInspectorTest: void testDirectedGraph()>:
		<org.jgrapht.alg.ConnectivityInspectorTest.java:139, 57.14%>
		<org.jgrapht.alg.ConnectivityInspectorTest.java:143, 57.14%>
	<org.jgrapht.alg.FloydWarshallShortestPathsTest: void testCompareWithDijkstra()>:
		<org.jgrapht.alg.FloydWarshallShortestPathsTest.java:96, 7.41%>
		<org.jgrapht.alg.FloydWarshallShortestPathsTest.java:121, 7.41%>
	<org.jgrapht.alg.HamiltonianCycleTest: void testHamiltonianCycle()>:
		<org.jgrapht.alg.HamiltonianCycleTest.java:79, 33.33%>
		<org.jgrapht.alg.HamiltonianCycleTest.java:89, 27.78%>
	<org.jgrapht.alg.KSPDiscardsValidPathsTest: void testNot3connectedGraph()>:
		<org.jgrapht.alg.KSPDiscardsValidPathsTest.java:102, 87.50%>
	<org.jgrapht.alg.KSPExampleTest: void testFourReturnedPathsJGraphT()>:
		<org.jgrapht.alg.KSPExampleTest.java:60, 55.56%>
	<org.jgrapht.alg.KSPExampleTest: void testThreeReturnedPathsJGraphT()>:
		<org.jgrapht.alg.KSPExampleTest.java:72, 60.00%>
	<org.jgrapht.alg.KSPExampleTest: void testTwoReturnedPathsJGraphT()>:
		<org.jgrapht.alg.KSPExampleTest.java:84, 60.00%>
	<org.jgrapht.alg.KShortestPathCostTest: void verifyShortestPathsInIncreasingOrderOfWeight(org.jgrapht.Graph)>:
		<org.jgrapht.alg.KShortestPathCostTest.java:222, 30.77%>
		<org.jgrapht.alg.KShortestPathCostTest.java:225, 30.77%>
	<org.jgrapht.alg.KShortestPathCostTest: void verifyWeightsConsistency(java.util.List,java.util.List)>:
		<org.jgrapht.alg.KShortestPathCostTest.java:294, 53.85%>
	<org.jgrapht.alg.KShortestPathKValuesTest: void verifyNbPathsForAllPairsOfVertices(org.jgrapht.Graph)>:
		<org.jgrapht.alg.KShortestPathKValuesTest.java:148, 36.84%>
	<org.jgrapht.alg.ShortestPathTestCase: void testPathBetween()>:
		<org.jgrapht.alg.ShortestPathTestCase.java:86, 21.74%>
		<org.jgrapht.alg.ShortestPathTestCase.java:89, 26.09%>
		<org.jgrapht.alg.ShortestPathTestCase.java:96, 34.78%>
		<org.jgrapht.alg.ShortestPathTestCase.java:104, 47.83%>
	<org.jgrapht.alg.StoerWagnerMinimumCutTest: void testMinCut14()>:
		<org.jgrapht.alg.StoerWagnerMinimumCutTest.java:97, 16.67%>
	<org.jgrapht.alg.StoerWagnerMinimumCutTest: void testMinCutDisconnected()>:
		<org.jgrapht.alg.StoerWagnerMinimumCutTest.java:124, 22.73%>
	<org.jgrapht.alg.TransitiveClosureTest: void testLinearGraph()>:
		<org.jgrapht.alg.TransitiveClosureTest.java:75, 47.83%>
		<org.jgrapht.alg.TransitiveClosureTest.java:78, 43.48%>
	<org.jgrapht.alg.TransitiveClosureTest: void testRingGraph()>:
		<org.jgrapht.alg.TransitiveClosureTest.java:107, 45.45%>
		<org.jgrapht.alg.TransitiveClosureTest.java:110, 50.00%>
	<org.jgrapht.alg.VertexCoversTest: void testFind2ApproximationCover()>:
		<org.jgrapht.alg.VertexCoversTest.java:74, 60.00%>
	<org.jgrapht.alg.VertexCoversTest: void testFindGreedyCover()>:
		<org.jgrapht.alg.VertexCoversTest.java:89, 50.00%>
	<org.jgrapht.alg.util.UnionFindTest: void testIdentical(java.lang.String[],java.util.ArrayList,org.jgrapht.alg.util.UnionFind)>:
		<org.jgrapht.alg.util.UnionFindTest.java:131, 41.18%>
	<org.jgrapht.experimental.GraphReaderTest: void testGraphReader()>:
		<org.jgrapht.experimental.GraphReaderTest.java:88, 27.27%>
	<org.jgrapht.experimental.GraphReaderTest: void testGraphReaderWeighted()>:
		<org.jgrapht.experimental.GraphReaderTest.java:116, 23.08%>
	<org.jgrapht.experimental.dag.DirectedAcyclicGraphTest: void testCycleDetectionInRandomGraphBuild()>:
		<org.jgrapht.experimental.dag.DirectedAcyclicGraphTest.java:131, 14.29%>
		<org.jgrapht.experimental.dag.DirectedAcyclicGraphTest.java:141, 12.24%>
		<org.jgrapht.experimental.dag.DirectedAcyclicGraphTest.java:152, 6.12%>
	<org.jgrapht.experimental.dag.DirectedAcyclicGraphTest: void testTopoIterationOrderLinearGraph()>:
		<org.jgrapht.experimental.dag.DirectedAcyclicGraphTest.java:181, 29.41%>
		<org.jgrapht.experimental.dag.DirectedAcyclicGraphTest.java:182, 41.18%>
	<org.jgrapht.experimental.equivalence.EquivalenceGroupCreatorTest: void testOneComparator(org.jgrapht.experimental.equivalence.EquivalenceComparator,int)>:
		<org.jgrapht.experimental.equivalence.EquivalenceGroupCreatorTest.java:152, 23.53%>
		<org.jgrapht.experimental.equivalence.EquivalenceGroupCreatorTest.java:157, 41.18%>
	<org.jgrapht.experimental.isomorphism.IsomorphismInspectorTest: void assertIsomorphic(org.jgrapht.Graph[],boolean,org.jgrapht.experimental.equivalence.EquivalenceComparator,org.jgrapht.experimental.equivalence.EquivalenceComparator)>:
		<org.jgrapht.experimental.isomorphism.IsomorphismInspectorTest.java:138, 28.57%>
		<org.jgrapht.experimental.isomorphism.IsomorphismInspectorTest.java:140, 28.57%>
	<org.jgrapht.experimental.isomorphism.IsomorphismInspectorTest: void assertIsomorphicStopAfterFirstMatch(org.jgrapht.Graph[],boolean,boolean,org.jgrapht.experimental.equivalence.EquivalenceComparator,org.jgrapht.experimental.equivalence.EquivalenceComparator)>:
		<org.jgrapht.experimental.isomorphism.IsomorphismInspectorTest.java:485, 14.71%>
	<org.jgrapht.experimental.permutation.CompoundPermutationIterTest: void testGetNext()>:
		<org.jgrapht.experimental.permutation.CompoundPermutationIterTest.java:96, 40.00%>
		<org.jgrapht.experimental.permutation.CompoundPermutationIterTest.java:127, 40.00%>
	<org.jgrapht.ext.DOTExporterTest: void testUndirected()>:
		<org.jgrapht.ext.DOTExporterTest.java:110, 41.67%>
	<org.jgrapht.ext.DOTExporterTest: void testValidNodeIDs()>:
		<org.jgrapht.ext.DOTExporterTest.java:149, 16.00%>
	<org.jgrapht.ext.GmlExporterTest: void testUndirected()>:
		<org.jgrapht.ext.GmlExporterTest.java:117, 62.50%>
	<org.jgrapht.ext.MatrixExporterTest: void testAdjacencyDirected()>:
		<org.jgrapht.ext.MatrixExporterTest.java:149, 62.50%>
	<org.jgrapht.ext.MatrixExporterTest: void testAdjacencyUndirected()>:
		<org.jgrapht.ext.MatrixExporterTest.java:133, 62.50%>
	<org.jgrapht.ext.MatrixExporterTest: void testLaplacian()>:
		<org.jgrapht.ext.MatrixExporterTest.java:113, 38.46%>
		<org.jgrapht.ext.MatrixExporterTest.java:117, 38.46%>
	<org.jgrapht.generate.GraphGeneratorTest: void testCompleteBipartiteGraphGenerator()>:
		<org.jgrapht.generate.GraphGeneratorTest.java:243, 50.00%>
		<org.jgrapht.generate.GraphGeneratorTest.java:244, 50.00%>
	<org.jgrapht.generate.GraphGeneratorTest: void testCompleteGraphGenerator()>:
		<org.jgrapht.generate.GraphGeneratorTest.java:185, 62.50%>
	<org.jgrapht.generate.GraphGeneratorTest: void testHyperCubeGraphGenerator()>:
		<org.jgrapht.generate.GraphGeneratorTest.java:265, 50.00%>
		<org.jgrapht.generate.GraphGeneratorTest.java:266, 50.00%>
	<org.jgrapht.generate.RandomGraphGeneratorTest: void testBadVertexFactory()>:
		<org.jgrapht.generate.RandomGraphGeneratorTest.java:106, 12.50%>
	<org.jgrapht.generate.RandomGraphGeneratorTest: void testGenerateDirectedGraph()>:
		<org.jgrapht.generate.RandomGraphGeneratorTest.java:70, 20.00%>
	<org.jgrapht.generate.RandomGraphGeneratorTest: void testGenerateListenableUndirectedGraph()>:
		<org.jgrapht.generate.RandomGraphGeneratorTest.java:89, 20.00%>
	<org.jgrapht.graph.AsUndirectedGraphTest: void testAddEdge()>:
		<org.jgrapht.graph.AsUndirectedGraphTest.java:89, 100.00%>
	<org.jgrapht.graph.AsUndirectedGraphTest: void testAddVertex()>:
		<org.jgrapht.graph.AsUndirectedGraphTest.java:102, 85.71%>
		<org.jgrapht.graph.AsUndirectedGraphTest.java:103, 100.00%>
	<org.jgrapht.graph.AsUndirectedGraphTest: void testGetAllEdges()>:
		<org.jgrapht.graph.AsUndirectedGraphTest.java:123, 40.00%>
		<org.jgrapht.graph.AsUndirectedGraphTest.java:124, 65.00%>
		<org.jgrapht.graph.AsUndirectedGraphTest.java:128, 70.00%>
		<org.jgrapht.graph.AsUndirectedGraphTest.java:129, 80.00%>
	<org.jgrapht.graph.AsUndirectedGraphTest: void testRemoveEdge()>:
		<org.jgrapht.graph.AsUndirectedGraphTest.java:155, 88.89%>
		<org.jgrapht.graph.AsUndirectedGraphTest.java:156, 111.11%>
	<org.jgrapht.graph.AsUndirectedGraphTest: void testRemoveVertex()>:
		<org.jgrapht.graph.AsUndirectedGraphTest.java:165, 88.89%>
		<org.jgrapht.graph.AsUndirectedGraphTest.java:166, 111.11%>
	<org.jgrapht.graph.AsUnweightedGraphTest: void checkView(org.jgrapht.WeightedGraph,org.jgrapht.Graph)>:
		<org.jgrapht.graph.AsUnweightedGraphTest.java:120, 17.39%>
		<org.jgrapht.graph.AsUnweightedGraphTest.java:126, 17.39%>
		<org.jgrapht.graph.AsUnweightedGraphTest.java:132, 17.39%>
		<org.jgrapht.graph.AsUnweightedGraphTest.java:136, 17.39%>
	<org.jgrapht.graph.DefaultDirectedGraphTest: void testEdgesOf()>:
		<org.jgrapht.graph.DefaultDirectedGraphTest.java:117, 75.00%>
		<org.jgrapht.graph.DefaultDirectedGraphTest.java:118, 75.00%>
	<org.jgrapht.graph.DefaultDirectedGraphTest: void testGetAllEdges()>:
		<org.jgrapht.graph.DefaultDirectedGraphTest.java:130, 100.00%>
	<org.jgrapht.graph.DefaultDirectedGraphTest: void testInDegreeOf()>:
		<org.jgrapht.graph.DefaultDirectedGraphTest.java:141, 83.33%>
		<org.jgrapht.graph.DefaultDirectedGraphTest.java:142, 83.33%>
	<org.jgrapht.graph.DefaultDirectedGraphTest: void testOutDegreeOf()>:
		<org.jgrapht.graph.DefaultDirectedGraphTest.java:153, 83.33%>
		<org.jgrapht.graph.DefaultDirectedGraphTest.java:154, 83.33%>
	<org.jgrapht.graph.GenericGraphsTest: void testAlissaHacker()>:
		<org.jgrapht.graph.GenericGraphsTest.java:134, 83.33%>
	<org.jgrapht.graph.GenericGraphsTest: void testEqualButNotSameVertex()>:
		<org.jgrapht.graph.GenericGraphsTest.java:145, 40.00%>
		<org.jgrapht.graph.GenericGraphsTest.java:146, 40.00%>
	<org.jgrapht.graph.SubgraphTest: void testInducedSubgraphListener()>:
		<org.jgrapht.graph.SubgraphTest.java:86, 50.00%>
		<org.jgrapht.graph.SubgraphTest.java:87, 50.00%>
		<org.jgrapht.graph.SubgraphTest.java:91, 50.00%>
		<org.jgrapht.graph.SubgraphTest.java:92, 50.00%>
	<org.jgrapht.graph.SubgraphTest: void testInducedSubgraphUnderlyingEdgeAddition()>:
		<org.jgrapht.graph.SubgraphTest.java:192, 20.00%>
	<org.jgrapht.graph.SubgraphTest: void testSubgraphListener()>:
		<org.jgrapht.graph.SubgraphTest.java:139, 43.75%>
		<org.jgrapht.graph.SubgraphTest.java:140, 43.75%>
		<org.jgrapht.graph.SubgraphTest.java:145, 31.25%>
		<org.jgrapht.graph.SubgraphTest.java:146, 43.75%>
	<org.jgrapht.traverse.AbstractGraphIteratorTest: void testDirectedGraph()>:
		<org.jgrapht.traverse.AbstractGraphIteratorTest.java:86, 47.06%>
		<org.jgrapht.traverse.AbstractGraphIteratorTest.java:88, 52.94%>
	<org.jgrapht.traverse.ClosestFirstIteratorTest: void testNoStart()>:
		<org.jgrapht.traverse.ClosestFirstIteratorTest.java:103, 53.85%>
	<org.jgrapht.traverse.ClosestFirstIteratorTest: void testRadius()>:
		<org.jgrapht.traverse.ClosestFirstIteratorTest.java:80, 53.85%>
	<org.jgrapht.traverse.DepthFirstIteratorTest: void testBug1169182()>:
		<org.jgrapht.traverse.DepthFirstIteratorTest.java:149, 16.00%>
	<org.jgrapht.traverse.TopologicalOrderIteratorTest: void testEmptyGraph()>:
		<org.jgrapht.traverse.TopologicalOrderIteratorTest.java:136, 50.00%>
	<org.jgrapht.traverse.TopologicalOrderIteratorTest: void testRecipe()>:
		<org.jgrapht.traverse.TopologicalOrderIteratorTest.java:109, 9.62%>
		<org.jgrapht.traverse.TopologicalOrderIteratorTest.java:121, 9.62%>
	<org.jgrapht.util.FibonacciHeapTest: void testGrowReplaceShrink()>:
		<org.jgrapht.util.FibonacciHeapTest.java:88, 17.65%>
		<org.jgrapht.util.FibonacciHeapTest.java:91, 17.65%>

Relevant Assertion clone sets (7):
Set (score: 1.00, ccsize: 2, packages: 1, classes: 1): 
	<org.jgrapht.alg.VertexCoversTest: void testFind2ApproximationCover()>:
		<org.jgrapht.alg.VertexCoversTest.java:74, 60.00%>
	<org.jgrapht.alg.VertexCoversTest: void testFindGreedyCover()>:
		<org.jgrapht.alg.VertexCoversTest.java:89, 50.00%>
Set (score: 1.00, ccsize: 2, packages: 1, classes: 1): 
	<org.jgrapht.experimental.GraphReaderTest: void testGraphReader()>:
		<org.jgrapht.experimental.GraphReaderTest.java:88, 27.27%>
	<org.jgrapht.experimental.GraphReaderTest: void testGraphReaderWeighted()>:
		<org.jgrapht.experimental.GraphReaderTest.java:116, 23.08%>
Set (score: 0.67, ccsize: 3, packages: 1, classes: 2): 
	<org.jgrapht.alg.BiconnectivityInspectorTest: void testLinearGraph(int)>:
		<org.jgrapht.alg.BiconnectivityInspectorTest.java:88, 40.00%>
	<org.jgrapht.alg.BlockCutpointGraphTest: void testLinearGraph(int)>:
		<org.jgrapht.alg.BlockCutpointGraphTest.java:121, 33.33%>
		<org.jgrapht.alg.BlockCutpointGraphTest.java:125, 33.33%>
Set (score: 0.67, ccsize: 3, packages: 1, classes: 2): 
	<org.jgrapht.alg.BiconnectivityInspectorTest: void testNotBiconnected()>:
		<org.jgrapht.alg.BiconnectivityInspectorTest.java:100, 55.56%>
	<org.jgrapht.alg.BlockCutpointGraphTest: void testNotBiconnected()>:
		<org.jgrapht.alg.BlockCutpointGraphTest.java:135, 41.67%>
		<org.jgrapht.alg.BlockCutpointGraphTest.java:139, 41.67%>
Set (score: 0.67, ccsize: 2, packages: 1, classes: 2): 
	<org.jgrapht.ext.DOTExporterTest: void testUndirected()>:
		<org.jgrapht.ext.DOTExporterTest.java:110, 41.67%>
	<org.jgrapht.ext.GmlExporterTest: void testUndirected()>:
		<org.jgrapht.ext.GmlExporterTest.java:117, 62.50%>
Set (score: 0.50, ccsize: 3, packages: 1, classes: 1): 
	<org.jgrapht.alg.KSPExampleTest: void testFourReturnedPathsJGraphT()>:
		<org.jgrapht.alg.KSPExampleTest.java:60, 55.56%>
	<org.jgrapht.alg.KSPExampleTest: void testThreeReturnedPathsJGraphT()>:
		<org.jgrapht.alg.KSPExampleTest.java:72, 60.00%>
	<org.jgrapht.alg.KSPExampleTest: void testTwoReturnedPathsJGraphT()>:
		<org.jgrapht.alg.KSPExampleTest.java:84, 60.00%>
Set (score: 0.50, ccsize: 2, packages: 1, classes: 2): 
	<org.jgrapht.alg.BellmanFordShortestPathTest: void testWithNegativeEdges()>:
		<org.jgrapht.alg.BellmanFordShortestPathTest.java:120, 45.45%>
	<org.jgrapht.alg.ShortestPathTestCase: void testPathBetween()>:
		<org.jgrapht.alg.ShortestPathTestCase.java:86, 21.74%>
==============================================

[113] Set (editDistance: 2, isComplete: false, packages: 12, classes: 36): 
Centroid (size: 2): <org.jgrapht.alg.BiconnectivityInspectorTest: void testLinearGraph(int)>

Methods (66): 
	<org.jgrapht.EnhancedTestCase: void assertFalse()>:
		<org.jgrapht.EnhancedTestCase.java:79, 100.00%>
	<org.jgrapht.EnhancedTestCase: void assertTrue()>:
		<org.jgrapht.EnhancedTestCase.java:87, 100.00%>
	<org.jgrapht.alg.BellmanFordShortestPathTest: void testWithNegativeEdges()>:
		<org.jgrapht.alg.BellmanFordShortestPathTest.java:120, 45.45%>
		<org.jgrapht.alg.BellmanFordShortestPathTest.java:127, 63.64%>
	<org.jgrapht.alg.BiconnectivityInspectorTest: void testLinearGraph(int)>:
		<org.jgrapht.alg.BiconnectivityInspectorTest.java:88, 40.00%>
		<org.jgrapht.alg.BiconnectivityInspectorTest.java:89, 40.00%>
	<org.jgrapht.alg.BlockCutpointGraphTest: void testGetBlock(org.jgrapht.alg.BlockCutpointGraph)>:
		<org.jgrapht.alg.BlockCutpointGraphTest.java:88, 33.33%>
		<org.jgrapht.alg.BlockCutpointGraphTest.java:94, 19.05%>
	<org.jgrapht.alg.ConnectivityInspectorTest: void testDirectedGraph()>:
		<org.jgrapht.alg.ConnectivityInspectorTest.java:139, 57.14%>
		<org.jgrapht.alg.ConnectivityInspectorTest.java:143, 57.14%>
	<org.jgrapht.alg.ConnectivityInspectorTest: void testStronglyConnected4()>:
		<org.jgrapht.alg.ConnectivityInspectorTest.java:371, 30.77%>
	<org.jgrapht.alg.EdmondsBlossomShrinkingTest: void testOne()>:
		<org.jgrapht.alg.EdmondsBlossomShrinkingTest.java:80, 23.81%>
		<org.jgrapht.alg.EdmondsBlossomShrinkingTest.java:81, 19.05%>
		<org.jgrapht.alg.EdmondsBlossomShrinkingTest.java:82, 19.05%>
	<org.jgrapht.alg.FloydWarshallShortestPathsTest: void testCompareWithDijkstra()>:
		<org.jgrapht.alg.FloydWarshallShortestPathsTest.java:96, 7.41%>
		<org.jgrapht.alg.FloydWarshallShortestPathsTest.java:121, 7.41%>
	<org.jgrapht.alg.FloydWarshallShortestPathsTest: void testDiameter()>:
		<org.jgrapht.alg.FloydWarshallShortestPathsTest.java:161, 57.14%>
	<org.jgrapht.alg.FloydWarshallShortestPathsTest: void testEdgeLessDiameter()>:
		<org.jgrapht.alg.FloydWarshallShortestPathsTest.java:182, 40.00%>
	<org.jgrapht.alg.FloydWarshallShortestPathsTest: void testEmptyDiameter()>:
		<org.jgrapht.alg.FloydWarshallShortestPathsTest.java:170, 50.00%>
	<org.jgrapht.alg.HamiltonianCycleTest: void testHamiltonianCycle()>:
		<org.jgrapht.alg.HamiltonianCycleTest.java:79, 33.33%>
		<org.jgrapht.alg.HamiltonianCycleTest.java:89, 27.78%>
	<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest: void testBipartiteMatching1()>:
		<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest.java:83, 6.76%>
		<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest.java:86, 6.76%>
	<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest: void testBipartiteMatching2()>:
		<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest.java:112, 5.21%>
		<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest.java:115, 5.21%>
	<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest: void testEmptyMatching()>:
		<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest.java:128, 33.33%>
	<org.jgrapht.alg.KSPDiscardsValidPathsTest: void testNot3connectedGraph()>:
		<org.jgrapht.alg.KSPDiscardsValidPathsTest.java:102, 87.50%>
	<org.jgrapht.alg.KShortestPathCostTest: void verifyShortestPathsInIncreasingOrderOfWeight(org.jgrapht.Graph)>:
		<org.jgrapht.alg.KShortestPathCostTest.java:222, 30.77%>
		<org.jgrapht.alg.KShortestPathCostTest.java:225, 30.77%>
	<org.jgrapht.alg.KShortestPathCostTest: void verifyWeightsConsistency(java.util.List,java.util.List)>:
		<org.jgrapht.alg.KShortestPathCostTest.java:294, 53.85%>
	<org.jgrapht.alg.KShortestPathKValuesTest: void verifyNbPathsForAllPairsOfVertices(org.jgrapht.Graph)>:
		<org.jgrapht.alg.KShortestPathKValuesTest.java:148, 36.84%>
	<org.jgrapht.alg.KruskalMinimumSpanningTreeTest: void testMinimumSpanningTree()>:
		<org.jgrapht.alg.KruskalMinimumSpanningTreeTest.java:80, 19.05%>
		<org.jgrapht.alg.KruskalMinimumSpanningTreeTest.java:84, 38.10%>
	<org.jgrapht.alg.StoerWagnerMinimumCutTest: void testMinCut14()>:
		<org.jgrapht.alg.StoerWagnerMinimumCutTest.java:97, 16.67%>
	<org.jgrapht.alg.StoerWagnerMinimumCutTest: void testMinCutDisconnected()>:
		<org.jgrapht.alg.StoerWagnerMinimumCutTest.java:124, 22.73%>
	<org.jgrapht.alg.TransitiveClosureTest: void testLinearGraph()>:
		<org.jgrapht.alg.TransitiveClosureTest.java:75, 47.83%>
		<org.jgrapht.alg.TransitiveClosureTest.java:78, 43.48%>
	<org.jgrapht.alg.TransitiveClosureTest: void testRingGraph()>:
		<org.jgrapht.alg.TransitiveClosureTest.java:107, 45.45%>
		<org.jgrapht.alg.TransitiveClosureTest.java:110, 50.00%>
	<org.jgrapht.alg.VertexCoversTest: void testFind2ApproximationCover()>:
		<org.jgrapht.alg.VertexCoversTest.java:74, 60.00%>
	<org.jgrapht.alg.VertexCoversTest: void testFindGreedyCover()>:
		<org.jgrapht.alg.VertexCoversTest.java:89, 50.00%>
	<org.jgrapht.alg.util.UnionFindTest: void testIdentical(java.lang.String[],java.util.ArrayList,org.jgrapht.alg.util.UnionFind)>:
		<org.jgrapht.alg.util.UnionFindTest.java:131, 41.18%>
	<org.jgrapht.experimental.GraphReaderTest: void testGraphReader()>:
		<org.jgrapht.experimental.GraphReaderTest.java:88, 27.27%>
	<org.jgrapht.experimental.GraphReaderTest: void testGraphReaderWeighted()>:
		<org.jgrapht.experimental.GraphReaderTest.java:116, 23.08%>
	<org.jgrapht.experimental.alg.ColoringTest: void testBacktrackColoring()>:
		<org.jgrapht.experimental.alg.ColoringTest.java:97, 50.00%>
	<org.jgrapht.experimental.alg.ColoringTest: void testGreedyColoring()>:
		<org.jgrapht.experimental.alg.ColoringTest.java:77, 50.00%>
	<org.jgrapht.experimental.dag.DirectedAcyclicGraphTest: void testTopoIterationOrderLinearGraph()>:
		<org.jgrapht.experimental.dag.DirectedAcyclicGraphTest.java:181, 29.41%>
		<org.jgrapht.experimental.dag.DirectedAcyclicGraphTest.java:182, 41.18%>
	<org.jgrapht.experimental.isomorphism.IsomorphismInspectorTest: void assertIsomorphic(org.jgrapht.Graph[],boolean,org.jgrapht.experimental.equivalence.EquivalenceComparator,org.jgrapht.experimental.equivalence.EquivalenceComparator)>:
		<org.jgrapht.experimental.isomorphism.IsomorphismInspectorTest.java:138, 28.57%>
		<org.jgrapht.experimental.isomorphism.IsomorphismInspectorTest.java:140, 28.57%>
	<org.jgrapht.experimental.isomorphism.IsomorphismInspectorTest: void assertIsomorphicStopAfterFirstMatch(org.jgrapht.Graph[],boolean,boolean,org.jgrapht.experimental.equivalence.EquivalenceComparator,org.jgrapht.experimental.equivalence.EquivalenceComparator)>:
		<org.jgrapht.experimental.isomorphism.IsomorphismInspectorTest.java:485, 14.71%>
	<org.jgrapht.ext.DOTExporterTest: void testUndirected()>:
		<org.jgrapht.ext.DOTExporterTest.java:110, 41.67%>
	<org.jgrapht.ext.DOTExporterTest: void testValidNodeIDs()>:
		<org.jgrapht.ext.DOTExporterTest.java:149, 16.00%>
	<org.jgrapht.ext.GmlExporterTest: void testUndirected()>:
		<org.jgrapht.ext.GmlExporterTest.java:117, 62.50%>
	<org.jgrapht.ext.MatrixExporterTest: void testAdjacencyDirected()>:
		<org.jgrapht.ext.MatrixExporterTest.java:149, 62.50%>
	<org.jgrapht.ext.MatrixExporterTest: void testAdjacencyUndirected()>:
		<org.jgrapht.ext.MatrixExporterTest.java:133, 62.50%>
	<org.jgrapht.ext.MatrixExporterTest: void testLaplacian()>:
		<org.jgrapht.ext.MatrixExporterTest.java:113, 38.46%>
		<org.jgrapht.ext.MatrixExporterTest.java:117, 38.46%>
	<org.jgrapht.generate.RandomGraphGeneratorTest: void testBadVertexFactory()>:
		<org.jgrapht.generate.RandomGraphGeneratorTest.java:106, 12.50%>
	<org.jgrapht.generate.RandomGraphGeneratorTest: void testGenerateDirectedGraph()>:
		<org.jgrapht.generate.RandomGraphGeneratorTest.java:70, 20.00%>
	<org.jgrapht.generate.RandomGraphGeneratorTest: void testGenerateListenableUndirectedGraph()>:
		<org.jgrapht.generate.RandomGraphGeneratorTest.java:89, 20.00%>
	<org.jgrapht.graph.AsUndirectedGraphTest: void testAddEdge()>:
		<org.jgrapht.graph.AsUndirectedGraphTest.java:89, 100.00%>
	<org.jgrapht.graph.AsUndirectedGraphTest: void testAddVertex()>:
		<org.jgrapht.graph.AsUndirectedGraphTest.java:102, 85.71%>
		<org.jgrapht.graph.AsUndirectedGraphTest.java:103, 100.00%>
	<org.jgrapht.graph.AsUndirectedGraphTest: void testDegreeOf()>:
		<org.jgrapht.graph.AsUndirectedGraphTest.java:111, 46.15%>
		<org.jgrapht.graph.AsUndirectedGraphTest.java:112, 61.54%>
		<org.jgrapht.graph.AsUndirectedGraphTest.java:113, 76.92%>
		<org.jgrapht.graph.AsUndirectedGraphTest.java:114, 92.31%>
	<org.jgrapht.graph.AsUndirectedGraphTest: void testGetAllEdges()>:
		<org.jgrapht.graph.AsUndirectedGraphTest.java:123, 40.00%>
		<org.jgrapht.graph.AsUndirectedGraphTest.java:124, 65.00%>
		<org.jgrapht.graph.AsUndirectedGraphTest.java:128, 70.00%>
		<org.jgrapht.graph.AsUndirectedGraphTest.java:129, 80.00%>
	<org.jgrapht.graph.AsUndirectedGraphTest: void testRemoveEdge()>:
		<org.jgrapht.graph.AsUndirectedGraphTest.java:155, 88.89%>
		<org.jgrapht.graph.AsUndirectedGraphTest.java:156, 111.11%>
	<org.jgrapht.graph.AsUndirectedGraphTest: void testRemoveVertex()>:
		<org.jgrapht.graph.AsUndirectedGraphTest.java:165, 88.89%>
		<org.jgrapht.graph.AsUndirectedGraphTest.java:166, 111.11%>
	<org.jgrapht.graph.AsUnweightedGraphTest: void constructWeighted(org.jgrapht.WeightedGraph)>:
		<org.jgrapht.graph.AsUnweightedGraphTest.java:110, 57.14%>
	<org.jgrapht.graph.EqualsAndHashCodeTest: void testDefaultDirectedGraph()>:
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:105, 6.52%>
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:106, 10.87%>
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:108, 13.04%>
	<org.jgrapht.graph.EqualsAndHashCodeTest: void testGraphsWithNonIntrusiveEdge()>:
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:187, 3.90%>
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:188, 6.49%>
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:190, 7.79%>
	<org.jgrapht.graph.EqualsAndHashCodeTest: void testGrapshWithCustomEdges()>:
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:268, 7.69%>
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:269, 12.82%>
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:271, 15.38%>
	<org.jgrapht.graph.EqualsAndHashCodeTest: void testPseudograph()>:
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:230, 5.08%>
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:231, 8.47%>
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:233, 10.17%>
	<org.jgrapht.graph.EqualsAndHashCodeTest: void testSimpleGraph()>:
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:148, 6.52%>
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:149, 10.87%>
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:151, 13.04%>
	<org.jgrapht.graph.GenericGraphsTest: void testAlissaHacker()>:
		<org.jgrapht.graph.GenericGraphsTest.java:134, 83.33%>
	<org.jgrapht.graph.SimpleDirectedGraphTest: void testIncomingOutgoingEdgesOf()>:
		<org.jgrapht.graph.SimpleDirectedGraphTest.java:315, 128.57%>
	<org.jgrapht.graph.SubgraphTest: void testInducedSubgraphUnderlyingEdgeAddition()>:
		<org.jgrapht.graph.SubgraphTest.java:192, 20.00%>
	<org.jgrapht.traverse.AbstractGraphIteratorTest: void testDirectedGraph()>:
		<org.jgrapht.traverse.AbstractGraphIteratorTest.java:86, 47.06%>
		<org.jgrapht.traverse.AbstractGraphIteratorTest.java:88, 52.94%>
	<org.jgrapht.traverse.ClosestFirstIteratorTest: void testNoStart()>:
		<org.jgrapht.traverse.ClosestFirstIteratorTest.java:103, 53.85%>
	<org.jgrapht.traverse.ClosestFirstIteratorTest: void testRadius()>:
		<org.jgrapht.traverse.ClosestFirstIteratorTest.java:80, 53.85%>
	<org.jgrapht.traverse.DepthFirstIteratorTest: void testBug1169182()>:
		<org.jgrapht.traverse.DepthFirstIteratorTest.java:149, 16.00%>
	<org.jgrapht.traverse.TopologicalOrderIteratorTest: void testEmptyGraph()>:
		<org.jgrapht.traverse.TopologicalOrderIteratorTest.java:136, 50.00%>
	<org.jgrapht.traverse.TopologicalOrderIteratorTest: void testRecipe()>:
		<org.jgrapht.traverse.TopologicalOrderIteratorTest.java:109, 9.62%>
		<org.jgrapht.traverse.TopologicalOrderIteratorTest.java:121, 9.62%>
	<org.jgrapht.util.FibonacciHeapTest: void testGrowReplaceShrink()>:
		<org.jgrapht.util.FibonacciHeapTest.java:88, 17.65%>
		<org.jgrapht.util.FibonacciHeapTest.java:91, 17.65%>

Relevant Assertion clone sets (7):
Set (score: 1.00, ccsize: 2, packages: 1, classes: 1): 
	<org.jgrapht.alg.VertexCoversTest: void testFind2ApproximationCover()>:
		<org.jgrapht.alg.VertexCoversTest.java:74, 60.00%>
	<org.jgrapht.alg.VertexCoversTest: void testFindGreedyCover()>:
		<org.jgrapht.alg.VertexCoversTest.java:89, 50.00%>
Set (score: 1.00, ccsize: 2, packages: 1, classes: 1): 
	<org.jgrapht.experimental.GraphReaderTest: void testGraphReader()>:
		<org.jgrapht.experimental.GraphReaderTest.java:88, 27.27%>
	<org.jgrapht.experimental.GraphReaderTest: void testGraphReaderWeighted()>:
		<org.jgrapht.experimental.GraphReaderTest.java:116, 23.08%>
Set (score: 0.67, ccsize: 2, packages: 1, classes: 2): 
	<org.jgrapht.ext.DOTExporterTest: void testUndirected()>:
		<org.jgrapht.ext.DOTExporterTest.java:110, 41.67%>
	<org.jgrapht.ext.GmlExporterTest: void testUndirected()>:
		<org.jgrapht.ext.GmlExporterTest.java:117, 62.50%>
Set (score: 0.67, ccsize: 2, packages: 1, classes: 1): 
	<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest: void testBipartiteMatching1()>:
		<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest.java:86, 6.76%>
	<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest: void testBipartiteMatching2()>:
		<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest.java:115, 5.21%>
Set (score: 0.50, ccsize: 4, packages: 1, classes: 1): 
	<org.jgrapht.graph.EqualsAndHashCodeTest: void testDefaultDirectedGraph()>:
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:106, 10.87%>
	<org.jgrapht.graph.EqualsAndHashCodeTest: void testGraphsWithNonIntrusiveEdge()>:
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:188, 6.49%>
Set (score: 0.50, ccsize: 4, packages: 1, classes: 1): 
	<org.jgrapht.graph.EqualsAndHashCodeTest: void testGrapshWithCustomEdges()>:
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:269, 12.82%>
	<org.jgrapht.graph.EqualsAndHashCodeTest: void testSimpleGraph()>:
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:149, 10.87%>
Set (score: 0.50, ccsize: 2, packages: 1, classes: 1): 
	<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest: void testBipartiteMatching1()>:
		<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest.java:83, 6.76%>
	<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest: void testBipartiteMatching2()>:
		<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest.java:112, 5.21%>
==============================================

[114] Set (editDistance: 2, isComplete: false, packages: 12, classes: 36): 
Centroid (size: 2): <org.jgrapht.alg.BiconnectivityInspectorTest: void testNotBiconnected()>

Methods (66): 
	<org.jgrapht.EnhancedTestCase: void assertFalse()>:
		<org.jgrapht.EnhancedTestCase.java:79, 100.00%>
	<org.jgrapht.EnhancedTestCase: void assertTrue()>:
		<org.jgrapht.EnhancedTestCase.java:87, 100.00%>
	<org.jgrapht.alg.BellmanFordShortestPathTest: void testWithNegativeEdges()>:
		<org.jgrapht.alg.BellmanFordShortestPathTest.java:120, 45.45%>
		<org.jgrapht.alg.BellmanFordShortestPathTest.java:127, 63.64%>
	<org.jgrapht.alg.BiconnectivityInspectorTest: void testNotBiconnected()>:
		<org.jgrapht.alg.BiconnectivityInspectorTest.java:100, 55.56%>
		<org.jgrapht.alg.BiconnectivityInspectorTest.java:101, 55.56%>
	<org.jgrapht.alg.BlockCutpointGraphTest: void testGetBlock(org.jgrapht.alg.BlockCutpointGraph)>:
		<org.jgrapht.alg.BlockCutpointGraphTest.java:88, 33.33%>
		<org.jgrapht.alg.BlockCutpointGraphTest.java:94, 19.05%>
	<org.jgrapht.alg.ConnectivityInspectorTest: void testDirectedGraph()>:
		<org.jgrapht.alg.ConnectivityInspectorTest.java:139, 57.14%>
		<org.jgrapht.alg.ConnectivityInspectorTest.java:143, 57.14%>
	<org.jgrapht.alg.ConnectivityInspectorTest: void testStronglyConnected4()>:
		<org.jgrapht.alg.ConnectivityInspectorTest.java:371, 30.77%>
	<org.jgrapht.alg.EdmondsBlossomShrinkingTest: void testOne()>:
		<org.jgrapht.alg.EdmondsBlossomShrinkingTest.java:80, 23.81%>
		<org.jgrapht.alg.EdmondsBlossomShrinkingTest.java:81, 19.05%>
		<org.jgrapht.alg.EdmondsBlossomShrinkingTest.java:82, 19.05%>
	<org.jgrapht.alg.FloydWarshallShortestPathsTest: void testCompareWithDijkstra()>:
		<org.jgrapht.alg.FloydWarshallShortestPathsTest.java:96, 7.41%>
		<org.jgrapht.alg.FloydWarshallShortestPathsTest.java:121, 7.41%>
	<org.jgrapht.alg.FloydWarshallShortestPathsTest: void testDiameter()>:
		<org.jgrapht.alg.FloydWarshallShortestPathsTest.java:161, 57.14%>
	<org.jgrapht.alg.FloydWarshallShortestPathsTest: void testEdgeLessDiameter()>:
		<org.jgrapht.alg.FloydWarshallShortestPathsTest.java:182, 40.00%>
	<org.jgrapht.alg.FloydWarshallShortestPathsTest: void testEmptyDiameter()>:
		<org.jgrapht.alg.FloydWarshallShortestPathsTest.java:170, 50.00%>
	<org.jgrapht.alg.HamiltonianCycleTest: void testHamiltonianCycle()>:
		<org.jgrapht.alg.HamiltonianCycleTest.java:79, 33.33%>
		<org.jgrapht.alg.HamiltonianCycleTest.java:89, 27.78%>
	<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest: void testBipartiteMatching1()>:
		<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest.java:83, 6.76%>
		<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest.java:86, 6.76%>
	<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest: void testBipartiteMatching2()>:
		<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest.java:112, 5.21%>
		<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest.java:115, 5.21%>
	<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest: void testEmptyMatching()>:
		<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest.java:128, 33.33%>
	<org.jgrapht.alg.KSPDiscardsValidPathsTest: void testNot3connectedGraph()>:
		<org.jgrapht.alg.KSPDiscardsValidPathsTest.java:102, 87.50%>
	<org.jgrapht.alg.KShortestPathCostTest: void verifyShortestPathsInIncreasingOrderOfWeight(org.jgrapht.Graph)>:
		<org.jgrapht.alg.KShortestPathCostTest.java:222, 30.77%>
		<org.jgrapht.alg.KShortestPathCostTest.java:225, 30.77%>
	<org.jgrapht.alg.KShortestPathCostTest: void verifyWeightsConsistency(java.util.List,java.util.List)>:
		<org.jgrapht.alg.KShortestPathCostTest.java:294, 53.85%>
	<org.jgrapht.alg.KShortestPathKValuesTest: void verifyNbPathsForAllPairsOfVertices(org.jgrapht.Graph)>:
		<org.jgrapht.alg.KShortestPathKValuesTest.java:148, 36.84%>
	<org.jgrapht.alg.KruskalMinimumSpanningTreeTest: void testMinimumSpanningTree()>:
		<org.jgrapht.alg.KruskalMinimumSpanningTreeTest.java:80, 19.05%>
		<org.jgrapht.alg.KruskalMinimumSpanningTreeTest.java:84, 38.10%>
	<org.jgrapht.alg.StoerWagnerMinimumCutTest: void testMinCut14()>:
		<org.jgrapht.alg.StoerWagnerMinimumCutTest.java:97, 16.67%>
	<org.jgrapht.alg.StoerWagnerMinimumCutTest: void testMinCutDisconnected()>:
		<org.jgrapht.alg.StoerWagnerMinimumCutTest.java:124, 22.73%>
	<org.jgrapht.alg.TransitiveClosureTest: void testLinearGraph()>:
		<org.jgrapht.alg.TransitiveClosureTest.java:75, 47.83%>
		<org.jgrapht.alg.TransitiveClosureTest.java:78, 43.48%>
	<org.jgrapht.alg.TransitiveClosureTest: void testRingGraph()>:
		<org.jgrapht.alg.TransitiveClosureTest.java:107, 45.45%>
		<org.jgrapht.alg.TransitiveClosureTest.java:110, 50.00%>
	<org.jgrapht.alg.VertexCoversTest: void testFind2ApproximationCover()>:
		<org.jgrapht.alg.VertexCoversTest.java:74, 60.00%>
	<org.jgrapht.alg.VertexCoversTest: void testFindGreedyCover()>:
		<org.jgrapht.alg.VertexCoversTest.java:89, 50.00%>
	<org.jgrapht.alg.util.UnionFindTest: void testIdentical(java.lang.String[],java.util.ArrayList,org.jgrapht.alg.util.UnionFind)>:
		<org.jgrapht.alg.util.UnionFindTest.java:131, 41.18%>
	<org.jgrapht.experimental.GraphReaderTest: void testGraphReader()>:
		<org.jgrapht.experimental.GraphReaderTest.java:88, 27.27%>
	<org.jgrapht.experimental.GraphReaderTest: void testGraphReaderWeighted()>:
		<org.jgrapht.experimental.GraphReaderTest.java:116, 23.08%>
	<org.jgrapht.experimental.alg.ColoringTest: void testBacktrackColoring()>:
		<org.jgrapht.experimental.alg.ColoringTest.java:97, 50.00%>
	<org.jgrapht.experimental.alg.ColoringTest: void testGreedyColoring()>:
		<org.jgrapht.experimental.alg.ColoringTest.java:77, 50.00%>
	<org.jgrapht.experimental.dag.DirectedAcyclicGraphTest: void testTopoIterationOrderLinearGraph()>:
		<org.jgrapht.experimental.dag.DirectedAcyclicGraphTest.java:181, 29.41%>
		<org.jgrapht.experimental.dag.DirectedAcyclicGraphTest.java:182, 41.18%>
	<org.jgrapht.experimental.isomorphism.IsomorphismInspectorTest: void assertIsomorphic(org.jgrapht.Graph[],boolean,org.jgrapht.experimental.equivalence.EquivalenceComparator,org.jgrapht.experimental.equivalence.EquivalenceComparator)>:
		<org.jgrapht.experimental.isomorphism.IsomorphismInspectorTest.java:138, 28.57%>
		<org.jgrapht.experimental.isomorphism.IsomorphismInspectorTest.java:140, 28.57%>
	<org.jgrapht.experimental.isomorphism.IsomorphismInspectorTest: void assertIsomorphicStopAfterFirstMatch(org.jgrapht.Graph[],boolean,boolean,org.jgrapht.experimental.equivalence.EquivalenceComparator,org.jgrapht.experimental.equivalence.EquivalenceComparator)>:
		<org.jgrapht.experimental.isomorphism.IsomorphismInspectorTest.java:485, 14.71%>
	<org.jgrapht.ext.DOTExporterTest: void testUndirected()>:
		<org.jgrapht.ext.DOTExporterTest.java:110, 41.67%>
	<org.jgrapht.ext.DOTExporterTest: void testValidNodeIDs()>:
		<org.jgrapht.ext.DOTExporterTest.java:149, 16.00%>
	<org.jgrapht.ext.GmlExporterTest: void testUndirected()>:
		<org.jgrapht.ext.GmlExporterTest.java:117, 62.50%>
	<org.jgrapht.ext.MatrixExporterTest: void testAdjacencyDirected()>:
		<org.jgrapht.ext.MatrixExporterTest.java:149, 62.50%>
	<org.jgrapht.ext.MatrixExporterTest: void testAdjacencyUndirected()>:
		<org.jgrapht.ext.MatrixExporterTest.java:133, 62.50%>
	<org.jgrapht.ext.MatrixExporterTest: void testLaplacian()>:
		<org.jgrapht.ext.MatrixExporterTest.java:113, 38.46%>
		<org.jgrapht.ext.MatrixExporterTest.java:117, 38.46%>
	<org.jgrapht.generate.RandomGraphGeneratorTest: void testBadVertexFactory()>:
		<org.jgrapht.generate.RandomGraphGeneratorTest.java:106, 12.50%>
	<org.jgrapht.generate.RandomGraphGeneratorTest: void testGenerateDirectedGraph()>:
		<org.jgrapht.generate.RandomGraphGeneratorTest.java:70, 20.00%>
	<org.jgrapht.generate.RandomGraphGeneratorTest: void testGenerateListenableUndirectedGraph()>:
		<org.jgrapht.generate.RandomGraphGeneratorTest.java:89, 20.00%>
	<org.jgrapht.graph.AsUndirectedGraphTest: void testAddEdge()>:
		<org.jgrapht.graph.AsUndirectedGraphTest.java:89, 100.00%>
	<org.jgrapht.graph.AsUndirectedGraphTest: void testAddVertex()>:
		<org.jgrapht.graph.AsUndirectedGraphTest.java:102, 85.71%>
		<org.jgrapht.graph.AsUndirectedGraphTest.java:103, 100.00%>
	<org.jgrapht.graph.AsUndirectedGraphTest: void testDegreeOf()>:
		<org.jgrapht.graph.AsUndirectedGraphTest.java:111, 46.15%>
		<org.jgrapht.graph.AsUndirectedGraphTest.java:112, 61.54%>
		<org.jgrapht.graph.AsUndirectedGraphTest.java:113, 76.92%>
		<org.jgrapht.graph.AsUndirectedGraphTest.java:114, 92.31%>
	<org.jgrapht.graph.AsUndirectedGraphTest: void testGetAllEdges()>:
		<org.jgrapht.graph.AsUndirectedGraphTest.java:123, 40.00%>
		<org.jgrapht.graph.AsUndirectedGraphTest.java:124, 65.00%>
		<org.jgrapht.graph.AsUndirectedGraphTest.java:128, 70.00%>
		<org.jgrapht.graph.AsUndirectedGraphTest.java:129, 80.00%>
	<org.jgrapht.graph.AsUndirectedGraphTest: void testRemoveEdge()>:
		<org.jgrapht.graph.AsUndirectedGraphTest.java:155, 88.89%>
		<org.jgrapht.graph.AsUndirectedGraphTest.java:156, 111.11%>
	<org.jgrapht.graph.AsUndirectedGraphTest: void testRemoveVertex()>:
		<org.jgrapht.graph.AsUndirectedGraphTest.java:165, 88.89%>
		<org.jgrapht.graph.AsUndirectedGraphTest.java:166, 111.11%>
	<org.jgrapht.graph.AsUnweightedGraphTest: void constructWeighted(org.jgrapht.WeightedGraph)>:
		<org.jgrapht.graph.AsUnweightedGraphTest.java:110, 57.14%>
	<org.jgrapht.graph.EqualsAndHashCodeTest: void testDefaultDirectedGraph()>:
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:105, 6.52%>
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:106, 10.87%>
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:108, 13.04%>
	<org.jgrapht.graph.EqualsAndHashCodeTest: void testGraphsWithNonIntrusiveEdge()>:
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:187, 3.90%>
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:188, 6.49%>
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:190, 7.79%>
	<org.jgrapht.graph.EqualsAndHashCodeTest: void testGrapshWithCustomEdges()>:
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:268, 7.69%>
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:269, 12.82%>
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:271, 15.38%>
	<org.jgrapht.graph.EqualsAndHashCodeTest: void testPseudograph()>:
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:230, 5.08%>
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:231, 8.47%>
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:233, 10.17%>
	<org.jgrapht.graph.EqualsAndHashCodeTest: void testSimpleGraph()>:
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:148, 6.52%>
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:149, 10.87%>
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:151, 13.04%>
	<org.jgrapht.graph.GenericGraphsTest: void testAlissaHacker()>:
		<org.jgrapht.graph.GenericGraphsTest.java:134, 83.33%>
	<org.jgrapht.graph.SimpleDirectedGraphTest: void testIncomingOutgoingEdgesOf()>:
		<org.jgrapht.graph.SimpleDirectedGraphTest.java:315, 128.57%>
	<org.jgrapht.graph.SubgraphTest: void testInducedSubgraphUnderlyingEdgeAddition()>:
		<org.jgrapht.graph.SubgraphTest.java:192, 20.00%>
	<org.jgrapht.traverse.AbstractGraphIteratorTest: void testDirectedGraph()>:
		<org.jgrapht.traverse.AbstractGraphIteratorTest.java:86, 47.06%>
		<org.jgrapht.traverse.AbstractGraphIteratorTest.java:88, 52.94%>
	<org.jgrapht.traverse.ClosestFirstIteratorTest: void testNoStart()>:
		<org.jgrapht.traverse.ClosestFirstIteratorTest.java:103, 53.85%>
	<org.jgrapht.traverse.ClosestFirstIteratorTest: void testRadius()>:
		<org.jgrapht.traverse.ClosestFirstIteratorTest.java:80, 53.85%>
	<org.jgrapht.traverse.DepthFirstIteratorTest: void testBug1169182()>:
		<org.jgrapht.traverse.DepthFirstIteratorTest.java:149, 16.00%>
	<org.jgrapht.traverse.TopologicalOrderIteratorTest: void testEmptyGraph()>:
		<org.jgrapht.traverse.TopologicalOrderIteratorTest.java:136, 50.00%>
	<org.jgrapht.traverse.TopologicalOrderIteratorTest: void testRecipe()>:
		<org.jgrapht.traverse.TopologicalOrderIteratorTest.java:109, 9.62%>
		<org.jgrapht.traverse.TopologicalOrderIteratorTest.java:121, 9.62%>
	<org.jgrapht.util.FibonacciHeapTest: void testGrowReplaceShrink()>:
		<org.jgrapht.util.FibonacciHeapTest.java:88, 17.65%>
		<org.jgrapht.util.FibonacciHeapTest.java:91, 17.65%>

Relevant Assertion clone sets (7):
Set (score: 1.00, ccsize: 2, packages: 1, classes: 1): 
	<org.jgrapht.alg.VertexCoversTest: void testFind2ApproximationCover()>:
		<org.jgrapht.alg.VertexCoversTest.java:74, 60.00%>
	<org.jgrapht.alg.VertexCoversTest: void testFindGreedyCover()>:
		<org.jgrapht.alg.VertexCoversTest.java:89, 50.00%>
Set (score: 1.00, ccsize: 2, packages: 1, classes: 1): 
	<org.jgrapht.experimental.GraphReaderTest: void testGraphReader()>:
		<org.jgrapht.experimental.GraphReaderTest.java:88, 27.27%>
	<org.jgrapht.experimental.GraphReaderTest: void testGraphReaderWeighted()>:
		<org.jgrapht.experimental.GraphReaderTest.java:116, 23.08%>
Set (score: 0.67, ccsize: 2, packages: 1, classes: 2): 
	<org.jgrapht.ext.DOTExporterTest: void testUndirected()>:
		<org.jgrapht.ext.DOTExporterTest.java:110, 41.67%>
	<org.jgrapht.ext.GmlExporterTest: void testUndirected()>:
		<org.jgrapht.ext.GmlExporterTest.java:117, 62.50%>
Set (score: 0.67, ccsize: 2, packages: 1, classes: 1): 
	<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest: void testBipartiteMatching1()>:
		<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest.java:86, 6.76%>
	<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest: void testBipartiteMatching2()>:
		<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest.java:115, 5.21%>
Set (score: 0.50, ccsize: 4, packages: 1, classes: 1): 
	<org.jgrapht.graph.EqualsAndHashCodeTest: void testDefaultDirectedGraph()>:
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:106, 10.87%>
	<org.jgrapht.graph.EqualsAndHashCodeTest: void testGraphsWithNonIntrusiveEdge()>:
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:188, 6.49%>
Set (score: 0.50, ccsize: 4, packages: 1, classes: 1): 
	<org.jgrapht.graph.EqualsAndHashCodeTest: void testGrapshWithCustomEdges()>:
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:269, 12.82%>
	<org.jgrapht.graph.EqualsAndHashCodeTest: void testSimpleGraph()>:
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:149, 10.87%>
Set (score: 0.50, ccsize: 2, packages: 1, classes: 1): 
	<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest: void testBipartiteMatching1()>:
		<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest.java:83, 6.76%>
	<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest: void testBipartiteMatching2()>:
		<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest.java:112, 5.21%>
==============================================

[115] Set (editDistance: 2, isComplete: false, packages: 12, classes: 35): 
Centroid (size: 2): <org.jgrapht.alg.BlockCutpointGraphTest: void testBiconnected()>

Methods (66): 
	<org.jgrapht.EnhancedTestCase: void assertFalse()>:
		<org.jgrapht.EnhancedTestCase.java:79, 100.00%>
	<org.jgrapht.EnhancedTestCase: void assertTrue()>:
		<org.jgrapht.EnhancedTestCase.java:87, 100.00%>
	<org.jgrapht.alg.BellmanFordShortestPathTest: void testWithNegativeEdges()>:
		<org.jgrapht.alg.BellmanFordShortestPathTest.java:120, 45.45%>
		<org.jgrapht.alg.BellmanFordShortestPathTest.java:127, 63.64%>
	<org.jgrapht.alg.BlockCutpointGraphTest: void testBiconnected()>:
		<org.jgrapht.alg.BlockCutpointGraphTest.java:67, 41.67%>
		<org.jgrapht.alg.BlockCutpointGraphTest.java:71, 41.67%>
	<org.jgrapht.alg.BlockCutpointGraphTest: void testGetBlock(org.jgrapht.alg.BlockCutpointGraph)>:
		<org.jgrapht.alg.BlockCutpointGraphTest.java:88, 33.33%>
		<org.jgrapht.alg.BlockCutpointGraphTest.java:94, 19.05%>
	<org.jgrapht.alg.ConnectivityInspectorTest: void testDirectedGraph()>:
		<org.jgrapht.alg.ConnectivityInspectorTest.java:139, 57.14%>
		<org.jgrapht.alg.ConnectivityInspectorTest.java:143, 57.14%>
	<org.jgrapht.alg.ConnectivityInspectorTest: void testStronglyConnected4()>:
		<org.jgrapht.alg.ConnectivityInspectorTest.java:371, 30.77%>
	<org.jgrapht.alg.EdmondsBlossomShrinkingTest: void testOne()>:
		<org.jgrapht.alg.EdmondsBlossomShrinkingTest.java:80, 23.81%>
		<org.jgrapht.alg.EdmondsBlossomShrinkingTest.java:81, 19.05%>
		<org.jgrapht.alg.EdmondsBlossomShrinkingTest.java:82, 19.05%>
	<org.jgrapht.alg.FloydWarshallShortestPathsTest: void testCompareWithDijkstra()>:
		<org.jgrapht.alg.FloydWarshallShortestPathsTest.java:96, 7.41%>
		<org.jgrapht.alg.FloydWarshallShortestPathsTest.java:121, 7.41%>
	<org.jgrapht.alg.FloydWarshallShortestPathsTest: void testDiameter()>:
		<org.jgrapht.alg.FloydWarshallShortestPathsTest.java:161, 57.14%>
	<org.jgrapht.alg.FloydWarshallShortestPathsTest: void testEdgeLessDiameter()>:
		<org.jgrapht.alg.FloydWarshallShortestPathsTest.java:182, 40.00%>
	<org.jgrapht.alg.FloydWarshallShortestPathsTest: void testEmptyDiameter()>:
		<org.jgrapht.alg.FloydWarshallShortestPathsTest.java:170, 50.00%>
	<org.jgrapht.alg.HamiltonianCycleTest: void testHamiltonianCycle()>:
		<org.jgrapht.alg.HamiltonianCycleTest.java:79, 33.33%>
		<org.jgrapht.alg.HamiltonianCycleTest.java:89, 27.78%>
	<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest: void testBipartiteMatching1()>:
		<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest.java:83, 6.76%>
		<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest.java:86, 6.76%>
	<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest: void testBipartiteMatching2()>:
		<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest.java:112, 5.21%>
		<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest.java:115, 5.21%>
	<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest: void testEmptyMatching()>:
		<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest.java:128, 33.33%>
	<org.jgrapht.alg.KSPDiscardsValidPathsTest: void testNot3connectedGraph()>:
		<org.jgrapht.alg.KSPDiscardsValidPathsTest.java:102, 87.50%>
	<org.jgrapht.alg.KShortestPathCostTest: void verifyShortestPathsInIncreasingOrderOfWeight(org.jgrapht.Graph)>:
		<org.jgrapht.alg.KShortestPathCostTest.java:222, 30.77%>
		<org.jgrapht.alg.KShortestPathCostTest.java:225, 30.77%>
	<org.jgrapht.alg.KShortestPathCostTest: void verifyWeightsConsistency(java.util.List,java.util.List)>:
		<org.jgrapht.alg.KShortestPathCostTest.java:294, 53.85%>
	<org.jgrapht.alg.KShortestPathKValuesTest: void verifyNbPathsForAllPairsOfVertices(org.jgrapht.Graph)>:
		<org.jgrapht.alg.KShortestPathKValuesTest.java:148, 36.84%>
	<org.jgrapht.alg.KruskalMinimumSpanningTreeTest: void testMinimumSpanningTree()>:
		<org.jgrapht.alg.KruskalMinimumSpanningTreeTest.java:80, 19.05%>
		<org.jgrapht.alg.KruskalMinimumSpanningTreeTest.java:84, 38.10%>
	<org.jgrapht.alg.StoerWagnerMinimumCutTest: void testMinCut14()>:
		<org.jgrapht.alg.StoerWagnerMinimumCutTest.java:97, 16.67%>
	<org.jgrapht.alg.StoerWagnerMinimumCutTest: void testMinCutDisconnected()>:
		<org.jgrapht.alg.StoerWagnerMinimumCutTest.java:124, 22.73%>
	<org.jgrapht.alg.TransitiveClosureTest: void testLinearGraph()>:
		<org.jgrapht.alg.TransitiveClosureTest.java:75, 47.83%>
		<org.jgrapht.alg.TransitiveClosureTest.java:78, 43.48%>
	<org.jgrapht.alg.TransitiveClosureTest: void testRingGraph()>:
		<org.jgrapht.alg.TransitiveClosureTest.java:107, 45.45%>
		<org.jgrapht.alg.TransitiveClosureTest.java:110, 50.00%>
	<org.jgrapht.alg.VertexCoversTest: void testFind2ApproximationCover()>:
		<org.jgrapht.alg.VertexCoversTest.java:74, 60.00%>
	<org.jgrapht.alg.VertexCoversTest: void testFindGreedyCover()>:
		<org.jgrapht.alg.VertexCoversTest.java:89, 50.00%>
	<org.jgrapht.alg.util.UnionFindTest: void testIdentical(java.lang.String[],java.util.ArrayList,org.jgrapht.alg.util.UnionFind)>:
		<org.jgrapht.alg.util.UnionFindTest.java:131, 41.18%>
	<org.jgrapht.experimental.GraphReaderTest: void testGraphReader()>:
		<org.jgrapht.experimental.GraphReaderTest.java:88, 27.27%>
	<org.jgrapht.experimental.GraphReaderTest: void testGraphReaderWeighted()>:
		<org.jgrapht.experimental.GraphReaderTest.java:116, 23.08%>
	<org.jgrapht.experimental.alg.ColoringTest: void testBacktrackColoring()>:
		<org.jgrapht.experimental.alg.ColoringTest.java:97, 50.00%>
	<org.jgrapht.experimental.alg.ColoringTest: void testGreedyColoring()>:
		<org.jgrapht.experimental.alg.ColoringTest.java:77, 50.00%>
	<org.jgrapht.experimental.dag.DirectedAcyclicGraphTest: void testTopoIterationOrderLinearGraph()>:
		<org.jgrapht.experimental.dag.DirectedAcyclicGraphTest.java:181, 29.41%>
		<org.jgrapht.experimental.dag.DirectedAcyclicGraphTest.java:182, 41.18%>
	<org.jgrapht.experimental.isomorphism.IsomorphismInspectorTest: void assertIsomorphic(org.jgrapht.Graph[],boolean,org.jgrapht.experimental.equivalence.EquivalenceComparator,org.jgrapht.experimental.equivalence.EquivalenceComparator)>:
		<org.jgrapht.experimental.isomorphism.IsomorphismInspectorTest.java:138, 28.57%>
		<org.jgrapht.experimental.isomorphism.IsomorphismInspectorTest.java:140, 28.57%>
	<org.jgrapht.experimental.isomorphism.IsomorphismInspectorTest: void assertIsomorphicStopAfterFirstMatch(org.jgrapht.Graph[],boolean,boolean,org.jgrapht.experimental.equivalence.EquivalenceComparator,org.jgrapht.experimental.equivalence.EquivalenceComparator)>:
		<org.jgrapht.experimental.isomorphism.IsomorphismInspectorTest.java:485, 14.71%>
	<org.jgrapht.ext.DOTExporterTest: void testUndirected()>:
		<org.jgrapht.ext.DOTExporterTest.java:110, 41.67%>
	<org.jgrapht.ext.DOTExporterTest: void testValidNodeIDs()>:
		<org.jgrapht.ext.DOTExporterTest.java:149, 16.00%>
	<org.jgrapht.ext.GmlExporterTest: void testUndirected()>:
		<org.jgrapht.ext.GmlExporterTest.java:117, 62.50%>
	<org.jgrapht.ext.MatrixExporterTest: void testAdjacencyDirected()>:
		<org.jgrapht.ext.MatrixExporterTest.java:149, 62.50%>
	<org.jgrapht.ext.MatrixExporterTest: void testAdjacencyUndirected()>:
		<org.jgrapht.ext.MatrixExporterTest.java:133, 62.50%>
	<org.jgrapht.ext.MatrixExporterTest: void testLaplacian()>:
		<org.jgrapht.ext.MatrixExporterTest.java:113, 38.46%>
		<org.jgrapht.ext.MatrixExporterTest.java:117, 38.46%>
	<org.jgrapht.generate.RandomGraphGeneratorTest: void testBadVertexFactory()>:
		<org.jgrapht.generate.RandomGraphGeneratorTest.java:106, 12.50%>
	<org.jgrapht.generate.RandomGraphGeneratorTest: void testGenerateDirectedGraph()>:
		<org.jgrapht.generate.RandomGraphGeneratorTest.java:70, 20.00%>
	<org.jgrapht.generate.RandomGraphGeneratorTest: void testGenerateListenableUndirectedGraph()>:
		<org.jgrapht.generate.RandomGraphGeneratorTest.java:89, 20.00%>
	<org.jgrapht.graph.AsUndirectedGraphTest: void testAddEdge()>:
		<org.jgrapht.graph.AsUndirectedGraphTest.java:89, 100.00%>
	<org.jgrapht.graph.AsUndirectedGraphTest: void testAddVertex()>:
		<org.jgrapht.graph.AsUndirectedGraphTest.java:102, 85.71%>
		<org.jgrapht.graph.AsUndirectedGraphTest.java:103, 100.00%>
	<org.jgrapht.graph.AsUndirectedGraphTest: void testDegreeOf()>:
		<org.jgrapht.graph.AsUndirectedGraphTest.java:111, 46.15%>
		<org.jgrapht.graph.AsUndirectedGraphTest.java:112, 61.54%>
		<org.jgrapht.graph.AsUndirectedGraphTest.java:113, 76.92%>
		<org.jgrapht.graph.AsUndirectedGraphTest.java:114, 92.31%>
	<org.jgrapht.graph.AsUndirectedGraphTest: void testGetAllEdges()>:
		<org.jgrapht.graph.AsUndirectedGraphTest.java:123, 40.00%>
		<org.jgrapht.graph.AsUndirectedGraphTest.java:124, 65.00%>
		<org.jgrapht.graph.AsUndirectedGraphTest.java:128, 70.00%>
		<org.jgrapht.graph.AsUndirectedGraphTest.java:129, 80.00%>
	<org.jgrapht.graph.AsUndirectedGraphTest: void testRemoveEdge()>:
		<org.jgrapht.graph.AsUndirectedGraphTest.java:155, 88.89%>
		<org.jgrapht.graph.AsUndirectedGraphTest.java:156, 111.11%>
	<org.jgrapht.graph.AsUndirectedGraphTest: void testRemoveVertex()>:
		<org.jgrapht.graph.AsUndirectedGraphTest.java:165, 88.89%>
		<org.jgrapht.graph.AsUndirectedGraphTest.java:166, 111.11%>
	<org.jgrapht.graph.AsUnweightedGraphTest: void constructWeighted(org.jgrapht.WeightedGraph)>:
		<org.jgrapht.graph.AsUnweightedGraphTest.java:110, 57.14%>
	<org.jgrapht.graph.EqualsAndHashCodeTest: void testDefaultDirectedGraph()>:
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:105, 6.52%>
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:106, 10.87%>
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:108, 13.04%>
	<org.jgrapht.graph.EqualsAndHashCodeTest: void testGraphsWithNonIntrusiveEdge()>:
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:187, 3.90%>
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:188, 6.49%>
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:190, 7.79%>
	<org.jgrapht.graph.EqualsAndHashCodeTest: void testGrapshWithCustomEdges()>:
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:268, 7.69%>
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:269, 12.82%>
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:271, 15.38%>
	<org.jgrapht.graph.EqualsAndHashCodeTest: void testPseudograph()>:
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:230, 5.08%>
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:231, 8.47%>
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:233, 10.17%>
	<org.jgrapht.graph.EqualsAndHashCodeTest: void testSimpleGraph()>:
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:148, 6.52%>
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:149, 10.87%>
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:151, 13.04%>
	<org.jgrapht.graph.GenericGraphsTest: void testAlissaHacker()>:
		<org.jgrapht.graph.GenericGraphsTest.java:134, 83.33%>
	<org.jgrapht.graph.SimpleDirectedGraphTest: void testIncomingOutgoingEdgesOf()>:
		<org.jgrapht.graph.SimpleDirectedGraphTest.java:315, 128.57%>
	<org.jgrapht.graph.SubgraphTest: void testInducedSubgraphUnderlyingEdgeAddition()>:
		<org.jgrapht.graph.SubgraphTest.java:192, 20.00%>
	<org.jgrapht.traverse.AbstractGraphIteratorTest: void testDirectedGraph()>:
		<org.jgrapht.traverse.AbstractGraphIteratorTest.java:86, 47.06%>
		<org.jgrapht.traverse.AbstractGraphIteratorTest.java:88, 52.94%>
	<org.jgrapht.traverse.ClosestFirstIteratorTest: void testNoStart()>:
		<org.jgrapht.traverse.ClosestFirstIteratorTest.java:103, 53.85%>
	<org.jgrapht.traverse.ClosestFirstIteratorTest: void testRadius()>:
		<org.jgrapht.traverse.ClosestFirstIteratorTest.java:80, 53.85%>
	<org.jgrapht.traverse.DepthFirstIteratorTest: void testBug1169182()>:
		<org.jgrapht.traverse.DepthFirstIteratorTest.java:149, 16.00%>
	<org.jgrapht.traverse.TopologicalOrderIteratorTest: void testEmptyGraph()>:
		<org.jgrapht.traverse.TopologicalOrderIteratorTest.java:136, 50.00%>
	<org.jgrapht.traverse.TopologicalOrderIteratorTest: void testRecipe()>:
		<org.jgrapht.traverse.TopologicalOrderIteratorTest.java:109, 9.62%>
		<org.jgrapht.traverse.TopologicalOrderIteratorTest.java:121, 9.62%>
	<org.jgrapht.util.FibonacciHeapTest: void testGrowReplaceShrink()>:
		<org.jgrapht.util.FibonacciHeapTest.java:88, 17.65%>
		<org.jgrapht.util.FibonacciHeapTest.java:91, 17.65%>

Relevant Assertion clone sets (7):
Set (score: 1.00, ccsize: 2, packages: 1, classes: 1): 
	<org.jgrapht.alg.VertexCoversTest: void testFind2ApproximationCover()>:
		<org.jgrapht.alg.VertexCoversTest.java:74, 60.00%>
	<org.jgrapht.alg.VertexCoversTest: void testFindGreedyCover()>:
		<org.jgrapht.alg.VertexCoversTest.java:89, 50.00%>
Set (score: 1.00, ccsize: 2, packages: 1, classes: 1): 
	<org.jgrapht.experimental.GraphReaderTest: void testGraphReader()>:
		<org.jgrapht.experimental.GraphReaderTest.java:88, 27.27%>
	<org.jgrapht.experimental.GraphReaderTest: void testGraphReaderWeighted()>:
		<org.jgrapht.experimental.GraphReaderTest.java:116, 23.08%>
Set (score: 0.67, ccsize: 2, packages: 1, classes: 2): 
	<org.jgrapht.ext.DOTExporterTest: void testUndirected()>:
		<org.jgrapht.ext.DOTExporterTest.java:110, 41.67%>
	<org.jgrapht.ext.GmlExporterTest: void testUndirected()>:
		<org.jgrapht.ext.GmlExporterTest.java:117, 62.50%>
Set (score: 0.67, ccsize: 2, packages: 1, classes: 1): 
	<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest: void testBipartiteMatching1()>:
		<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest.java:86, 6.76%>
	<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest: void testBipartiteMatching2()>:
		<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest.java:115, 5.21%>
Set (score: 0.50, ccsize: 4, packages: 1, classes: 1): 
	<org.jgrapht.graph.EqualsAndHashCodeTest: void testDefaultDirectedGraph()>:
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:106, 10.87%>
	<org.jgrapht.graph.EqualsAndHashCodeTest: void testGraphsWithNonIntrusiveEdge()>:
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:188, 6.49%>
Set (score: 0.50, ccsize: 4, packages: 1, classes: 1): 
	<org.jgrapht.graph.EqualsAndHashCodeTest: void testGrapshWithCustomEdges()>:
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:269, 12.82%>
	<org.jgrapht.graph.EqualsAndHashCodeTest: void testSimpleGraph()>:
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:149, 10.87%>
Set (score: 0.50, ccsize: 2, packages: 1, classes: 1): 
	<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest: void testBipartiteMatching1()>:
		<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest.java:83, 6.76%>
	<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest: void testBipartiteMatching2()>:
		<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest.java:112, 5.21%>
==============================================

[116] Set (editDistance: 2, isComplete: false, packages: 11, classes: 32): 
Centroid (size: 2): <org.jgrapht.alg.BlockCutpointGraphTest: void testGetBlock(org.jgrapht.alg.BlockCutpointGraph)>

Methods (65): 
	<org.jgrapht.alg.BiconnectivityInspectorTest: void testLinearGraph(int)>:
		<org.jgrapht.alg.BiconnectivityInspectorTest.java:88, 40.00%>
		<org.jgrapht.alg.BiconnectivityInspectorTest.java:89, 40.00%>
	<org.jgrapht.alg.BiconnectivityInspectorTest: void testNotBiconnected()>:
		<org.jgrapht.alg.BiconnectivityInspectorTest.java:100, 55.56%>
		<org.jgrapht.alg.BiconnectivityInspectorTest.java:101, 55.56%>
	<org.jgrapht.alg.BlockCutpointGraphTest: void testBiconnected()>:
		<org.jgrapht.alg.BlockCutpointGraphTest.java:67, 41.67%>
		<org.jgrapht.alg.BlockCutpointGraphTest.java:71, 41.67%>
	<org.jgrapht.alg.BlockCutpointGraphTest: void testGetBlock(org.jgrapht.alg.BlockCutpointGraph)>:
		<org.jgrapht.alg.BlockCutpointGraphTest.java:88, 33.33%>
		<org.jgrapht.alg.BlockCutpointGraphTest.java:94, 19.05%>
	<org.jgrapht.alg.BlockCutpointGraphTest: void testLinearGraph(int)>:
		<org.jgrapht.alg.BlockCutpointGraphTest.java:121, 33.33%>
		<org.jgrapht.alg.BlockCutpointGraphTest.java:125, 33.33%>
	<org.jgrapht.alg.BlockCutpointGraphTest: void testNotBiconnected()>:
		<org.jgrapht.alg.BlockCutpointGraphTest.java:135, 41.67%>
		<org.jgrapht.alg.BlockCutpointGraphTest.java:139, 41.67%>
	<org.jgrapht.alg.BronKerboschCliqueFinderTest: void testFindAll()>:
		<org.jgrapht.alg.BronKerboschCliqueFinderTest.java:143, 26.32%>
		<org.jgrapht.alg.BronKerboschCliqueFinderTest.java:175, 21.05%>
	<org.jgrapht.alg.BronKerboschCliqueFinderTest: void testFindBiggest()>:
		<org.jgrapht.alg.BronKerboschCliqueFinderTest.java:119, 41.67%>
		<org.jgrapht.alg.BronKerboschCliqueFinderTest.java:129, 58.33%>
	<org.jgrapht.alg.ConnectivityInspectorTest: void testDirectedGraph()>:
		<org.jgrapht.alg.ConnectivityInspectorTest.java:139, 57.14%>
		<org.jgrapht.alg.ConnectivityInspectorTest.java:143, 57.14%>
	<org.jgrapht.alg.EdmondsBlossomShrinkingTest: void testOne()>:
		<org.jgrapht.alg.EdmondsBlossomShrinkingTest.java:80, 23.81%>
		<org.jgrapht.alg.EdmondsBlossomShrinkingTest.java:81, 19.05%>
		<org.jgrapht.alg.EdmondsBlossomShrinkingTest.java:82, 19.05%>
	<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest: void testBipartiteMatching1()>:
		<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest.java:83, 6.76%>
		<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest.java:86, 6.76%>
	<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest: void testBipartiteMatching2()>:
		<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest.java:112, 5.21%>
		<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest.java:115, 5.21%>
	<org.jgrapht.alg.KSPDiscardsValidPathsTest: void testNot3connectedGraph()>:
		<org.jgrapht.alg.KSPDiscardsValidPathsTest.java:102, 87.50%>
	<org.jgrapht.alg.KSPExampleTest: void testFourReturnedPathsJGraphT()>:
		<org.jgrapht.alg.KSPExampleTest.java:60, 55.56%>
	<org.jgrapht.alg.KSPExampleTest: void testThreeReturnedPathsJGraphT()>:
		<org.jgrapht.alg.KSPExampleTest.java:72, 60.00%>
	<org.jgrapht.alg.KSPExampleTest: void testTwoReturnedPathsJGraphT()>:
		<org.jgrapht.alg.KSPExampleTest.java:84, 60.00%>
	<org.jgrapht.alg.KShortestPathKValuesTest: void verifyNbPathsForAllPairsOfVertices(org.jgrapht.Graph)>:
		<org.jgrapht.alg.KShortestPathKValuesTest.java:148, 36.84%>
	<org.jgrapht.alg.StoerWagnerMinimumCutTest: void testMinCut14()>:
		<org.jgrapht.alg.StoerWagnerMinimumCutTest.java:97, 16.67%>
	<org.jgrapht.alg.StoerWagnerMinimumCutTest: void testMinCutDisconnected()>:
		<org.jgrapht.alg.StoerWagnerMinimumCutTest.java:124, 22.73%>
	<org.jgrapht.alg.TransitiveClosureTest: void testLinearGraph()>:
		<org.jgrapht.alg.TransitiveClosureTest.java:75, 47.83%>
		<org.jgrapht.alg.TransitiveClosureTest.java:78, 43.48%>
	<org.jgrapht.alg.TransitiveClosureTest: void testRingGraph()>:
		<org.jgrapht.alg.TransitiveClosureTest.java:107, 45.45%>
		<org.jgrapht.alg.TransitiveClosureTest.java:110, 50.00%>
	<org.jgrapht.alg.util.UnionFindTest: void testIdentical(java.lang.String[],java.util.ArrayList,org.jgrapht.alg.util.UnionFind)>:
		<org.jgrapht.alg.util.UnionFindTest.java:131, 41.18%>
	<org.jgrapht.experimental.GraphReaderTest: void testGraphReader()>:
		<org.jgrapht.experimental.GraphReaderTest.java:88, 27.27%>
	<org.jgrapht.experimental.GraphReaderTest: void testGraphReaderWeighted()>:
		<org.jgrapht.experimental.GraphReaderTest.java:116, 23.08%>
	<org.jgrapht.experimental.dag.DirectedAcyclicGraphTest: void testTopoIterationOrderLinearGraph()>:
		<org.jgrapht.experimental.dag.DirectedAcyclicGraphTest.java:181, 29.41%>
		<org.jgrapht.experimental.dag.DirectedAcyclicGraphTest.java:182, 41.18%>
	<org.jgrapht.experimental.isomorphism.IsomorphismInspectorTest: void assertIsomorphicStopAfterFirstMatch(org.jgrapht.Graph[],boolean,boolean,org.jgrapht.experimental.equivalence.EquivalenceComparator,org.jgrapht.experimental.equivalence.EquivalenceComparator)>:
		<org.jgrapht.experimental.isomorphism.IsomorphismInspectorTest.java:485, 14.71%>
	<org.jgrapht.experimental.permutation.CompoundPermutationIterTest: void testGetNext()>:
		<org.jgrapht.experimental.permutation.CompoundPermutationIterTest.java:96, 40.00%>
		<org.jgrapht.experimental.permutation.CompoundPermutationIterTest.java:127, 40.00%>
	<org.jgrapht.ext.DOTExporterTest: void testUndirected()>:
		<org.jgrapht.ext.DOTExporterTest.java:110, 41.67%>
	<org.jgrapht.ext.DOTExporterTest: void testValidNodeIDs()>:
		<org.jgrapht.ext.DOTExporterTest.java:149, 16.00%>
	<org.jgrapht.ext.GmlExporterTest: void testUndirected()>:
		<org.jgrapht.ext.GmlExporterTest.java:117, 62.50%>
	<org.jgrapht.ext.MatrixExporterTest: void testAdjacencyDirected()>:
		<org.jgrapht.ext.MatrixExporterTest.java:149, 62.50%>
	<org.jgrapht.ext.MatrixExporterTest: void testAdjacencyUndirected()>:
		<org.jgrapht.ext.MatrixExporterTest.java:133, 62.50%>
	<org.jgrapht.ext.MatrixExporterTest: void testLaplacian()>:
		<org.jgrapht.ext.MatrixExporterTest.java:113, 38.46%>
		<org.jgrapht.ext.MatrixExporterTest.java:117, 38.46%>
	<org.jgrapht.generate.GraphGeneratorTest: void testCompleteBipartiteGraphGenerator()>:
		<org.jgrapht.generate.GraphGeneratorTest.java:243, 50.00%>
		<org.jgrapht.generate.GraphGeneratorTest.java:244, 50.00%>
	<org.jgrapht.generate.GraphGeneratorTest: void testCompleteGraphGenerator()>:
		<org.jgrapht.generate.GraphGeneratorTest.java:185, 62.50%>
	<org.jgrapht.generate.GraphGeneratorTest: void testEmptyGraphGenerator()>:
		<org.jgrapht.generate.GraphGeneratorTest.java:90, 38.46%>
		<org.jgrapht.generate.GraphGeneratorTest.java:91, 38.46%>
		<org.jgrapht.generate.GraphGeneratorTest.java:92, 23.08%>
	<org.jgrapht.generate.GraphGeneratorTest: void testHyperCubeGraphGenerator()>:
		<org.jgrapht.generate.GraphGeneratorTest.java:265, 50.00%>
		<org.jgrapht.generate.GraphGeneratorTest.java:266, 50.00%>
	<org.jgrapht.generate.GraphGeneratorTest: void testStarGraphGenerator()>:
		<org.jgrapht.generate.GraphGeneratorTest.java:287, 35.71%>
		<org.jgrapht.generate.GraphGeneratorTest.java:288, 35.71%>
		<org.jgrapht.generate.GraphGeneratorTest.java:289, 42.86%>
	<org.jgrapht.generate.RandomGraphGeneratorTest: void testBadVertexFactory()>:
		<org.jgrapht.generate.RandomGraphGeneratorTest.java:106, 12.50%>
	<org.jgrapht.graph.AsUndirectedGraphTest: void testAddEdge()>:
		<org.jgrapht.graph.AsUndirectedGraphTest.java:89, 100.00%>
	<org.jgrapht.graph.AsUndirectedGraphTest: void testAddVertex()>:
		<org.jgrapht.graph.AsUndirectedGraphTest.java:102, 85.71%>
		<org.jgrapht.graph.AsUndirectedGraphTest.java:103, 100.00%>
	<org.jgrapht.graph.AsUndirectedGraphTest: void testGetEdge()>:
		<org.jgrapht.graph.AsUndirectedGraphTest.java:137, 44.00%>
		<org.jgrapht.graph.AsUndirectedGraphTest.java:140, 68.00%>
		<org.jgrapht.graph.AsUndirectedGraphTest.java:144, 92.00%>
	<org.jgrapht.graph.AsUndirectedGraphTest: void testRemoveEdge()>:
		<org.jgrapht.graph.AsUndirectedGraphTest.java:155, 88.89%>
		<org.jgrapht.graph.AsUndirectedGraphTest.java:156, 111.11%>
	<org.jgrapht.graph.AsUndirectedGraphTest: void testRemoveVertex()>:
		<org.jgrapht.graph.AsUndirectedGraphTest.java:165, 88.89%>
		<org.jgrapht.graph.AsUndirectedGraphTest.java:166, 111.11%>
	<org.jgrapht.graph.DefaultDirectedGraphTest: void testEdgesOf()>:
		<org.jgrapht.graph.DefaultDirectedGraphTest.java:117, 75.00%>
		<org.jgrapht.graph.DefaultDirectedGraphTest.java:118, 75.00%>
	<org.jgrapht.graph.DefaultDirectedGraphTest: void testGetAllEdges()>:
		<org.jgrapht.graph.DefaultDirectedGraphTest.java:130, 100.00%>
	<org.jgrapht.graph.DefaultDirectedGraphTest: void testInDegreeOf()>:
		<org.jgrapht.graph.DefaultDirectedGraphTest.java:141, 83.33%>
		<org.jgrapht.graph.DefaultDirectedGraphTest.java:142, 83.33%>
	<org.jgrapht.graph.DefaultDirectedGraphTest: void testOutDegreeOf()>:
		<org.jgrapht.graph.DefaultDirectedGraphTest.java:153, 83.33%>
		<org.jgrapht.graph.DefaultDirectedGraphTest.java:154, 83.33%>
	<org.jgrapht.graph.EqualsAndHashCodeTest: void testDefaultDirectedGraph()>:
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:105, 6.52%>
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:106, 10.87%>
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:108, 13.04%>
	<org.jgrapht.graph.EqualsAndHashCodeTest: void testGraphsWithNonIntrusiveEdge()>:
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:187, 3.90%>
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:188, 6.49%>
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:190, 7.79%>
	<org.jgrapht.graph.EqualsAndHashCodeTest: void testGrapshWithCustomEdges()>:
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:268, 7.69%>
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:269, 12.82%>
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:271, 15.38%>
	<org.jgrapht.graph.EqualsAndHashCodeTest: void testPseudograph()>:
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:230, 5.08%>
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:231, 8.47%>
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:233, 10.17%>
	<org.jgrapht.graph.EqualsAndHashCodeTest: void testSimpleGraph()>:
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:148, 6.52%>
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:149, 10.87%>
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:151, 13.04%>
	<org.jgrapht.graph.GenericGraphsTest: void testAlissaHacker()>:
		<org.jgrapht.graph.GenericGraphsTest.java:134, 83.33%>
	<org.jgrapht.graph.GenericGraphsTest: void testEqualButNotSameVertex()>:
		<org.jgrapht.graph.GenericGraphsTest.java:145, 40.00%>
		<org.jgrapht.graph.GenericGraphsTest.java:146, 40.00%>
	<org.jgrapht.graph.SubgraphTest: void testInducedSubgraphUnderlyingEdgeAddition()>:
		<org.jgrapht.graph.SubgraphTest.java:192, 20.00%>
	<org.jgrapht.traverse.AbstractGraphIteratorTest: void testDirectedGraph()>:
		<org.jgrapht.traverse.AbstractGraphIteratorTest.java:86, 47.06%>
		<org.jgrapht.traverse.AbstractGraphIteratorTest.java:88, 52.94%>
	<org.jgrapht.traverse.ClosestFirstIteratorTest: void testNoStart()>:
		<org.jgrapht.traverse.ClosestFirstIteratorTest.java:103, 53.85%>
	<org.jgrapht.traverse.ClosestFirstIteratorTest: void testRadius()>:
		<org.jgrapht.traverse.ClosestFirstIteratorTest.java:80, 53.85%>
	<org.jgrapht.traverse.DepthFirstIteratorTest: void testBug1169182()>:
		<org.jgrapht.traverse.DepthFirstIteratorTest.java:149, 16.00%>
	<org.jgrapht.traverse.TopologicalOrderIteratorTest: void testEmptyGraph()>:
		<org.jgrapht.traverse.TopologicalOrderIteratorTest.java:136, 50.00%>
	<org.jgrapht.traverse.TopologicalOrderIteratorTest: void testRecipe()>:
		<org.jgrapht.traverse.TopologicalOrderIteratorTest.java:109, 9.62%>
		<org.jgrapht.traverse.TopologicalOrderIteratorTest.java:121, 9.62%>
	<org.jgrapht.util.FibonacciHeapTest: void testGrowReplaceShrink()>:
		<org.jgrapht.util.FibonacciHeapTest.java:88, 17.65%>
		<org.jgrapht.util.FibonacciHeapTest.java:91, 17.65%>
	<org.jgrapht.util.PrefetchIteratorTest: void testEnumInterface()>:
		<org.jgrapht.util.PrefetchIteratorTest.java:71, 33.33%>
		<org.jgrapht.util.PrefetchIteratorTest.java:72, 41.67%>
		<org.jgrapht.util.PrefetchIteratorTest.java:74, 33.33%>
		<org.jgrapht.util.PrefetchIteratorTest.java:81, 16.67%>
	<org.jgrapht.util.PrefetchIteratorTest: void testIteratorInterface()>:
		<org.jgrapht.util.PrefetchIteratorTest.java:54, 33.33%>
		<org.jgrapht.util.PrefetchIteratorTest.java:55, 41.67%>
		<org.jgrapht.util.PrefetchIteratorTest.java:57, 33.33%>
		<org.jgrapht.util.PrefetchIteratorTest.java:64, 16.67%>

Relevant Assertion clone sets (9):
Set (score: 1.00, ccsize: 2, packages: 1, classes: 1): 
	<org.jgrapht.experimental.GraphReaderTest: void testGraphReader()>:
		<org.jgrapht.experimental.GraphReaderTest.java:88, 27.27%>
	<org.jgrapht.experimental.GraphReaderTest: void testGraphReaderWeighted()>:
		<org.jgrapht.experimental.GraphReaderTest.java:116, 23.08%>
Set (score: 0.67, ccsize: 3, packages: 1, classes: 2): 
	<org.jgrapht.alg.BiconnectivityInspectorTest: void testLinearGraph(int)>:
		<org.jgrapht.alg.BiconnectivityInspectorTest.java:88, 40.00%>
	<org.jgrapht.alg.BlockCutpointGraphTest: void testLinearGraph(int)>:
		<org.jgrapht.alg.BlockCutpointGraphTest.java:121, 33.33%>
		<org.jgrapht.alg.BlockCutpointGraphTest.java:125, 33.33%>
Set (score: 0.67, ccsize: 3, packages: 1, classes: 2): 
	<org.jgrapht.alg.BiconnectivityInspectorTest: void testNotBiconnected()>:
		<org.jgrapht.alg.BiconnectivityInspectorTest.java:100, 55.56%>
	<org.jgrapht.alg.BlockCutpointGraphTest: void testNotBiconnected()>:
		<org.jgrapht.alg.BlockCutpointGraphTest.java:135, 41.67%>
		<org.jgrapht.alg.BlockCutpointGraphTest.java:139, 41.67%>
Set (score: 0.67, ccsize: 2, packages: 1, classes: 2): 
	<org.jgrapht.ext.DOTExporterTest: void testUndirected()>:
		<org.jgrapht.ext.DOTExporterTest.java:110, 41.67%>
	<org.jgrapht.ext.GmlExporterTest: void testUndirected()>:
		<org.jgrapht.ext.GmlExporterTest.java:117, 62.50%>
Set (score: 0.67, ccsize: 2, packages: 1, classes: 1): 
	<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest: void testBipartiteMatching1()>:
		<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest.java:86, 6.76%>
	<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest: void testBipartiteMatching2()>:
		<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest.java:115, 5.21%>
Set (score: 0.50, ccsize: 4, packages: 1, classes: 1): 
	<org.jgrapht.graph.EqualsAndHashCodeTest: void testDefaultDirectedGraph()>:
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:106, 10.87%>
	<org.jgrapht.graph.EqualsAndHashCodeTest: void testGraphsWithNonIntrusiveEdge()>:
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:188, 6.49%>
Set (score: 0.50, ccsize: 4, packages: 1, classes: 1): 
	<org.jgrapht.graph.EqualsAndHashCodeTest: void testGrapshWithCustomEdges()>:
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:269, 12.82%>
	<org.jgrapht.graph.EqualsAndHashCodeTest: void testSimpleGraph()>:
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:149, 10.87%>
Set (score: 0.50, ccsize: 3, packages: 1, classes: 1): 
	<org.jgrapht.alg.KSPExampleTest: void testFourReturnedPathsJGraphT()>:
		<org.jgrapht.alg.KSPExampleTest.java:60, 55.56%>
	<org.jgrapht.alg.KSPExampleTest: void testThreeReturnedPathsJGraphT()>:
		<org.jgrapht.alg.KSPExampleTest.java:72, 60.00%>
	<org.jgrapht.alg.KSPExampleTest: void testTwoReturnedPathsJGraphT()>:
		<org.jgrapht.alg.KSPExampleTest.java:84, 60.00%>
Set (score: 0.50, ccsize: 2, packages: 1, classes: 1): 
	<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest: void testBipartiteMatching1()>:
		<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest.java:83, 6.76%>
	<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest: void testBipartiteMatching2()>:
		<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest.java:112, 5.21%>
==============================================

[117] Set (editDistance: 2, isComplete: false, packages: 12, classes: 35): 
Centroid (size: 2): <org.jgrapht.alg.BlockCutpointGraphTest: void testLinearGraph(int)>

Methods (66): 
	<org.jgrapht.EnhancedTestCase: void assertFalse()>:
		<org.jgrapht.EnhancedTestCase.java:79, 100.00%>
	<org.jgrapht.EnhancedTestCase: void assertTrue()>:
		<org.jgrapht.EnhancedTestCase.java:87, 100.00%>
	<org.jgrapht.alg.BellmanFordShortestPathTest: void testWithNegativeEdges()>:
		<org.jgrapht.alg.BellmanFordShortestPathTest.java:120, 45.45%>
		<org.jgrapht.alg.BellmanFordShortestPathTest.java:127, 63.64%>
	<org.jgrapht.alg.BlockCutpointGraphTest: void testGetBlock(org.jgrapht.alg.BlockCutpointGraph)>:
		<org.jgrapht.alg.BlockCutpointGraphTest.java:88, 33.33%>
		<org.jgrapht.alg.BlockCutpointGraphTest.java:94, 19.05%>
	<org.jgrapht.alg.BlockCutpointGraphTest: void testLinearGraph(int)>:
		<org.jgrapht.alg.BlockCutpointGraphTest.java:121, 33.33%>
		<org.jgrapht.alg.BlockCutpointGraphTest.java:125, 33.33%>
	<org.jgrapht.alg.ConnectivityInspectorTest: void testDirectedGraph()>:
		<org.jgrapht.alg.ConnectivityInspectorTest.java:139, 57.14%>
		<org.jgrapht.alg.ConnectivityInspectorTest.java:143, 57.14%>
	<org.jgrapht.alg.ConnectivityInspectorTest: void testStronglyConnected4()>:
		<org.jgrapht.alg.ConnectivityInspectorTest.java:371, 30.77%>
	<org.jgrapht.alg.EdmondsBlossomShrinkingTest: void testOne()>:
		<org.jgrapht.alg.EdmondsBlossomShrinkingTest.java:80, 23.81%>
		<org.jgrapht.alg.EdmondsBlossomShrinkingTest.java:81, 19.05%>
		<org.jgrapht.alg.EdmondsBlossomShrinkingTest.java:82, 19.05%>
	<org.jgrapht.alg.FloydWarshallShortestPathsTest: void testCompareWithDijkstra()>:
		<org.jgrapht.alg.FloydWarshallShortestPathsTest.java:96, 7.41%>
		<org.jgrapht.alg.FloydWarshallShortestPathsTest.java:121, 7.41%>
	<org.jgrapht.alg.FloydWarshallShortestPathsTest: void testDiameter()>:
		<org.jgrapht.alg.FloydWarshallShortestPathsTest.java:161, 57.14%>
	<org.jgrapht.alg.FloydWarshallShortestPathsTest: void testEdgeLessDiameter()>:
		<org.jgrapht.alg.FloydWarshallShortestPathsTest.java:182, 40.00%>
	<org.jgrapht.alg.FloydWarshallShortestPathsTest: void testEmptyDiameter()>:
		<org.jgrapht.alg.FloydWarshallShortestPathsTest.java:170, 50.00%>
	<org.jgrapht.alg.HamiltonianCycleTest: void testHamiltonianCycle()>:
		<org.jgrapht.alg.HamiltonianCycleTest.java:79, 33.33%>
		<org.jgrapht.alg.HamiltonianCycleTest.java:89, 27.78%>
	<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest: void testBipartiteMatching1()>:
		<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest.java:83, 6.76%>
		<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest.java:86, 6.76%>
	<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest: void testBipartiteMatching2()>:
		<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest.java:112, 5.21%>
		<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest.java:115, 5.21%>
	<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest: void testEmptyMatching()>:
		<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest.java:128, 33.33%>
	<org.jgrapht.alg.KSPDiscardsValidPathsTest: void testNot3connectedGraph()>:
		<org.jgrapht.alg.KSPDiscardsValidPathsTest.java:102, 87.50%>
	<org.jgrapht.alg.KShortestPathCostTest: void verifyShortestPathsInIncreasingOrderOfWeight(org.jgrapht.Graph)>:
		<org.jgrapht.alg.KShortestPathCostTest.java:222, 30.77%>
		<org.jgrapht.alg.KShortestPathCostTest.java:225, 30.77%>
	<org.jgrapht.alg.KShortestPathCostTest: void verifyWeightsConsistency(java.util.List,java.util.List)>:
		<org.jgrapht.alg.KShortestPathCostTest.java:294, 53.85%>
	<org.jgrapht.alg.KShortestPathKValuesTest: void verifyNbPathsForAllPairsOfVertices(org.jgrapht.Graph)>:
		<org.jgrapht.alg.KShortestPathKValuesTest.java:148, 36.84%>
	<org.jgrapht.alg.KruskalMinimumSpanningTreeTest: void testMinimumSpanningTree()>:
		<org.jgrapht.alg.KruskalMinimumSpanningTreeTest.java:80, 19.05%>
		<org.jgrapht.alg.KruskalMinimumSpanningTreeTest.java:84, 38.10%>
	<org.jgrapht.alg.StoerWagnerMinimumCutTest: void testMinCut14()>:
		<org.jgrapht.alg.StoerWagnerMinimumCutTest.java:97, 16.67%>
	<org.jgrapht.alg.StoerWagnerMinimumCutTest: void testMinCutDisconnected()>:
		<org.jgrapht.alg.StoerWagnerMinimumCutTest.java:124, 22.73%>
	<org.jgrapht.alg.TransitiveClosureTest: void testLinearGraph()>:
		<org.jgrapht.alg.TransitiveClosureTest.java:75, 47.83%>
		<org.jgrapht.alg.TransitiveClosureTest.java:78, 43.48%>
	<org.jgrapht.alg.TransitiveClosureTest: void testRingGraph()>:
		<org.jgrapht.alg.TransitiveClosureTest.java:107, 45.45%>
		<org.jgrapht.alg.TransitiveClosureTest.java:110, 50.00%>
	<org.jgrapht.alg.VertexCoversTest: void testFind2ApproximationCover()>:
		<org.jgrapht.alg.VertexCoversTest.java:74, 60.00%>
	<org.jgrapht.alg.VertexCoversTest: void testFindGreedyCover()>:
		<org.jgrapht.alg.VertexCoversTest.java:89, 50.00%>
	<org.jgrapht.alg.util.UnionFindTest: void testIdentical(java.lang.String[],java.util.ArrayList,org.jgrapht.alg.util.UnionFind)>:
		<org.jgrapht.alg.util.UnionFindTest.java:131, 41.18%>
	<org.jgrapht.experimental.GraphReaderTest: void testGraphReader()>:
		<org.jgrapht.experimental.GraphReaderTest.java:88, 27.27%>
	<org.jgrapht.experimental.GraphReaderTest: void testGraphReaderWeighted()>:
		<org.jgrapht.experimental.GraphReaderTest.java:116, 23.08%>
	<org.jgrapht.experimental.alg.ColoringTest: void testBacktrackColoring()>:
		<org.jgrapht.experimental.alg.ColoringTest.java:97, 50.00%>
	<org.jgrapht.experimental.alg.ColoringTest: void testGreedyColoring()>:
		<org.jgrapht.experimental.alg.ColoringTest.java:77, 50.00%>
	<org.jgrapht.experimental.dag.DirectedAcyclicGraphTest: void testTopoIterationOrderLinearGraph()>:
		<org.jgrapht.experimental.dag.DirectedAcyclicGraphTest.java:181, 29.41%>
		<org.jgrapht.experimental.dag.DirectedAcyclicGraphTest.java:182, 41.18%>
	<org.jgrapht.experimental.isomorphism.IsomorphismInspectorTest: void assertIsomorphic(org.jgrapht.Graph[],boolean,org.jgrapht.experimental.equivalence.EquivalenceComparator,org.jgrapht.experimental.equivalence.EquivalenceComparator)>:
		<org.jgrapht.experimental.isomorphism.IsomorphismInspectorTest.java:138, 28.57%>
		<org.jgrapht.experimental.isomorphism.IsomorphismInspectorTest.java:140, 28.57%>
	<org.jgrapht.experimental.isomorphism.IsomorphismInspectorTest: void assertIsomorphicStopAfterFirstMatch(org.jgrapht.Graph[],boolean,boolean,org.jgrapht.experimental.equivalence.EquivalenceComparator,org.jgrapht.experimental.equivalence.EquivalenceComparator)>:
		<org.jgrapht.experimental.isomorphism.IsomorphismInspectorTest.java:485, 14.71%>
	<org.jgrapht.ext.DOTExporterTest: void testUndirected()>:
		<org.jgrapht.ext.DOTExporterTest.java:110, 41.67%>
	<org.jgrapht.ext.DOTExporterTest: void testValidNodeIDs()>:
		<org.jgrapht.ext.DOTExporterTest.java:149, 16.00%>
	<org.jgrapht.ext.GmlExporterTest: void testUndirected()>:
		<org.jgrapht.ext.GmlExporterTest.java:117, 62.50%>
	<org.jgrapht.ext.MatrixExporterTest: void testAdjacencyDirected()>:
		<org.jgrapht.ext.MatrixExporterTest.java:149, 62.50%>
	<org.jgrapht.ext.MatrixExporterTest: void testAdjacencyUndirected()>:
		<org.jgrapht.ext.MatrixExporterTest.java:133, 62.50%>
	<org.jgrapht.ext.MatrixExporterTest: void testLaplacian()>:
		<org.jgrapht.ext.MatrixExporterTest.java:113, 38.46%>
		<org.jgrapht.ext.MatrixExporterTest.java:117, 38.46%>
	<org.jgrapht.generate.RandomGraphGeneratorTest: void testBadVertexFactory()>:
		<org.jgrapht.generate.RandomGraphGeneratorTest.java:106, 12.50%>
	<org.jgrapht.generate.RandomGraphGeneratorTest: void testGenerateDirectedGraph()>:
		<org.jgrapht.generate.RandomGraphGeneratorTest.java:70, 20.00%>
	<org.jgrapht.generate.RandomGraphGeneratorTest: void testGenerateListenableUndirectedGraph()>:
		<org.jgrapht.generate.RandomGraphGeneratorTest.java:89, 20.00%>
	<org.jgrapht.graph.AsUndirectedGraphTest: void testAddEdge()>:
		<org.jgrapht.graph.AsUndirectedGraphTest.java:89, 100.00%>
	<org.jgrapht.graph.AsUndirectedGraphTest: void testAddVertex()>:
		<org.jgrapht.graph.AsUndirectedGraphTest.java:102, 85.71%>
		<org.jgrapht.graph.AsUndirectedGraphTest.java:103, 100.00%>
	<org.jgrapht.graph.AsUndirectedGraphTest: void testDegreeOf()>:
		<org.jgrapht.graph.AsUndirectedGraphTest.java:111, 46.15%>
		<org.jgrapht.graph.AsUndirectedGraphTest.java:112, 61.54%>
		<org.jgrapht.graph.AsUndirectedGraphTest.java:113, 76.92%>
		<org.jgrapht.graph.AsUndirectedGraphTest.java:114, 92.31%>
	<org.jgrapht.graph.AsUndirectedGraphTest: void testGetAllEdges()>:
		<org.jgrapht.graph.AsUndirectedGraphTest.java:123, 40.00%>
		<org.jgrapht.graph.AsUndirectedGraphTest.java:124, 65.00%>
		<org.jgrapht.graph.AsUndirectedGraphTest.java:128, 70.00%>
		<org.jgrapht.graph.AsUndirectedGraphTest.java:129, 80.00%>
	<org.jgrapht.graph.AsUndirectedGraphTest: void testRemoveEdge()>:
		<org.jgrapht.graph.AsUndirectedGraphTest.java:155, 88.89%>
		<org.jgrapht.graph.AsUndirectedGraphTest.java:156, 111.11%>
	<org.jgrapht.graph.AsUndirectedGraphTest: void testRemoveVertex()>:
		<org.jgrapht.graph.AsUndirectedGraphTest.java:165, 88.89%>
		<org.jgrapht.graph.AsUndirectedGraphTest.java:166, 111.11%>
	<org.jgrapht.graph.AsUnweightedGraphTest: void constructWeighted(org.jgrapht.WeightedGraph)>:
		<org.jgrapht.graph.AsUnweightedGraphTest.java:110, 57.14%>
	<org.jgrapht.graph.EqualsAndHashCodeTest: void testDefaultDirectedGraph()>:
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:105, 6.52%>
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:106, 10.87%>
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:108, 13.04%>
	<org.jgrapht.graph.EqualsAndHashCodeTest: void testGraphsWithNonIntrusiveEdge()>:
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:187, 3.90%>
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:188, 6.49%>
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:190, 7.79%>
	<org.jgrapht.graph.EqualsAndHashCodeTest: void testGrapshWithCustomEdges()>:
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:268, 7.69%>
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:269, 12.82%>
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:271, 15.38%>
	<org.jgrapht.graph.EqualsAndHashCodeTest: void testPseudograph()>:
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:230, 5.08%>
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:231, 8.47%>
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:233, 10.17%>
	<org.jgrapht.graph.EqualsAndHashCodeTest: void testSimpleGraph()>:
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:148, 6.52%>
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:149, 10.87%>
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:151, 13.04%>
	<org.jgrapht.graph.GenericGraphsTest: void testAlissaHacker()>:
		<org.jgrapht.graph.GenericGraphsTest.java:134, 83.33%>
	<org.jgrapht.graph.SimpleDirectedGraphTest: void testIncomingOutgoingEdgesOf()>:
		<org.jgrapht.graph.SimpleDirectedGraphTest.java:315, 128.57%>
	<org.jgrapht.graph.SubgraphTest: void testInducedSubgraphUnderlyingEdgeAddition()>:
		<org.jgrapht.graph.SubgraphTest.java:192, 20.00%>
	<org.jgrapht.traverse.AbstractGraphIteratorTest: void testDirectedGraph()>:
		<org.jgrapht.traverse.AbstractGraphIteratorTest.java:86, 47.06%>
		<org.jgrapht.traverse.AbstractGraphIteratorTest.java:88, 52.94%>
	<org.jgrapht.traverse.ClosestFirstIteratorTest: void testNoStart()>:
		<org.jgrapht.traverse.ClosestFirstIteratorTest.java:103, 53.85%>
	<org.jgrapht.traverse.ClosestFirstIteratorTest: void testRadius()>:
		<org.jgrapht.traverse.ClosestFirstIteratorTest.java:80, 53.85%>
	<org.jgrapht.traverse.DepthFirstIteratorTest: void testBug1169182()>:
		<org.jgrapht.traverse.DepthFirstIteratorTest.java:149, 16.00%>
	<org.jgrapht.traverse.TopologicalOrderIteratorTest: void testEmptyGraph()>:
		<org.jgrapht.traverse.TopologicalOrderIteratorTest.java:136, 50.00%>
	<org.jgrapht.traverse.TopologicalOrderIteratorTest: void testRecipe()>:
		<org.jgrapht.traverse.TopologicalOrderIteratorTest.java:109, 9.62%>
		<org.jgrapht.traverse.TopologicalOrderIteratorTest.java:121, 9.62%>
	<org.jgrapht.util.FibonacciHeapTest: void testGrowReplaceShrink()>:
		<org.jgrapht.util.FibonacciHeapTest.java:88, 17.65%>
		<org.jgrapht.util.FibonacciHeapTest.java:91, 17.65%>

Relevant Assertion clone sets (7):
Set (score: 1.00, ccsize: 2, packages: 1, classes: 1): 
	<org.jgrapht.alg.VertexCoversTest: void testFind2ApproximationCover()>:
		<org.jgrapht.alg.VertexCoversTest.java:74, 60.00%>
	<org.jgrapht.alg.VertexCoversTest: void testFindGreedyCover()>:
		<org.jgrapht.alg.VertexCoversTest.java:89, 50.00%>
Set (score: 1.00, ccsize: 2, packages: 1, classes: 1): 
	<org.jgrapht.experimental.GraphReaderTest: void testGraphReader()>:
		<org.jgrapht.experimental.GraphReaderTest.java:88, 27.27%>
	<org.jgrapht.experimental.GraphReaderTest: void testGraphReaderWeighted()>:
		<org.jgrapht.experimental.GraphReaderTest.java:116, 23.08%>
Set (score: 0.67, ccsize: 2, packages: 1, classes: 2): 
	<org.jgrapht.ext.DOTExporterTest: void testUndirected()>:
		<org.jgrapht.ext.DOTExporterTest.java:110, 41.67%>
	<org.jgrapht.ext.GmlExporterTest: void testUndirected()>:
		<org.jgrapht.ext.GmlExporterTest.java:117, 62.50%>
Set (score: 0.67, ccsize: 2, packages: 1, classes: 1): 
	<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest: void testBipartiteMatching1()>:
		<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest.java:86, 6.76%>
	<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest: void testBipartiteMatching2()>:
		<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest.java:115, 5.21%>
Set (score: 0.50, ccsize: 4, packages: 1, classes: 1): 
	<org.jgrapht.graph.EqualsAndHashCodeTest: void testDefaultDirectedGraph()>:
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:106, 10.87%>
	<org.jgrapht.graph.EqualsAndHashCodeTest: void testGraphsWithNonIntrusiveEdge()>:
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:188, 6.49%>
Set (score: 0.50, ccsize: 4, packages: 1, classes: 1): 
	<org.jgrapht.graph.EqualsAndHashCodeTest: void testGrapshWithCustomEdges()>:
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:269, 12.82%>
	<org.jgrapht.graph.EqualsAndHashCodeTest: void testSimpleGraph()>:
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:149, 10.87%>
Set (score: 0.50, ccsize: 2, packages: 1, classes: 1): 
	<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest: void testBipartiteMatching1()>:
		<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest.java:83, 6.76%>
	<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest: void testBipartiteMatching2()>:
		<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest.java:112, 5.21%>
==============================================

[118] Set (editDistance: 2, isComplete: false, packages: 12, classes: 35): 
Centroid (size: 2): <org.jgrapht.alg.BlockCutpointGraphTest: void testNotBiconnected()>

Methods (66): 
	<org.jgrapht.EnhancedTestCase: void assertFalse()>:
		<org.jgrapht.EnhancedTestCase.java:79, 100.00%>
	<org.jgrapht.EnhancedTestCase: void assertTrue()>:
		<org.jgrapht.EnhancedTestCase.java:87, 100.00%>
	<org.jgrapht.alg.BellmanFordShortestPathTest: void testWithNegativeEdges()>:
		<org.jgrapht.alg.BellmanFordShortestPathTest.java:120, 45.45%>
		<org.jgrapht.alg.BellmanFordShortestPathTest.java:127, 63.64%>
	<org.jgrapht.alg.BlockCutpointGraphTest: void testGetBlock(org.jgrapht.alg.BlockCutpointGraph)>:
		<org.jgrapht.alg.BlockCutpointGraphTest.java:88, 33.33%>
		<org.jgrapht.alg.BlockCutpointGraphTest.java:94, 19.05%>
	<org.jgrapht.alg.BlockCutpointGraphTest: void testNotBiconnected()>:
		<org.jgrapht.alg.BlockCutpointGraphTest.java:135, 41.67%>
		<org.jgrapht.alg.BlockCutpointGraphTest.java:139, 41.67%>
	<org.jgrapht.alg.ConnectivityInspectorTest: void testDirectedGraph()>:
		<org.jgrapht.alg.ConnectivityInspectorTest.java:139, 57.14%>
		<org.jgrapht.alg.ConnectivityInspectorTest.java:143, 57.14%>
	<org.jgrapht.alg.ConnectivityInspectorTest: void testStronglyConnected4()>:
		<org.jgrapht.alg.ConnectivityInspectorTest.java:371, 30.77%>
	<org.jgrapht.alg.EdmondsBlossomShrinkingTest: void testOne()>:
		<org.jgrapht.alg.EdmondsBlossomShrinkingTest.java:80, 23.81%>
		<org.jgrapht.alg.EdmondsBlossomShrinkingTest.java:81, 19.05%>
		<org.jgrapht.alg.EdmondsBlossomShrinkingTest.java:82, 19.05%>
	<org.jgrapht.alg.FloydWarshallShortestPathsTest: void testCompareWithDijkstra()>:
		<org.jgrapht.alg.FloydWarshallShortestPathsTest.java:96, 7.41%>
		<org.jgrapht.alg.FloydWarshallShortestPathsTest.java:121, 7.41%>
	<org.jgrapht.alg.FloydWarshallShortestPathsTest: void testDiameter()>:
		<org.jgrapht.alg.FloydWarshallShortestPathsTest.java:161, 57.14%>
	<org.jgrapht.alg.FloydWarshallShortestPathsTest: void testEdgeLessDiameter()>:
		<org.jgrapht.alg.FloydWarshallShortestPathsTest.java:182, 40.00%>
	<org.jgrapht.alg.FloydWarshallShortestPathsTest: void testEmptyDiameter()>:
		<org.jgrapht.alg.FloydWarshallShortestPathsTest.java:170, 50.00%>
	<org.jgrapht.alg.HamiltonianCycleTest: void testHamiltonianCycle()>:
		<org.jgrapht.alg.HamiltonianCycleTest.java:79, 33.33%>
		<org.jgrapht.alg.HamiltonianCycleTest.java:89, 27.78%>
	<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest: void testBipartiteMatching1()>:
		<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest.java:83, 6.76%>
		<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest.java:86, 6.76%>
	<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest: void testBipartiteMatching2()>:
		<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest.java:112, 5.21%>
		<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest.java:115, 5.21%>
	<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest: void testEmptyMatching()>:
		<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest.java:128, 33.33%>
	<org.jgrapht.alg.KSPDiscardsValidPathsTest: void testNot3connectedGraph()>:
		<org.jgrapht.alg.KSPDiscardsValidPathsTest.java:102, 87.50%>
	<org.jgrapht.alg.KShortestPathCostTest: void verifyShortestPathsInIncreasingOrderOfWeight(org.jgrapht.Graph)>:
		<org.jgrapht.alg.KShortestPathCostTest.java:222, 30.77%>
		<org.jgrapht.alg.KShortestPathCostTest.java:225, 30.77%>
	<org.jgrapht.alg.KShortestPathCostTest: void verifyWeightsConsistency(java.util.List,java.util.List)>:
		<org.jgrapht.alg.KShortestPathCostTest.java:294, 53.85%>
	<org.jgrapht.alg.KShortestPathKValuesTest: void verifyNbPathsForAllPairsOfVertices(org.jgrapht.Graph)>:
		<org.jgrapht.alg.KShortestPathKValuesTest.java:148, 36.84%>
	<org.jgrapht.alg.KruskalMinimumSpanningTreeTest: void testMinimumSpanningTree()>:
		<org.jgrapht.alg.KruskalMinimumSpanningTreeTest.java:80, 19.05%>
		<org.jgrapht.alg.KruskalMinimumSpanningTreeTest.java:84, 38.10%>
	<org.jgrapht.alg.StoerWagnerMinimumCutTest: void testMinCut14()>:
		<org.jgrapht.alg.StoerWagnerMinimumCutTest.java:97, 16.67%>
	<org.jgrapht.alg.StoerWagnerMinimumCutTest: void testMinCutDisconnected()>:
		<org.jgrapht.alg.StoerWagnerMinimumCutTest.java:124, 22.73%>
	<org.jgrapht.alg.TransitiveClosureTest: void testLinearGraph()>:
		<org.jgrapht.alg.TransitiveClosureTest.java:75, 47.83%>
		<org.jgrapht.alg.TransitiveClosureTest.java:78, 43.48%>
	<org.jgrapht.alg.TransitiveClosureTest: void testRingGraph()>:
		<org.jgrapht.alg.TransitiveClosureTest.java:107, 45.45%>
		<org.jgrapht.alg.TransitiveClosureTest.java:110, 50.00%>
	<org.jgrapht.alg.VertexCoversTest: void testFind2ApproximationCover()>:
		<org.jgrapht.alg.VertexCoversTest.java:74, 60.00%>
	<org.jgrapht.alg.VertexCoversTest: void testFindGreedyCover()>:
		<org.jgrapht.alg.VertexCoversTest.java:89, 50.00%>
	<org.jgrapht.alg.util.UnionFindTest: void testIdentical(java.lang.String[],java.util.ArrayList,org.jgrapht.alg.util.UnionFind)>:
		<org.jgrapht.alg.util.UnionFindTest.java:131, 41.18%>
	<org.jgrapht.experimental.GraphReaderTest: void testGraphReader()>:
		<org.jgrapht.experimental.GraphReaderTest.java:88, 27.27%>
	<org.jgrapht.experimental.GraphReaderTest: void testGraphReaderWeighted()>:
		<org.jgrapht.experimental.GraphReaderTest.java:116, 23.08%>
	<org.jgrapht.experimental.alg.ColoringTest: void testBacktrackColoring()>:
		<org.jgrapht.experimental.alg.ColoringTest.java:97, 50.00%>
	<org.jgrapht.experimental.alg.ColoringTest: void testGreedyColoring()>:
		<org.jgrapht.experimental.alg.ColoringTest.java:77, 50.00%>
	<org.jgrapht.experimental.dag.DirectedAcyclicGraphTest: void testTopoIterationOrderLinearGraph()>:
		<org.jgrapht.experimental.dag.DirectedAcyclicGraphTest.java:181, 29.41%>
		<org.jgrapht.experimental.dag.DirectedAcyclicGraphTest.java:182, 41.18%>
	<org.jgrapht.experimental.isomorphism.IsomorphismInspectorTest: void assertIsomorphic(org.jgrapht.Graph[],boolean,org.jgrapht.experimental.equivalence.EquivalenceComparator,org.jgrapht.experimental.equivalence.EquivalenceComparator)>:
		<org.jgrapht.experimental.isomorphism.IsomorphismInspectorTest.java:138, 28.57%>
		<org.jgrapht.experimental.isomorphism.IsomorphismInspectorTest.java:140, 28.57%>
	<org.jgrapht.experimental.isomorphism.IsomorphismInspectorTest: void assertIsomorphicStopAfterFirstMatch(org.jgrapht.Graph[],boolean,boolean,org.jgrapht.experimental.equivalence.EquivalenceComparator,org.jgrapht.experimental.equivalence.EquivalenceComparator)>:
		<org.jgrapht.experimental.isomorphism.IsomorphismInspectorTest.java:485, 14.71%>
	<org.jgrapht.ext.DOTExporterTest: void testUndirected()>:
		<org.jgrapht.ext.DOTExporterTest.java:110, 41.67%>
	<org.jgrapht.ext.DOTExporterTest: void testValidNodeIDs()>:
		<org.jgrapht.ext.DOTExporterTest.java:149, 16.00%>
	<org.jgrapht.ext.GmlExporterTest: void testUndirected()>:
		<org.jgrapht.ext.GmlExporterTest.java:117, 62.50%>
	<org.jgrapht.ext.MatrixExporterTest: void testAdjacencyDirected()>:
		<org.jgrapht.ext.MatrixExporterTest.java:149, 62.50%>
	<org.jgrapht.ext.MatrixExporterTest: void testAdjacencyUndirected()>:
		<org.jgrapht.ext.MatrixExporterTest.java:133, 62.50%>
	<org.jgrapht.ext.MatrixExporterTest: void testLaplacian()>:
		<org.jgrapht.ext.MatrixExporterTest.java:113, 38.46%>
		<org.jgrapht.ext.MatrixExporterTest.java:117, 38.46%>
	<org.jgrapht.generate.RandomGraphGeneratorTest: void testBadVertexFactory()>:
		<org.jgrapht.generate.RandomGraphGeneratorTest.java:106, 12.50%>
	<org.jgrapht.generate.RandomGraphGeneratorTest: void testGenerateDirectedGraph()>:
		<org.jgrapht.generate.RandomGraphGeneratorTest.java:70, 20.00%>
	<org.jgrapht.generate.RandomGraphGeneratorTest: void testGenerateListenableUndirectedGraph()>:
		<org.jgrapht.generate.RandomGraphGeneratorTest.java:89, 20.00%>
	<org.jgrapht.graph.AsUndirectedGraphTest: void testAddEdge()>:
		<org.jgrapht.graph.AsUndirectedGraphTest.java:89, 100.00%>
	<org.jgrapht.graph.AsUndirectedGraphTest: void testAddVertex()>:
		<org.jgrapht.graph.AsUndirectedGraphTest.java:102, 85.71%>
		<org.jgrapht.graph.AsUndirectedGraphTest.java:103, 100.00%>
	<org.jgrapht.graph.AsUndirectedGraphTest: void testDegreeOf()>:
		<org.jgrapht.graph.AsUndirectedGraphTest.java:111, 46.15%>
		<org.jgrapht.graph.AsUndirectedGraphTest.java:112, 61.54%>
		<org.jgrapht.graph.AsUndirectedGraphTest.java:113, 76.92%>
		<org.jgrapht.graph.AsUndirectedGraphTest.java:114, 92.31%>
	<org.jgrapht.graph.AsUndirectedGraphTest: void testGetAllEdges()>:
		<org.jgrapht.graph.AsUndirectedGraphTest.java:123, 40.00%>
		<org.jgrapht.graph.AsUndirectedGraphTest.java:124, 65.00%>
		<org.jgrapht.graph.AsUndirectedGraphTest.java:128, 70.00%>
		<org.jgrapht.graph.AsUndirectedGraphTest.java:129, 80.00%>
	<org.jgrapht.graph.AsUndirectedGraphTest: void testRemoveEdge()>:
		<org.jgrapht.graph.AsUndirectedGraphTest.java:155, 88.89%>
		<org.jgrapht.graph.AsUndirectedGraphTest.java:156, 111.11%>
	<org.jgrapht.graph.AsUndirectedGraphTest: void testRemoveVertex()>:
		<org.jgrapht.graph.AsUndirectedGraphTest.java:165, 88.89%>
		<org.jgrapht.graph.AsUndirectedGraphTest.java:166, 111.11%>
	<org.jgrapht.graph.AsUnweightedGraphTest: void constructWeighted(org.jgrapht.WeightedGraph)>:
		<org.jgrapht.graph.AsUnweightedGraphTest.java:110, 57.14%>
	<org.jgrapht.graph.EqualsAndHashCodeTest: void testDefaultDirectedGraph()>:
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:105, 6.52%>
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:106, 10.87%>
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:108, 13.04%>
	<org.jgrapht.graph.EqualsAndHashCodeTest: void testGraphsWithNonIntrusiveEdge()>:
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:187, 3.90%>
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:188, 6.49%>
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:190, 7.79%>
	<org.jgrapht.graph.EqualsAndHashCodeTest: void testGrapshWithCustomEdges()>:
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:268, 7.69%>
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:269, 12.82%>
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:271, 15.38%>
	<org.jgrapht.graph.EqualsAndHashCodeTest: void testPseudograph()>:
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:230, 5.08%>
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:231, 8.47%>
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:233, 10.17%>
	<org.jgrapht.graph.EqualsAndHashCodeTest: void testSimpleGraph()>:
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:148, 6.52%>
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:149, 10.87%>
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:151, 13.04%>
	<org.jgrapht.graph.GenericGraphsTest: void testAlissaHacker()>:
		<org.jgrapht.graph.GenericGraphsTest.java:134, 83.33%>
	<org.jgrapht.graph.SimpleDirectedGraphTest: void testIncomingOutgoingEdgesOf()>:
		<org.jgrapht.graph.SimpleDirectedGraphTest.java:315, 128.57%>
	<org.jgrapht.graph.SubgraphTest: void testInducedSubgraphUnderlyingEdgeAddition()>:
		<org.jgrapht.graph.SubgraphTest.java:192, 20.00%>
	<org.jgrapht.traverse.AbstractGraphIteratorTest: void testDirectedGraph()>:
		<org.jgrapht.traverse.AbstractGraphIteratorTest.java:86, 47.06%>
		<org.jgrapht.traverse.AbstractGraphIteratorTest.java:88, 52.94%>
	<org.jgrapht.traverse.ClosestFirstIteratorTest: void testNoStart()>:
		<org.jgrapht.traverse.ClosestFirstIteratorTest.java:103, 53.85%>
	<org.jgrapht.traverse.ClosestFirstIteratorTest: void testRadius()>:
		<org.jgrapht.traverse.ClosestFirstIteratorTest.java:80, 53.85%>
	<org.jgrapht.traverse.DepthFirstIteratorTest: void testBug1169182()>:
		<org.jgrapht.traverse.DepthFirstIteratorTest.java:149, 16.00%>
	<org.jgrapht.traverse.TopologicalOrderIteratorTest: void testEmptyGraph()>:
		<org.jgrapht.traverse.TopologicalOrderIteratorTest.java:136, 50.00%>
	<org.jgrapht.traverse.TopologicalOrderIteratorTest: void testRecipe()>:
		<org.jgrapht.traverse.TopologicalOrderIteratorTest.java:109, 9.62%>
		<org.jgrapht.traverse.TopologicalOrderIteratorTest.java:121, 9.62%>
	<org.jgrapht.util.FibonacciHeapTest: void testGrowReplaceShrink()>:
		<org.jgrapht.util.FibonacciHeapTest.java:88, 17.65%>
		<org.jgrapht.util.FibonacciHeapTest.java:91, 17.65%>

Relevant Assertion clone sets (7):
Set (score: 1.00, ccsize: 2, packages: 1, classes: 1): 
	<org.jgrapht.alg.VertexCoversTest: void testFind2ApproximationCover()>:
		<org.jgrapht.alg.VertexCoversTest.java:74, 60.00%>
	<org.jgrapht.alg.VertexCoversTest: void testFindGreedyCover()>:
		<org.jgrapht.alg.VertexCoversTest.java:89, 50.00%>
Set (score: 1.00, ccsize: 2, packages: 1, classes: 1): 
	<org.jgrapht.experimental.GraphReaderTest: void testGraphReader()>:
		<org.jgrapht.experimental.GraphReaderTest.java:88, 27.27%>
	<org.jgrapht.experimental.GraphReaderTest: void testGraphReaderWeighted()>:
		<org.jgrapht.experimental.GraphReaderTest.java:116, 23.08%>
Set (score: 0.67, ccsize: 2, packages: 1, classes: 2): 
	<org.jgrapht.ext.DOTExporterTest: void testUndirected()>:
		<org.jgrapht.ext.DOTExporterTest.java:110, 41.67%>
	<org.jgrapht.ext.GmlExporterTest: void testUndirected()>:
		<org.jgrapht.ext.GmlExporterTest.java:117, 62.50%>
Set (score: 0.67, ccsize: 2, packages: 1, classes: 1): 
	<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest: void testBipartiteMatching1()>:
		<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest.java:86, 6.76%>
	<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest: void testBipartiteMatching2()>:
		<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest.java:115, 5.21%>
Set (score: 0.50, ccsize: 4, packages: 1, classes: 1): 
	<org.jgrapht.graph.EqualsAndHashCodeTest: void testDefaultDirectedGraph()>:
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:106, 10.87%>
	<org.jgrapht.graph.EqualsAndHashCodeTest: void testGraphsWithNonIntrusiveEdge()>:
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:188, 6.49%>
Set (score: 0.50, ccsize: 4, packages: 1, classes: 1): 
	<org.jgrapht.graph.EqualsAndHashCodeTest: void testGrapshWithCustomEdges()>:
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:269, 12.82%>
	<org.jgrapht.graph.EqualsAndHashCodeTest: void testSimpleGraph()>:
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:149, 10.87%>
Set (score: 0.50, ccsize: 2, packages: 1, classes: 1): 
	<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest: void testBipartiteMatching1()>:
		<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest.java:83, 6.76%>
	<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest: void testBipartiteMatching2()>:
		<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest.java:112, 5.21%>
==============================================

[119] Set (editDistance: 2, isComplete: false, packages: 11, classes: 34): 
Centroid (size: 2): <org.jgrapht.alg.BronKerboschCliqueFinderTest: void testFindAll()>

Methods (58): 
	<org.jgrapht.EnhancedTestCase: void assertFalse()>:
		<org.jgrapht.EnhancedTestCase.java:79, 100.00%>
	<org.jgrapht.EnhancedTestCase: void assertTrue()>:
		<org.jgrapht.EnhancedTestCase.java:87, 100.00%>
	<org.jgrapht.alg.BiconnectivityInspectorTest: void testBiconnected()>:
		<org.jgrapht.alg.BiconnectivityInspectorTest.java:64, 30.00%>
		<org.jgrapht.alg.BiconnectivityInspectorTest.java:65, 50.00%>
		<org.jgrapht.alg.BiconnectivityInspectorTest.java:66, 50.00%>
	<org.jgrapht.alg.BlockCutpointGraphTest: void testGetBlock(org.jgrapht.alg.BlockCutpointGraph)>:
		<org.jgrapht.alg.BlockCutpointGraphTest.java:88, 33.33%>
		<org.jgrapht.alg.BlockCutpointGraphTest.java:94, 19.05%>
	<org.jgrapht.alg.BronKerboschCliqueFinderTest: void testFindAll()>:
		<org.jgrapht.alg.BronKerboschCliqueFinderTest.java:143, 26.32%>
		<org.jgrapht.alg.BronKerboschCliqueFinderTest.java:175, 21.05%>
	<org.jgrapht.alg.ChromaticNumberTest: void testChromaticNumber()>:
		<org.jgrapht.alg.ChromaticNumberTest.java:78, 18.75%>
		<org.jgrapht.alg.ChromaticNumberTest.java:83, 31.25%>
		<org.jgrapht.alg.ChromaticNumberTest.java:100, 18.75%>
	<org.jgrapht.alg.ConnectivityInspectorTest: void testDirectedGraph()>:
		<org.jgrapht.alg.ConnectivityInspectorTest.java:139, 57.14%>
		<org.jgrapht.alg.ConnectivityInspectorTest.java:143, 57.14%>
	<org.jgrapht.alg.ConnectivityInspectorTest: void testStronglyConnected1()>:
		<org.jgrapht.alg.ConnectivityInspectorTest.java:211, 16.00%>
		<org.jgrapht.alg.ConnectivityInspectorTest.java:222, 12.00%>
		<org.jgrapht.alg.ConnectivityInspectorTest.java:225, 16.00%>
	<org.jgrapht.alg.ConnectivityInspectorTest: void testStronglyConnected2()>:
		<org.jgrapht.alg.ConnectivityInspectorTest.java:268, 16.00%>
		<org.jgrapht.alg.ConnectivityInspectorTest.java:279, 12.00%>
		<org.jgrapht.alg.ConnectivityInspectorTest.java:282, 16.00%>
	<org.jgrapht.alg.ConnectivityInspectorTest: void testStronglyConnected3()>:
		<org.jgrapht.alg.ConnectivityInspectorTest.java:325, 17.39%>
		<org.jgrapht.alg.ConnectivityInspectorTest.java:337, 13.04%>
		<org.jgrapht.alg.ConnectivityInspectorTest.java:340, 17.39%>
	<org.jgrapht.alg.EdmondsBlossomShrinkingTest: void testOne()>:
		<org.jgrapht.alg.EdmondsBlossomShrinkingTest.java:80, 23.81%>
		<org.jgrapht.alg.EdmondsBlossomShrinkingTest.java:81, 19.05%>
		<org.jgrapht.alg.EdmondsBlossomShrinkingTest.java:82, 19.05%>
	<org.jgrapht.alg.FloydWarshallShortestPathsTest: void testCompareWithDijkstra()>:
		<org.jgrapht.alg.FloydWarshallShortestPathsTest.java:96, 7.41%>
		<org.jgrapht.alg.FloydWarshallShortestPathsTest.java:121, 7.41%>
	<org.jgrapht.alg.HamiltonianCycleTest: void testHamiltonianCycle()>:
		<org.jgrapht.alg.HamiltonianCycleTest.java:79, 33.33%>
		<org.jgrapht.alg.HamiltonianCycleTest.java:89, 27.78%>
	<org.jgrapht.alg.KSPDiscardsValidPathsTest: void testNot3connectedGraph()>:
		<org.jgrapht.alg.KSPDiscardsValidPathsTest.java:102, 87.50%>
	<org.jgrapht.alg.KShortestPathCostTest: void verifyShortestPathsInIncreasingOrderOfWeight(org.jgrapht.Graph)>:
		<org.jgrapht.alg.KShortestPathCostTest.java:222, 30.77%>
		<org.jgrapht.alg.KShortestPathCostTest.java:225, 30.77%>
	<org.jgrapht.alg.KShortestPathCostTest: void verifyWeightsConsistency(java.util.List,java.util.List)>:
		<org.jgrapht.alg.KShortestPathCostTest.java:294, 53.85%>
	<org.jgrapht.alg.KShortestPathKValuesTest: void verifyNbPathsForAllPairsOfVertices(org.jgrapht.Graph)>:
		<org.jgrapht.alg.KShortestPathKValuesTest.java:148, 36.84%>
	<org.jgrapht.alg.KruskalMinimumSpanningTreeTest: void testMinimumSpanningTree()>:
		<org.jgrapht.alg.KruskalMinimumSpanningTreeTest.java:80, 19.05%>
		<org.jgrapht.alg.KruskalMinimumSpanningTreeTest.java:84, 38.10%>
	<org.jgrapht.alg.StoerWagnerMinimumCutTest: void testMinCut14()>:
		<org.jgrapht.alg.StoerWagnerMinimumCutTest.java:97, 16.67%>
	<org.jgrapht.alg.StoerWagnerMinimumCutTest: void testMinCutDisconnected()>:
		<org.jgrapht.alg.StoerWagnerMinimumCutTest.java:124, 22.73%>
	<org.jgrapht.alg.TransitiveClosureTest: void testLinearGraph()>:
		<org.jgrapht.alg.TransitiveClosureTest.java:75, 47.83%>
		<org.jgrapht.alg.TransitiveClosureTest.java:78, 43.48%>
	<org.jgrapht.alg.TransitiveClosureTest: void testRingGraph()>:
		<org.jgrapht.alg.TransitiveClosureTest.java:107, 45.45%>
		<org.jgrapht.alg.TransitiveClosureTest.java:110, 50.00%>
	<org.jgrapht.alg.VertexCoversTest: void testFind2ApproximationCover()>:
		<org.jgrapht.alg.VertexCoversTest.java:74, 60.00%>
	<org.jgrapht.alg.VertexCoversTest: void testFindGreedyCover()>:
		<org.jgrapht.alg.VertexCoversTest.java:89, 50.00%>
	<org.jgrapht.alg.util.UnionFindTest: void testIdentical(java.lang.String[],java.util.ArrayList,org.jgrapht.alg.util.UnionFind)>:
		<org.jgrapht.alg.util.UnionFindTest.java:131, 41.18%>
	<org.jgrapht.experimental.GraphReaderTest: void testGraphReader()>:
		<org.jgrapht.experimental.GraphReaderTest.java:88, 27.27%>
	<org.jgrapht.experimental.GraphReaderTest: void testGraphReaderWeighted()>:
		<org.jgrapht.experimental.GraphReaderTest.java:116, 23.08%>
	<org.jgrapht.experimental.dag.DirectedAcyclicGraphTest: void testCycleDetectionInRandomGraphBuild()>:
		<org.jgrapht.experimental.dag.DirectedAcyclicGraphTest.java:131, 14.29%>
		<org.jgrapht.experimental.dag.DirectedAcyclicGraphTest.java:141, 12.24%>
		<org.jgrapht.experimental.dag.DirectedAcyclicGraphTest.java:152, 6.12%>
	<org.jgrapht.experimental.dag.DirectedAcyclicGraphTest: void testTopoIterationOrderLinearGraph()>:
		<org.jgrapht.experimental.dag.DirectedAcyclicGraphTest.java:181, 29.41%>
		<org.jgrapht.experimental.dag.DirectedAcyclicGraphTest.java:182, 41.18%>
	<org.jgrapht.experimental.isomorphism.IsomorphismInspectorTest: void assertIsomorphic(org.jgrapht.Graph[],boolean,org.jgrapht.experimental.equivalence.EquivalenceComparator,org.jgrapht.experimental.equivalence.EquivalenceComparator)>:
		<org.jgrapht.experimental.isomorphism.IsomorphismInspectorTest.java:138, 28.57%>
		<org.jgrapht.experimental.isomorphism.IsomorphismInspectorTest.java:140, 28.57%>
	<org.jgrapht.experimental.isomorphism.IsomorphismInspectorTest: void assertIsomorphicStopAfterFirstMatch(org.jgrapht.Graph[],boolean,boolean,org.jgrapht.experimental.equivalence.EquivalenceComparator,org.jgrapht.experimental.equivalence.EquivalenceComparator)>:
		<org.jgrapht.experimental.isomorphism.IsomorphismInspectorTest.java:485, 14.71%>
	<org.jgrapht.ext.DOTExporterTest: void testUndirected()>:
		<org.jgrapht.ext.DOTExporterTest.java:110, 41.67%>
	<org.jgrapht.ext.DOTExporterTest: void testValidNodeIDs()>:
		<org.jgrapht.ext.DOTExporterTest.java:149, 16.00%>
	<org.jgrapht.ext.GmlExporterTest: void testUndirected()>:
		<org.jgrapht.ext.GmlExporterTest.java:117, 62.50%>
	<org.jgrapht.ext.MatrixExporterTest: void testAdjacencyDirected()>:
		<org.jgrapht.ext.MatrixExporterTest.java:149, 62.50%>
	<org.jgrapht.ext.MatrixExporterTest: void testAdjacencyUndirected()>:
		<org.jgrapht.ext.MatrixExporterTest.java:133, 62.50%>
	<org.jgrapht.ext.MatrixExporterTest: void testLaplacian()>:
		<org.jgrapht.ext.MatrixExporterTest.java:113, 38.46%>
		<org.jgrapht.ext.MatrixExporterTest.java:117, 38.46%>
	<org.jgrapht.generate.GraphGeneratorTest: void testEmptyGraphGenerator()>:
		<org.jgrapht.generate.GraphGeneratorTest.java:90, 38.46%>
		<org.jgrapht.generate.GraphGeneratorTest.java:91, 38.46%>
		<org.jgrapht.generate.GraphGeneratorTest.java:92, 23.08%>
	<org.jgrapht.generate.GraphGeneratorTest: void testStarGraphGenerator()>:
		<org.jgrapht.generate.GraphGeneratorTest.java:287, 35.71%>
		<org.jgrapht.generate.GraphGeneratorTest.java:288, 35.71%>
		<org.jgrapht.generate.GraphGeneratorTest.java:289, 42.86%>
	<org.jgrapht.generate.RandomGraphGeneratorTest: void testBadVertexFactory()>:
		<org.jgrapht.generate.RandomGraphGeneratorTest.java:106, 12.50%>
	<org.jgrapht.generate.RandomGraphGeneratorTest: void testGenerateDirectedGraph()>:
		<org.jgrapht.generate.RandomGraphGeneratorTest.java:70, 20.00%>
	<org.jgrapht.generate.RandomGraphGeneratorTest: void testGenerateListenableUndirectedGraph()>:
		<org.jgrapht.generate.RandomGraphGeneratorTest.java:89, 20.00%>
	<org.jgrapht.graph.AsUndirectedGraphTest: void testAddEdge()>:
		<org.jgrapht.graph.AsUndirectedGraphTest.java:89, 100.00%>
	<org.jgrapht.graph.AsUndirectedGraphTest: void testAddVertex()>:
		<org.jgrapht.graph.AsUndirectedGraphTest.java:102, 85.71%>
		<org.jgrapht.graph.AsUndirectedGraphTest.java:103, 100.00%>
	<org.jgrapht.graph.AsUndirectedGraphTest: void testGetAllEdges()>:
		<org.jgrapht.graph.AsUndirectedGraphTest.java:123, 40.00%>
		<org.jgrapht.graph.AsUndirectedGraphTest.java:124, 65.00%>
		<org.jgrapht.graph.AsUndirectedGraphTest.java:128, 70.00%>
		<org.jgrapht.graph.AsUndirectedGraphTest.java:129, 80.00%>
	<org.jgrapht.graph.AsUndirectedGraphTest: void testGetEdge()>:
		<org.jgrapht.graph.AsUndirectedGraphTest.java:137, 44.00%>
		<org.jgrapht.graph.AsUndirectedGraphTest.java:140, 68.00%>
		<org.jgrapht.graph.AsUndirectedGraphTest.java:144, 92.00%>
	<org.jgrapht.graph.AsUndirectedGraphTest: void testRemoveEdge()>:
		<org.jgrapht.graph.AsUndirectedGraphTest.java:155, 88.89%>
		<org.jgrapht.graph.AsUndirectedGraphTest.java:156, 111.11%>
	<org.jgrapht.graph.AsUndirectedGraphTest: void testRemoveVertex()>:
		<org.jgrapht.graph.AsUndirectedGraphTest.java:165, 88.89%>
		<org.jgrapht.graph.AsUndirectedGraphTest.java:166, 111.11%>
	<org.jgrapht.graph.GenericGraphsTest: void testAlissaHacker()>:
		<org.jgrapht.graph.GenericGraphsTest.java:134, 83.33%>
	<org.jgrapht.graph.SimpleDirectedGraphTest: void testEdgesOf()>:
		<org.jgrapht.graph.SimpleDirectedGraphTest.java:232, 46.67%>
		<org.jgrapht.graph.SimpleDirectedGraphTest.java:233, 60.00%>
		<org.jgrapht.graph.SimpleDirectedGraphTest.java:243, 20.00%>
	<org.jgrapht.graph.SubgraphTest: void testInducedSubgraphUnderlyingEdgeAddition()>:
		<org.jgrapht.graph.SubgraphTest.java:192, 20.00%>
	<org.jgrapht.traverse.AbstractGraphIteratorTest: void testDirectedGraph()>:
		<org.jgrapht.traverse.AbstractGraphIteratorTest.java:86, 47.06%>
		<org.jgrapht.traverse.AbstractGraphIteratorTest.java:88, 52.94%>
	<org.jgrapht.traverse.ClosestFirstIteratorTest: void testNoStart()>:
		<org.jgrapht.traverse.ClosestFirstIteratorTest.java:103, 53.85%>
	<org.jgrapht.traverse.ClosestFirstIteratorTest: void testRadius()>:
		<org.jgrapht.traverse.ClosestFirstIteratorTest.java:80, 53.85%>
	<org.jgrapht.traverse.DepthFirstIteratorTest: void testBug1169182()>:
		<org.jgrapht.traverse.DepthFirstIteratorTest.java:149, 16.00%>
	<org.jgrapht.traverse.TopologicalOrderIteratorTest: void testEmptyGraph()>:
		<org.jgrapht.traverse.TopologicalOrderIteratorTest.java:136, 50.00%>
	<org.jgrapht.traverse.TopologicalOrderIteratorTest: void testRecipe()>:
		<org.jgrapht.traverse.TopologicalOrderIteratorTest.java:109, 9.62%>
		<org.jgrapht.traverse.TopologicalOrderIteratorTest.java:121, 9.62%>
	<org.jgrapht.util.FibonacciHeapTest: void testGrowReplaceShrink()>:
		<org.jgrapht.util.FibonacciHeapTest.java:88, 17.65%>
		<org.jgrapht.util.FibonacciHeapTest.java:91, 17.65%>

Relevant Assertion clone sets (4):
Set (score: 1.00, ccsize: 2, packages: 1, classes: 1): 
	<org.jgrapht.alg.ConnectivityInspectorTest: void testStronglyConnected1()>:
		<org.jgrapht.alg.ConnectivityInspectorTest.java:222, 12.00%>
	<org.jgrapht.alg.ConnectivityInspectorTest: void testStronglyConnected2()>:
		<org.jgrapht.alg.ConnectivityInspectorTest.java:279, 12.00%>
	<org.jgrapht.alg.ConnectivityInspectorTest: void testStronglyConnected3()>:
		<org.jgrapht.alg.ConnectivityInspectorTest.java:337, 13.04%>
Set (score: 1.00, ccsize: 2, packages: 1, classes: 1): 
	<org.jgrapht.alg.VertexCoversTest: void testFind2ApproximationCover()>:
		<org.jgrapht.alg.VertexCoversTest.java:74, 60.00%>
	<org.jgrapht.alg.VertexCoversTest: void testFindGreedyCover()>:
		<org.jgrapht.alg.VertexCoversTest.java:89, 50.00%>
Set (score: 1.00, ccsize: 2, packages: 1, classes: 1): 
	<org.jgrapht.experimental.GraphReaderTest: void testGraphReader()>:
		<org.jgrapht.experimental.GraphReaderTest.java:88, 27.27%>
	<org.jgrapht.experimental.GraphReaderTest: void testGraphReaderWeighted()>:
		<org.jgrapht.experimental.GraphReaderTest.java:116, 23.08%>
Set (score: 0.67, ccsize: 2, packages: 1, classes: 2): 
	<org.jgrapht.ext.DOTExporterTest: void testUndirected()>:
		<org.jgrapht.ext.DOTExporterTest.java:110, 41.67%>
	<org.jgrapht.ext.GmlExporterTest: void testUndirected()>:
		<org.jgrapht.ext.GmlExporterTest.java:117, 62.50%>
==============================================

[120] Set (editDistance: 2, isComplete: false, packages: 11, classes: 34): 
Centroid (size: 2): <org.jgrapht.alg.BronKerboschCliqueFinderTest: void testFindBiggest()>

Methods (58): 
	<org.jgrapht.EnhancedTestCase: void assertFalse()>:
		<org.jgrapht.EnhancedTestCase.java:79, 100.00%>
	<org.jgrapht.EnhancedTestCase: void assertTrue()>:
		<org.jgrapht.EnhancedTestCase.java:87, 100.00%>
	<org.jgrapht.alg.BiconnectivityInspectorTest: void testBiconnected()>:
		<org.jgrapht.alg.BiconnectivityInspectorTest.java:64, 30.00%>
		<org.jgrapht.alg.BiconnectivityInspectorTest.java:65, 50.00%>
		<org.jgrapht.alg.BiconnectivityInspectorTest.java:66, 50.00%>
	<org.jgrapht.alg.BlockCutpointGraphTest: void testGetBlock(org.jgrapht.alg.BlockCutpointGraph)>:
		<org.jgrapht.alg.BlockCutpointGraphTest.java:88, 33.33%>
		<org.jgrapht.alg.BlockCutpointGraphTest.java:94, 19.05%>
	<org.jgrapht.alg.BronKerboschCliqueFinderTest: void testFindBiggest()>:
		<org.jgrapht.alg.BronKerboschCliqueFinderTest.java:119, 41.67%>
		<org.jgrapht.alg.BronKerboschCliqueFinderTest.java:129, 58.33%>
	<org.jgrapht.alg.ChromaticNumberTest: void testChromaticNumber()>:
		<org.jgrapht.alg.ChromaticNumberTest.java:78, 18.75%>
		<org.jgrapht.alg.ChromaticNumberTest.java:83, 31.25%>
		<org.jgrapht.alg.ChromaticNumberTest.java:100, 18.75%>
	<org.jgrapht.alg.ConnectivityInspectorTest: void testDirectedGraph()>:
		<org.jgrapht.alg.ConnectivityInspectorTest.java:139, 57.14%>
		<org.jgrapht.alg.ConnectivityInspectorTest.java:143, 57.14%>
	<org.jgrapht.alg.ConnectivityInspectorTest: void testStronglyConnected1()>:
		<org.jgrapht.alg.ConnectivityInspectorTest.java:211, 16.00%>
		<org.jgrapht.alg.ConnectivityInspectorTest.java:222, 12.00%>
		<org.jgrapht.alg.ConnectivityInspectorTest.java:225, 16.00%>
	<org.jgrapht.alg.ConnectivityInspectorTest: void testStronglyConnected2()>:
		<org.jgrapht.alg.ConnectivityInspectorTest.java:268, 16.00%>
		<org.jgrapht.alg.ConnectivityInspectorTest.java:279, 12.00%>
		<org.jgrapht.alg.ConnectivityInspectorTest.java:282, 16.00%>
	<org.jgrapht.alg.ConnectivityInspectorTest: void testStronglyConnected3()>:
		<org.jgrapht.alg.ConnectivityInspectorTest.java:325, 17.39%>
		<org.jgrapht.alg.ConnectivityInspectorTest.java:337, 13.04%>
		<org.jgrapht.alg.ConnectivityInspectorTest.java:340, 17.39%>
	<org.jgrapht.alg.EdmondsBlossomShrinkingTest: void testOne()>:
		<org.jgrapht.alg.EdmondsBlossomShrinkingTest.java:80, 23.81%>
		<org.jgrapht.alg.EdmondsBlossomShrinkingTest.java:81, 19.05%>
		<org.jgrapht.alg.EdmondsBlossomShrinkingTest.java:82, 19.05%>
	<org.jgrapht.alg.FloydWarshallShortestPathsTest: void testCompareWithDijkstra()>:
		<org.jgrapht.alg.FloydWarshallShortestPathsTest.java:96, 7.41%>
		<org.jgrapht.alg.FloydWarshallShortestPathsTest.java:121, 7.41%>
	<org.jgrapht.alg.HamiltonianCycleTest: void testHamiltonianCycle()>:
		<org.jgrapht.alg.HamiltonianCycleTest.java:79, 33.33%>
		<org.jgrapht.alg.HamiltonianCycleTest.java:89, 27.78%>
	<org.jgrapht.alg.KSPDiscardsValidPathsTest: void testNot3connectedGraph()>:
		<org.jgrapht.alg.KSPDiscardsValidPathsTest.java:102, 87.50%>
	<org.jgrapht.alg.KShortestPathCostTest: void verifyShortestPathsInIncreasingOrderOfWeight(org.jgrapht.Graph)>:
		<org.jgrapht.alg.KShortestPathCostTest.java:222, 30.77%>
		<org.jgrapht.alg.KShortestPathCostTest.java:225, 30.77%>
	<org.jgrapht.alg.KShortestPathCostTest: void verifyWeightsConsistency(java.util.List,java.util.List)>:
		<org.jgrapht.alg.KShortestPathCostTest.java:294, 53.85%>
	<org.jgrapht.alg.KShortestPathKValuesTest: void verifyNbPathsForAllPairsOfVertices(org.jgrapht.Graph)>:
		<org.jgrapht.alg.KShortestPathKValuesTest.java:148, 36.84%>
	<org.jgrapht.alg.KruskalMinimumSpanningTreeTest: void testMinimumSpanningTree()>:
		<org.jgrapht.alg.KruskalMinimumSpanningTreeTest.java:80, 19.05%>
		<org.jgrapht.alg.KruskalMinimumSpanningTreeTest.java:84, 38.10%>
	<org.jgrapht.alg.StoerWagnerMinimumCutTest: void testMinCut14()>:
		<org.jgrapht.alg.StoerWagnerMinimumCutTest.java:97, 16.67%>
	<org.jgrapht.alg.StoerWagnerMinimumCutTest: void testMinCutDisconnected()>:
		<org.jgrapht.alg.StoerWagnerMinimumCutTest.java:124, 22.73%>
	<org.jgrapht.alg.TransitiveClosureTest: void testLinearGraph()>:
		<org.jgrapht.alg.TransitiveClosureTest.java:75, 47.83%>
		<org.jgrapht.alg.TransitiveClosureTest.java:78, 43.48%>
	<org.jgrapht.alg.TransitiveClosureTest: void testRingGraph()>:
		<org.jgrapht.alg.TransitiveClosureTest.java:107, 45.45%>
		<org.jgrapht.alg.TransitiveClosureTest.java:110, 50.00%>
	<org.jgrapht.alg.VertexCoversTest: void testFind2ApproximationCover()>:
		<org.jgrapht.alg.VertexCoversTest.java:74, 60.00%>
	<org.jgrapht.alg.VertexCoversTest: void testFindGreedyCover()>:
		<org.jgrapht.alg.VertexCoversTest.java:89, 50.00%>
	<org.jgrapht.alg.util.UnionFindTest: void testIdentical(java.lang.String[],java.util.ArrayList,org.jgrapht.alg.util.UnionFind)>:
		<org.jgrapht.alg.util.UnionFindTest.java:131, 41.18%>
	<org.jgrapht.experimental.GraphReaderTest: void testGraphReader()>:
		<org.jgrapht.experimental.GraphReaderTest.java:88, 27.27%>
	<org.jgrapht.experimental.GraphReaderTest: void testGraphReaderWeighted()>:
		<org.jgrapht.experimental.GraphReaderTest.java:116, 23.08%>
	<org.jgrapht.experimental.dag.DirectedAcyclicGraphTest: void testCycleDetectionInRandomGraphBuild()>:
		<org.jgrapht.experimental.dag.DirectedAcyclicGraphTest.java:131, 14.29%>
		<org.jgrapht.experimental.dag.DirectedAcyclicGraphTest.java:141, 12.24%>
		<org.jgrapht.experimental.dag.DirectedAcyclicGraphTest.java:152, 6.12%>
	<org.jgrapht.experimental.dag.DirectedAcyclicGraphTest: void testTopoIterationOrderLinearGraph()>:
		<org.jgrapht.experimental.dag.DirectedAcyclicGraphTest.java:181, 29.41%>
		<org.jgrapht.experimental.dag.DirectedAcyclicGraphTest.java:182, 41.18%>
	<org.jgrapht.experimental.isomorphism.IsomorphismInspectorTest: void assertIsomorphic(org.jgrapht.Graph[],boolean,org.jgrapht.experimental.equivalence.EquivalenceComparator,org.jgrapht.experimental.equivalence.EquivalenceComparator)>:
		<org.jgrapht.experimental.isomorphism.IsomorphismInspectorTest.java:138, 28.57%>
		<org.jgrapht.experimental.isomorphism.IsomorphismInspectorTest.java:140, 28.57%>
	<org.jgrapht.experimental.isomorphism.IsomorphismInspectorTest: void assertIsomorphicStopAfterFirstMatch(org.jgrapht.Graph[],boolean,boolean,org.jgrapht.experimental.equivalence.EquivalenceComparator,org.jgrapht.experimental.equivalence.EquivalenceComparator)>:
		<org.jgrapht.experimental.isomorphism.IsomorphismInspectorTest.java:485, 14.71%>
	<org.jgrapht.ext.DOTExporterTest: void testUndirected()>:
		<org.jgrapht.ext.DOTExporterTest.java:110, 41.67%>
	<org.jgrapht.ext.DOTExporterTest: void testValidNodeIDs()>:
		<org.jgrapht.ext.DOTExporterTest.java:149, 16.00%>
	<org.jgrapht.ext.GmlExporterTest: void testUndirected()>:
		<org.jgrapht.ext.GmlExporterTest.java:117, 62.50%>
	<org.jgrapht.ext.MatrixExporterTest: void testAdjacencyDirected()>:
		<org.jgrapht.ext.MatrixExporterTest.java:149, 62.50%>
	<org.jgrapht.ext.MatrixExporterTest: void testAdjacencyUndirected()>:
		<org.jgrapht.ext.MatrixExporterTest.java:133, 62.50%>
	<org.jgrapht.ext.MatrixExporterTest: void testLaplacian()>:
		<org.jgrapht.ext.MatrixExporterTest.java:113, 38.46%>
		<org.jgrapht.ext.MatrixExporterTest.java:117, 38.46%>
	<org.jgrapht.generate.GraphGeneratorTest: void testEmptyGraphGenerator()>:
		<org.jgrapht.generate.GraphGeneratorTest.java:90, 38.46%>
		<org.jgrapht.generate.GraphGeneratorTest.java:91, 38.46%>
		<org.jgrapht.generate.GraphGeneratorTest.java:92, 23.08%>
	<org.jgrapht.generate.GraphGeneratorTest: void testStarGraphGenerator()>:
		<org.jgrapht.generate.GraphGeneratorTest.java:287, 35.71%>
		<org.jgrapht.generate.GraphGeneratorTest.java:288, 35.71%>
		<org.jgrapht.generate.GraphGeneratorTest.java:289, 42.86%>
	<org.jgrapht.generate.RandomGraphGeneratorTest: void testBadVertexFactory()>:
		<org.jgrapht.generate.RandomGraphGeneratorTest.java:106, 12.50%>
	<org.jgrapht.generate.RandomGraphGeneratorTest: void testGenerateDirectedGraph()>:
		<org.jgrapht.generate.RandomGraphGeneratorTest.java:70, 20.00%>
	<org.jgrapht.generate.RandomGraphGeneratorTest: void testGenerateListenableUndirectedGraph()>:
		<org.jgrapht.generate.RandomGraphGeneratorTest.java:89, 20.00%>
	<org.jgrapht.graph.AsUndirectedGraphTest: void testAddEdge()>:
		<org.jgrapht.graph.AsUndirectedGraphTest.java:89, 100.00%>
	<org.jgrapht.graph.AsUndirectedGraphTest: void testAddVertex()>:
		<org.jgrapht.graph.AsUndirectedGraphTest.java:102, 85.71%>
		<org.jgrapht.graph.AsUndirectedGraphTest.java:103, 100.00%>
	<org.jgrapht.graph.AsUndirectedGraphTest: void testGetAllEdges()>:
		<org.jgrapht.graph.AsUndirectedGraphTest.java:123, 40.00%>
		<org.jgrapht.graph.AsUndirectedGraphTest.java:124, 65.00%>
		<org.jgrapht.graph.AsUndirectedGraphTest.java:128, 70.00%>
		<org.jgrapht.graph.AsUndirectedGraphTest.java:129, 80.00%>
	<org.jgrapht.graph.AsUndirectedGraphTest: void testGetEdge()>:
		<org.jgrapht.graph.AsUndirectedGraphTest.java:137, 44.00%>
		<org.jgrapht.graph.AsUndirectedGraphTest.java:140, 68.00%>
		<org.jgrapht.graph.AsUndirectedGraphTest.java:144, 92.00%>
	<org.jgrapht.graph.AsUndirectedGraphTest: void testRemoveEdge()>:
		<org.jgrapht.graph.AsUndirectedGraphTest.java:155, 88.89%>
		<org.jgrapht.graph.AsUndirectedGraphTest.java:156, 111.11%>
	<org.jgrapht.graph.AsUndirectedGraphTest: void testRemoveVertex()>:
		<org.jgrapht.graph.AsUndirectedGraphTest.java:165, 88.89%>
		<org.jgrapht.graph.AsUndirectedGraphTest.java:166, 111.11%>
	<org.jgrapht.graph.GenericGraphsTest: void testAlissaHacker()>:
		<org.jgrapht.graph.GenericGraphsTest.java:134, 83.33%>
	<org.jgrapht.graph.SimpleDirectedGraphTest: void testEdgesOf()>:
		<org.jgrapht.graph.SimpleDirectedGraphTest.java:232, 46.67%>
		<org.jgrapht.graph.SimpleDirectedGraphTest.java:233, 60.00%>
		<org.jgrapht.graph.SimpleDirectedGraphTest.java:243, 20.00%>
	<org.jgrapht.graph.SubgraphTest: void testInducedSubgraphUnderlyingEdgeAddition()>:
		<org.jgrapht.graph.SubgraphTest.java:192, 20.00%>
	<org.jgrapht.traverse.AbstractGraphIteratorTest: void testDirectedGraph()>:
		<org.jgrapht.traverse.AbstractGraphIteratorTest.java:86, 47.06%>
		<org.jgrapht.traverse.AbstractGraphIteratorTest.java:88, 52.94%>
	<org.jgrapht.traverse.ClosestFirstIteratorTest: void testNoStart()>:
		<org.jgrapht.traverse.ClosestFirstIteratorTest.java:103, 53.85%>
	<org.jgrapht.traverse.ClosestFirstIteratorTest: void testRadius()>:
		<org.jgrapht.traverse.ClosestFirstIteratorTest.java:80, 53.85%>
	<org.jgrapht.traverse.DepthFirstIteratorTest: void testBug1169182()>:
		<org.jgrapht.traverse.DepthFirstIteratorTest.java:149, 16.00%>
	<org.jgrapht.traverse.TopologicalOrderIteratorTest: void testEmptyGraph()>:
		<org.jgrapht.traverse.TopologicalOrderIteratorTest.java:136, 50.00%>
	<org.jgrapht.traverse.TopologicalOrderIteratorTest: void testRecipe()>:
		<org.jgrapht.traverse.TopologicalOrderIteratorTest.java:109, 9.62%>
		<org.jgrapht.traverse.TopologicalOrderIteratorTest.java:121, 9.62%>
	<org.jgrapht.util.FibonacciHeapTest: void testGrowReplaceShrink()>:
		<org.jgrapht.util.FibonacciHeapTest.java:88, 17.65%>
		<org.jgrapht.util.FibonacciHeapTest.java:91, 17.65%>

Relevant Assertion clone sets (4):
Set (score: 1.00, ccsize: 2, packages: 1, classes: 1): 
	<org.jgrapht.alg.ConnectivityInspectorTest: void testStronglyConnected1()>:
		<org.jgrapht.alg.ConnectivityInspectorTest.java:222, 12.00%>
	<org.jgrapht.alg.ConnectivityInspectorTest: void testStronglyConnected2()>:
		<org.jgrapht.alg.ConnectivityInspectorTest.java:279, 12.00%>
	<org.jgrapht.alg.ConnectivityInspectorTest: void testStronglyConnected3()>:
		<org.jgrapht.alg.ConnectivityInspectorTest.java:337, 13.04%>
Set (score: 1.00, ccsize: 2, packages: 1, classes: 1): 
	<org.jgrapht.alg.VertexCoversTest: void testFind2ApproximationCover()>:
		<org.jgrapht.alg.VertexCoversTest.java:74, 60.00%>
	<org.jgrapht.alg.VertexCoversTest: void testFindGreedyCover()>:
		<org.jgrapht.alg.VertexCoversTest.java:89, 50.00%>
Set (score: 1.00, ccsize: 2, packages: 1, classes: 1): 
	<org.jgrapht.experimental.GraphReaderTest: void testGraphReader()>:
		<org.jgrapht.experimental.GraphReaderTest.java:88, 27.27%>
	<org.jgrapht.experimental.GraphReaderTest: void testGraphReaderWeighted()>:
		<org.jgrapht.experimental.GraphReaderTest.java:116, 23.08%>
Set (score: 0.67, ccsize: 2, packages: 1, classes: 2): 
	<org.jgrapht.ext.DOTExporterTest: void testUndirected()>:
		<org.jgrapht.ext.DOTExporterTest.java:110, 41.67%>
	<org.jgrapht.ext.GmlExporterTest: void testUndirected()>:
		<org.jgrapht.ext.GmlExporterTest.java:117, 62.50%>
==============================================

[121] Set (editDistance: 2, isComplete: false, packages: 12, classes: 38): 
Centroid (size: 2): <org.jgrapht.alg.ConnectivityInspectorTest: void testDirectedGraph()>

Methods (71): 
	<org.jgrapht.EnhancedTestCase: void assertFalse()>:
		<org.jgrapht.EnhancedTestCase.java:79, 100.00%>
	<org.jgrapht.EnhancedTestCase: void assertTrue()>:
		<org.jgrapht.EnhancedTestCase.java:87, 100.00%>
	<org.jgrapht.alg.BellmanFordShortestPathTest: void testWithNegativeEdges()>:
		<org.jgrapht.alg.BellmanFordShortestPathTest.java:120, 45.45%>
		<org.jgrapht.alg.BellmanFordShortestPathTest.java:127, 63.64%>
	<org.jgrapht.alg.BiconnectivityInspectorTest: void testLinearGraph(int)>:
		<org.jgrapht.alg.BiconnectivityInspectorTest.java:88, 40.00%>
		<org.jgrapht.alg.BiconnectivityInspectorTest.java:89, 40.00%>
	<org.jgrapht.alg.BiconnectivityInspectorTest: void testNotBiconnected()>:
		<org.jgrapht.alg.BiconnectivityInspectorTest.java:100, 55.56%>
		<org.jgrapht.alg.BiconnectivityInspectorTest.java:101, 55.56%>
	<org.jgrapht.alg.BlockCutpointGraphTest: void testBiconnected()>:
		<org.jgrapht.alg.BlockCutpointGraphTest.java:67, 41.67%>
		<org.jgrapht.alg.BlockCutpointGraphTest.java:71, 41.67%>
	<org.jgrapht.alg.BlockCutpointGraphTest: void testGetBlock(org.jgrapht.alg.BlockCutpointGraph)>:
		<org.jgrapht.alg.BlockCutpointGraphTest.java:88, 33.33%>
		<org.jgrapht.alg.BlockCutpointGraphTest.java:94, 19.05%>
	<org.jgrapht.alg.BlockCutpointGraphTest: void testLinearGraph(int)>:
		<org.jgrapht.alg.BlockCutpointGraphTest.java:121, 33.33%>
		<org.jgrapht.alg.BlockCutpointGraphTest.java:125, 33.33%>
	<org.jgrapht.alg.BlockCutpointGraphTest: void testNotBiconnected()>:
		<org.jgrapht.alg.BlockCutpointGraphTest.java:135, 41.67%>
		<org.jgrapht.alg.BlockCutpointGraphTest.java:139, 41.67%>
	<org.jgrapht.alg.BronKerboschCliqueFinderTest: void testFindAll()>:
		<org.jgrapht.alg.BronKerboschCliqueFinderTest.java:143, 26.32%>
		<org.jgrapht.alg.BronKerboschCliqueFinderTest.java:175, 21.05%>
	<org.jgrapht.alg.BronKerboschCliqueFinderTest: void testFindBiggest()>:
		<org.jgrapht.alg.BronKerboschCliqueFinderTest.java:119, 41.67%>
		<org.jgrapht.alg.BronKerboschCliqueFinderTest.java:129, 58.33%>
	<org.jgrapht.alg.ConnectivityInspectorTest: void testDirectedGraph()>:
		<org.jgrapht.alg.ConnectivityInspectorTest.java:139, 57.14%>
		<org.jgrapht.alg.ConnectivityInspectorTest.java:143, 57.14%>
	<org.jgrapht.alg.ConnectivityInspectorTest: void testStronglyConnected4()>:
		<org.jgrapht.alg.ConnectivityInspectorTest.java:371, 30.77%>
	<org.jgrapht.alg.FloydWarshallShortestPathsTest: void testCompareWithDijkstra()>:
		<org.jgrapht.alg.FloydWarshallShortestPathsTest.java:96, 7.41%>
		<org.jgrapht.alg.FloydWarshallShortestPathsTest.java:121, 7.41%>
	<org.jgrapht.alg.FloydWarshallShortestPathsTest: void testDiameter()>:
		<org.jgrapht.alg.FloydWarshallShortestPathsTest.java:161, 57.14%>
	<org.jgrapht.alg.FloydWarshallShortestPathsTest: void testEdgeLessDiameter()>:
		<org.jgrapht.alg.FloydWarshallShortestPathsTest.java:182, 40.00%>
	<org.jgrapht.alg.FloydWarshallShortestPathsTest: void testEmptyDiameter()>:
		<org.jgrapht.alg.FloydWarshallShortestPathsTest.java:170, 50.00%>
	<org.jgrapht.alg.HamiltonianCycleTest: void testHamiltonianCycle()>:
		<org.jgrapht.alg.HamiltonianCycleTest.java:79, 33.33%>
		<org.jgrapht.alg.HamiltonianCycleTest.java:89, 27.78%>
	<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest: void testBipartiteMatching1()>:
		<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest.java:83, 6.76%>
		<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest.java:86, 6.76%>
	<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest: void testBipartiteMatching2()>:
		<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest.java:112, 5.21%>
		<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest.java:115, 5.21%>
	<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest: void testEmptyMatching()>:
		<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest.java:128, 33.33%>
	<org.jgrapht.alg.KSPDiscardsValidPathsTest: void testNot3connectedGraph()>:
		<org.jgrapht.alg.KSPDiscardsValidPathsTest.java:102, 87.50%>
	<org.jgrapht.alg.KSPExampleTest: void testFourReturnedPathsJGraphT()>:
		<org.jgrapht.alg.KSPExampleTest.java:60, 55.56%>
	<org.jgrapht.alg.KSPExampleTest: void testThreeReturnedPathsJGraphT()>:
		<org.jgrapht.alg.KSPExampleTest.java:72, 60.00%>
	<org.jgrapht.alg.KSPExampleTest: void testTwoReturnedPathsJGraphT()>:
		<org.jgrapht.alg.KSPExampleTest.java:84, 60.00%>
	<org.jgrapht.alg.KShortestPathCostTest: void verifyShortestPathsInIncreasingOrderOfWeight(org.jgrapht.Graph)>:
		<org.jgrapht.alg.KShortestPathCostTest.java:222, 30.77%>
		<org.jgrapht.alg.KShortestPathCostTest.java:225, 30.77%>
	<org.jgrapht.alg.KShortestPathCostTest: void verifyWeightsConsistency(java.util.List,java.util.List)>:
		<org.jgrapht.alg.KShortestPathCostTest.java:294, 53.85%>
	<org.jgrapht.alg.KShortestPathKValuesTest: void verifyNbPathsForAllPairsOfVertices(org.jgrapht.Graph)>:
		<org.jgrapht.alg.KShortestPathKValuesTest.java:148, 36.84%>
	<org.jgrapht.alg.KruskalMinimumSpanningTreeTest: void testMinimumSpanningTree()>:
		<org.jgrapht.alg.KruskalMinimumSpanningTreeTest.java:80, 19.05%>
		<org.jgrapht.alg.KruskalMinimumSpanningTreeTest.java:84, 38.10%>
	<org.jgrapht.alg.StoerWagnerMinimumCutTest: void testMinCut14()>:
		<org.jgrapht.alg.StoerWagnerMinimumCutTest.java:97, 16.67%>
	<org.jgrapht.alg.StoerWagnerMinimumCutTest: void testMinCutDisconnected()>:
		<org.jgrapht.alg.StoerWagnerMinimumCutTest.java:124, 22.73%>
	<org.jgrapht.alg.VertexCoversTest: void testFind2ApproximationCover()>:
		<org.jgrapht.alg.VertexCoversTest.java:74, 60.00%>
	<org.jgrapht.alg.VertexCoversTest: void testFindGreedyCover()>:
		<org.jgrapht.alg.VertexCoversTest.java:89, 50.00%>
	<org.jgrapht.experimental.GraphReaderTest: void testGraphReader()>:
		<org.jgrapht.experimental.GraphReaderTest.java:88, 27.27%>
	<org.jgrapht.experimental.GraphReaderTest: void testGraphReaderWeighted()>:
		<org.jgrapht.experimental.GraphReaderTest.java:116, 23.08%>
	<org.jgrapht.experimental.alg.ColoringTest: void testBacktrackColoring()>:
		<org.jgrapht.experimental.alg.ColoringTest.java:97, 50.00%>
	<org.jgrapht.experimental.alg.ColoringTest: void testGreedyColoring()>:
		<org.jgrapht.experimental.alg.ColoringTest.java:77, 50.00%>
	<org.jgrapht.experimental.equivalence.EquivalenceGroupCreatorTest: void testOneComparator(org.jgrapht.experimental.equivalence.EquivalenceComparator,int)>:
		<org.jgrapht.experimental.equivalence.EquivalenceGroupCreatorTest.java:152, 23.53%>
		<org.jgrapht.experimental.equivalence.EquivalenceGroupCreatorTest.java:157, 41.18%>
	<org.jgrapht.experimental.isomorphism.IsomorphismInspectorTest: void assertIsomorphic(org.jgrapht.Graph[],boolean,org.jgrapht.experimental.equivalence.EquivalenceComparator,org.jgrapht.experimental.equivalence.EquivalenceComparator)>:
		<org.jgrapht.experimental.isomorphism.IsomorphismInspectorTest.java:138, 28.57%>
		<org.jgrapht.experimental.isomorphism.IsomorphismInspectorTest.java:140, 28.57%>
	<org.jgrapht.experimental.permutation.CompoundPermutationIterTest: void testGetNext()>:
		<org.jgrapht.experimental.permutation.CompoundPermutationIterTest.java:96, 40.00%>
		<org.jgrapht.experimental.permutation.CompoundPermutationIterTest.java:127, 40.00%>
	<org.jgrapht.ext.DOTExporterTest: void testUndirected()>:
		<org.jgrapht.ext.DOTExporterTest.java:110, 41.67%>
	<org.jgrapht.ext.DOTExporterTest: void testValidNodeIDs()>:
		<org.jgrapht.ext.DOTExporterTest.java:149, 16.00%>
	<org.jgrapht.ext.GmlExporterTest: void testUndirected()>:
		<org.jgrapht.ext.GmlExporterTest.java:117, 62.50%>
	<org.jgrapht.ext.MatrixExporterTest: void testAdjacencyDirected()>:
		<org.jgrapht.ext.MatrixExporterTest.java:149, 62.50%>
	<org.jgrapht.ext.MatrixExporterTest: void testAdjacencyUndirected()>:
		<org.jgrapht.ext.MatrixExporterTest.java:133, 62.50%>
	<org.jgrapht.ext.MatrixExporterTest: void testLaplacian()>:
		<org.jgrapht.ext.MatrixExporterTest.java:113, 38.46%>
		<org.jgrapht.ext.MatrixExporterTest.java:117, 38.46%>
	<org.jgrapht.generate.GraphGeneratorTest: void testCompleteBipartiteGraphGenerator()>:
		<org.jgrapht.generate.GraphGeneratorTest.java:243, 50.00%>
		<org.jgrapht.generate.GraphGeneratorTest.java:244, 50.00%>
	<org.jgrapht.generate.GraphGeneratorTest: void testCompleteGraphGenerator()>:
		<org.jgrapht.generate.GraphGeneratorTest.java:185, 62.50%>
	<org.jgrapht.generate.GraphGeneratorTest: void testHyperCubeGraphGenerator()>:
		<org.jgrapht.generate.GraphGeneratorTest.java:265, 50.00%>
		<org.jgrapht.generate.GraphGeneratorTest.java:266, 50.00%>
	<org.jgrapht.generate.RandomGraphGeneratorTest: void testBadVertexFactory()>:
		<org.jgrapht.generate.RandomGraphGeneratorTest.java:106, 12.50%>
	<org.jgrapht.generate.RandomGraphGeneratorTest: void testGenerateDirectedGraph()>:
		<org.jgrapht.generate.RandomGraphGeneratorTest.java:70, 20.00%>
	<org.jgrapht.generate.RandomGraphGeneratorTest: void testGenerateListenableUndirectedGraph()>:
		<org.jgrapht.generate.RandomGraphGeneratorTest.java:89, 20.00%>
	<org.jgrapht.graph.AsUndirectedGraphTest: void testAddEdge()>:
		<org.jgrapht.graph.AsUndirectedGraphTest.java:89, 100.00%>
	<org.jgrapht.graph.AsUnweightedGraphTest: void constructWeighted(org.jgrapht.WeightedGraph)>:
		<org.jgrapht.graph.AsUnweightedGraphTest.java:110, 57.14%>
	<org.jgrapht.graph.DefaultDirectedGraphTest: void testEdgesOf()>:
		<org.jgrapht.graph.DefaultDirectedGraphTest.java:117, 75.00%>
		<org.jgrapht.graph.DefaultDirectedGraphTest.java:118, 75.00%>
	<org.jgrapht.graph.DefaultDirectedGraphTest: void testGetAllEdges()>:
		<org.jgrapht.graph.DefaultDirectedGraphTest.java:130, 100.00%>
	<org.jgrapht.graph.DefaultDirectedGraphTest: void testInDegreeOf()>:
		<org.jgrapht.graph.DefaultDirectedGraphTest.java:141, 83.33%>
		<org.jgrapht.graph.DefaultDirectedGraphTest.java:142, 83.33%>
	<org.jgrapht.graph.DefaultDirectedGraphTest: void testOutDegreeOf()>:
		<org.jgrapht.graph.DefaultDirectedGraphTest.java:153, 83.33%>
		<org.jgrapht.graph.DefaultDirectedGraphTest.java:154, 83.33%>
	<org.jgrapht.graph.GenericGraphsTest: void testAlissaHacker()>:
		<org.jgrapht.graph.GenericGraphsTest.java:134, 83.33%>
	<org.jgrapht.graph.GenericGraphsTest: void testEqualButNotSameVertex()>:
		<org.jgrapht.graph.GenericGraphsTest.java:145, 40.00%>
		<org.jgrapht.graph.GenericGraphsTest.java:146, 40.00%>
	<org.jgrapht.graph.SimpleDirectedGraphTest: void testIncomingOutgoingEdgesOf()>:
		<org.jgrapht.graph.SimpleDirectedGraphTest.java:315, 128.57%>
	<org.jgrapht.graph.SubgraphTest: void testInducedSubgraphUnderlyingEdgeAddition()>:
		<org.jgrapht.graph.SubgraphTest.java:192, 20.00%>
	<org.jgrapht.traverse.AbstractGraphIteratorTest: void testDirectedGraph()>:
		<org.jgrapht.traverse.AbstractGraphIteratorTest.java:86, 47.06%>
		<org.jgrapht.traverse.AbstractGraphIteratorTest.java:88, 52.94%>
	<org.jgrapht.traverse.ClosestFirstIteratorTest: void testNoStart()>:
		<org.jgrapht.traverse.ClosestFirstIteratorTest.java:103, 53.85%>
	<org.jgrapht.traverse.ClosestFirstIteratorTest: void testRadius()>:
		<org.jgrapht.traverse.ClosestFirstIteratorTest.java:80, 53.85%>
	<org.jgrapht.traverse.DepthFirstIteratorTest: void testBug1169182()>:
		<org.jgrapht.traverse.DepthFirstIteratorTest.java:149, 16.00%>
	<org.jgrapht.traverse.TopologicalOrderIteratorTest: void testEmptyGraph()>:
		<org.jgrapht.traverse.TopologicalOrderIteratorTest.java:136, 50.00%>
	<org.jgrapht.traverse.TopologicalOrderIteratorTest: void testRecipe()>:
		<org.jgrapht.traverse.TopologicalOrderIteratorTest.java:109, 9.62%>
		<org.jgrapht.traverse.TopologicalOrderIteratorTest.java:121, 9.62%>
	<org.jgrapht.util.FibonacciHeapTest: void testGrowReplaceShrink()>:
		<org.jgrapht.util.FibonacciHeapTest.java:88, 17.65%>
		<org.jgrapht.util.FibonacciHeapTest.java:91, 17.65%>
	<org.jgrapht.util.PrefetchIteratorTest: void testEnumInterface()>:
		<org.jgrapht.util.PrefetchIteratorTest.java:71, 33.33%>
		<org.jgrapht.util.PrefetchIteratorTest.java:72, 41.67%>
		<org.jgrapht.util.PrefetchIteratorTest.java:74, 33.33%>
		<org.jgrapht.util.PrefetchIteratorTest.java:81, 16.67%>
	<org.jgrapht.util.PrefetchIteratorTest: void testIteratorInterface()>:
		<org.jgrapht.util.PrefetchIteratorTest.java:54, 33.33%>
		<org.jgrapht.util.PrefetchIteratorTest.java:55, 41.67%>
		<org.jgrapht.util.PrefetchIteratorTest.java:57, 33.33%>
		<org.jgrapht.util.PrefetchIteratorTest.java:64, 16.67%>

Relevant Assertion clone sets (8):
Set (score: 1.00, ccsize: 2, packages: 1, classes: 1): 
	<org.jgrapht.alg.VertexCoversTest: void testFind2ApproximationCover()>:
		<org.jgrapht.alg.VertexCoversTest.java:74, 60.00%>
	<org.jgrapht.alg.VertexCoversTest: void testFindGreedyCover()>:
		<org.jgrapht.alg.VertexCoversTest.java:89, 50.00%>
Set (score: 1.00, ccsize: 2, packages: 1, classes: 1): 
	<org.jgrapht.experimental.GraphReaderTest: void testGraphReader()>:
		<org.jgrapht.experimental.GraphReaderTest.java:88, 27.27%>
	<org.jgrapht.experimental.GraphReaderTest: void testGraphReaderWeighted()>:
		<org.jgrapht.experimental.GraphReaderTest.java:116, 23.08%>
Set (score: 0.67, ccsize: 3, packages: 1, classes: 2): 
	<org.jgrapht.alg.BiconnectivityInspectorTest: void testLinearGraph(int)>:
		<org.jgrapht.alg.BiconnectivityInspectorTest.java:88, 40.00%>
	<org.jgrapht.alg.BlockCutpointGraphTest: void testLinearGraph(int)>:
		<org.jgrapht.alg.BlockCutpointGraphTest.java:121, 33.33%>
		<org.jgrapht.alg.BlockCutpointGraphTest.java:125, 33.33%>
Set (score: 0.67, ccsize: 3, packages: 1, classes: 2): 
	<org.jgrapht.alg.BiconnectivityInspectorTest: void testNotBiconnected()>:
		<org.jgrapht.alg.BiconnectivityInspectorTest.java:100, 55.56%>
	<org.jgrapht.alg.BlockCutpointGraphTest: void testNotBiconnected()>:
		<org.jgrapht.alg.BlockCutpointGraphTest.java:135, 41.67%>
		<org.jgrapht.alg.BlockCutpointGraphTest.java:139, 41.67%>
Set (score: 0.67, ccsize: 2, packages: 1, classes: 2): 
	<org.jgrapht.ext.DOTExporterTest: void testUndirected()>:
		<org.jgrapht.ext.DOTExporterTest.java:110, 41.67%>
	<org.jgrapht.ext.GmlExporterTest: void testUndirected()>:
		<org.jgrapht.ext.GmlExporterTest.java:117, 62.50%>
Set (score: 0.67, ccsize: 2, packages: 1, classes: 1): 
	<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest: void testBipartiteMatching1()>:
		<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest.java:86, 6.76%>
	<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest: void testBipartiteMatching2()>:
		<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest.java:115, 5.21%>
Set (score: 0.50, ccsize: 3, packages: 1, classes: 1): 
	<org.jgrapht.alg.KSPExampleTest: void testFourReturnedPathsJGraphT()>:
		<org.jgrapht.alg.KSPExampleTest.java:60, 55.56%>
	<org.jgrapht.alg.KSPExampleTest: void testThreeReturnedPathsJGraphT()>:
		<org.jgrapht.alg.KSPExampleTest.java:72, 60.00%>
	<org.jgrapht.alg.KSPExampleTest: void testTwoReturnedPathsJGraphT()>:
		<org.jgrapht.alg.KSPExampleTest.java:84, 60.00%>
Set (score: 0.50, ccsize: 2, packages: 1, classes: 1): 
	<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest: void testBipartiteMatching1()>:
		<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest.java:83, 6.76%>
	<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest: void testBipartiteMatching2()>:
		<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest.java:112, 5.21%>
==============================================

[122] Set (editDistance: 2, isComplete: false, packages: 12, classes: 35): 
Centroid (size: 2): <org.jgrapht.alg.FloydWarshallShortestPathsTest: void testCompareWithDijkstra()>

Methods (71): 
	<org.jgrapht.alg.BellmanFordShortestPathTest: void testWithNegativeEdges()>:
		<org.jgrapht.alg.BellmanFordShortestPathTest.java:120, 45.45%>
		<org.jgrapht.alg.BellmanFordShortestPathTest.java:127, 63.64%>
	<org.jgrapht.alg.BiconnectivityInspectorTest: void testBiconnected()>:
		<org.jgrapht.alg.BiconnectivityInspectorTest.java:64, 30.00%>
		<org.jgrapht.alg.BiconnectivityInspectorTest.java:65, 50.00%>
		<org.jgrapht.alg.BiconnectivityInspectorTest.java:66, 50.00%>
	<org.jgrapht.alg.BiconnectivityInspectorTest: void testLinearGraph(int)>:
		<org.jgrapht.alg.BiconnectivityInspectorTest.java:88, 40.00%>
		<org.jgrapht.alg.BiconnectivityInspectorTest.java:89, 40.00%>
	<org.jgrapht.alg.BiconnectivityInspectorTest: void testNotBiconnected()>:
		<org.jgrapht.alg.BiconnectivityInspectorTest.java:100, 55.56%>
		<org.jgrapht.alg.BiconnectivityInspectorTest.java:101, 55.56%>
	<org.jgrapht.alg.BlockCutpointGraphTest: void testBiconnected()>:
		<org.jgrapht.alg.BlockCutpointGraphTest.java:67, 41.67%>
		<org.jgrapht.alg.BlockCutpointGraphTest.java:71, 41.67%>
	<org.jgrapht.alg.BlockCutpointGraphTest: void testLinearGraph(int)>:
		<org.jgrapht.alg.BlockCutpointGraphTest.java:121, 33.33%>
		<org.jgrapht.alg.BlockCutpointGraphTest.java:125, 33.33%>
	<org.jgrapht.alg.BlockCutpointGraphTest: void testNotBiconnected()>:
		<org.jgrapht.alg.BlockCutpointGraphTest.java:135, 41.67%>
		<org.jgrapht.alg.BlockCutpointGraphTest.java:139, 41.67%>
	<org.jgrapht.alg.BronKerboschCliqueFinderTest: void testFindAll()>:
		<org.jgrapht.alg.BronKerboschCliqueFinderTest.java:143, 26.32%>
		<org.jgrapht.alg.BronKerboschCliqueFinderTest.java:175, 21.05%>
	<org.jgrapht.alg.BronKerboschCliqueFinderTest: void testFindBiggest()>:
		<org.jgrapht.alg.BronKerboschCliqueFinderTest.java:119, 41.67%>
		<org.jgrapht.alg.BronKerboschCliqueFinderTest.java:129, 58.33%>
	<org.jgrapht.alg.ConnectivityInspectorTest: void testDirectedGraph()>:
		<org.jgrapht.alg.ConnectivityInspectorTest.java:139, 57.14%>
		<org.jgrapht.alg.ConnectivityInspectorTest.java:143, 57.14%>
	<org.jgrapht.alg.ConnectivityInspectorTest: void testStronglyConnected1()>:
		<org.jgrapht.alg.ConnectivityInspectorTest.java:211, 16.00%>
		<org.jgrapht.alg.ConnectivityInspectorTest.java:222, 12.00%>
		<org.jgrapht.alg.ConnectivityInspectorTest.java:225, 16.00%>
	<org.jgrapht.alg.ConnectivityInspectorTest: void testStronglyConnected2()>:
		<org.jgrapht.alg.ConnectivityInspectorTest.java:268, 16.00%>
		<org.jgrapht.alg.ConnectivityInspectorTest.java:279, 12.00%>
		<org.jgrapht.alg.ConnectivityInspectorTest.java:282, 16.00%>
	<org.jgrapht.alg.ConnectivityInspectorTest: void testStronglyConnected3()>:
		<org.jgrapht.alg.ConnectivityInspectorTest.java:325, 17.39%>
		<org.jgrapht.alg.ConnectivityInspectorTest.java:337, 13.04%>
		<org.jgrapht.alg.ConnectivityInspectorTest.java:340, 17.39%>
	<org.jgrapht.alg.ConnectivityInspectorTest: void testStronglyConnected4()>:
		<org.jgrapht.alg.ConnectivityInspectorTest.java:371, 30.77%>
	<org.jgrapht.alg.EulerianCircuitTest: void testEulerianCircuit()>:
		<org.jgrapht.alg.EulerianCircuitTest.java:77, 11.76%>
		<org.jgrapht.alg.EulerianCircuitTest.java:78, 29.41%>
		<org.jgrapht.alg.EulerianCircuitTest.java:91, 11.76%>
		<org.jgrapht.alg.EulerianCircuitTest.java:95, 23.53%>
	<org.jgrapht.alg.FloydWarshallShortestPathsTest: void testCompareWithDijkstra()>:
		<org.jgrapht.alg.FloydWarshallShortestPathsTest.java:96, 7.41%>
		<org.jgrapht.alg.FloydWarshallShortestPathsTest.java:121, 7.41%>
	<org.jgrapht.alg.FloydWarshallShortestPathsTest: void testDiameter()>:
		<org.jgrapht.alg.FloydWarshallShortestPathsTest.java:161, 57.14%>
	<org.jgrapht.alg.FloydWarshallShortestPathsTest: void testEdgeLessDiameter()>:
		<org.jgrapht.alg.FloydWarshallShortestPathsTest.java:182, 40.00%>
	<org.jgrapht.alg.FloydWarshallShortestPathsTest: void testEmptyDiameter()>:
		<org.jgrapht.alg.FloydWarshallShortestPathsTest.java:170, 50.00%>
	<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest: void testBipartiteMatching1()>:
		<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest.java:83, 6.76%>
		<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest.java:86, 6.76%>
	<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest: void testBipartiteMatching2()>:
		<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest.java:112, 5.21%>
		<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest.java:115, 5.21%>
	<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest: void testEmptyMatching()>:
		<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest.java:128, 33.33%>
	<org.jgrapht.alg.KSPDiscardsValidPathsTest: void testNot3connectedGraph()>:
		<org.jgrapht.alg.KSPDiscardsValidPathsTest.java:102, 87.50%>
	<org.jgrapht.alg.KSPExampleTest: void testFourReturnedPathsJGraphT()>:
		<org.jgrapht.alg.KSPExampleTest.java:60, 55.56%>
	<org.jgrapht.alg.KSPExampleTest: void testThreeReturnedPathsJGraphT()>:
		<org.jgrapht.alg.KSPExampleTest.java:72, 60.00%>
	<org.jgrapht.alg.KSPExampleTest: void testTwoReturnedPathsJGraphT()>:
		<org.jgrapht.alg.KSPExampleTest.java:84, 60.00%>
	<org.jgrapht.alg.KShortestPathKValuesTest: void verifyNbPathsForAllPairsOfVertices(org.jgrapht.Graph)>:
		<org.jgrapht.alg.KShortestPathKValuesTest.java:148, 36.84%>
	<org.jgrapht.alg.StoerWagnerMinimumCutTest: void testMinCut14()>:
		<org.jgrapht.alg.StoerWagnerMinimumCutTest.java:97, 16.67%>
	<org.jgrapht.alg.StoerWagnerMinimumCutTest: void testMinCutDisconnected()>:
		<org.jgrapht.alg.StoerWagnerMinimumCutTest.java:124, 22.73%>
	<org.jgrapht.alg.TransitiveClosureTest: void testLinearGraph()>:
		<org.jgrapht.alg.TransitiveClosureTest.java:75, 47.83%>
		<org.jgrapht.alg.TransitiveClosureTest.java:78, 43.48%>
	<org.jgrapht.alg.TransitiveClosureTest: void testRingGraph()>:
		<org.jgrapht.alg.TransitiveClosureTest.java:107, 45.45%>
		<org.jgrapht.alg.TransitiveClosureTest.java:110, 50.00%>
	<org.jgrapht.alg.util.UnionFindTest: void testIdentical(java.lang.String[],java.util.ArrayList,org.jgrapht.alg.util.UnionFind)>:
		<org.jgrapht.alg.util.UnionFindTest.java:131, 41.18%>
	<org.jgrapht.experimental.GraphReaderTest: void testGraphReader()>:
		<org.jgrapht.experimental.GraphReaderTest.java:88, 27.27%>
	<org.jgrapht.experimental.GraphReaderTest: void testGraphReaderWeighted()>:
		<org.jgrapht.experimental.GraphReaderTest.java:116, 23.08%>
	<org.jgrapht.experimental.alg.ColoringTest: void testBacktrackColoring()>:
		<org.jgrapht.experimental.alg.ColoringTest.java:97, 50.00%>
	<org.jgrapht.experimental.alg.ColoringTest: void testGreedyColoring()>:
		<org.jgrapht.experimental.alg.ColoringTest.java:77, 50.00%>
	<org.jgrapht.experimental.dag.DirectedAcyclicGraphTest: void testTopoIterationOrderLinearGraph()>:
		<org.jgrapht.experimental.dag.DirectedAcyclicGraphTest.java:181, 29.41%>
		<org.jgrapht.experimental.dag.DirectedAcyclicGraphTest.java:182, 41.18%>
	<org.jgrapht.experimental.isomorphism.IsomorphismInspectorTest: void assertIsomorphicStopAfterFirstMatch(org.jgrapht.Graph[],boolean,boolean,org.jgrapht.experimental.equivalence.EquivalenceComparator,org.jgrapht.experimental.equivalence.EquivalenceComparator)>:
		<org.jgrapht.experimental.isomorphism.IsomorphismInspectorTest.java:485, 14.71%>
	<org.jgrapht.experimental.permutation.CompoundPermutationIterTest: void testGetNext()>:
		<org.jgrapht.experimental.permutation.CompoundPermutationIterTest.java:96, 40.00%>
		<org.jgrapht.experimental.permutation.CompoundPermutationIterTest.java:127, 40.00%>
	<org.jgrapht.ext.DOTExporterTest: void testUndirected()>:
		<org.jgrapht.ext.DOTExporterTest.java:110, 41.67%>
	<org.jgrapht.ext.DOTExporterTest: void testValidNodeIDs()>:
		<org.jgrapht.ext.DOTExporterTest.java:149, 16.00%>
	<org.jgrapht.ext.GmlExporterTest: void testUndirected()>:
		<org.jgrapht.ext.GmlExporterTest.java:117, 62.50%>
	<org.jgrapht.ext.MatrixExporterTest: void testAdjacencyDirected()>:
		<org.jgrapht.ext.MatrixExporterTest.java:149, 62.50%>
	<org.jgrapht.ext.MatrixExporterTest: void testAdjacencyUndirected()>:
		<org.jgrapht.ext.MatrixExporterTest.java:133, 62.50%>
	<org.jgrapht.ext.MatrixExporterTest: void testLaplacian()>:
		<org.jgrapht.ext.MatrixExporterTest.java:113, 38.46%>
		<org.jgrapht.ext.MatrixExporterTest.java:117, 38.46%>
	<org.jgrapht.generate.GraphGeneratorTest: void testCompleteBipartiteGraphGenerator()>:
		<org.jgrapht.generate.GraphGeneratorTest.java:243, 50.00%>
		<org.jgrapht.generate.GraphGeneratorTest.java:244, 50.00%>
	<org.jgrapht.generate.GraphGeneratorTest: void testCompleteGraphGenerator()>:
		<org.jgrapht.generate.GraphGeneratorTest.java:185, 62.50%>
	<org.jgrapht.generate.GraphGeneratorTest: void testEmptyGraphGenerator()>:
		<org.jgrapht.generate.GraphGeneratorTest.java:90, 38.46%>
		<org.jgrapht.generate.GraphGeneratorTest.java:91, 38.46%>
		<org.jgrapht.generate.GraphGeneratorTest.java:92, 23.08%>
	<org.jgrapht.generate.GraphGeneratorTest: void testHyperCubeGraphGenerator()>:
		<org.jgrapht.generate.GraphGeneratorTest.java:265, 50.00%>
		<org.jgrapht.generate.GraphGeneratorTest.java:266, 50.00%>
	<org.jgrapht.generate.GraphGeneratorTest: void testStarGraphGenerator()>:
		<org.jgrapht.generate.GraphGeneratorTest.java:287, 35.71%>
		<org.jgrapht.generate.GraphGeneratorTest.java:288, 35.71%>
		<org.jgrapht.generate.GraphGeneratorTest.java:289, 42.86%>
	<org.jgrapht.generate.RandomGraphGeneratorTest: void testBadVertexFactory()>:
		<org.jgrapht.generate.RandomGraphGeneratorTest.java:106, 12.50%>
	<org.jgrapht.graph.AsUndirectedGraphTest: void testAddEdge()>:
		<org.jgrapht.graph.AsUndirectedGraphTest.java:89, 100.00%>
	<org.jgrapht.graph.AsUndirectedGraphTest: void testAddVertex()>:
		<org.jgrapht.graph.AsUndirectedGraphTest.java:102, 85.71%>
		<org.jgrapht.graph.AsUndirectedGraphTest.java:103, 100.00%>
	<org.jgrapht.graph.AsUndirectedGraphTest: void testRemoveEdge()>:
		<org.jgrapht.graph.AsUndirectedGraphTest.java:155, 88.89%>
		<org.jgrapht.graph.AsUndirectedGraphTest.java:156, 111.11%>
	<org.jgrapht.graph.AsUndirectedGraphTest: void testRemoveVertex()>:
		<org.jgrapht.graph.AsUndirectedGraphTest.java:165, 88.89%>
		<org.jgrapht.graph.AsUndirectedGraphTest.java:166, 111.11%>
	<org.jgrapht.graph.AsUnweightedGraphTest: void constructWeighted(org.jgrapht.WeightedGraph)>:
		<org.jgrapht.graph.AsUnweightedGraphTest.java:110, 57.14%>
	<org.jgrapht.graph.DefaultDirectedGraphTest: void testEdgesOf()>:
		<org.jgrapht.graph.DefaultDirectedGraphTest.java:117, 75.00%>
		<org.jgrapht.graph.DefaultDirectedGraphTest.java:118, 75.00%>
	<org.jgrapht.graph.DefaultDirectedGraphTest: void testGetAllEdges()>:
		<org.jgrapht.graph.DefaultDirectedGraphTest.java:130, 100.00%>
	<org.jgrapht.graph.DefaultDirectedGraphTest: void testInDegreeOf()>:
		<org.jgrapht.graph.DefaultDirectedGraphTest.java:141, 83.33%>
		<org.jgrapht.graph.DefaultDirectedGraphTest.java:142, 83.33%>
	<org.jgrapht.graph.DefaultDirectedGraphTest: void testOutDegreeOf()>:
		<org.jgrapht.graph.DefaultDirectedGraphTest.java:153, 83.33%>
		<org.jgrapht.graph.DefaultDirectedGraphTest.java:154, 83.33%>
	<org.jgrapht.graph.GenericGraphsTest: void testAlissaHacker()>:
		<org.jgrapht.graph.GenericGraphsTest.java:134, 83.33%>
	<org.jgrapht.graph.GenericGraphsTest: void testEqualButNotSameVertex()>:
		<org.jgrapht.graph.GenericGraphsTest.java:145, 40.00%>
		<org.jgrapht.graph.GenericGraphsTest.java:146, 40.00%>
	<org.jgrapht.graph.SimpleDirectedGraphTest: void testIncomingOutgoingEdgesOf()>:
		<org.jgrapht.graph.SimpleDirectedGraphTest.java:315, 128.57%>
	<org.jgrapht.graph.SubgraphTest: void testInducedSubgraphUnderlyingEdgeAddition()>:
		<org.jgrapht.graph.SubgraphTest.java:192, 20.00%>
	<org.jgrapht.traverse.AbstractGraphIteratorTest: void testDirectedGraph()>:
		<org.jgrapht.traverse.AbstractGraphIteratorTest.java:86, 47.06%>
		<org.jgrapht.traverse.AbstractGraphIteratorTest.java:88, 52.94%>
	<org.jgrapht.traverse.ClosestFirstIteratorTest: void testNoStart()>:
		<org.jgrapht.traverse.ClosestFirstIteratorTest.java:103, 53.85%>
	<org.jgrapht.traverse.ClosestFirstIteratorTest: void testRadius()>:
		<org.jgrapht.traverse.ClosestFirstIteratorTest.java:80, 53.85%>
	<org.jgrapht.traverse.DepthFirstIteratorTest: void testBug1169182()>:
		<org.jgrapht.traverse.DepthFirstIteratorTest.java:149, 16.00%>
	<org.jgrapht.traverse.TopologicalOrderIteratorTest: void testEmptyGraph()>:
		<org.jgrapht.traverse.TopologicalOrderIteratorTest.java:136, 50.00%>
	<org.jgrapht.traverse.TopologicalOrderIteratorTest: void testRecipe()>:
		<org.jgrapht.traverse.TopologicalOrderIteratorTest.java:109, 9.62%>
		<org.jgrapht.traverse.TopologicalOrderIteratorTest.java:121, 9.62%>
	<org.jgrapht.util.FibonacciHeapTest: void testAddRemoveOne()>:
		<org.jgrapht.util.FibonacciHeapTest.java:57, 25.00%>
		<org.jgrapht.util.FibonacciHeapTest.java:59, 25.00%>
		<org.jgrapht.util.FibonacciHeapTest.java:61, 50.00%>
		<org.jgrapht.util.FibonacciHeapTest.java:62, 25.00%>

Relevant Assertion clone sets (9):
Set (score: 1.00, ccsize: 2, packages: 1, classes: 1): 
	<org.jgrapht.alg.ConnectivityInspectorTest: void testStronglyConnected1()>:
		<org.jgrapht.alg.ConnectivityInspectorTest.java:222, 12.00%>
	<org.jgrapht.alg.ConnectivityInspectorTest: void testStronglyConnected2()>:
		<org.jgrapht.alg.ConnectivityInspectorTest.java:279, 12.00%>
	<org.jgrapht.alg.ConnectivityInspectorTest: void testStronglyConnected3()>:
		<org.jgrapht.alg.ConnectivityInspectorTest.java:337, 13.04%>
Set (score: 1.00, ccsize: 2, packages: 1, classes: 1): 
	<org.jgrapht.experimental.GraphReaderTest: void testGraphReader()>:
		<org.jgrapht.experimental.GraphReaderTest.java:88, 27.27%>
	<org.jgrapht.experimental.GraphReaderTest: void testGraphReaderWeighted()>:
		<org.jgrapht.experimental.GraphReaderTest.java:116, 23.08%>
Set (score: 0.67, ccsize: 3, packages: 1, classes: 2): 
	<org.jgrapht.alg.BiconnectivityInspectorTest: void testBiconnected()>:
		<org.jgrapht.alg.BiconnectivityInspectorTest.java:65, 50.00%>
	<org.jgrapht.alg.BlockCutpointGraphTest: void testBiconnected()>:
		<org.jgrapht.alg.BlockCutpointGraphTest.java:67, 41.67%>
		<org.jgrapht.alg.BlockCutpointGraphTest.java:71, 41.67%>
Set (score: 0.67, ccsize: 3, packages: 1, classes: 2): 
	<org.jgrapht.alg.BiconnectivityInspectorTest: void testLinearGraph(int)>:
		<org.jgrapht.alg.BiconnectivityInspectorTest.java:88, 40.00%>
	<org.jgrapht.alg.BlockCutpointGraphTest: void testLinearGraph(int)>:
		<org.jgrapht.alg.BlockCutpointGraphTest.java:121, 33.33%>
		<org.jgrapht.alg.BlockCutpointGraphTest.java:125, 33.33%>
Set (score: 0.67, ccsize: 3, packages: 1, classes: 2): 
	<org.jgrapht.alg.BiconnectivityInspectorTest: void testNotBiconnected()>:
		<org.jgrapht.alg.BiconnectivityInspectorTest.java:100, 55.56%>
	<org.jgrapht.alg.BlockCutpointGraphTest: void testNotBiconnected()>:
		<org.jgrapht.alg.BlockCutpointGraphTest.java:135, 41.67%>
		<org.jgrapht.alg.BlockCutpointGraphTest.java:139, 41.67%>
Set (score: 0.67, ccsize: 2, packages: 1, classes: 2): 
	<org.jgrapht.ext.DOTExporterTest: void testUndirected()>:
		<org.jgrapht.ext.DOTExporterTest.java:110, 41.67%>
	<org.jgrapht.ext.GmlExporterTest: void testUndirected()>:
		<org.jgrapht.ext.GmlExporterTest.java:117, 62.50%>
Set (score: 0.67, ccsize: 2, packages: 1, classes: 1): 
	<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest: void testBipartiteMatching1()>:
		<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest.java:86, 6.76%>
	<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest: void testBipartiteMatching2()>:
		<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest.java:115, 5.21%>
Set (score: 0.50, ccsize: 3, packages: 1, classes: 1): 
	<org.jgrapht.alg.KSPExampleTest: void testFourReturnedPathsJGraphT()>:
		<org.jgrapht.alg.KSPExampleTest.java:60, 55.56%>
	<org.jgrapht.alg.KSPExampleTest: void testThreeReturnedPathsJGraphT()>:
		<org.jgrapht.alg.KSPExampleTest.java:72, 60.00%>
	<org.jgrapht.alg.KSPExampleTest: void testTwoReturnedPathsJGraphT()>:
		<org.jgrapht.alg.KSPExampleTest.java:84, 60.00%>
Set (score: 0.50, ccsize: 2, packages: 1, classes: 1): 
	<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest: void testBipartiteMatching1()>:
		<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest.java:83, 6.76%>
	<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest: void testBipartiteMatching2()>:
		<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest.java:112, 5.21%>
==============================================

[123] Set (editDistance: 2, isComplete: false, packages: 12, classes: 36): 
Centroid (size: 2): <org.jgrapht.alg.HamiltonianCycleTest: void testHamiltonianCycle()>

Methods (71): 
	<org.jgrapht.alg.BellmanFordShortestPathTest: void testWithNegativeEdges()>:
		<org.jgrapht.alg.BellmanFordShortestPathTest.java:120, 45.45%>
		<org.jgrapht.alg.BellmanFordShortestPathTest.java:127, 63.64%>
	<org.jgrapht.alg.BiconnectivityInspectorTest: void testBiconnected()>:
		<org.jgrapht.alg.BiconnectivityInspectorTest.java:64, 30.00%>
		<org.jgrapht.alg.BiconnectivityInspectorTest.java:65, 50.00%>
		<org.jgrapht.alg.BiconnectivityInspectorTest.java:66, 50.00%>
	<org.jgrapht.alg.BiconnectivityInspectorTest: void testLinearGraph(int)>:
		<org.jgrapht.alg.BiconnectivityInspectorTest.java:88, 40.00%>
		<org.jgrapht.alg.BiconnectivityInspectorTest.java:89, 40.00%>
	<org.jgrapht.alg.BiconnectivityInspectorTest: void testNotBiconnected()>:
		<org.jgrapht.alg.BiconnectivityInspectorTest.java:100, 55.56%>
		<org.jgrapht.alg.BiconnectivityInspectorTest.java:101, 55.56%>
	<org.jgrapht.alg.BlockCutpointGraphTest: void testBiconnected()>:
		<org.jgrapht.alg.BlockCutpointGraphTest.java:67, 41.67%>
		<org.jgrapht.alg.BlockCutpointGraphTest.java:71, 41.67%>
	<org.jgrapht.alg.BlockCutpointGraphTest: void testLinearGraph(int)>:
		<org.jgrapht.alg.BlockCutpointGraphTest.java:121, 33.33%>
		<org.jgrapht.alg.BlockCutpointGraphTest.java:125, 33.33%>
	<org.jgrapht.alg.BlockCutpointGraphTest: void testNotBiconnected()>:
		<org.jgrapht.alg.BlockCutpointGraphTest.java:135, 41.67%>
		<org.jgrapht.alg.BlockCutpointGraphTest.java:139, 41.67%>
	<org.jgrapht.alg.BronKerboschCliqueFinderTest: void testFindAll()>:
		<org.jgrapht.alg.BronKerboschCliqueFinderTest.java:143, 26.32%>
		<org.jgrapht.alg.BronKerboschCliqueFinderTest.java:175, 21.05%>
	<org.jgrapht.alg.BronKerboschCliqueFinderTest: void testFindBiggest()>:
		<org.jgrapht.alg.BronKerboschCliqueFinderTest.java:119, 41.67%>
		<org.jgrapht.alg.BronKerboschCliqueFinderTest.java:129, 58.33%>
	<org.jgrapht.alg.ConnectivityInspectorTest: void testDirectedGraph()>:
		<org.jgrapht.alg.ConnectivityInspectorTest.java:139, 57.14%>
		<org.jgrapht.alg.ConnectivityInspectorTest.java:143, 57.14%>
	<org.jgrapht.alg.ConnectivityInspectorTest: void testStronglyConnected1()>:
		<org.jgrapht.alg.ConnectivityInspectorTest.java:211, 16.00%>
		<org.jgrapht.alg.ConnectivityInspectorTest.java:222, 12.00%>
		<org.jgrapht.alg.ConnectivityInspectorTest.java:225, 16.00%>
	<org.jgrapht.alg.ConnectivityInspectorTest: void testStronglyConnected2()>:
		<org.jgrapht.alg.ConnectivityInspectorTest.java:268, 16.00%>
		<org.jgrapht.alg.ConnectivityInspectorTest.java:279, 12.00%>
		<org.jgrapht.alg.ConnectivityInspectorTest.java:282, 16.00%>
	<org.jgrapht.alg.ConnectivityInspectorTest: void testStronglyConnected3()>:
		<org.jgrapht.alg.ConnectivityInspectorTest.java:325, 17.39%>
		<org.jgrapht.alg.ConnectivityInspectorTest.java:337, 13.04%>
		<org.jgrapht.alg.ConnectivityInspectorTest.java:340, 17.39%>
	<org.jgrapht.alg.ConnectivityInspectorTest: void testStronglyConnected4()>:
		<org.jgrapht.alg.ConnectivityInspectorTest.java:371, 30.77%>
	<org.jgrapht.alg.EulerianCircuitTest: void testEulerianCircuit()>:
		<org.jgrapht.alg.EulerianCircuitTest.java:77, 11.76%>
		<org.jgrapht.alg.EulerianCircuitTest.java:78, 29.41%>
		<org.jgrapht.alg.EulerianCircuitTest.java:91, 11.76%>
		<org.jgrapht.alg.EulerianCircuitTest.java:95, 23.53%>
	<org.jgrapht.alg.FloydWarshallShortestPathsTest: void testDiameter()>:
		<org.jgrapht.alg.FloydWarshallShortestPathsTest.java:161, 57.14%>
	<org.jgrapht.alg.FloydWarshallShortestPathsTest: void testEdgeLessDiameter()>:
		<org.jgrapht.alg.FloydWarshallShortestPathsTest.java:182, 40.00%>
	<org.jgrapht.alg.FloydWarshallShortestPathsTest: void testEmptyDiameter()>:
		<org.jgrapht.alg.FloydWarshallShortestPathsTest.java:170, 50.00%>
	<org.jgrapht.alg.HamiltonianCycleTest: void testHamiltonianCycle()>:
		<org.jgrapht.alg.HamiltonianCycleTest.java:79, 33.33%>
		<org.jgrapht.alg.HamiltonianCycleTest.java:89, 27.78%>
	<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest: void testBipartiteMatching1()>:
		<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest.java:83, 6.76%>
		<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest.java:86, 6.76%>
	<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest: void testBipartiteMatching2()>:
		<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest.java:112, 5.21%>
		<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest.java:115, 5.21%>
	<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest: void testEmptyMatching()>:
		<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest.java:128, 33.33%>
	<org.jgrapht.alg.KSPDiscardsValidPathsTest: void testNot3connectedGraph()>:
		<org.jgrapht.alg.KSPDiscardsValidPathsTest.java:102, 87.50%>
	<org.jgrapht.alg.KSPExampleTest: void testFourReturnedPathsJGraphT()>:
		<org.jgrapht.alg.KSPExampleTest.java:60, 55.56%>
	<org.jgrapht.alg.KSPExampleTest: void testThreeReturnedPathsJGraphT()>:
		<org.jgrapht.alg.KSPExampleTest.java:72, 60.00%>
	<org.jgrapht.alg.KSPExampleTest: void testTwoReturnedPathsJGraphT()>:
		<org.jgrapht.alg.KSPExampleTest.java:84, 60.00%>
	<org.jgrapht.alg.KShortestPathKValuesTest: void verifyNbPathsForAllPairsOfVertices(org.jgrapht.Graph)>:
		<org.jgrapht.alg.KShortestPathKValuesTest.java:148, 36.84%>
	<org.jgrapht.alg.StoerWagnerMinimumCutTest: void testMinCut14()>:
		<org.jgrapht.alg.StoerWagnerMinimumCutTest.java:97, 16.67%>
	<org.jgrapht.alg.StoerWagnerMinimumCutTest: void testMinCutDisconnected()>:
		<org.jgrapht.alg.StoerWagnerMinimumCutTest.java:124, 22.73%>
	<org.jgrapht.alg.TransitiveClosureTest: void testLinearGraph()>:
		<org.jgrapht.alg.TransitiveClosureTest.java:75, 47.83%>
		<org.jgrapht.alg.TransitiveClosureTest.java:78, 43.48%>
	<org.jgrapht.alg.TransitiveClosureTest: void testRingGraph()>:
		<org.jgrapht.alg.TransitiveClosureTest.java:107, 45.45%>
		<org.jgrapht.alg.TransitiveClosureTest.java:110, 50.00%>
	<org.jgrapht.alg.util.UnionFindTest: void testIdentical(java.lang.String[],java.util.ArrayList,org.jgrapht.alg.util.UnionFind)>:
		<org.jgrapht.alg.util.UnionFindTest.java:131, 41.18%>
	<org.jgrapht.experimental.GraphReaderTest: void testGraphReader()>:
		<org.jgrapht.experimental.GraphReaderTest.java:88, 27.27%>
	<org.jgrapht.experimental.GraphReaderTest: void testGraphReaderWeighted()>:
		<org.jgrapht.experimental.GraphReaderTest.java:116, 23.08%>
	<org.jgrapht.experimental.alg.ColoringTest: void testBacktrackColoring()>:
		<org.jgrapht.experimental.alg.ColoringTest.java:97, 50.00%>
	<org.jgrapht.experimental.alg.ColoringTest: void testGreedyColoring()>:
		<org.jgrapht.experimental.alg.ColoringTest.java:77, 50.00%>
	<org.jgrapht.experimental.dag.DirectedAcyclicGraphTest: void testTopoIterationOrderLinearGraph()>:
		<org.jgrapht.experimental.dag.DirectedAcyclicGraphTest.java:181, 29.41%>
		<org.jgrapht.experimental.dag.DirectedAcyclicGraphTest.java:182, 41.18%>
	<org.jgrapht.experimental.isomorphism.IsomorphismInspectorTest: void assertIsomorphicStopAfterFirstMatch(org.jgrapht.Graph[],boolean,boolean,org.jgrapht.experimental.equivalence.EquivalenceComparator,org.jgrapht.experimental.equivalence.EquivalenceComparator)>:
		<org.jgrapht.experimental.isomorphism.IsomorphismInspectorTest.java:485, 14.71%>
	<org.jgrapht.experimental.permutation.CompoundPermutationIterTest: void testGetNext()>:
		<org.jgrapht.experimental.permutation.CompoundPermutationIterTest.java:96, 40.00%>
		<org.jgrapht.experimental.permutation.CompoundPermutationIterTest.java:127, 40.00%>
	<org.jgrapht.ext.DOTExporterTest: void testUndirected()>:
		<org.jgrapht.ext.DOTExporterTest.java:110, 41.67%>
	<org.jgrapht.ext.DOTExporterTest: void testValidNodeIDs()>:
		<org.jgrapht.ext.DOTExporterTest.java:149, 16.00%>
	<org.jgrapht.ext.GmlExporterTest: void testUndirected()>:
		<org.jgrapht.ext.GmlExporterTest.java:117, 62.50%>
	<org.jgrapht.ext.MatrixExporterTest: void testAdjacencyDirected()>:
		<org.jgrapht.ext.MatrixExporterTest.java:149, 62.50%>
	<org.jgrapht.ext.MatrixExporterTest: void testAdjacencyUndirected()>:
		<org.jgrapht.ext.MatrixExporterTest.java:133, 62.50%>
	<org.jgrapht.ext.MatrixExporterTest: void testLaplacian()>:
		<org.jgrapht.ext.MatrixExporterTest.java:113, 38.46%>
		<org.jgrapht.ext.MatrixExporterTest.java:117, 38.46%>
	<org.jgrapht.generate.GraphGeneratorTest: void testCompleteBipartiteGraphGenerator()>:
		<org.jgrapht.generate.GraphGeneratorTest.java:243, 50.00%>
		<org.jgrapht.generate.GraphGeneratorTest.java:244, 50.00%>
	<org.jgrapht.generate.GraphGeneratorTest: void testCompleteGraphGenerator()>:
		<org.jgrapht.generate.GraphGeneratorTest.java:185, 62.50%>
	<org.jgrapht.generate.GraphGeneratorTest: void testEmptyGraphGenerator()>:
		<org.jgrapht.generate.GraphGeneratorTest.java:90, 38.46%>
		<org.jgrapht.generate.GraphGeneratorTest.java:91, 38.46%>
		<org.jgrapht.generate.GraphGeneratorTest.java:92, 23.08%>
	<org.jgrapht.generate.GraphGeneratorTest: void testHyperCubeGraphGenerator()>:
		<org.jgrapht.generate.GraphGeneratorTest.java:265, 50.00%>
		<org.jgrapht.generate.GraphGeneratorTest.java:266, 50.00%>
	<org.jgrapht.generate.GraphGeneratorTest: void testStarGraphGenerator()>:
		<org.jgrapht.generate.GraphGeneratorTest.java:287, 35.71%>
		<org.jgrapht.generate.GraphGeneratorTest.java:288, 35.71%>
		<org.jgrapht.generate.GraphGeneratorTest.java:289, 42.86%>
	<org.jgrapht.generate.RandomGraphGeneratorTest: void testBadVertexFactory()>:
		<org.jgrapht.generate.RandomGraphGeneratorTest.java:106, 12.50%>
	<org.jgrapht.graph.AsUndirectedGraphTest: void testAddEdge()>:
		<org.jgrapht.graph.AsUndirectedGraphTest.java:89, 100.00%>
	<org.jgrapht.graph.AsUndirectedGraphTest: void testAddVertex()>:
		<org.jgrapht.graph.AsUndirectedGraphTest.java:102, 85.71%>
		<org.jgrapht.graph.AsUndirectedGraphTest.java:103, 100.00%>
	<org.jgrapht.graph.AsUndirectedGraphTest: void testRemoveEdge()>:
		<org.jgrapht.graph.AsUndirectedGraphTest.java:155, 88.89%>
		<org.jgrapht.graph.AsUndirectedGraphTest.java:156, 111.11%>
	<org.jgrapht.graph.AsUndirectedGraphTest: void testRemoveVertex()>:
		<org.jgrapht.graph.AsUndirectedGraphTest.java:165, 88.89%>
		<org.jgrapht.graph.AsUndirectedGraphTest.java:166, 111.11%>
	<org.jgrapht.graph.AsUnweightedGraphTest: void constructWeighted(org.jgrapht.WeightedGraph)>:
		<org.jgrapht.graph.AsUnweightedGraphTest.java:110, 57.14%>
	<org.jgrapht.graph.DefaultDirectedGraphTest: void testEdgesOf()>:
		<org.jgrapht.graph.DefaultDirectedGraphTest.java:117, 75.00%>
		<org.jgrapht.graph.DefaultDirectedGraphTest.java:118, 75.00%>
	<org.jgrapht.graph.DefaultDirectedGraphTest: void testGetAllEdges()>:
		<org.jgrapht.graph.DefaultDirectedGraphTest.java:130, 100.00%>
	<org.jgrapht.graph.DefaultDirectedGraphTest: void testInDegreeOf()>:
		<org.jgrapht.graph.DefaultDirectedGraphTest.java:141, 83.33%>
		<org.jgrapht.graph.DefaultDirectedGraphTest.java:142, 83.33%>
	<org.jgrapht.graph.DefaultDirectedGraphTest: void testOutDegreeOf()>:
		<org.jgrapht.graph.DefaultDirectedGraphTest.java:153, 83.33%>
		<org.jgrapht.graph.DefaultDirectedGraphTest.java:154, 83.33%>
	<org.jgrapht.graph.GenericGraphsTest: void testAlissaHacker()>:
		<org.jgrapht.graph.GenericGraphsTest.java:134, 83.33%>
	<org.jgrapht.graph.GenericGraphsTest: void testEqualButNotSameVertex()>:
		<org.jgrapht.graph.GenericGraphsTest.java:145, 40.00%>
		<org.jgrapht.graph.GenericGraphsTest.java:146, 40.00%>
	<org.jgrapht.graph.SimpleDirectedGraphTest: void testIncomingOutgoingEdgesOf()>:
		<org.jgrapht.graph.SimpleDirectedGraphTest.java:315, 128.57%>
	<org.jgrapht.graph.SubgraphTest: void testInducedSubgraphUnderlyingEdgeAddition()>:
		<org.jgrapht.graph.SubgraphTest.java:192, 20.00%>
	<org.jgrapht.traverse.AbstractGraphIteratorTest: void testDirectedGraph()>:
		<org.jgrapht.traverse.AbstractGraphIteratorTest.java:86, 47.06%>
		<org.jgrapht.traverse.AbstractGraphIteratorTest.java:88, 52.94%>
	<org.jgrapht.traverse.ClosestFirstIteratorTest: void testNoStart()>:
		<org.jgrapht.traverse.ClosestFirstIteratorTest.java:103, 53.85%>
	<org.jgrapht.traverse.ClosestFirstIteratorTest: void testRadius()>:
		<org.jgrapht.traverse.ClosestFirstIteratorTest.java:80, 53.85%>
	<org.jgrapht.traverse.DepthFirstIteratorTest: void testBug1169182()>:
		<org.jgrapht.traverse.DepthFirstIteratorTest.java:149, 16.00%>
	<org.jgrapht.traverse.TopologicalOrderIteratorTest: void testEmptyGraph()>:
		<org.jgrapht.traverse.TopologicalOrderIteratorTest.java:136, 50.00%>
	<org.jgrapht.traverse.TopologicalOrderIteratorTest: void testRecipe()>:
		<org.jgrapht.traverse.TopologicalOrderIteratorTest.java:109, 9.62%>
		<org.jgrapht.traverse.TopologicalOrderIteratorTest.java:121, 9.62%>
	<org.jgrapht.util.FibonacciHeapTest: void testAddRemoveOne()>:
		<org.jgrapht.util.FibonacciHeapTest.java:57, 25.00%>
		<org.jgrapht.util.FibonacciHeapTest.java:59, 25.00%>
		<org.jgrapht.util.FibonacciHeapTest.java:61, 50.00%>
		<org.jgrapht.util.FibonacciHeapTest.java:62, 25.00%>

Relevant Assertion clone sets (10):
Set (score: 1.00, ccsize: 2, packages: 1, classes: 1): 
	<org.jgrapht.alg.ConnectivityInspectorTest: void testStronglyConnected1()>:
		<org.jgrapht.alg.ConnectivityInspectorTest.java:222, 12.00%>
	<org.jgrapht.alg.ConnectivityInspectorTest: void testStronglyConnected2()>:
		<org.jgrapht.alg.ConnectivityInspectorTest.java:279, 12.00%>
	<org.jgrapht.alg.ConnectivityInspectorTest: void testStronglyConnected3()>:
		<org.jgrapht.alg.ConnectivityInspectorTest.java:337, 13.04%>
Set (score: 1.00, ccsize: 2, packages: 1, classes: 1): 
	<org.jgrapht.experimental.GraphReaderTest: void testGraphReader()>:
		<org.jgrapht.experimental.GraphReaderTest.java:88, 27.27%>
	<org.jgrapht.experimental.GraphReaderTest: void testGraphReaderWeighted()>:
		<org.jgrapht.experimental.GraphReaderTest.java:116, 23.08%>
Set (score: 0.67, ccsize: 3, packages: 1, classes: 2): 
	<org.jgrapht.alg.BiconnectivityInspectorTest: void testBiconnected()>:
		<org.jgrapht.alg.BiconnectivityInspectorTest.java:65, 50.00%>
	<org.jgrapht.alg.BlockCutpointGraphTest: void testBiconnected()>:
		<org.jgrapht.alg.BlockCutpointGraphTest.java:67, 41.67%>
		<org.jgrapht.alg.BlockCutpointGraphTest.java:71, 41.67%>
Set (score: 0.67, ccsize: 3, packages: 1, classes: 2): 
	<org.jgrapht.alg.BiconnectivityInspectorTest: void testLinearGraph(int)>:
		<org.jgrapht.alg.BiconnectivityInspectorTest.java:88, 40.00%>
	<org.jgrapht.alg.BlockCutpointGraphTest: void testLinearGraph(int)>:
		<org.jgrapht.alg.BlockCutpointGraphTest.java:121, 33.33%>
		<org.jgrapht.alg.BlockCutpointGraphTest.java:125, 33.33%>
Set (score: 0.67, ccsize: 3, packages: 1, classes: 2): 
	<org.jgrapht.alg.BiconnectivityInspectorTest: void testNotBiconnected()>:
		<org.jgrapht.alg.BiconnectivityInspectorTest.java:100, 55.56%>
	<org.jgrapht.alg.BlockCutpointGraphTest: void testNotBiconnected()>:
		<org.jgrapht.alg.BlockCutpointGraphTest.java:135, 41.67%>
		<org.jgrapht.alg.BlockCutpointGraphTest.java:139, 41.67%>
Set (score: 0.67, ccsize: 2, packages: 1, classes: 2): 
	<org.jgrapht.ext.DOTExporterTest: void testUndirected()>:
		<org.jgrapht.ext.DOTExporterTest.java:110, 41.67%>
	<org.jgrapht.ext.GmlExporterTest: void testUndirected()>:
		<org.jgrapht.ext.GmlExporterTest.java:117, 62.50%>
Set (score: 0.67, ccsize: 2, packages: 1, classes: 1): 
	<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest: void testBipartiteMatching1()>:
		<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest.java:86, 6.76%>
	<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest: void testBipartiteMatching2()>:
		<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest.java:115, 5.21%>
Set (score: 0.50, ccsize: 4, packages: 1, classes: 2): 
	<org.jgrapht.alg.EulerianCircuitTest: void testEulerianCircuit()>:
		<org.jgrapht.alg.EulerianCircuitTest.java:78, 29.41%>
	<org.jgrapht.alg.HamiltonianCycleTest: void testHamiltonianCycle()>:
		<org.jgrapht.alg.HamiltonianCycleTest.java:89, 27.78%>
Set (score: 0.50, ccsize: 3, packages: 1, classes: 1): 
	<org.jgrapht.alg.KSPExampleTest: void testFourReturnedPathsJGraphT()>:
		<org.jgrapht.alg.KSPExampleTest.java:60, 55.56%>
	<org.jgrapht.alg.KSPExampleTest: void testThreeReturnedPathsJGraphT()>:
		<org.jgrapht.alg.KSPExampleTest.java:72, 60.00%>
	<org.jgrapht.alg.KSPExampleTest: void testTwoReturnedPathsJGraphT()>:
		<org.jgrapht.alg.KSPExampleTest.java:84, 60.00%>
Set (score: 0.50, ccsize: 2, packages: 1, classes: 1): 
	<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest: void testBipartiteMatching1()>:
		<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest.java:83, 6.76%>
	<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest: void testBipartiteMatching2()>:
		<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest.java:112, 5.21%>
==============================================

[124] Set (editDistance: 2, isComplete: false, packages: 13, classes: 35): 
Centroid (size: 2): <org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest: void testBipartiteMatching1()>

Methods (70): 
	<org.jgrapht.EnhancedTestCase: void assertFalse()>:
		<org.jgrapht.EnhancedTestCase.java:79, 100.00%>
	<org.jgrapht.EnhancedTestCase: void assertTrue()>:
		<org.jgrapht.EnhancedTestCase.java:87, 100.00%>
	<org.jgrapht.alg.BiconnectivityInspectorTest: void testLinearGraph(int)>:
		<org.jgrapht.alg.BiconnectivityInspectorTest.java:88, 40.00%>
		<org.jgrapht.alg.BiconnectivityInspectorTest.java:89, 40.00%>
	<org.jgrapht.alg.BiconnectivityInspectorTest: void testNotBiconnected()>:
		<org.jgrapht.alg.BiconnectivityInspectorTest.java:100, 55.56%>
		<org.jgrapht.alg.BiconnectivityInspectorTest.java:101, 55.56%>
	<org.jgrapht.alg.BlockCutpointGraphTest: void testBiconnected()>:
		<org.jgrapht.alg.BlockCutpointGraphTest.java:67, 41.67%>
		<org.jgrapht.alg.BlockCutpointGraphTest.java:71, 41.67%>
	<org.jgrapht.alg.BlockCutpointGraphTest: void testGetBlock(org.jgrapht.alg.BlockCutpointGraph)>:
		<org.jgrapht.alg.BlockCutpointGraphTest.java:88, 33.33%>
		<org.jgrapht.alg.BlockCutpointGraphTest.java:94, 19.05%>
	<org.jgrapht.alg.BlockCutpointGraphTest: void testLinearGraph(int)>:
		<org.jgrapht.alg.BlockCutpointGraphTest.java:121, 33.33%>
		<org.jgrapht.alg.BlockCutpointGraphTest.java:125, 33.33%>
	<org.jgrapht.alg.BlockCutpointGraphTest: void testNotBiconnected()>:
		<org.jgrapht.alg.BlockCutpointGraphTest.java:135, 41.67%>
		<org.jgrapht.alg.BlockCutpointGraphTest.java:139, 41.67%>
	<org.jgrapht.alg.ConnectivityInspectorTest: void testDirectedGraph()>:
		<org.jgrapht.alg.ConnectivityInspectorTest.java:139, 57.14%>
		<org.jgrapht.alg.ConnectivityInspectorTest.java:143, 57.14%>
	<org.jgrapht.alg.ConnectivityInspectorTest: void testStronglyConnected1()>:
		<org.jgrapht.alg.ConnectivityInspectorTest.java:211, 16.00%>
		<org.jgrapht.alg.ConnectivityInspectorTest.java:222, 12.00%>
		<org.jgrapht.alg.ConnectivityInspectorTest.java:225, 16.00%>
	<org.jgrapht.alg.ConnectivityInspectorTest: void testStronglyConnected2()>:
		<org.jgrapht.alg.ConnectivityInspectorTest.java:268, 16.00%>
		<org.jgrapht.alg.ConnectivityInspectorTest.java:279, 12.00%>
		<org.jgrapht.alg.ConnectivityInspectorTest.java:282, 16.00%>
	<org.jgrapht.alg.ConnectivityInspectorTest: void testStronglyConnected3()>:
		<org.jgrapht.alg.ConnectivityInspectorTest.java:325, 17.39%>
		<org.jgrapht.alg.ConnectivityInspectorTest.java:337, 13.04%>
		<org.jgrapht.alg.ConnectivityInspectorTest.java:340, 17.39%>
	<org.jgrapht.alg.FloydWarshallShortestPathsTest: void testCompareWithDijkstra()>:
		<org.jgrapht.alg.FloydWarshallShortestPathsTest.java:96, 7.41%>
		<org.jgrapht.alg.FloydWarshallShortestPathsTest.java:121, 7.41%>
	<org.jgrapht.alg.HamiltonianCycleTest: void testHamiltonianCycle()>:
		<org.jgrapht.alg.HamiltonianCycleTest.java:79, 33.33%>
		<org.jgrapht.alg.HamiltonianCycleTest.java:89, 27.78%>
	<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest: void testBipartiteMatching1()>:
		<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest.java:83, 6.76%>
		<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest.java:86, 6.76%>
	<org.jgrapht.alg.KSPDiscardsValidPathsTest: void testNot3connectedGraph()>:
		<org.jgrapht.alg.KSPDiscardsValidPathsTest.java:102, 87.50%>
	<org.jgrapht.alg.KSPExampleTest: void testFourReturnedPathsJGraphT()>:
		<org.jgrapht.alg.KSPExampleTest.java:60, 55.56%>
	<org.jgrapht.alg.KSPExampleTest: void testThreeReturnedPathsJGraphT()>:
		<org.jgrapht.alg.KSPExampleTest.java:72, 60.00%>
	<org.jgrapht.alg.KSPExampleTest: void testTwoReturnedPathsJGraphT()>:
		<org.jgrapht.alg.KSPExampleTest.java:84, 60.00%>
	<org.jgrapht.alg.KShortestPathCostTest: void testKShortestPathCompleteGraph4()>:
		<org.jgrapht.alg.KShortestPathCostTest.java:68, 27.78%>
		<org.jgrapht.alg.KShortestPathCostTest.java:74, 33.33%>
		<org.jgrapht.alg.KShortestPathCostTest.java:76, 38.89%>
		<org.jgrapht.alg.KShortestPathCostTest.java:78, 38.89%>
	<org.jgrapht.alg.KShortestPathCostTest: void verifyShortestPathsInIncreasingOrderOfWeight(org.jgrapht.Graph)>:
		<org.jgrapht.alg.KShortestPathCostTest.java:222, 30.77%>
		<org.jgrapht.alg.KShortestPathCostTest.java:225, 30.77%>
	<org.jgrapht.alg.KShortestPathCostTest: void verifyWeightsConsistency(java.util.List,java.util.List)>:
		<org.jgrapht.alg.KShortestPathCostTest.java:294, 53.85%>
	<org.jgrapht.alg.KShortestPathKValuesTest: void verifyNbPathsForAllPairsOfVertices(org.jgrapht.Graph)>:
		<org.jgrapht.alg.KShortestPathKValuesTest.java:148, 36.84%>
	<org.jgrapht.alg.KruskalMinimumSpanningTreeTest: void testMinimumSpanningTree()>:
		<org.jgrapht.alg.KruskalMinimumSpanningTreeTest.java:80, 19.05%>
		<org.jgrapht.alg.KruskalMinimumSpanningTreeTest.java:84, 38.10%>
	<org.jgrapht.alg.StoerWagnerMinimumCutTest: void testMinCut14()>:
		<org.jgrapht.alg.StoerWagnerMinimumCutTest.java:97, 16.67%>
	<org.jgrapht.alg.StoerWagnerMinimumCutTest: void testMinCutDisconnected()>:
		<org.jgrapht.alg.StoerWagnerMinimumCutTest.java:124, 22.73%>
	<org.jgrapht.alg.TransitiveClosureTest: void testLinearGraph()>:
		<org.jgrapht.alg.TransitiveClosureTest.java:75, 47.83%>
		<org.jgrapht.alg.TransitiveClosureTest.java:78, 43.48%>
	<org.jgrapht.alg.TransitiveClosureTest: void testRingGraph()>:
		<org.jgrapht.alg.TransitiveClosureTest.java:107, 45.45%>
		<org.jgrapht.alg.TransitiveClosureTest.java:110, 50.00%>
	<org.jgrapht.alg.VertexCoversTest: void testFind2ApproximationCover()>:
		<org.jgrapht.alg.VertexCoversTest.java:74, 60.00%>
	<org.jgrapht.alg.VertexCoversTest: void testFindGreedyCover()>:
		<org.jgrapht.alg.VertexCoversTest.java:89, 50.00%>
	<org.jgrapht.alg.util.UnionFindTest: void testIdentical(java.lang.String[],java.util.ArrayList,org.jgrapht.alg.util.UnionFind)>:
		<org.jgrapht.alg.util.UnionFindTest.java:131, 41.18%>
	<org.jgrapht.experimental.GraphReaderTest: void testGraphReader()>:
		<org.jgrapht.experimental.GraphReaderTest.java:88, 27.27%>
	<org.jgrapht.experimental.GraphReaderTest: void testGraphReaderWeighted()>:
		<org.jgrapht.experimental.GraphReaderTest.java:116, 23.08%>
	<org.jgrapht.experimental.dag.DirectedAcyclicGraphTest: void testCycleDetectionInRandomGraphBuild()>:
		<org.jgrapht.experimental.dag.DirectedAcyclicGraphTest.java:131, 14.29%>
		<org.jgrapht.experimental.dag.DirectedAcyclicGraphTest.java:141, 12.24%>
		<org.jgrapht.experimental.dag.DirectedAcyclicGraphTest.java:152, 6.12%>
	<org.jgrapht.experimental.dag.DirectedAcyclicGraphTest: void testTopoIterationOrderLinearGraph()>:
		<org.jgrapht.experimental.dag.DirectedAcyclicGraphTest.java:181, 29.41%>
		<org.jgrapht.experimental.dag.DirectedAcyclicGraphTest.java:182, 41.18%>
	<org.jgrapht.experimental.equivalence.EquivalenceGroupCreatorTest: void testOneComparator(org.jgrapht.experimental.equivalence.EquivalenceComparator,int)>:
		<org.jgrapht.experimental.equivalence.EquivalenceGroupCreatorTest.java:152, 23.53%>
		<org.jgrapht.experimental.equivalence.EquivalenceGroupCreatorTest.java:157, 41.18%>
	<org.jgrapht.experimental.isomorphism.IsomorphismInspectorTest: void assertIsomorphic(org.jgrapht.Graph[],boolean,org.jgrapht.experimental.equivalence.EquivalenceComparator,org.jgrapht.experimental.equivalence.EquivalenceComparator)>:
		<org.jgrapht.experimental.isomorphism.IsomorphismInspectorTest.java:138, 28.57%>
		<org.jgrapht.experimental.isomorphism.IsomorphismInspectorTest.java:140, 28.57%>
	<org.jgrapht.experimental.isomorphism.IsomorphismInspectorTest: void assertIsomorphicStopAfterFirstMatch(org.jgrapht.Graph[],boolean,boolean,org.jgrapht.experimental.equivalence.EquivalenceComparator,org.jgrapht.experimental.equivalence.EquivalenceComparator)>:
		<org.jgrapht.experimental.isomorphism.IsomorphismInspectorTest.java:485, 14.71%>
	<org.jgrapht.experimental.permutation.CompoundPermutationIterTest: void testGetNext()>:
		<org.jgrapht.experimental.permutation.CompoundPermutationIterTest.java:96, 40.00%>
		<org.jgrapht.experimental.permutation.CompoundPermutationIterTest.java:127, 40.00%>
	<org.jgrapht.ext.DOTExporterTest: void testUndirected()>:
		<org.jgrapht.ext.DOTExporterTest.java:110, 41.67%>
	<org.jgrapht.ext.DOTExporterTest: void testValidNodeIDs()>:
		<org.jgrapht.ext.DOTExporterTest.java:149, 16.00%>
	<org.jgrapht.ext.GmlExporterTest: void testUndirected()>:
		<org.jgrapht.ext.GmlExporterTest.java:117, 62.50%>
	<org.jgrapht.ext.MatrixExporterTest: void testAdjacencyDirected()>:
		<org.jgrapht.ext.MatrixExporterTest.java:149, 62.50%>
	<org.jgrapht.ext.MatrixExporterTest: void testAdjacencyUndirected()>:
		<org.jgrapht.ext.MatrixExporterTest.java:133, 62.50%>
	<org.jgrapht.ext.MatrixExporterTest: void testLaplacian()>:
		<org.jgrapht.ext.MatrixExporterTest.java:113, 38.46%>
		<org.jgrapht.ext.MatrixExporterTest.java:117, 38.46%>
	<org.jgrapht.generate.GraphGeneratorTest: void testCompleteBipartiteGraphGenerator()>:
		<org.jgrapht.generate.GraphGeneratorTest.java:243, 50.00%>
		<org.jgrapht.generate.GraphGeneratorTest.java:244, 50.00%>
	<org.jgrapht.generate.GraphGeneratorTest: void testCompleteGraphGenerator()>:
		<org.jgrapht.generate.GraphGeneratorTest.java:185, 62.50%>
	<org.jgrapht.generate.GraphGeneratorTest: void testHyperCubeGraphGenerator()>:
		<org.jgrapht.generate.GraphGeneratorTest.java:265, 50.00%>
		<org.jgrapht.generate.GraphGeneratorTest.java:266, 50.00%>
	<org.jgrapht.generate.RandomGraphGeneratorTest: void testBadVertexFactory()>:
		<org.jgrapht.generate.RandomGraphGeneratorTest.java:106, 12.50%>
	<org.jgrapht.generate.RandomGraphGeneratorTest: void testGenerateDirectedGraph()>:
		<org.jgrapht.generate.RandomGraphGeneratorTest.java:70, 20.00%>
	<org.jgrapht.generate.RandomGraphGeneratorTest: void testGenerateListenableUndirectedGraph()>:
		<org.jgrapht.generate.RandomGraphGeneratorTest.java:89, 20.00%>
	<org.jgrapht.graph.AsUndirectedGraphTest: void testAddEdge()>:
		<org.jgrapht.graph.AsUndirectedGraphTest.java:89, 100.00%>
	<org.jgrapht.graph.AsUndirectedGraphTest: void testAddVertex()>:
		<org.jgrapht.graph.AsUndirectedGraphTest.java:102, 85.71%>
		<org.jgrapht.graph.AsUndirectedGraphTest.java:103, 100.00%>
	<org.jgrapht.graph.AsUndirectedGraphTest: void testGetEdge()>:
		<org.jgrapht.graph.AsUndirectedGraphTest.java:137, 44.00%>
		<org.jgrapht.graph.AsUndirectedGraphTest.java:140, 68.00%>
		<org.jgrapht.graph.AsUndirectedGraphTest.java:144, 92.00%>
	<org.jgrapht.graph.AsUndirectedGraphTest: void testRemoveEdge()>:
		<org.jgrapht.graph.AsUndirectedGraphTest.java:155, 88.89%>
		<org.jgrapht.graph.AsUndirectedGraphTest.java:156, 111.11%>
	<org.jgrapht.graph.AsUndirectedGraphTest: void testRemoveVertex()>:
		<org.jgrapht.graph.AsUndirectedGraphTest.java:165, 88.89%>
		<org.jgrapht.graph.AsUndirectedGraphTest.java:166, 111.11%>
	<org.jgrapht.graph.DefaultDirectedGraphTest: void testEdgesOf()>:
		<org.jgrapht.graph.DefaultDirectedGraphTest.java:117, 75.00%>
		<org.jgrapht.graph.DefaultDirectedGraphTest.java:118, 75.00%>
	<org.jgrapht.graph.DefaultDirectedGraphTest: void testGetAllEdges()>:
		<org.jgrapht.graph.DefaultDirectedGraphTest.java:130, 100.00%>
	<org.jgrapht.graph.DefaultDirectedGraphTest: void testInDegreeOf()>:
		<org.jgrapht.graph.DefaultDirectedGraphTest.java:141, 83.33%>
		<org.jgrapht.graph.DefaultDirectedGraphTest.java:142, 83.33%>
	<org.jgrapht.graph.DefaultDirectedGraphTest: void testOutDegreeOf()>:
		<org.jgrapht.graph.DefaultDirectedGraphTest.java:153, 83.33%>
		<org.jgrapht.graph.DefaultDirectedGraphTest.java:154, 83.33%>
	<org.jgrapht.graph.GenericGraphsTest: void testAlissaHacker()>:
		<org.jgrapht.graph.GenericGraphsTest.java:134, 83.33%>
	<org.jgrapht.graph.GenericGraphsTest: void testEqualButNotSameVertex()>:
		<org.jgrapht.graph.GenericGraphsTest.java:145, 40.00%>
		<org.jgrapht.graph.GenericGraphsTest.java:146, 40.00%>
	<org.jgrapht.graph.SubgraphTest: void testInducedSubgraphUnderlyingEdgeAddition()>:
		<org.jgrapht.graph.SubgraphTest.java:192, 20.00%>
	<org.jgrapht.traverse.AbstractGraphIteratorTest: void testDirectedGraph()>:
		<org.jgrapht.traverse.AbstractGraphIteratorTest.java:86, 47.06%>
		<org.jgrapht.traverse.AbstractGraphIteratorTest.java:88, 52.94%>
	<org.jgrapht.traverse.ClosestFirstIteratorTest: void testNoStart()>:
		<org.jgrapht.traverse.ClosestFirstIteratorTest.java:103, 53.85%>
	<org.jgrapht.traverse.ClosestFirstIteratorTest: void testRadius()>:
		<org.jgrapht.traverse.ClosestFirstIteratorTest.java:80, 53.85%>
	<org.jgrapht.traverse.DepthFirstIteratorTest: void testBug1169182()>:
		<org.jgrapht.traverse.DepthFirstIteratorTest.java:149, 16.00%>
	<org.jgrapht.traverse.TopologicalOrderIteratorTest: void testEmptyGraph()>:
		<org.jgrapht.traverse.TopologicalOrderIteratorTest.java:136, 50.00%>
	<org.jgrapht.traverse.TopologicalOrderIteratorTest: void testRecipe()>:
		<org.jgrapht.traverse.TopologicalOrderIteratorTest.java:109, 9.62%>
		<org.jgrapht.traverse.TopologicalOrderIteratorTest.java:121, 9.62%>
	<org.jgrapht.util.FibonacciHeapTest: void testGrowReplaceShrink()>:
		<org.jgrapht.util.FibonacciHeapTest.java:88, 17.65%>
		<org.jgrapht.util.FibonacciHeapTest.java:91, 17.65%>

Relevant Assertion clone sets (7):
Set (score: 1.00, ccsize: 2, packages: 1, classes: 1): 
	<org.jgrapht.alg.ConnectivityInspectorTest: void testStronglyConnected1()>:
		<org.jgrapht.alg.ConnectivityInspectorTest.java:222, 12.00%>
	<org.jgrapht.alg.ConnectivityInspectorTest: void testStronglyConnected2()>:
		<org.jgrapht.alg.ConnectivityInspectorTest.java:279, 12.00%>
	<org.jgrapht.alg.ConnectivityInspectorTest: void testStronglyConnected3()>:
		<org.jgrapht.alg.ConnectivityInspectorTest.java:337, 13.04%>
Set (score: 1.00, ccsize: 2, packages: 1, classes: 1): 
	<org.jgrapht.alg.VertexCoversTest: void testFind2ApproximationCover()>:
		<org.jgrapht.alg.VertexCoversTest.java:74, 60.00%>
	<org.jgrapht.alg.VertexCoversTest: void testFindGreedyCover()>:
		<org.jgrapht.alg.VertexCoversTest.java:89, 50.00%>
Set (score: 1.00, ccsize: 2, packages: 1, classes: 1): 
	<org.jgrapht.experimental.GraphReaderTest: void testGraphReader()>:
		<org.jgrapht.experimental.GraphReaderTest.java:88, 27.27%>
	<org.jgrapht.experimental.GraphReaderTest: void testGraphReaderWeighted()>:
		<org.jgrapht.experimental.GraphReaderTest.java:116, 23.08%>
Set (score: 0.67, ccsize: 3, packages: 1, classes: 2): 
	<org.jgrapht.alg.BiconnectivityInspectorTest: void testLinearGraph(int)>:
		<org.jgrapht.alg.BiconnectivityInspectorTest.java:88, 40.00%>
	<org.jgrapht.alg.BlockCutpointGraphTest: void testLinearGraph(int)>:
		<org.jgrapht.alg.BlockCutpointGraphTest.java:121, 33.33%>
		<org.jgrapht.alg.BlockCutpointGraphTest.java:125, 33.33%>
Set (score: 0.67, ccsize: 3, packages: 1, classes: 2): 
	<org.jgrapht.alg.BiconnectivityInspectorTest: void testNotBiconnected()>:
		<org.jgrapht.alg.BiconnectivityInspectorTest.java:100, 55.56%>
	<org.jgrapht.alg.BlockCutpointGraphTest: void testNotBiconnected()>:
		<org.jgrapht.alg.BlockCutpointGraphTest.java:135, 41.67%>
		<org.jgrapht.alg.BlockCutpointGraphTest.java:139, 41.67%>
Set (score: 0.67, ccsize: 2, packages: 1, classes: 2): 
	<org.jgrapht.ext.DOTExporterTest: void testUndirected()>:
		<org.jgrapht.ext.DOTExporterTest.java:110, 41.67%>
	<org.jgrapht.ext.GmlExporterTest: void testUndirected()>:
		<org.jgrapht.ext.GmlExporterTest.java:117, 62.50%>
Set (score: 0.50, ccsize: 3, packages: 1, classes: 1): 
	<org.jgrapht.alg.KSPExampleTest: void testFourReturnedPathsJGraphT()>:
		<org.jgrapht.alg.KSPExampleTest.java:60, 55.56%>
	<org.jgrapht.alg.KSPExampleTest: void testThreeReturnedPathsJGraphT()>:
		<org.jgrapht.alg.KSPExampleTest.java:72, 60.00%>
	<org.jgrapht.alg.KSPExampleTest: void testTwoReturnedPathsJGraphT()>:
		<org.jgrapht.alg.KSPExampleTest.java:84, 60.00%>
==============================================

[125] Set (editDistance: 2, isComplete: false, packages: 13, classes: 35): 
Centroid (size: 2): <org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest: void testBipartiteMatching2()>

Methods (70): 
	<org.jgrapht.EnhancedTestCase: void assertFalse()>:
		<org.jgrapht.EnhancedTestCase.java:79, 100.00%>
	<org.jgrapht.EnhancedTestCase: void assertTrue()>:
		<org.jgrapht.EnhancedTestCase.java:87, 100.00%>
	<org.jgrapht.alg.BiconnectivityInspectorTest: void testLinearGraph(int)>:
		<org.jgrapht.alg.BiconnectivityInspectorTest.java:88, 40.00%>
		<org.jgrapht.alg.BiconnectivityInspectorTest.java:89, 40.00%>
	<org.jgrapht.alg.BiconnectivityInspectorTest: void testNotBiconnected()>:
		<org.jgrapht.alg.BiconnectivityInspectorTest.java:100, 55.56%>
		<org.jgrapht.alg.BiconnectivityInspectorTest.java:101, 55.56%>
	<org.jgrapht.alg.BlockCutpointGraphTest: void testBiconnected()>:
		<org.jgrapht.alg.BlockCutpointGraphTest.java:67, 41.67%>
		<org.jgrapht.alg.BlockCutpointGraphTest.java:71, 41.67%>
	<org.jgrapht.alg.BlockCutpointGraphTest: void testGetBlock(org.jgrapht.alg.BlockCutpointGraph)>:
		<org.jgrapht.alg.BlockCutpointGraphTest.java:88, 33.33%>
		<org.jgrapht.alg.BlockCutpointGraphTest.java:94, 19.05%>
	<org.jgrapht.alg.BlockCutpointGraphTest: void testLinearGraph(int)>:
		<org.jgrapht.alg.BlockCutpointGraphTest.java:121, 33.33%>
		<org.jgrapht.alg.BlockCutpointGraphTest.java:125, 33.33%>
	<org.jgrapht.alg.BlockCutpointGraphTest: void testNotBiconnected()>:
		<org.jgrapht.alg.BlockCutpointGraphTest.java:135, 41.67%>
		<org.jgrapht.alg.BlockCutpointGraphTest.java:139, 41.67%>
	<org.jgrapht.alg.ConnectivityInspectorTest: void testDirectedGraph()>:
		<org.jgrapht.alg.ConnectivityInspectorTest.java:139, 57.14%>
		<org.jgrapht.alg.ConnectivityInspectorTest.java:143, 57.14%>
	<org.jgrapht.alg.ConnectivityInspectorTest: void testStronglyConnected1()>:
		<org.jgrapht.alg.ConnectivityInspectorTest.java:211, 16.00%>
		<org.jgrapht.alg.ConnectivityInspectorTest.java:222, 12.00%>
		<org.jgrapht.alg.ConnectivityInspectorTest.java:225, 16.00%>
	<org.jgrapht.alg.ConnectivityInspectorTest: void testStronglyConnected2()>:
		<org.jgrapht.alg.ConnectivityInspectorTest.java:268, 16.00%>
		<org.jgrapht.alg.ConnectivityInspectorTest.java:279, 12.00%>
		<org.jgrapht.alg.ConnectivityInspectorTest.java:282, 16.00%>
	<org.jgrapht.alg.ConnectivityInspectorTest: void testStronglyConnected3()>:
		<org.jgrapht.alg.ConnectivityInspectorTest.java:325, 17.39%>
		<org.jgrapht.alg.ConnectivityInspectorTest.java:337, 13.04%>
		<org.jgrapht.alg.ConnectivityInspectorTest.java:340, 17.39%>
	<org.jgrapht.alg.FloydWarshallShortestPathsTest: void testCompareWithDijkstra()>:
		<org.jgrapht.alg.FloydWarshallShortestPathsTest.java:96, 7.41%>
		<org.jgrapht.alg.FloydWarshallShortestPathsTest.java:121, 7.41%>
	<org.jgrapht.alg.HamiltonianCycleTest: void testHamiltonianCycle()>:
		<org.jgrapht.alg.HamiltonianCycleTest.java:79, 33.33%>
		<org.jgrapht.alg.HamiltonianCycleTest.java:89, 27.78%>
	<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest: void testBipartiteMatching2()>:
		<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest.java:112, 5.21%>
		<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest.java:115, 5.21%>
	<org.jgrapht.alg.KSPDiscardsValidPathsTest: void testNot3connectedGraph()>:
		<org.jgrapht.alg.KSPDiscardsValidPathsTest.java:102, 87.50%>
	<org.jgrapht.alg.KSPExampleTest: void testFourReturnedPathsJGraphT()>:
		<org.jgrapht.alg.KSPExampleTest.java:60, 55.56%>
	<org.jgrapht.alg.KSPExampleTest: void testThreeReturnedPathsJGraphT()>:
		<org.jgrapht.alg.KSPExampleTest.java:72, 60.00%>
	<org.jgrapht.alg.KSPExampleTest: void testTwoReturnedPathsJGraphT()>:
		<org.jgrapht.alg.KSPExampleTest.java:84, 60.00%>
	<org.jgrapht.alg.KShortestPathCostTest: void testKShortestPathCompleteGraph4()>:
		<org.jgrapht.alg.KShortestPathCostTest.java:68, 27.78%>
		<org.jgrapht.alg.KShortestPathCostTest.java:74, 33.33%>
		<org.jgrapht.alg.KShortestPathCostTest.java:76, 38.89%>
		<org.jgrapht.alg.KShortestPathCostTest.java:78, 38.89%>
	<org.jgrapht.alg.KShortestPathCostTest: void verifyShortestPathsInIncreasingOrderOfWeight(org.jgrapht.Graph)>:
		<org.jgrapht.alg.KShortestPathCostTest.java:222, 30.77%>
		<org.jgrapht.alg.KShortestPathCostTest.java:225, 30.77%>
	<org.jgrapht.alg.KShortestPathCostTest: void verifyWeightsConsistency(java.util.List,java.util.List)>:
		<org.jgrapht.alg.KShortestPathCostTest.java:294, 53.85%>
	<org.jgrapht.alg.KShortestPathKValuesTest: void verifyNbPathsForAllPairsOfVertices(org.jgrapht.Graph)>:
		<org.jgrapht.alg.KShortestPathKValuesTest.java:148, 36.84%>
	<org.jgrapht.alg.KruskalMinimumSpanningTreeTest: void testMinimumSpanningTree()>:
		<org.jgrapht.alg.KruskalMinimumSpanningTreeTest.java:80, 19.05%>
		<org.jgrapht.alg.KruskalMinimumSpanningTreeTest.java:84, 38.10%>
	<org.jgrapht.alg.StoerWagnerMinimumCutTest: void testMinCut14()>:
		<org.jgrapht.alg.StoerWagnerMinimumCutTest.java:97, 16.67%>
	<org.jgrapht.alg.StoerWagnerMinimumCutTest: void testMinCutDisconnected()>:
		<org.jgrapht.alg.StoerWagnerMinimumCutTest.java:124, 22.73%>
	<org.jgrapht.alg.TransitiveClosureTest: void testLinearGraph()>:
		<org.jgrapht.alg.TransitiveClosureTest.java:75, 47.83%>
		<org.jgrapht.alg.TransitiveClosureTest.java:78, 43.48%>
	<org.jgrapht.alg.TransitiveClosureTest: void testRingGraph()>:
		<org.jgrapht.alg.TransitiveClosureTest.java:107, 45.45%>
		<org.jgrapht.alg.TransitiveClosureTest.java:110, 50.00%>
	<org.jgrapht.alg.VertexCoversTest: void testFind2ApproximationCover()>:
		<org.jgrapht.alg.VertexCoversTest.java:74, 60.00%>
	<org.jgrapht.alg.VertexCoversTest: void testFindGreedyCover()>:
		<org.jgrapht.alg.VertexCoversTest.java:89, 50.00%>
	<org.jgrapht.alg.util.UnionFindTest: void testIdentical(java.lang.String[],java.util.ArrayList,org.jgrapht.alg.util.UnionFind)>:
		<org.jgrapht.alg.util.UnionFindTest.java:131, 41.18%>
	<org.jgrapht.experimental.GraphReaderTest: void testGraphReader()>:
		<org.jgrapht.experimental.GraphReaderTest.java:88, 27.27%>
	<org.jgrapht.experimental.GraphReaderTest: void testGraphReaderWeighted()>:
		<org.jgrapht.experimental.GraphReaderTest.java:116, 23.08%>
	<org.jgrapht.experimental.dag.DirectedAcyclicGraphTest: void testCycleDetectionInRandomGraphBuild()>:
		<org.jgrapht.experimental.dag.DirectedAcyclicGraphTest.java:131, 14.29%>
		<org.jgrapht.experimental.dag.DirectedAcyclicGraphTest.java:141, 12.24%>
		<org.jgrapht.experimental.dag.DirectedAcyclicGraphTest.java:152, 6.12%>
	<org.jgrapht.experimental.dag.DirectedAcyclicGraphTest: void testTopoIterationOrderLinearGraph()>:
		<org.jgrapht.experimental.dag.DirectedAcyclicGraphTest.java:181, 29.41%>
		<org.jgrapht.experimental.dag.DirectedAcyclicGraphTest.java:182, 41.18%>
	<org.jgrapht.experimental.equivalence.EquivalenceGroupCreatorTest: void testOneComparator(org.jgrapht.experimental.equivalence.EquivalenceComparator,int)>:
		<org.jgrapht.experimental.equivalence.EquivalenceGroupCreatorTest.java:152, 23.53%>
		<org.jgrapht.experimental.equivalence.EquivalenceGroupCreatorTest.java:157, 41.18%>
	<org.jgrapht.experimental.isomorphism.IsomorphismInspectorTest: void assertIsomorphic(org.jgrapht.Graph[],boolean,org.jgrapht.experimental.equivalence.EquivalenceComparator,org.jgrapht.experimental.equivalence.EquivalenceComparator)>:
		<org.jgrapht.experimental.isomorphism.IsomorphismInspectorTest.java:138, 28.57%>
		<org.jgrapht.experimental.isomorphism.IsomorphismInspectorTest.java:140, 28.57%>
	<org.jgrapht.experimental.isomorphism.IsomorphismInspectorTest: void assertIsomorphicStopAfterFirstMatch(org.jgrapht.Graph[],boolean,boolean,org.jgrapht.experimental.equivalence.EquivalenceComparator,org.jgrapht.experimental.equivalence.EquivalenceComparator)>:
		<org.jgrapht.experimental.isomorphism.IsomorphismInspectorTest.java:485, 14.71%>
	<org.jgrapht.experimental.permutation.CompoundPermutationIterTest: void testGetNext()>:
		<org.jgrapht.experimental.permutation.CompoundPermutationIterTest.java:96, 40.00%>
		<org.jgrapht.experimental.permutation.CompoundPermutationIterTest.java:127, 40.00%>
	<org.jgrapht.ext.DOTExporterTest: void testUndirected()>:
		<org.jgrapht.ext.DOTExporterTest.java:110, 41.67%>
	<org.jgrapht.ext.DOTExporterTest: void testValidNodeIDs()>:
		<org.jgrapht.ext.DOTExporterTest.java:149, 16.00%>
	<org.jgrapht.ext.GmlExporterTest: void testUndirected()>:
		<org.jgrapht.ext.GmlExporterTest.java:117, 62.50%>
	<org.jgrapht.ext.MatrixExporterTest: void testAdjacencyDirected()>:
		<org.jgrapht.ext.MatrixExporterTest.java:149, 62.50%>
	<org.jgrapht.ext.MatrixExporterTest: void testAdjacencyUndirected()>:
		<org.jgrapht.ext.MatrixExporterTest.java:133, 62.50%>
	<org.jgrapht.ext.MatrixExporterTest: void testLaplacian()>:
		<org.jgrapht.ext.MatrixExporterTest.java:113, 38.46%>
		<org.jgrapht.ext.MatrixExporterTest.java:117, 38.46%>
	<org.jgrapht.generate.GraphGeneratorTest: void testCompleteBipartiteGraphGenerator()>:
		<org.jgrapht.generate.GraphGeneratorTest.java:243, 50.00%>
		<org.jgrapht.generate.GraphGeneratorTest.java:244, 50.00%>
	<org.jgrapht.generate.GraphGeneratorTest: void testCompleteGraphGenerator()>:
		<org.jgrapht.generate.GraphGeneratorTest.java:185, 62.50%>
	<org.jgrapht.generate.GraphGeneratorTest: void testHyperCubeGraphGenerator()>:
		<org.jgrapht.generate.GraphGeneratorTest.java:265, 50.00%>
		<org.jgrapht.generate.GraphGeneratorTest.java:266, 50.00%>
	<org.jgrapht.generate.RandomGraphGeneratorTest: void testBadVertexFactory()>:
		<org.jgrapht.generate.RandomGraphGeneratorTest.java:106, 12.50%>
	<org.jgrapht.generate.RandomGraphGeneratorTest: void testGenerateDirectedGraph()>:
		<org.jgrapht.generate.RandomGraphGeneratorTest.java:70, 20.00%>
	<org.jgrapht.generate.RandomGraphGeneratorTest: void testGenerateListenableUndirectedGraph()>:
		<org.jgrapht.generate.RandomGraphGeneratorTest.java:89, 20.00%>
	<org.jgrapht.graph.AsUndirectedGraphTest: void testAddEdge()>:
		<org.jgrapht.graph.AsUndirectedGraphTest.java:89, 100.00%>
	<org.jgrapht.graph.AsUndirectedGraphTest: void testAddVertex()>:
		<org.jgrapht.graph.AsUndirectedGraphTest.java:102, 85.71%>
		<org.jgrapht.graph.AsUndirectedGraphTest.java:103, 100.00%>
	<org.jgrapht.graph.AsUndirectedGraphTest: void testGetEdge()>:
		<org.jgrapht.graph.AsUndirectedGraphTest.java:137, 44.00%>
		<org.jgrapht.graph.AsUndirectedGraphTest.java:140, 68.00%>
		<org.jgrapht.graph.AsUndirectedGraphTest.java:144, 92.00%>
	<org.jgrapht.graph.AsUndirectedGraphTest: void testRemoveEdge()>:
		<org.jgrapht.graph.AsUndirectedGraphTest.java:155, 88.89%>
		<org.jgrapht.graph.AsUndirectedGraphTest.java:156, 111.11%>
	<org.jgrapht.graph.AsUndirectedGraphTest: void testRemoveVertex()>:
		<org.jgrapht.graph.AsUndirectedGraphTest.java:165, 88.89%>
		<org.jgrapht.graph.AsUndirectedGraphTest.java:166, 111.11%>
	<org.jgrapht.graph.DefaultDirectedGraphTest: void testEdgesOf()>:
		<org.jgrapht.graph.DefaultDirectedGraphTest.java:117, 75.00%>
		<org.jgrapht.graph.DefaultDirectedGraphTest.java:118, 75.00%>
	<org.jgrapht.graph.DefaultDirectedGraphTest: void testGetAllEdges()>:
		<org.jgrapht.graph.DefaultDirectedGraphTest.java:130, 100.00%>
	<org.jgrapht.graph.DefaultDirectedGraphTest: void testInDegreeOf()>:
		<org.jgrapht.graph.DefaultDirectedGraphTest.java:141, 83.33%>
		<org.jgrapht.graph.DefaultDirectedGraphTest.java:142, 83.33%>
	<org.jgrapht.graph.DefaultDirectedGraphTest: void testOutDegreeOf()>:
		<org.jgrapht.graph.DefaultDirectedGraphTest.java:153, 83.33%>
		<org.jgrapht.graph.DefaultDirectedGraphTest.java:154, 83.33%>
	<org.jgrapht.graph.GenericGraphsTest: void testAlissaHacker()>:
		<org.jgrapht.graph.GenericGraphsTest.java:134, 83.33%>
	<org.jgrapht.graph.GenericGraphsTest: void testEqualButNotSameVertex()>:
		<org.jgrapht.graph.GenericGraphsTest.java:145, 40.00%>
		<org.jgrapht.graph.GenericGraphsTest.java:146, 40.00%>
	<org.jgrapht.graph.SubgraphTest: void testInducedSubgraphUnderlyingEdgeAddition()>:
		<org.jgrapht.graph.SubgraphTest.java:192, 20.00%>
	<org.jgrapht.traverse.AbstractGraphIteratorTest: void testDirectedGraph()>:
		<org.jgrapht.traverse.AbstractGraphIteratorTest.java:86, 47.06%>
		<org.jgrapht.traverse.AbstractGraphIteratorTest.java:88, 52.94%>
	<org.jgrapht.traverse.ClosestFirstIteratorTest: void testNoStart()>:
		<org.jgrapht.traverse.ClosestFirstIteratorTest.java:103, 53.85%>
	<org.jgrapht.traverse.ClosestFirstIteratorTest: void testRadius()>:
		<org.jgrapht.traverse.ClosestFirstIteratorTest.java:80, 53.85%>
	<org.jgrapht.traverse.DepthFirstIteratorTest: void testBug1169182()>:
		<org.jgrapht.traverse.DepthFirstIteratorTest.java:149, 16.00%>
	<org.jgrapht.traverse.TopologicalOrderIteratorTest: void testEmptyGraph()>:
		<org.jgrapht.traverse.TopologicalOrderIteratorTest.java:136, 50.00%>
	<org.jgrapht.traverse.TopologicalOrderIteratorTest: void testRecipe()>:
		<org.jgrapht.traverse.TopologicalOrderIteratorTest.java:109, 9.62%>
		<org.jgrapht.traverse.TopologicalOrderIteratorTest.java:121, 9.62%>
	<org.jgrapht.util.FibonacciHeapTest: void testGrowReplaceShrink()>:
		<org.jgrapht.util.FibonacciHeapTest.java:88, 17.65%>
		<org.jgrapht.util.FibonacciHeapTest.java:91, 17.65%>

Relevant Assertion clone sets (7):
Set (score: 1.00, ccsize: 2, packages: 1, classes: 1): 
	<org.jgrapht.alg.ConnectivityInspectorTest: void testStronglyConnected1()>:
		<org.jgrapht.alg.ConnectivityInspectorTest.java:222, 12.00%>
	<org.jgrapht.alg.ConnectivityInspectorTest: void testStronglyConnected2()>:
		<org.jgrapht.alg.ConnectivityInspectorTest.java:279, 12.00%>
	<org.jgrapht.alg.ConnectivityInspectorTest: void testStronglyConnected3()>:
		<org.jgrapht.alg.ConnectivityInspectorTest.java:337, 13.04%>
Set (score: 1.00, ccsize: 2, packages: 1, classes: 1): 
	<org.jgrapht.alg.VertexCoversTest: void testFind2ApproximationCover()>:
		<org.jgrapht.alg.VertexCoversTest.java:74, 60.00%>
	<org.jgrapht.alg.VertexCoversTest: void testFindGreedyCover()>:
		<org.jgrapht.alg.VertexCoversTest.java:89, 50.00%>
Set (score: 1.00, ccsize: 2, packages: 1, classes: 1): 
	<org.jgrapht.experimental.GraphReaderTest: void testGraphReader()>:
		<org.jgrapht.experimental.GraphReaderTest.java:88, 27.27%>
	<org.jgrapht.experimental.GraphReaderTest: void testGraphReaderWeighted()>:
		<org.jgrapht.experimental.GraphReaderTest.java:116, 23.08%>
Set (score: 0.67, ccsize: 3, packages: 1, classes: 2): 
	<org.jgrapht.alg.BiconnectivityInspectorTest: void testLinearGraph(int)>:
		<org.jgrapht.alg.BiconnectivityInspectorTest.java:88, 40.00%>
	<org.jgrapht.alg.BlockCutpointGraphTest: void testLinearGraph(int)>:
		<org.jgrapht.alg.BlockCutpointGraphTest.java:121, 33.33%>
		<org.jgrapht.alg.BlockCutpointGraphTest.java:125, 33.33%>
Set (score: 0.67, ccsize: 3, packages: 1, classes: 2): 
	<org.jgrapht.alg.BiconnectivityInspectorTest: void testNotBiconnected()>:
		<org.jgrapht.alg.BiconnectivityInspectorTest.java:100, 55.56%>
	<org.jgrapht.alg.BlockCutpointGraphTest: void testNotBiconnected()>:
		<org.jgrapht.alg.BlockCutpointGraphTest.java:135, 41.67%>
		<org.jgrapht.alg.BlockCutpointGraphTest.java:139, 41.67%>
Set (score: 0.67, ccsize: 2, packages: 1, classes: 2): 
	<org.jgrapht.ext.DOTExporterTest: void testUndirected()>:
		<org.jgrapht.ext.DOTExporterTest.java:110, 41.67%>
	<org.jgrapht.ext.GmlExporterTest: void testUndirected()>:
		<org.jgrapht.ext.GmlExporterTest.java:117, 62.50%>
Set (score: 0.50, ccsize: 3, packages: 1, classes: 1): 
	<org.jgrapht.alg.KSPExampleTest: void testFourReturnedPathsJGraphT()>:
		<org.jgrapht.alg.KSPExampleTest.java:60, 55.56%>
	<org.jgrapht.alg.KSPExampleTest: void testThreeReturnedPathsJGraphT()>:
		<org.jgrapht.alg.KSPExampleTest.java:72, 60.00%>
	<org.jgrapht.alg.KSPExampleTest: void testTwoReturnedPathsJGraphT()>:
		<org.jgrapht.alg.KSPExampleTest.java:84, 60.00%>
==============================================

[126] Set (editDistance: 2, isComplete: false, packages: 12, classes: 36): 
Centroid (size: 2): <org.jgrapht.alg.KShortestPathCostTest: void verifyShortestPathsInIncreasingOrderOfWeight(org.jgrapht.Graph)>

Methods (71): 
	<org.jgrapht.alg.BellmanFordShortestPathTest: void testWithNegativeEdges()>:
		<org.jgrapht.alg.BellmanFordShortestPathTest.java:120, 45.45%>
		<org.jgrapht.alg.BellmanFordShortestPathTest.java:127, 63.64%>
	<org.jgrapht.alg.BiconnectivityInspectorTest: void testBiconnected()>:
		<org.jgrapht.alg.BiconnectivityInspectorTest.java:64, 30.00%>
		<org.jgrapht.alg.BiconnectivityInspectorTest.java:65, 50.00%>
		<org.jgrapht.alg.BiconnectivityInspectorTest.java:66, 50.00%>
	<org.jgrapht.alg.BiconnectivityInspectorTest: void testLinearGraph(int)>:
		<org.jgrapht.alg.BiconnectivityInspectorTest.java:88, 40.00%>
		<org.jgrapht.alg.BiconnectivityInspectorTest.java:89, 40.00%>
	<org.jgrapht.alg.BiconnectivityInspectorTest: void testNotBiconnected()>:
		<org.jgrapht.alg.BiconnectivityInspectorTest.java:100, 55.56%>
		<org.jgrapht.alg.BiconnectivityInspectorTest.java:101, 55.56%>
	<org.jgrapht.alg.BlockCutpointGraphTest: void testBiconnected()>:
		<org.jgrapht.alg.BlockCutpointGraphTest.java:67, 41.67%>
		<org.jgrapht.alg.BlockCutpointGraphTest.java:71, 41.67%>
	<org.jgrapht.alg.BlockCutpointGraphTest: void testLinearGraph(int)>:
		<org.jgrapht.alg.BlockCutpointGraphTest.java:121, 33.33%>
		<org.jgrapht.alg.BlockCutpointGraphTest.java:125, 33.33%>
	<org.jgrapht.alg.BlockCutpointGraphTest: void testNotBiconnected()>:
		<org.jgrapht.alg.BlockCutpointGraphTest.java:135, 41.67%>
		<org.jgrapht.alg.BlockCutpointGraphTest.java:139, 41.67%>
	<org.jgrapht.alg.BronKerboschCliqueFinderTest: void testFindAll()>:
		<org.jgrapht.alg.BronKerboschCliqueFinderTest.java:143, 26.32%>
		<org.jgrapht.alg.BronKerboschCliqueFinderTest.java:175, 21.05%>
	<org.jgrapht.alg.BronKerboschCliqueFinderTest: void testFindBiggest()>:
		<org.jgrapht.alg.BronKerboschCliqueFinderTest.java:119, 41.67%>
		<org.jgrapht.alg.BronKerboschCliqueFinderTest.java:129, 58.33%>
	<org.jgrapht.alg.ConnectivityInspectorTest: void testDirectedGraph()>:
		<org.jgrapht.alg.ConnectivityInspectorTest.java:139, 57.14%>
		<org.jgrapht.alg.ConnectivityInspectorTest.java:143, 57.14%>
	<org.jgrapht.alg.ConnectivityInspectorTest: void testStronglyConnected1()>:
		<org.jgrapht.alg.ConnectivityInspectorTest.java:211, 16.00%>
		<org.jgrapht.alg.ConnectivityInspectorTest.java:222, 12.00%>
		<org.jgrapht.alg.ConnectivityInspectorTest.java:225, 16.00%>
	<org.jgrapht.alg.ConnectivityInspectorTest: void testStronglyConnected2()>:
		<org.jgrapht.alg.ConnectivityInspectorTest.java:268, 16.00%>
		<org.jgrapht.alg.ConnectivityInspectorTest.java:279, 12.00%>
		<org.jgrapht.alg.ConnectivityInspectorTest.java:282, 16.00%>
	<org.jgrapht.alg.ConnectivityInspectorTest: void testStronglyConnected3()>:
		<org.jgrapht.alg.ConnectivityInspectorTest.java:325, 17.39%>
		<org.jgrapht.alg.ConnectivityInspectorTest.java:337, 13.04%>
		<org.jgrapht.alg.ConnectivityInspectorTest.java:340, 17.39%>
	<org.jgrapht.alg.ConnectivityInspectorTest: void testStronglyConnected4()>:
		<org.jgrapht.alg.ConnectivityInspectorTest.java:371, 30.77%>
	<org.jgrapht.alg.EulerianCircuitTest: void testEulerianCircuit()>:
		<org.jgrapht.alg.EulerianCircuitTest.java:77, 11.76%>
		<org.jgrapht.alg.EulerianCircuitTest.java:78, 29.41%>
		<org.jgrapht.alg.EulerianCircuitTest.java:91, 11.76%>
		<org.jgrapht.alg.EulerianCircuitTest.java:95, 23.53%>
	<org.jgrapht.alg.FloydWarshallShortestPathsTest: void testDiameter()>:
		<org.jgrapht.alg.FloydWarshallShortestPathsTest.java:161, 57.14%>
	<org.jgrapht.alg.FloydWarshallShortestPathsTest: void testEdgeLessDiameter()>:
		<org.jgrapht.alg.FloydWarshallShortestPathsTest.java:182, 40.00%>
	<org.jgrapht.alg.FloydWarshallShortestPathsTest: void testEmptyDiameter()>:
		<org.jgrapht.alg.FloydWarshallShortestPathsTest.java:170, 50.00%>
	<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest: void testBipartiteMatching1()>:
		<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest.java:83, 6.76%>
		<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest.java:86, 6.76%>
	<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest: void testBipartiteMatching2()>:
		<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest.java:112, 5.21%>
		<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest.java:115, 5.21%>
	<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest: void testEmptyMatching()>:
		<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest.java:128, 33.33%>
	<org.jgrapht.alg.KSPDiscardsValidPathsTest: void testNot3connectedGraph()>:
		<org.jgrapht.alg.KSPDiscardsValidPathsTest.java:102, 87.50%>
	<org.jgrapht.alg.KSPExampleTest: void testFourReturnedPathsJGraphT()>:
		<org.jgrapht.alg.KSPExampleTest.java:60, 55.56%>
	<org.jgrapht.alg.KSPExampleTest: void testThreeReturnedPathsJGraphT()>:
		<org.jgrapht.alg.KSPExampleTest.java:72, 60.00%>
	<org.jgrapht.alg.KSPExampleTest: void testTwoReturnedPathsJGraphT()>:
		<org.jgrapht.alg.KSPExampleTest.java:84, 60.00%>
	<org.jgrapht.alg.KShortestPathCostTest: void verifyShortestPathsInIncreasingOrderOfWeight(org.jgrapht.Graph)>:
		<org.jgrapht.alg.KShortestPathCostTest.java:222, 30.77%>
		<org.jgrapht.alg.KShortestPathCostTest.java:225, 30.77%>
	<org.jgrapht.alg.KShortestPathKValuesTest: void verifyNbPathsForAllPairsOfVertices(org.jgrapht.Graph)>:
		<org.jgrapht.alg.KShortestPathKValuesTest.java:148, 36.84%>
	<org.jgrapht.alg.StoerWagnerMinimumCutTest: void testMinCut14()>:
		<org.jgrapht.alg.StoerWagnerMinimumCutTest.java:97, 16.67%>
	<org.jgrapht.alg.StoerWagnerMinimumCutTest: void testMinCutDisconnected()>:
		<org.jgrapht.alg.StoerWagnerMinimumCutTest.java:124, 22.73%>
	<org.jgrapht.alg.TransitiveClosureTest: void testLinearGraph()>:
		<org.jgrapht.alg.TransitiveClosureTest.java:75, 47.83%>
		<org.jgrapht.alg.TransitiveClosureTest.java:78, 43.48%>
	<org.jgrapht.alg.TransitiveClosureTest: void testRingGraph()>:
		<org.jgrapht.alg.TransitiveClosureTest.java:107, 45.45%>
		<org.jgrapht.alg.TransitiveClosureTest.java:110, 50.00%>
	<org.jgrapht.alg.util.UnionFindTest: void testIdentical(java.lang.String[],java.util.ArrayList,org.jgrapht.alg.util.UnionFind)>:
		<org.jgrapht.alg.util.UnionFindTest.java:131, 41.18%>
	<org.jgrapht.experimental.GraphReaderTest: void testGraphReader()>:
		<org.jgrapht.experimental.GraphReaderTest.java:88, 27.27%>
	<org.jgrapht.experimental.GraphReaderTest: void testGraphReaderWeighted()>:
		<org.jgrapht.experimental.GraphReaderTest.java:116, 23.08%>
	<org.jgrapht.experimental.alg.ColoringTest: void testBacktrackColoring()>:
		<org.jgrapht.experimental.alg.ColoringTest.java:97, 50.00%>
	<org.jgrapht.experimental.alg.ColoringTest: void testGreedyColoring()>:
		<org.jgrapht.experimental.alg.ColoringTest.java:77, 50.00%>
	<org.jgrapht.experimental.dag.DirectedAcyclicGraphTest: void testTopoIterationOrderLinearGraph()>:
		<org.jgrapht.experimental.dag.DirectedAcyclicGraphTest.java:181, 29.41%>
		<org.jgrapht.experimental.dag.DirectedAcyclicGraphTest.java:182, 41.18%>
	<org.jgrapht.experimental.isomorphism.IsomorphismInspectorTest: void assertIsomorphicStopAfterFirstMatch(org.jgrapht.Graph[],boolean,boolean,org.jgrapht.experimental.equivalence.EquivalenceComparator,org.jgrapht.experimental.equivalence.EquivalenceComparator)>:
		<org.jgrapht.experimental.isomorphism.IsomorphismInspectorTest.java:485, 14.71%>
	<org.jgrapht.experimental.permutation.CompoundPermutationIterTest: void testGetNext()>:
		<org.jgrapht.experimental.permutation.CompoundPermutationIterTest.java:96, 40.00%>
		<org.jgrapht.experimental.permutation.CompoundPermutationIterTest.java:127, 40.00%>
	<org.jgrapht.ext.DOTExporterTest: void testUndirected()>:
		<org.jgrapht.ext.DOTExporterTest.java:110, 41.67%>
	<org.jgrapht.ext.DOTExporterTest: void testValidNodeIDs()>:
		<org.jgrapht.ext.DOTExporterTest.java:149, 16.00%>
	<org.jgrapht.ext.GmlExporterTest: void testUndirected()>:
		<org.jgrapht.ext.GmlExporterTest.java:117, 62.50%>
	<org.jgrapht.ext.MatrixExporterTest: void testAdjacencyDirected()>:
		<org.jgrapht.ext.MatrixExporterTest.java:149, 62.50%>
	<org.jgrapht.ext.MatrixExporterTest: void testAdjacencyUndirected()>:
		<org.jgrapht.ext.MatrixExporterTest.java:133, 62.50%>
	<org.jgrapht.ext.MatrixExporterTest: void testLaplacian()>:
		<org.jgrapht.ext.MatrixExporterTest.java:113, 38.46%>
		<org.jgrapht.ext.MatrixExporterTest.java:117, 38.46%>
	<org.jgrapht.generate.GraphGeneratorTest: void testCompleteBipartiteGraphGenerator()>:
		<org.jgrapht.generate.GraphGeneratorTest.java:243, 50.00%>
		<org.jgrapht.generate.GraphGeneratorTest.java:244, 50.00%>
	<org.jgrapht.generate.GraphGeneratorTest: void testCompleteGraphGenerator()>:
		<org.jgrapht.generate.GraphGeneratorTest.java:185, 62.50%>
	<org.jgrapht.generate.GraphGeneratorTest: void testEmptyGraphGenerator()>:
		<org.jgrapht.generate.GraphGeneratorTest.java:90, 38.46%>
		<org.jgrapht.generate.GraphGeneratorTest.java:91, 38.46%>
		<org.jgrapht.generate.GraphGeneratorTest.java:92, 23.08%>
	<org.jgrapht.generate.GraphGeneratorTest: void testHyperCubeGraphGenerator()>:
		<org.jgrapht.generate.GraphGeneratorTest.java:265, 50.00%>
		<org.jgrapht.generate.GraphGeneratorTest.java:266, 50.00%>
	<org.jgrapht.generate.GraphGeneratorTest: void testStarGraphGenerator()>:
		<org.jgrapht.generate.GraphGeneratorTest.java:287, 35.71%>
		<org.jgrapht.generate.GraphGeneratorTest.java:288, 35.71%>
		<org.jgrapht.generate.GraphGeneratorTest.java:289, 42.86%>
	<org.jgrapht.generate.RandomGraphGeneratorTest: void testBadVertexFactory()>:
		<org.jgrapht.generate.RandomGraphGeneratorTest.java:106, 12.50%>
	<org.jgrapht.graph.AsUndirectedGraphTest: void testAddEdge()>:
		<org.jgrapht.graph.AsUndirectedGraphTest.java:89, 100.00%>
	<org.jgrapht.graph.AsUndirectedGraphTest: void testAddVertex()>:
		<org.jgrapht.graph.AsUndirectedGraphTest.java:102, 85.71%>
		<org.jgrapht.graph.AsUndirectedGraphTest.java:103, 100.00%>
	<org.jgrapht.graph.AsUndirectedGraphTest: void testRemoveEdge()>:
		<org.jgrapht.graph.AsUndirectedGraphTest.java:155, 88.89%>
		<org.jgrapht.graph.AsUndirectedGraphTest.java:156, 111.11%>
	<org.jgrapht.graph.AsUndirectedGraphTest: void testRemoveVertex()>:
		<org.jgrapht.graph.AsUndirectedGraphTest.java:165, 88.89%>
		<org.jgrapht.graph.AsUndirectedGraphTest.java:166, 111.11%>
	<org.jgrapht.graph.AsUnweightedGraphTest: void constructWeighted(org.jgrapht.WeightedGraph)>:
		<org.jgrapht.graph.AsUnweightedGraphTest.java:110, 57.14%>
	<org.jgrapht.graph.DefaultDirectedGraphTest: void testEdgesOf()>:
		<org.jgrapht.graph.DefaultDirectedGraphTest.java:117, 75.00%>
		<org.jgrapht.graph.DefaultDirectedGraphTest.java:118, 75.00%>
	<org.jgrapht.graph.DefaultDirectedGraphTest: void testGetAllEdges()>:
		<org.jgrapht.graph.DefaultDirectedGraphTest.java:130, 100.00%>
	<org.jgrapht.graph.DefaultDirectedGraphTest: void testInDegreeOf()>:
		<org.jgrapht.graph.DefaultDirectedGraphTest.java:141, 83.33%>
		<org.jgrapht.graph.DefaultDirectedGraphTest.java:142, 83.33%>
	<org.jgrapht.graph.DefaultDirectedGraphTest: void testOutDegreeOf()>:
		<org.jgrapht.graph.DefaultDirectedGraphTest.java:153, 83.33%>
		<org.jgrapht.graph.DefaultDirectedGraphTest.java:154, 83.33%>
	<org.jgrapht.graph.GenericGraphsTest: void testAlissaHacker()>:
		<org.jgrapht.graph.GenericGraphsTest.java:134, 83.33%>
	<org.jgrapht.graph.GenericGraphsTest: void testEqualButNotSameVertex()>:
		<org.jgrapht.graph.GenericGraphsTest.java:145, 40.00%>
		<org.jgrapht.graph.GenericGraphsTest.java:146, 40.00%>
	<org.jgrapht.graph.SimpleDirectedGraphTest: void testIncomingOutgoingEdgesOf()>:
		<org.jgrapht.graph.SimpleDirectedGraphTest.java:315, 128.57%>
	<org.jgrapht.graph.SubgraphTest: void testInducedSubgraphUnderlyingEdgeAddition()>:
		<org.jgrapht.graph.SubgraphTest.java:192, 20.00%>
	<org.jgrapht.traverse.AbstractGraphIteratorTest: void testDirectedGraph()>:
		<org.jgrapht.traverse.AbstractGraphIteratorTest.java:86, 47.06%>
		<org.jgrapht.traverse.AbstractGraphIteratorTest.java:88, 52.94%>
	<org.jgrapht.traverse.ClosestFirstIteratorTest: void testNoStart()>:
		<org.jgrapht.traverse.ClosestFirstIteratorTest.java:103, 53.85%>
	<org.jgrapht.traverse.ClosestFirstIteratorTest: void testRadius()>:
		<org.jgrapht.traverse.ClosestFirstIteratorTest.java:80, 53.85%>
	<org.jgrapht.traverse.DepthFirstIteratorTest: void testBug1169182()>:
		<org.jgrapht.traverse.DepthFirstIteratorTest.java:149, 16.00%>
	<org.jgrapht.traverse.TopologicalOrderIteratorTest: void testEmptyGraph()>:
		<org.jgrapht.traverse.TopologicalOrderIteratorTest.java:136, 50.00%>
	<org.jgrapht.traverse.TopologicalOrderIteratorTest: void testRecipe()>:
		<org.jgrapht.traverse.TopologicalOrderIteratorTest.java:109, 9.62%>
		<org.jgrapht.traverse.TopologicalOrderIteratorTest.java:121, 9.62%>
	<org.jgrapht.util.FibonacciHeapTest: void testAddRemoveOne()>:
		<org.jgrapht.util.FibonacciHeapTest.java:57, 25.00%>
		<org.jgrapht.util.FibonacciHeapTest.java:59, 25.00%>
		<org.jgrapht.util.FibonacciHeapTest.java:61, 50.00%>
		<org.jgrapht.util.FibonacciHeapTest.java:62, 25.00%>

Relevant Assertion clone sets (9):
Set (score: 1.00, ccsize: 2, packages: 1, classes: 1): 
	<org.jgrapht.alg.ConnectivityInspectorTest: void testStronglyConnected1()>:
		<org.jgrapht.alg.ConnectivityInspectorTest.java:222, 12.00%>
	<org.jgrapht.alg.ConnectivityInspectorTest: void testStronglyConnected2()>:
		<org.jgrapht.alg.ConnectivityInspectorTest.java:279, 12.00%>
	<org.jgrapht.alg.ConnectivityInspectorTest: void testStronglyConnected3()>:
		<org.jgrapht.alg.ConnectivityInspectorTest.java:337, 13.04%>
Set (score: 1.00, ccsize: 2, packages: 1, classes: 1): 
	<org.jgrapht.experimental.GraphReaderTest: void testGraphReader()>:
		<org.jgrapht.experimental.GraphReaderTest.java:88, 27.27%>
	<org.jgrapht.experimental.GraphReaderTest: void testGraphReaderWeighted()>:
		<org.jgrapht.experimental.GraphReaderTest.java:116, 23.08%>
Set (score: 0.67, ccsize: 3, packages: 1, classes: 2): 
	<org.jgrapht.alg.BiconnectivityInspectorTest: void testBiconnected()>:
		<org.jgrapht.alg.BiconnectivityInspectorTest.java:65, 50.00%>
	<org.jgrapht.alg.BlockCutpointGraphTest: void testBiconnected()>:
		<org.jgrapht.alg.BlockCutpointGraphTest.java:67, 41.67%>
		<org.jgrapht.alg.BlockCutpointGraphTest.java:71, 41.67%>
Set (score: 0.67, ccsize: 3, packages: 1, classes: 2): 
	<org.jgrapht.alg.BiconnectivityInspectorTest: void testLinearGraph(int)>:
		<org.jgrapht.alg.BiconnectivityInspectorTest.java:88, 40.00%>
	<org.jgrapht.alg.BlockCutpointGraphTest: void testLinearGraph(int)>:
		<org.jgrapht.alg.BlockCutpointGraphTest.java:121, 33.33%>
		<org.jgrapht.alg.BlockCutpointGraphTest.java:125, 33.33%>
Set (score: 0.67, ccsize: 3, packages: 1, classes: 2): 
	<org.jgrapht.alg.BiconnectivityInspectorTest: void testNotBiconnected()>:
		<org.jgrapht.alg.BiconnectivityInspectorTest.java:100, 55.56%>
	<org.jgrapht.alg.BlockCutpointGraphTest: void testNotBiconnected()>:
		<org.jgrapht.alg.BlockCutpointGraphTest.java:135, 41.67%>
		<org.jgrapht.alg.BlockCutpointGraphTest.java:139, 41.67%>
Set (score: 0.67, ccsize: 2, packages: 1, classes: 2): 
	<org.jgrapht.ext.DOTExporterTest: void testUndirected()>:
		<org.jgrapht.ext.DOTExporterTest.java:110, 41.67%>
	<org.jgrapht.ext.GmlExporterTest: void testUndirected()>:
		<org.jgrapht.ext.GmlExporterTest.java:117, 62.50%>
Set (score: 0.67, ccsize: 2, packages: 1, classes: 1): 
	<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest: void testBipartiteMatching1()>:
		<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest.java:86, 6.76%>
	<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest: void testBipartiteMatching2()>:
		<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest.java:115, 5.21%>
Set (score: 0.50, ccsize: 3, packages: 1, classes: 1): 
	<org.jgrapht.alg.KSPExampleTest: void testFourReturnedPathsJGraphT()>:
		<org.jgrapht.alg.KSPExampleTest.java:60, 55.56%>
	<org.jgrapht.alg.KSPExampleTest: void testThreeReturnedPathsJGraphT()>:
		<org.jgrapht.alg.KSPExampleTest.java:72, 60.00%>
	<org.jgrapht.alg.KSPExampleTest: void testTwoReturnedPathsJGraphT()>:
		<org.jgrapht.alg.KSPExampleTest.java:84, 60.00%>
Set (score: 0.50, ccsize: 2, packages: 1, classes: 1): 
	<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest: void testBipartiteMatching1()>:
		<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest.java:83, 6.76%>
	<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest: void testBipartiteMatching2()>:
		<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest.java:112, 5.21%>
==============================================

[127] Set (editDistance: 2, isComplete: false, packages: 11, classes: 33): 
Centroid (size: 2): <org.jgrapht.alg.KruskalMinimumSpanningTreeTest: void testMinimumSpanningTree()>

Methods (65): 
	<org.jgrapht.alg.BiconnectivityInspectorTest: void testLinearGraph(int)>:
		<org.jgrapht.alg.BiconnectivityInspectorTest.java:88, 40.00%>
		<org.jgrapht.alg.BiconnectivityInspectorTest.java:89, 40.00%>
	<org.jgrapht.alg.BiconnectivityInspectorTest: void testNotBiconnected()>:
		<org.jgrapht.alg.BiconnectivityInspectorTest.java:100, 55.56%>
		<org.jgrapht.alg.BiconnectivityInspectorTest.java:101, 55.56%>
	<org.jgrapht.alg.BlockCutpointGraphTest: void testBiconnected()>:
		<org.jgrapht.alg.BlockCutpointGraphTest.java:67, 41.67%>
		<org.jgrapht.alg.BlockCutpointGraphTest.java:71, 41.67%>
	<org.jgrapht.alg.BlockCutpointGraphTest: void testLinearGraph(int)>:
		<org.jgrapht.alg.BlockCutpointGraphTest.java:121, 33.33%>
		<org.jgrapht.alg.BlockCutpointGraphTest.java:125, 33.33%>
	<org.jgrapht.alg.BlockCutpointGraphTest: void testNotBiconnected()>:
		<org.jgrapht.alg.BlockCutpointGraphTest.java:135, 41.67%>
		<org.jgrapht.alg.BlockCutpointGraphTest.java:139, 41.67%>
	<org.jgrapht.alg.BronKerboschCliqueFinderTest: void testFindAll()>:
		<org.jgrapht.alg.BronKerboschCliqueFinderTest.java:143, 26.32%>
		<org.jgrapht.alg.BronKerboschCliqueFinderTest.java:175, 21.05%>
	<org.jgrapht.alg.BronKerboschCliqueFinderTest: void testFindBiggest()>:
		<org.jgrapht.alg.BronKerboschCliqueFinderTest.java:119, 41.67%>
		<org.jgrapht.alg.BronKerboschCliqueFinderTest.java:129, 58.33%>
	<org.jgrapht.alg.ConnectivityInspectorTest: void testDirectedGraph()>:
		<org.jgrapht.alg.ConnectivityInspectorTest.java:139, 57.14%>
		<org.jgrapht.alg.ConnectivityInspectorTest.java:143, 57.14%>
	<org.jgrapht.alg.EdmondsBlossomShrinkingTest: void testOne()>:
		<org.jgrapht.alg.EdmondsBlossomShrinkingTest.java:80, 23.81%>
		<org.jgrapht.alg.EdmondsBlossomShrinkingTest.java:81, 19.05%>
		<org.jgrapht.alg.EdmondsBlossomShrinkingTest.java:82, 19.05%>
	<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest: void testBipartiteMatching1()>:
		<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest.java:83, 6.76%>
		<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest.java:86, 6.76%>
	<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest: void testBipartiteMatching2()>:
		<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest.java:112, 5.21%>
		<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest.java:115, 5.21%>
	<org.jgrapht.alg.KSPDiscardsValidPathsTest: void testNot3connectedGraph()>:
		<org.jgrapht.alg.KSPDiscardsValidPathsTest.java:102, 87.50%>
	<org.jgrapht.alg.KSPExampleTest: void testFourReturnedPathsJGraphT()>:
		<org.jgrapht.alg.KSPExampleTest.java:60, 55.56%>
	<org.jgrapht.alg.KSPExampleTest: void testThreeReturnedPathsJGraphT()>:
		<org.jgrapht.alg.KSPExampleTest.java:72, 60.00%>
	<org.jgrapht.alg.KSPExampleTest: void testTwoReturnedPathsJGraphT()>:
		<org.jgrapht.alg.KSPExampleTest.java:84, 60.00%>
	<org.jgrapht.alg.KShortestPathKValuesTest: void verifyNbPathsForAllPairsOfVertices(org.jgrapht.Graph)>:
		<org.jgrapht.alg.KShortestPathKValuesTest.java:148, 36.84%>
	<org.jgrapht.alg.KruskalMinimumSpanningTreeTest: void testMinimumSpanningTree()>:
		<org.jgrapht.alg.KruskalMinimumSpanningTreeTest.java:80, 19.05%>
		<org.jgrapht.alg.KruskalMinimumSpanningTreeTest.java:84, 38.10%>
	<org.jgrapht.alg.StoerWagnerMinimumCutTest: void testMinCut14()>:
		<org.jgrapht.alg.StoerWagnerMinimumCutTest.java:97, 16.67%>
	<org.jgrapht.alg.StoerWagnerMinimumCutTest: void testMinCutDisconnected()>:
		<org.jgrapht.alg.StoerWagnerMinimumCutTest.java:124, 22.73%>
	<org.jgrapht.alg.TransitiveClosureTest: void testLinearGraph()>:
		<org.jgrapht.alg.TransitiveClosureTest.java:75, 47.83%>
		<org.jgrapht.alg.TransitiveClosureTest.java:78, 43.48%>
	<org.jgrapht.alg.TransitiveClosureTest: void testRingGraph()>:
		<org.jgrapht.alg.TransitiveClosureTest.java:107, 45.45%>
		<org.jgrapht.alg.TransitiveClosureTest.java:110, 50.00%>
	<org.jgrapht.alg.util.UnionFindTest: void testIdentical(java.lang.String[],java.util.ArrayList,org.jgrapht.alg.util.UnionFind)>:
		<org.jgrapht.alg.util.UnionFindTest.java:131, 41.18%>
	<org.jgrapht.experimental.GraphReaderTest: void testGraphReader()>:
		<org.jgrapht.experimental.GraphReaderTest.java:88, 27.27%>
	<org.jgrapht.experimental.GraphReaderTest: void testGraphReaderWeighted()>:
		<org.jgrapht.experimental.GraphReaderTest.java:116, 23.08%>
	<org.jgrapht.experimental.dag.DirectedAcyclicGraphTest: void testTopoIterationOrderLinearGraph()>:
		<org.jgrapht.experimental.dag.DirectedAcyclicGraphTest.java:181, 29.41%>
		<org.jgrapht.experimental.dag.DirectedAcyclicGraphTest.java:182, 41.18%>
	<org.jgrapht.experimental.isomorphism.IsomorphismInspectorTest: void assertIsomorphicStopAfterFirstMatch(org.jgrapht.Graph[],boolean,boolean,org.jgrapht.experimental.equivalence.EquivalenceComparator,org.jgrapht.experimental.equivalence.EquivalenceComparator)>:
		<org.jgrapht.experimental.isomorphism.IsomorphismInspectorTest.java:485, 14.71%>
	<org.jgrapht.experimental.permutation.CompoundPermutationIterTest: void testGetNext()>:
		<org.jgrapht.experimental.permutation.CompoundPermutationIterTest.java:96, 40.00%>
		<org.jgrapht.experimental.permutation.CompoundPermutationIterTest.java:127, 40.00%>
	<org.jgrapht.ext.DOTExporterTest: void testUndirected()>:
		<org.jgrapht.ext.DOTExporterTest.java:110, 41.67%>
	<org.jgrapht.ext.DOTExporterTest: void testValidNodeIDs()>:
		<org.jgrapht.ext.DOTExporterTest.java:149, 16.00%>
	<org.jgrapht.ext.GmlExporterTest: void testUndirected()>:
		<org.jgrapht.ext.GmlExporterTest.java:117, 62.50%>
	<org.jgrapht.ext.MatrixExporterTest: void testAdjacencyDirected()>:
		<org.jgrapht.ext.MatrixExporterTest.java:149, 62.50%>
	<org.jgrapht.ext.MatrixExporterTest: void testAdjacencyUndirected()>:
		<org.jgrapht.ext.MatrixExporterTest.java:133, 62.50%>
	<org.jgrapht.ext.MatrixExporterTest: void testLaplacian()>:
		<org.jgrapht.ext.MatrixExporterTest.java:113, 38.46%>
		<org.jgrapht.ext.MatrixExporterTest.java:117, 38.46%>
	<org.jgrapht.generate.GraphGeneratorTest: void testCompleteBipartiteGraphGenerator()>:
		<org.jgrapht.generate.GraphGeneratorTest.java:243, 50.00%>
		<org.jgrapht.generate.GraphGeneratorTest.java:244, 50.00%>
	<org.jgrapht.generate.GraphGeneratorTest: void testCompleteGraphGenerator()>:
		<org.jgrapht.generate.GraphGeneratorTest.java:185, 62.50%>
	<org.jgrapht.generate.GraphGeneratorTest: void testEmptyGraphGenerator()>:
		<org.jgrapht.generate.GraphGeneratorTest.java:90, 38.46%>
		<org.jgrapht.generate.GraphGeneratorTest.java:91, 38.46%>
		<org.jgrapht.generate.GraphGeneratorTest.java:92, 23.08%>
	<org.jgrapht.generate.GraphGeneratorTest: void testHyperCubeGraphGenerator()>:
		<org.jgrapht.generate.GraphGeneratorTest.java:265, 50.00%>
		<org.jgrapht.generate.GraphGeneratorTest.java:266, 50.00%>
	<org.jgrapht.generate.GraphGeneratorTest: void testStarGraphGenerator()>:
		<org.jgrapht.generate.GraphGeneratorTest.java:287, 35.71%>
		<org.jgrapht.generate.GraphGeneratorTest.java:288, 35.71%>
		<org.jgrapht.generate.GraphGeneratorTest.java:289, 42.86%>
	<org.jgrapht.generate.RandomGraphGeneratorTest: void testBadVertexFactory()>:
		<org.jgrapht.generate.RandomGraphGeneratorTest.java:106, 12.50%>
	<org.jgrapht.graph.AsUndirectedGraphTest: void testAddEdge()>:
		<org.jgrapht.graph.AsUndirectedGraphTest.java:89, 100.00%>
	<org.jgrapht.graph.AsUndirectedGraphTest: void testAddVertex()>:
		<org.jgrapht.graph.AsUndirectedGraphTest.java:102, 85.71%>
		<org.jgrapht.graph.AsUndirectedGraphTest.java:103, 100.00%>
	<org.jgrapht.graph.AsUndirectedGraphTest: void testGetEdge()>:
		<org.jgrapht.graph.AsUndirectedGraphTest.java:137, 44.00%>
		<org.jgrapht.graph.AsUndirectedGraphTest.java:140, 68.00%>
		<org.jgrapht.graph.AsUndirectedGraphTest.java:144, 92.00%>
	<org.jgrapht.graph.AsUndirectedGraphTest: void testRemoveEdge()>:
		<org.jgrapht.graph.AsUndirectedGraphTest.java:155, 88.89%>
		<org.jgrapht.graph.AsUndirectedGraphTest.java:156, 111.11%>
	<org.jgrapht.graph.AsUndirectedGraphTest: void testRemoveVertex()>:
		<org.jgrapht.graph.AsUndirectedGraphTest.java:165, 88.89%>
		<org.jgrapht.graph.AsUndirectedGraphTest.java:166, 111.11%>
	<org.jgrapht.graph.DefaultDirectedGraphTest: void testEdgesOf()>:
		<org.jgrapht.graph.DefaultDirectedGraphTest.java:117, 75.00%>
		<org.jgrapht.graph.DefaultDirectedGraphTest.java:118, 75.00%>
	<org.jgrapht.graph.DefaultDirectedGraphTest: void testGetAllEdges()>:
		<org.jgrapht.graph.DefaultDirectedGraphTest.java:130, 100.00%>
	<org.jgrapht.graph.DefaultDirectedGraphTest: void testInDegreeOf()>:
		<org.jgrapht.graph.DefaultDirectedGraphTest.java:141, 83.33%>
		<org.jgrapht.graph.DefaultDirectedGraphTest.java:142, 83.33%>
	<org.jgrapht.graph.DefaultDirectedGraphTest: void testOutDegreeOf()>:
		<org.jgrapht.graph.DefaultDirectedGraphTest.java:153, 83.33%>
		<org.jgrapht.graph.DefaultDirectedGraphTest.java:154, 83.33%>
	<org.jgrapht.graph.EqualsAndHashCodeTest: void testDefaultDirectedGraph()>:
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:105, 6.52%>
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:106, 10.87%>
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:108, 13.04%>
	<org.jgrapht.graph.EqualsAndHashCodeTest: void testGraphsWithNonIntrusiveEdge()>:
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:187, 3.90%>
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:188, 6.49%>
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:190, 7.79%>
	<org.jgrapht.graph.EqualsAndHashCodeTest: void testGrapshWithCustomEdges()>:
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:268, 7.69%>
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:269, 12.82%>
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:271, 15.38%>
	<org.jgrapht.graph.EqualsAndHashCodeTest: void testPseudograph()>:
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:230, 5.08%>
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:231, 8.47%>
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:233, 10.17%>
	<org.jgrapht.graph.EqualsAndHashCodeTest: void testSimpleGraph()>:
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:148, 6.52%>
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:149, 10.87%>
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:151, 13.04%>
	<org.jgrapht.graph.GenericGraphsTest: void testAlissaHacker()>:
		<org.jgrapht.graph.GenericGraphsTest.java:134, 83.33%>
	<org.jgrapht.graph.GenericGraphsTest: void testEqualButNotSameVertex()>:
		<org.jgrapht.graph.GenericGraphsTest.java:145, 40.00%>
		<org.jgrapht.graph.GenericGraphsTest.java:146, 40.00%>
	<org.jgrapht.graph.SubgraphTest: void testInducedSubgraphUnderlyingEdgeAddition()>:
		<org.jgrapht.graph.SubgraphTest.java:192, 20.00%>
	<org.jgrapht.traverse.AbstractGraphIteratorTest: void testDirectedGraph()>:
		<org.jgrapht.traverse.AbstractGraphIteratorTest.java:86, 47.06%>
		<org.jgrapht.traverse.AbstractGraphIteratorTest.java:88, 52.94%>
	<org.jgrapht.traverse.ClosestFirstIteratorTest: void testNoStart()>:
		<org.jgrapht.traverse.ClosestFirstIteratorTest.java:103, 53.85%>
	<org.jgrapht.traverse.ClosestFirstIteratorTest: void testRadius()>:
		<org.jgrapht.traverse.ClosestFirstIteratorTest.java:80, 53.85%>
	<org.jgrapht.traverse.DepthFirstIteratorTest: void testBug1169182()>:
		<org.jgrapht.traverse.DepthFirstIteratorTest.java:149, 16.00%>
	<org.jgrapht.traverse.TopologicalOrderIteratorTest: void testEmptyGraph()>:
		<org.jgrapht.traverse.TopologicalOrderIteratorTest.java:136, 50.00%>
	<org.jgrapht.traverse.TopologicalOrderIteratorTest: void testRecipe()>:
		<org.jgrapht.traverse.TopologicalOrderIteratorTest.java:109, 9.62%>
		<org.jgrapht.traverse.TopologicalOrderIteratorTest.java:121, 9.62%>
	<org.jgrapht.util.FibonacciHeapTest: void testGrowReplaceShrink()>:
		<org.jgrapht.util.FibonacciHeapTest.java:88, 17.65%>
		<org.jgrapht.util.FibonacciHeapTest.java:91, 17.65%>
	<org.jgrapht.util.PrefetchIteratorTest: void testEnumInterface()>:
		<org.jgrapht.util.PrefetchIteratorTest.java:71, 33.33%>
		<org.jgrapht.util.PrefetchIteratorTest.java:72, 41.67%>
		<org.jgrapht.util.PrefetchIteratorTest.java:74, 33.33%>
		<org.jgrapht.util.PrefetchIteratorTest.java:81, 16.67%>
	<org.jgrapht.util.PrefetchIteratorTest: void testIteratorInterface()>:
		<org.jgrapht.util.PrefetchIteratorTest.java:54, 33.33%>
		<org.jgrapht.util.PrefetchIteratorTest.java:55, 41.67%>
		<org.jgrapht.util.PrefetchIteratorTest.java:57, 33.33%>
		<org.jgrapht.util.PrefetchIteratorTest.java:64, 16.67%>

Relevant Assertion clone sets (9):
Set (score: 1.00, ccsize: 2, packages: 1, classes: 1): 
	<org.jgrapht.experimental.GraphReaderTest: void testGraphReader()>:
		<org.jgrapht.experimental.GraphReaderTest.java:88, 27.27%>
	<org.jgrapht.experimental.GraphReaderTest: void testGraphReaderWeighted()>:
		<org.jgrapht.experimental.GraphReaderTest.java:116, 23.08%>
Set (score: 0.67, ccsize: 3, packages: 1, classes: 2): 
	<org.jgrapht.alg.BiconnectivityInspectorTest: void testLinearGraph(int)>:
		<org.jgrapht.alg.BiconnectivityInspectorTest.java:88, 40.00%>
	<org.jgrapht.alg.BlockCutpointGraphTest: void testLinearGraph(int)>:
		<org.jgrapht.alg.BlockCutpointGraphTest.java:121, 33.33%>
		<org.jgrapht.alg.BlockCutpointGraphTest.java:125, 33.33%>
Set (score: 0.67, ccsize: 3, packages: 1, classes: 2): 
	<org.jgrapht.alg.BiconnectivityInspectorTest: void testNotBiconnected()>:
		<org.jgrapht.alg.BiconnectivityInspectorTest.java:100, 55.56%>
	<org.jgrapht.alg.BlockCutpointGraphTest: void testNotBiconnected()>:
		<org.jgrapht.alg.BlockCutpointGraphTest.java:135, 41.67%>
		<org.jgrapht.alg.BlockCutpointGraphTest.java:139, 41.67%>
Set (score: 0.67, ccsize: 2, packages: 1, classes: 2): 
	<org.jgrapht.ext.DOTExporterTest: void testUndirected()>:
		<org.jgrapht.ext.DOTExporterTest.java:110, 41.67%>
	<org.jgrapht.ext.GmlExporterTest: void testUndirected()>:
		<org.jgrapht.ext.GmlExporterTest.java:117, 62.50%>
Set (score: 0.67, ccsize: 2, packages: 1, classes: 1): 
	<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest: void testBipartiteMatching1()>:
		<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest.java:86, 6.76%>
	<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest: void testBipartiteMatching2()>:
		<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest.java:115, 5.21%>
Set (score: 0.50, ccsize: 4, packages: 1, classes: 1): 
	<org.jgrapht.graph.EqualsAndHashCodeTest: void testDefaultDirectedGraph()>:
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:106, 10.87%>
	<org.jgrapht.graph.EqualsAndHashCodeTest: void testGraphsWithNonIntrusiveEdge()>:
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:188, 6.49%>
Set (score: 0.50, ccsize: 4, packages: 1, classes: 1): 
	<org.jgrapht.graph.EqualsAndHashCodeTest: void testGrapshWithCustomEdges()>:
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:269, 12.82%>
	<org.jgrapht.graph.EqualsAndHashCodeTest: void testSimpleGraph()>:
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:149, 10.87%>
Set (score: 0.50, ccsize: 3, packages: 1, classes: 1): 
	<org.jgrapht.alg.KSPExampleTest: void testFourReturnedPathsJGraphT()>:
		<org.jgrapht.alg.KSPExampleTest.java:60, 55.56%>
	<org.jgrapht.alg.KSPExampleTest: void testThreeReturnedPathsJGraphT()>:
		<org.jgrapht.alg.KSPExampleTest.java:72, 60.00%>
	<org.jgrapht.alg.KSPExampleTest: void testTwoReturnedPathsJGraphT()>:
		<org.jgrapht.alg.KSPExampleTest.java:84, 60.00%>
Set (score: 0.50, ccsize: 2, packages: 1, classes: 1): 
	<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest: void testBipartiteMatching1()>:
		<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest.java:83, 6.76%>
	<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest: void testBipartiteMatching2()>:
		<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest.java:112, 5.21%>
==============================================

[128] Set (editDistance: 2, isComplete: false, packages: 12, classes: 39): 
Centroid (size: 2): <org.jgrapht.alg.TransitiveClosureTest: void testLinearGraph()>

Methods (71): 
	<org.jgrapht.EnhancedTestCase: void assertFalse()>:
		<org.jgrapht.EnhancedTestCase.java:79, 100.00%>
	<org.jgrapht.EnhancedTestCase: void assertTrue()>:
		<org.jgrapht.EnhancedTestCase.java:87, 100.00%>
	<org.jgrapht.alg.BellmanFordShortestPathTest: void testWithNegativeEdges()>:
		<org.jgrapht.alg.BellmanFordShortestPathTest.java:120, 45.45%>
		<org.jgrapht.alg.BellmanFordShortestPathTest.java:127, 63.64%>
	<org.jgrapht.alg.BiconnectivityInspectorTest: void testLinearGraph(int)>:
		<org.jgrapht.alg.BiconnectivityInspectorTest.java:88, 40.00%>
		<org.jgrapht.alg.BiconnectivityInspectorTest.java:89, 40.00%>
	<org.jgrapht.alg.BiconnectivityInspectorTest: void testNotBiconnected()>:
		<org.jgrapht.alg.BiconnectivityInspectorTest.java:100, 55.56%>
		<org.jgrapht.alg.BiconnectivityInspectorTest.java:101, 55.56%>
	<org.jgrapht.alg.BlockCutpointGraphTest: void testBiconnected()>:
		<org.jgrapht.alg.BlockCutpointGraphTest.java:67, 41.67%>
		<org.jgrapht.alg.BlockCutpointGraphTest.java:71, 41.67%>
	<org.jgrapht.alg.BlockCutpointGraphTest: void testGetBlock(org.jgrapht.alg.BlockCutpointGraph)>:
		<org.jgrapht.alg.BlockCutpointGraphTest.java:88, 33.33%>
		<org.jgrapht.alg.BlockCutpointGraphTest.java:94, 19.05%>
	<org.jgrapht.alg.BlockCutpointGraphTest: void testLinearGraph(int)>:
		<org.jgrapht.alg.BlockCutpointGraphTest.java:121, 33.33%>
		<org.jgrapht.alg.BlockCutpointGraphTest.java:125, 33.33%>
	<org.jgrapht.alg.BlockCutpointGraphTest: void testNotBiconnected()>:
		<org.jgrapht.alg.BlockCutpointGraphTest.java:135, 41.67%>
		<org.jgrapht.alg.BlockCutpointGraphTest.java:139, 41.67%>
	<org.jgrapht.alg.BronKerboschCliqueFinderTest: void testFindAll()>:
		<org.jgrapht.alg.BronKerboschCliqueFinderTest.java:143, 26.32%>
		<org.jgrapht.alg.BronKerboschCliqueFinderTest.java:175, 21.05%>
	<org.jgrapht.alg.BronKerboschCliqueFinderTest: void testFindBiggest()>:
		<org.jgrapht.alg.BronKerboschCliqueFinderTest.java:119, 41.67%>
		<org.jgrapht.alg.BronKerboschCliqueFinderTest.java:129, 58.33%>
	<org.jgrapht.alg.ConnectivityInspectorTest: void testStronglyConnected4()>:
		<org.jgrapht.alg.ConnectivityInspectorTest.java:371, 30.77%>
	<org.jgrapht.alg.FloydWarshallShortestPathsTest: void testCompareWithDijkstra()>:
		<org.jgrapht.alg.FloydWarshallShortestPathsTest.java:96, 7.41%>
		<org.jgrapht.alg.FloydWarshallShortestPathsTest.java:121, 7.41%>
	<org.jgrapht.alg.FloydWarshallShortestPathsTest: void testDiameter()>:
		<org.jgrapht.alg.FloydWarshallShortestPathsTest.java:161, 57.14%>
	<org.jgrapht.alg.FloydWarshallShortestPathsTest: void testEdgeLessDiameter()>:
		<org.jgrapht.alg.FloydWarshallShortestPathsTest.java:182, 40.00%>
	<org.jgrapht.alg.FloydWarshallShortestPathsTest: void testEmptyDiameter()>:
		<org.jgrapht.alg.FloydWarshallShortestPathsTest.java:170, 50.00%>
	<org.jgrapht.alg.HamiltonianCycleTest: void testHamiltonianCycle()>:
		<org.jgrapht.alg.HamiltonianCycleTest.java:79, 33.33%>
		<org.jgrapht.alg.HamiltonianCycleTest.java:89, 27.78%>
	<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest: void testBipartiteMatching1()>:
		<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest.java:83, 6.76%>
		<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest.java:86, 6.76%>
	<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest: void testBipartiteMatching2()>:
		<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest.java:112, 5.21%>
		<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest.java:115, 5.21%>
	<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest: void testEmptyMatching()>:
		<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest.java:128, 33.33%>
	<org.jgrapht.alg.KSPDiscardsValidPathsTest: void testNot3connectedGraph()>:
		<org.jgrapht.alg.KSPDiscardsValidPathsTest.java:102, 87.50%>
	<org.jgrapht.alg.KSPExampleTest: void testFourReturnedPathsJGraphT()>:
		<org.jgrapht.alg.KSPExampleTest.java:60, 55.56%>
	<org.jgrapht.alg.KSPExampleTest: void testThreeReturnedPathsJGraphT()>:
		<org.jgrapht.alg.KSPExampleTest.java:72, 60.00%>
	<org.jgrapht.alg.KSPExampleTest: void testTwoReturnedPathsJGraphT()>:
		<org.jgrapht.alg.KSPExampleTest.java:84, 60.00%>
	<org.jgrapht.alg.KShortestPathCostTest: void verifyShortestPathsInIncreasingOrderOfWeight(org.jgrapht.Graph)>:
		<org.jgrapht.alg.KShortestPathCostTest.java:222, 30.77%>
		<org.jgrapht.alg.KShortestPathCostTest.java:225, 30.77%>
	<org.jgrapht.alg.KShortestPathCostTest: void verifyWeightsConsistency(java.util.List,java.util.List)>:
		<org.jgrapht.alg.KShortestPathCostTest.java:294, 53.85%>
	<org.jgrapht.alg.KShortestPathKValuesTest: void verifyNbPathsForAllPairsOfVertices(org.jgrapht.Graph)>:
		<org.jgrapht.alg.KShortestPathKValuesTest.java:148, 36.84%>
	<org.jgrapht.alg.KruskalMinimumSpanningTreeTest: void testMinimumSpanningTree()>:
		<org.jgrapht.alg.KruskalMinimumSpanningTreeTest.java:80, 19.05%>
		<org.jgrapht.alg.KruskalMinimumSpanningTreeTest.java:84, 38.10%>
	<org.jgrapht.alg.StoerWagnerMinimumCutTest: void testMinCut14()>:
		<org.jgrapht.alg.StoerWagnerMinimumCutTest.java:97, 16.67%>
	<org.jgrapht.alg.StoerWagnerMinimumCutTest: void testMinCutDisconnected()>:
		<org.jgrapht.alg.StoerWagnerMinimumCutTest.java:124, 22.73%>
	<org.jgrapht.alg.TransitiveClosureTest: void testLinearGraph()>:
		<org.jgrapht.alg.TransitiveClosureTest.java:75, 47.83%>
		<org.jgrapht.alg.TransitiveClosureTest.java:78, 43.48%>
	<org.jgrapht.alg.VertexCoversTest: void testFind2ApproximationCover()>:
		<org.jgrapht.alg.VertexCoversTest.java:74, 60.00%>
	<org.jgrapht.alg.VertexCoversTest: void testFindGreedyCover()>:
		<org.jgrapht.alg.VertexCoversTest.java:89, 50.00%>
	<org.jgrapht.experimental.GraphReaderTest: void testGraphReader()>:
		<org.jgrapht.experimental.GraphReaderTest.java:88, 27.27%>
	<org.jgrapht.experimental.GraphReaderTest: void testGraphReaderWeighted()>:
		<org.jgrapht.experimental.GraphReaderTest.java:116, 23.08%>
	<org.jgrapht.experimental.alg.ColoringTest: void testBacktrackColoring()>:
		<org.jgrapht.experimental.alg.ColoringTest.java:97, 50.00%>
	<org.jgrapht.experimental.alg.ColoringTest: void testGreedyColoring()>:
		<org.jgrapht.experimental.alg.ColoringTest.java:77, 50.00%>
	<org.jgrapht.experimental.equivalence.EquivalenceGroupCreatorTest: void testOneComparator(org.jgrapht.experimental.equivalence.EquivalenceComparator,int)>:
		<org.jgrapht.experimental.equivalence.EquivalenceGroupCreatorTest.java:152, 23.53%>
		<org.jgrapht.experimental.equivalence.EquivalenceGroupCreatorTest.java:157, 41.18%>
	<org.jgrapht.experimental.isomorphism.IsomorphismInspectorTest: void assertIsomorphic(org.jgrapht.Graph[],boolean,org.jgrapht.experimental.equivalence.EquivalenceComparator,org.jgrapht.experimental.equivalence.EquivalenceComparator)>:
		<org.jgrapht.experimental.isomorphism.IsomorphismInspectorTest.java:138, 28.57%>
		<org.jgrapht.experimental.isomorphism.IsomorphismInspectorTest.java:140, 28.57%>
	<org.jgrapht.experimental.permutation.CompoundPermutationIterTest: void testGetNext()>:
		<org.jgrapht.experimental.permutation.CompoundPermutationIterTest.java:96, 40.00%>
		<org.jgrapht.experimental.permutation.CompoundPermutationIterTest.java:127, 40.00%>
	<org.jgrapht.ext.DOTExporterTest: void testUndirected()>:
		<org.jgrapht.ext.DOTExporterTest.java:110, 41.67%>
	<org.jgrapht.ext.DOTExporterTest: void testValidNodeIDs()>:
		<org.jgrapht.ext.DOTExporterTest.java:149, 16.00%>
	<org.jgrapht.ext.GmlExporterTest: void testUndirected()>:
		<org.jgrapht.ext.GmlExporterTest.java:117, 62.50%>
	<org.jgrapht.ext.MatrixExporterTest: void testAdjacencyDirected()>:
		<org.jgrapht.ext.MatrixExporterTest.java:149, 62.50%>
	<org.jgrapht.ext.MatrixExporterTest: void testAdjacencyUndirected()>:
		<org.jgrapht.ext.MatrixExporterTest.java:133, 62.50%>
	<org.jgrapht.ext.MatrixExporterTest: void testLaplacian()>:
		<org.jgrapht.ext.MatrixExporterTest.java:113, 38.46%>
		<org.jgrapht.ext.MatrixExporterTest.java:117, 38.46%>
	<org.jgrapht.generate.GraphGeneratorTest: void testCompleteBipartiteGraphGenerator()>:
		<org.jgrapht.generate.GraphGeneratorTest.java:243, 50.00%>
		<org.jgrapht.generate.GraphGeneratorTest.java:244, 50.00%>
	<org.jgrapht.generate.GraphGeneratorTest: void testCompleteGraphGenerator()>:
		<org.jgrapht.generate.GraphGeneratorTest.java:185, 62.50%>
	<org.jgrapht.generate.GraphGeneratorTest: void testHyperCubeGraphGenerator()>:
		<org.jgrapht.generate.GraphGeneratorTest.java:265, 50.00%>
		<org.jgrapht.generate.GraphGeneratorTest.java:266, 50.00%>
	<org.jgrapht.generate.RandomGraphGeneratorTest: void testBadVertexFactory()>:
		<org.jgrapht.generate.RandomGraphGeneratorTest.java:106, 12.50%>
	<org.jgrapht.generate.RandomGraphGeneratorTest: void testGenerateDirectedGraph()>:
		<org.jgrapht.generate.RandomGraphGeneratorTest.java:70, 20.00%>
	<org.jgrapht.generate.RandomGraphGeneratorTest: void testGenerateListenableUndirectedGraph()>:
		<org.jgrapht.generate.RandomGraphGeneratorTest.java:89, 20.00%>
	<org.jgrapht.graph.AsUndirectedGraphTest: void testAddEdge()>:
		<org.jgrapht.graph.AsUndirectedGraphTest.java:89, 100.00%>
	<org.jgrapht.graph.AsUnweightedGraphTest: void constructWeighted(org.jgrapht.WeightedGraph)>:
		<org.jgrapht.graph.AsUnweightedGraphTest.java:110, 57.14%>
	<org.jgrapht.graph.DefaultDirectedGraphTest: void testEdgesOf()>:
		<org.jgrapht.graph.DefaultDirectedGraphTest.java:117, 75.00%>
		<org.jgrapht.graph.DefaultDirectedGraphTest.java:118, 75.00%>
	<org.jgrapht.graph.DefaultDirectedGraphTest: void testGetAllEdges()>:
		<org.jgrapht.graph.DefaultDirectedGraphTest.java:130, 100.00%>
	<org.jgrapht.graph.DefaultDirectedGraphTest: void testInDegreeOf()>:
		<org.jgrapht.graph.DefaultDirectedGraphTest.java:141, 83.33%>
		<org.jgrapht.graph.DefaultDirectedGraphTest.java:142, 83.33%>
	<org.jgrapht.graph.DefaultDirectedGraphTest: void testOutDegreeOf()>:
		<org.jgrapht.graph.DefaultDirectedGraphTest.java:153, 83.33%>
		<org.jgrapht.graph.DefaultDirectedGraphTest.java:154, 83.33%>
	<org.jgrapht.graph.GenericGraphsTest: void testAlissaHacker()>:
		<org.jgrapht.graph.GenericGraphsTest.java:134, 83.33%>
	<org.jgrapht.graph.GenericGraphsTest: void testEqualButNotSameVertex()>:
		<org.jgrapht.graph.GenericGraphsTest.java:145, 40.00%>
		<org.jgrapht.graph.GenericGraphsTest.java:146, 40.00%>
	<org.jgrapht.graph.SimpleDirectedGraphTest: void testIncomingOutgoingEdgesOf()>:
		<org.jgrapht.graph.SimpleDirectedGraphTest.java:315, 128.57%>
	<org.jgrapht.graph.SubgraphTest: void testInducedSubgraphUnderlyingEdgeAddition()>:
		<org.jgrapht.graph.SubgraphTest.java:192, 20.00%>
	<org.jgrapht.traverse.AbstractGraphIteratorTest: void testDirectedGraph()>:
		<org.jgrapht.traverse.AbstractGraphIteratorTest.java:86, 47.06%>
		<org.jgrapht.traverse.AbstractGraphIteratorTest.java:88, 52.94%>
	<org.jgrapht.traverse.ClosestFirstIteratorTest: void testNoStart()>:
		<org.jgrapht.traverse.ClosestFirstIteratorTest.java:103, 53.85%>
	<org.jgrapht.traverse.ClosestFirstIteratorTest: void testRadius()>:
		<org.jgrapht.traverse.ClosestFirstIteratorTest.java:80, 53.85%>
	<org.jgrapht.traverse.DepthFirstIteratorTest: void testBug1169182()>:
		<org.jgrapht.traverse.DepthFirstIteratorTest.java:149, 16.00%>
	<org.jgrapht.traverse.TopologicalOrderIteratorTest: void testEmptyGraph()>:
		<org.jgrapht.traverse.TopologicalOrderIteratorTest.java:136, 50.00%>
	<org.jgrapht.traverse.TopologicalOrderIteratorTest: void testRecipe()>:
		<org.jgrapht.traverse.TopologicalOrderIteratorTest.java:109, 9.62%>
		<org.jgrapht.traverse.TopologicalOrderIteratorTest.java:121, 9.62%>
	<org.jgrapht.util.FibonacciHeapTest: void testGrowReplaceShrink()>:
		<org.jgrapht.util.FibonacciHeapTest.java:88, 17.65%>
		<org.jgrapht.util.FibonacciHeapTest.java:91, 17.65%>
	<org.jgrapht.util.PrefetchIteratorTest: void testEnumInterface()>:
		<org.jgrapht.util.PrefetchIteratorTest.java:71, 33.33%>
		<org.jgrapht.util.PrefetchIteratorTest.java:72, 41.67%>
		<org.jgrapht.util.PrefetchIteratorTest.java:74, 33.33%>
		<org.jgrapht.util.PrefetchIteratorTest.java:81, 16.67%>
	<org.jgrapht.util.PrefetchIteratorTest: void testIteratorInterface()>:
		<org.jgrapht.util.PrefetchIteratorTest.java:54, 33.33%>
		<org.jgrapht.util.PrefetchIteratorTest.java:55, 41.67%>
		<org.jgrapht.util.PrefetchIteratorTest.java:57, 33.33%>
		<org.jgrapht.util.PrefetchIteratorTest.java:64, 16.67%>

Relevant Assertion clone sets (8):
Set (score: 1.00, ccsize: 2, packages: 1, classes: 1): 
	<org.jgrapht.alg.VertexCoversTest: void testFind2ApproximationCover()>:
		<org.jgrapht.alg.VertexCoversTest.java:74, 60.00%>
	<org.jgrapht.alg.VertexCoversTest: void testFindGreedyCover()>:
		<org.jgrapht.alg.VertexCoversTest.java:89, 50.00%>
Set (score: 1.00, ccsize: 2, packages: 1, classes: 1): 
	<org.jgrapht.experimental.GraphReaderTest: void testGraphReader()>:
		<org.jgrapht.experimental.GraphReaderTest.java:88, 27.27%>
	<org.jgrapht.experimental.GraphReaderTest: void testGraphReaderWeighted()>:
		<org.jgrapht.experimental.GraphReaderTest.java:116, 23.08%>
Set (score: 0.67, ccsize: 3, packages: 1, classes: 2): 
	<org.jgrapht.alg.BiconnectivityInspectorTest: void testLinearGraph(int)>:
		<org.jgrapht.alg.BiconnectivityInspectorTest.java:88, 40.00%>
	<org.jgrapht.alg.BlockCutpointGraphTest: void testLinearGraph(int)>:
		<org.jgrapht.alg.BlockCutpointGraphTest.java:121, 33.33%>
		<org.jgrapht.alg.BlockCutpointGraphTest.java:125, 33.33%>
Set (score: 0.67, ccsize: 3, packages: 1, classes: 2): 
	<org.jgrapht.alg.BiconnectivityInspectorTest: void testNotBiconnected()>:
		<org.jgrapht.alg.BiconnectivityInspectorTest.java:100, 55.56%>
	<org.jgrapht.alg.BlockCutpointGraphTest: void testNotBiconnected()>:
		<org.jgrapht.alg.BlockCutpointGraphTest.java:135, 41.67%>
		<org.jgrapht.alg.BlockCutpointGraphTest.java:139, 41.67%>
Set (score: 0.67, ccsize: 2, packages: 1, classes: 2): 
	<org.jgrapht.ext.DOTExporterTest: void testUndirected()>:
		<org.jgrapht.ext.DOTExporterTest.java:110, 41.67%>
	<org.jgrapht.ext.GmlExporterTest: void testUndirected()>:
		<org.jgrapht.ext.GmlExporterTest.java:117, 62.50%>
Set (score: 0.67, ccsize: 2, packages: 1, classes: 1): 
	<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest: void testBipartiteMatching1()>:
		<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest.java:86, 6.76%>
	<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest: void testBipartiteMatching2()>:
		<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest.java:115, 5.21%>
Set (score: 0.50, ccsize: 3, packages: 1, classes: 1): 
	<org.jgrapht.alg.KSPExampleTest: void testFourReturnedPathsJGraphT()>:
		<org.jgrapht.alg.KSPExampleTest.java:60, 55.56%>
	<org.jgrapht.alg.KSPExampleTest: void testThreeReturnedPathsJGraphT()>:
		<org.jgrapht.alg.KSPExampleTest.java:72, 60.00%>
	<org.jgrapht.alg.KSPExampleTest: void testTwoReturnedPathsJGraphT()>:
		<org.jgrapht.alg.KSPExampleTest.java:84, 60.00%>
Set (score: 0.50, ccsize: 2, packages: 1, classes: 1): 
	<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest: void testBipartiteMatching1()>:
		<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest.java:83, 6.76%>
	<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest: void testBipartiteMatching2()>:
		<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest.java:112, 5.21%>
==============================================

[129] Set (editDistance: 2, isComplete: false, packages: 12, classes: 39): 
Centroid (size: 2): <org.jgrapht.alg.TransitiveClosureTest: void testRingGraph()>

Methods (71): 
	<org.jgrapht.EnhancedTestCase: void assertFalse()>:
		<org.jgrapht.EnhancedTestCase.java:79, 100.00%>
	<org.jgrapht.EnhancedTestCase: void assertTrue()>:
		<org.jgrapht.EnhancedTestCase.java:87, 100.00%>
	<org.jgrapht.alg.BellmanFordShortestPathTest: void testWithNegativeEdges()>:
		<org.jgrapht.alg.BellmanFordShortestPathTest.java:120, 45.45%>
		<org.jgrapht.alg.BellmanFordShortestPathTest.java:127, 63.64%>
	<org.jgrapht.alg.BiconnectivityInspectorTest: void testLinearGraph(int)>:
		<org.jgrapht.alg.BiconnectivityInspectorTest.java:88, 40.00%>
		<org.jgrapht.alg.BiconnectivityInspectorTest.java:89, 40.00%>
	<org.jgrapht.alg.BiconnectivityInspectorTest: void testNotBiconnected()>:
		<org.jgrapht.alg.BiconnectivityInspectorTest.java:100, 55.56%>
		<org.jgrapht.alg.BiconnectivityInspectorTest.java:101, 55.56%>
	<org.jgrapht.alg.BlockCutpointGraphTest: void testBiconnected()>:
		<org.jgrapht.alg.BlockCutpointGraphTest.java:67, 41.67%>
		<org.jgrapht.alg.BlockCutpointGraphTest.java:71, 41.67%>
	<org.jgrapht.alg.BlockCutpointGraphTest: void testGetBlock(org.jgrapht.alg.BlockCutpointGraph)>:
		<org.jgrapht.alg.BlockCutpointGraphTest.java:88, 33.33%>
		<org.jgrapht.alg.BlockCutpointGraphTest.java:94, 19.05%>
	<org.jgrapht.alg.BlockCutpointGraphTest: void testLinearGraph(int)>:
		<org.jgrapht.alg.BlockCutpointGraphTest.java:121, 33.33%>
		<org.jgrapht.alg.BlockCutpointGraphTest.java:125, 33.33%>
	<org.jgrapht.alg.BlockCutpointGraphTest: void testNotBiconnected()>:
		<org.jgrapht.alg.BlockCutpointGraphTest.java:135, 41.67%>
		<org.jgrapht.alg.BlockCutpointGraphTest.java:139, 41.67%>
	<org.jgrapht.alg.BronKerboschCliqueFinderTest: void testFindAll()>:
		<org.jgrapht.alg.BronKerboschCliqueFinderTest.java:143, 26.32%>
		<org.jgrapht.alg.BronKerboschCliqueFinderTest.java:175, 21.05%>
	<org.jgrapht.alg.BronKerboschCliqueFinderTest: void testFindBiggest()>:
		<org.jgrapht.alg.BronKerboschCliqueFinderTest.java:119, 41.67%>
		<org.jgrapht.alg.BronKerboschCliqueFinderTest.java:129, 58.33%>
	<org.jgrapht.alg.ConnectivityInspectorTest: void testStronglyConnected4()>:
		<org.jgrapht.alg.ConnectivityInspectorTest.java:371, 30.77%>
	<org.jgrapht.alg.FloydWarshallShortestPathsTest: void testCompareWithDijkstra()>:
		<org.jgrapht.alg.FloydWarshallShortestPathsTest.java:96, 7.41%>
		<org.jgrapht.alg.FloydWarshallShortestPathsTest.java:121, 7.41%>
	<org.jgrapht.alg.FloydWarshallShortestPathsTest: void testDiameter()>:
		<org.jgrapht.alg.FloydWarshallShortestPathsTest.java:161, 57.14%>
	<org.jgrapht.alg.FloydWarshallShortestPathsTest: void testEdgeLessDiameter()>:
		<org.jgrapht.alg.FloydWarshallShortestPathsTest.java:182, 40.00%>
	<org.jgrapht.alg.FloydWarshallShortestPathsTest: void testEmptyDiameter()>:
		<org.jgrapht.alg.FloydWarshallShortestPathsTest.java:170, 50.00%>
	<org.jgrapht.alg.HamiltonianCycleTest: void testHamiltonianCycle()>:
		<org.jgrapht.alg.HamiltonianCycleTest.java:79, 33.33%>
		<org.jgrapht.alg.HamiltonianCycleTest.java:89, 27.78%>
	<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest: void testBipartiteMatching1()>:
		<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest.java:83, 6.76%>
		<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest.java:86, 6.76%>
	<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest: void testBipartiteMatching2()>:
		<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest.java:112, 5.21%>
		<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest.java:115, 5.21%>
	<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest: void testEmptyMatching()>:
		<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest.java:128, 33.33%>
	<org.jgrapht.alg.KSPDiscardsValidPathsTest: void testNot3connectedGraph()>:
		<org.jgrapht.alg.KSPDiscardsValidPathsTest.java:102, 87.50%>
	<org.jgrapht.alg.KSPExampleTest: void testFourReturnedPathsJGraphT()>:
		<org.jgrapht.alg.KSPExampleTest.java:60, 55.56%>
	<org.jgrapht.alg.KSPExampleTest: void testThreeReturnedPathsJGraphT()>:
		<org.jgrapht.alg.KSPExampleTest.java:72, 60.00%>
	<org.jgrapht.alg.KSPExampleTest: void testTwoReturnedPathsJGraphT()>:
		<org.jgrapht.alg.KSPExampleTest.java:84, 60.00%>
	<org.jgrapht.alg.KShortestPathCostTest: void verifyShortestPathsInIncreasingOrderOfWeight(org.jgrapht.Graph)>:
		<org.jgrapht.alg.KShortestPathCostTest.java:222, 30.77%>
		<org.jgrapht.alg.KShortestPathCostTest.java:225, 30.77%>
	<org.jgrapht.alg.KShortestPathCostTest: void verifyWeightsConsistency(java.util.List,java.util.List)>:
		<org.jgrapht.alg.KShortestPathCostTest.java:294, 53.85%>
	<org.jgrapht.alg.KShortestPathKValuesTest: void verifyNbPathsForAllPairsOfVertices(org.jgrapht.Graph)>:
		<org.jgrapht.alg.KShortestPathKValuesTest.java:148, 36.84%>
	<org.jgrapht.alg.KruskalMinimumSpanningTreeTest: void testMinimumSpanningTree()>:
		<org.jgrapht.alg.KruskalMinimumSpanningTreeTest.java:80, 19.05%>
		<org.jgrapht.alg.KruskalMinimumSpanningTreeTest.java:84, 38.10%>
	<org.jgrapht.alg.StoerWagnerMinimumCutTest: void testMinCut14()>:
		<org.jgrapht.alg.StoerWagnerMinimumCutTest.java:97, 16.67%>
	<org.jgrapht.alg.StoerWagnerMinimumCutTest: void testMinCutDisconnected()>:
		<org.jgrapht.alg.StoerWagnerMinimumCutTest.java:124, 22.73%>
	<org.jgrapht.alg.TransitiveClosureTest: void testRingGraph()>:
		<org.jgrapht.alg.TransitiveClosureTest.java:107, 45.45%>
		<org.jgrapht.alg.TransitiveClosureTest.java:110, 50.00%>
	<org.jgrapht.alg.VertexCoversTest: void testFind2ApproximationCover()>:
		<org.jgrapht.alg.VertexCoversTest.java:74, 60.00%>
	<org.jgrapht.alg.VertexCoversTest: void testFindGreedyCover()>:
		<org.jgrapht.alg.VertexCoversTest.java:89, 50.00%>
	<org.jgrapht.experimental.GraphReaderTest: void testGraphReader()>:
		<org.jgrapht.experimental.GraphReaderTest.java:88, 27.27%>
	<org.jgrapht.experimental.GraphReaderTest: void testGraphReaderWeighted()>:
		<org.jgrapht.experimental.GraphReaderTest.java:116, 23.08%>
	<org.jgrapht.experimental.alg.ColoringTest: void testBacktrackColoring()>:
		<org.jgrapht.experimental.alg.ColoringTest.java:97, 50.00%>
	<org.jgrapht.experimental.alg.ColoringTest: void testGreedyColoring()>:
		<org.jgrapht.experimental.alg.ColoringTest.java:77, 50.00%>
	<org.jgrapht.experimental.equivalence.EquivalenceGroupCreatorTest: void testOneComparator(org.jgrapht.experimental.equivalence.EquivalenceComparator,int)>:
		<org.jgrapht.experimental.equivalence.EquivalenceGroupCreatorTest.java:152, 23.53%>
		<org.jgrapht.experimental.equivalence.EquivalenceGroupCreatorTest.java:157, 41.18%>
	<org.jgrapht.experimental.isomorphism.IsomorphismInspectorTest: void assertIsomorphic(org.jgrapht.Graph[],boolean,org.jgrapht.experimental.equivalence.EquivalenceComparator,org.jgrapht.experimental.equivalence.EquivalenceComparator)>:
		<org.jgrapht.experimental.isomorphism.IsomorphismInspectorTest.java:138, 28.57%>
		<org.jgrapht.experimental.isomorphism.IsomorphismInspectorTest.java:140, 28.57%>
	<org.jgrapht.experimental.permutation.CompoundPermutationIterTest: void testGetNext()>:
		<org.jgrapht.experimental.permutation.CompoundPermutationIterTest.java:96, 40.00%>
		<org.jgrapht.experimental.permutation.CompoundPermutationIterTest.java:127, 40.00%>
	<org.jgrapht.ext.DOTExporterTest: void testUndirected()>:
		<org.jgrapht.ext.DOTExporterTest.java:110, 41.67%>
	<org.jgrapht.ext.DOTExporterTest: void testValidNodeIDs()>:
		<org.jgrapht.ext.DOTExporterTest.java:149, 16.00%>
	<org.jgrapht.ext.GmlExporterTest: void testUndirected()>:
		<org.jgrapht.ext.GmlExporterTest.java:117, 62.50%>
	<org.jgrapht.ext.MatrixExporterTest: void testAdjacencyDirected()>:
		<org.jgrapht.ext.MatrixExporterTest.java:149, 62.50%>
	<org.jgrapht.ext.MatrixExporterTest: void testAdjacencyUndirected()>:
		<org.jgrapht.ext.MatrixExporterTest.java:133, 62.50%>
	<org.jgrapht.ext.MatrixExporterTest: void testLaplacian()>:
		<org.jgrapht.ext.MatrixExporterTest.java:113, 38.46%>
		<org.jgrapht.ext.MatrixExporterTest.java:117, 38.46%>
	<org.jgrapht.generate.GraphGeneratorTest: void testCompleteBipartiteGraphGenerator()>:
		<org.jgrapht.generate.GraphGeneratorTest.java:243, 50.00%>
		<org.jgrapht.generate.GraphGeneratorTest.java:244, 50.00%>
	<org.jgrapht.generate.GraphGeneratorTest: void testCompleteGraphGenerator()>:
		<org.jgrapht.generate.GraphGeneratorTest.java:185, 62.50%>
	<org.jgrapht.generate.GraphGeneratorTest: void testHyperCubeGraphGenerator()>:
		<org.jgrapht.generate.GraphGeneratorTest.java:265, 50.00%>
		<org.jgrapht.generate.GraphGeneratorTest.java:266, 50.00%>
	<org.jgrapht.generate.RandomGraphGeneratorTest: void testBadVertexFactory()>:
		<org.jgrapht.generate.RandomGraphGeneratorTest.java:106, 12.50%>
	<org.jgrapht.generate.RandomGraphGeneratorTest: void testGenerateDirectedGraph()>:
		<org.jgrapht.generate.RandomGraphGeneratorTest.java:70, 20.00%>
	<org.jgrapht.generate.RandomGraphGeneratorTest: void testGenerateListenableUndirectedGraph()>:
		<org.jgrapht.generate.RandomGraphGeneratorTest.java:89, 20.00%>
	<org.jgrapht.graph.AsUndirectedGraphTest: void testAddEdge()>:
		<org.jgrapht.graph.AsUndirectedGraphTest.java:89, 100.00%>
	<org.jgrapht.graph.AsUnweightedGraphTest: void constructWeighted(org.jgrapht.WeightedGraph)>:
		<org.jgrapht.graph.AsUnweightedGraphTest.java:110, 57.14%>
	<org.jgrapht.graph.DefaultDirectedGraphTest: void testEdgesOf()>:
		<org.jgrapht.graph.DefaultDirectedGraphTest.java:117, 75.00%>
		<org.jgrapht.graph.DefaultDirectedGraphTest.java:118, 75.00%>
	<org.jgrapht.graph.DefaultDirectedGraphTest: void testGetAllEdges()>:
		<org.jgrapht.graph.DefaultDirectedGraphTest.java:130, 100.00%>
	<org.jgrapht.graph.DefaultDirectedGraphTest: void testInDegreeOf()>:
		<org.jgrapht.graph.DefaultDirectedGraphTest.java:141, 83.33%>
		<org.jgrapht.graph.DefaultDirectedGraphTest.java:142, 83.33%>
	<org.jgrapht.graph.DefaultDirectedGraphTest: void testOutDegreeOf()>:
		<org.jgrapht.graph.DefaultDirectedGraphTest.java:153, 83.33%>
		<org.jgrapht.graph.DefaultDirectedGraphTest.java:154, 83.33%>
	<org.jgrapht.graph.GenericGraphsTest: void testAlissaHacker()>:
		<org.jgrapht.graph.GenericGraphsTest.java:134, 83.33%>
	<org.jgrapht.graph.GenericGraphsTest: void testEqualButNotSameVertex()>:
		<org.jgrapht.graph.GenericGraphsTest.java:145, 40.00%>
		<org.jgrapht.graph.GenericGraphsTest.java:146, 40.00%>
	<org.jgrapht.graph.SimpleDirectedGraphTest: void testIncomingOutgoingEdgesOf()>:
		<org.jgrapht.graph.SimpleDirectedGraphTest.java:315, 128.57%>
	<org.jgrapht.graph.SubgraphTest: void testInducedSubgraphUnderlyingEdgeAddition()>:
		<org.jgrapht.graph.SubgraphTest.java:192, 20.00%>
	<org.jgrapht.traverse.AbstractGraphIteratorTest: void testDirectedGraph()>:
		<org.jgrapht.traverse.AbstractGraphIteratorTest.java:86, 47.06%>
		<org.jgrapht.traverse.AbstractGraphIteratorTest.java:88, 52.94%>
	<org.jgrapht.traverse.ClosestFirstIteratorTest: void testNoStart()>:
		<org.jgrapht.traverse.ClosestFirstIteratorTest.java:103, 53.85%>
	<org.jgrapht.traverse.ClosestFirstIteratorTest: void testRadius()>:
		<org.jgrapht.traverse.ClosestFirstIteratorTest.java:80, 53.85%>
	<org.jgrapht.traverse.DepthFirstIteratorTest: void testBug1169182()>:
		<org.jgrapht.traverse.DepthFirstIteratorTest.java:149, 16.00%>
	<org.jgrapht.traverse.TopologicalOrderIteratorTest: void testEmptyGraph()>:
		<org.jgrapht.traverse.TopologicalOrderIteratorTest.java:136, 50.00%>
	<org.jgrapht.traverse.TopologicalOrderIteratorTest: void testRecipe()>:
		<org.jgrapht.traverse.TopologicalOrderIteratorTest.java:109, 9.62%>
		<org.jgrapht.traverse.TopologicalOrderIteratorTest.java:121, 9.62%>
	<org.jgrapht.util.FibonacciHeapTest: void testGrowReplaceShrink()>:
		<org.jgrapht.util.FibonacciHeapTest.java:88, 17.65%>
		<org.jgrapht.util.FibonacciHeapTest.java:91, 17.65%>
	<org.jgrapht.util.PrefetchIteratorTest: void testEnumInterface()>:
		<org.jgrapht.util.PrefetchIteratorTest.java:71, 33.33%>
		<org.jgrapht.util.PrefetchIteratorTest.java:72, 41.67%>
		<org.jgrapht.util.PrefetchIteratorTest.java:74, 33.33%>
		<org.jgrapht.util.PrefetchIteratorTest.java:81, 16.67%>
	<org.jgrapht.util.PrefetchIteratorTest: void testIteratorInterface()>:
		<org.jgrapht.util.PrefetchIteratorTest.java:54, 33.33%>
		<org.jgrapht.util.PrefetchIteratorTest.java:55, 41.67%>
		<org.jgrapht.util.PrefetchIteratorTest.java:57, 33.33%>
		<org.jgrapht.util.PrefetchIteratorTest.java:64, 16.67%>

Relevant Assertion clone sets (8):
Set (score: 1.00, ccsize: 2, packages: 1, classes: 1): 
	<org.jgrapht.alg.VertexCoversTest: void testFind2ApproximationCover()>:
		<org.jgrapht.alg.VertexCoversTest.java:74, 60.00%>
	<org.jgrapht.alg.VertexCoversTest: void testFindGreedyCover()>:
		<org.jgrapht.alg.VertexCoversTest.java:89, 50.00%>
Set (score: 1.00, ccsize: 2, packages: 1, classes: 1): 
	<org.jgrapht.experimental.GraphReaderTest: void testGraphReader()>:
		<org.jgrapht.experimental.GraphReaderTest.java:88, 27.27%>
	<org.jgrapht.experimental.GraphReaderTest: void testGraphReaderWeighted()>:
		<org.jgrapht.experimental.GraphReaderTest.java:116, 23.08%>
Set (score: 0.67, ccsize: 3, packages: 1, classes: 2): 
	<org.jgrapht.alg.BiconnectivityInspectorTest: void testLinearGraph(int)>:
		<org.jgrapht.alg.BiconnectivityInspectorTest.java:88, 40.00%>
	<org.jgrapht.alg.BlockCutpointGraphTest: void testLinearGraph(int)>:
		<org.jgrapht.alg.BlockCutpointGraphTest.java:121, 33.33%>
		<org.jgrapht.alg.BlockCutpointGraphTest.java:125, 33.33%>
Set (score: 0.67, ccsize: 3, packages: 1, classes: 2): 
	<org.jgrapht.alg.BiconnectivityInspectorTest: void testNotBiconnected()>:
		<org.jgrapht.alg.BiconnectivityInspectorTest.java:100, 55.56%>
	<org.jgrapht.alg.BlockCutpointGraphTest: void testNotBiconnected()>:
		<org.jgrapht.alg.BlockCutpointGraphTest.java:135, 41.67%>
		<org.jgrapht.alg.BlockCutpointGraphTest.java:139, 41.67%>
Set (score: 0.67, ccsize: 2, packages: 1, classes: 2): 
	<org.jgrapht.ext.DOTExporterTest: void testUndirected()>:
		<org.jgrapht.ext.DOTExporterTest.java:110, 41.67%>
	<org.jgrapht.ext.GmlExporterTest: void testUndirected()>:
		<org.jgrapht.ext.GmlExporterTest.java:117, 62.50%>
Set (score: 0.67, ccsize: 2, packages: 1, classes: 1): 
	<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest: void testBipartiteMatching1()>:
		<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest.java:86, 6.76%>
	<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest: void testBipartiteMatching2()>:
		<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest.java:115, 5.21%>
Set (score: 0.50, ccsize: 3, packages: 1, classes: 1): 
	<org.jgrapht.alg.KSPExampleTest: void testFourReturnedPathsJGraphT()>:
		<org.jgrapht.alg.KSPExampleTest.java:60, 55.56%>
	<org.jgrapht.alg.KSPExampleTest: void testThreeReturnedPathsJGraphT()>:
		<org.jgrapht.alg.KSPExampleTest.java:72, 60.00%>
	<org.jgrapht.alg.KSPExampleTest: void testTwoReturnedPathsJGraphT()>:
		<org.jgrapht.alg.KSPExampleTest.java:84, 60.00%>
Set (score: 0.50, ccsize: 2, packages: 1, classes: 1): 
	<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest: void testBipartiteMatching1()>:
		<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest.java:83, 6.76%>
	<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest: void testBipartiteMatching2()>:
		<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest.java:112, 5.21%>
==============================================

[130] Set (editDistance: 2, isComplete: false, packages: 13, classes: 38): 
Centroid (size: 2): <org.jgrapht.experimental.dag.DirectedAcyclicGraphTest: void testTopoIterationOrderLinearGraph()>

Methods (70): 
	<org.jgrapht.EnhancedTestCase: void assertFalse()>:
		<org.jgrapht.EnhancedTestCase.java:79, 100.00%>
	<org.jgrapht.EnhancedTestCase: void assertTrue()>:
		<org.jgrapht.EnhancedTestCase.java:87, 100.00%>
	<org.jgrapht.alg.BellmanFordShortestPathTest: void testWithNegativeEdges()>:
		<org.jgrapht.alg.BellmanFordShortestPathTest.java:120, 45.45%>
		<org.jgrapht.alg.BellmanFordShortestPathTest.java:127, 63.64%>
	<org.jgrapht.alg.BiconnectivityInspectorTest: void testLinearGraph(int)>:
		<org.jgrapht.alg.BiconnectivityInspectorTest.java:88, 40.00%>
		<org.jgrapht.alg.BiconnectivityInspectorTest.java:89, 40.00%>
	<org.jgrapht.alg.BiconnectivityInspectorTest: void testNotBiconnected()>:
		<org.jgrapht.alg.BiconnectivityInspectorTest.java:100, 55.56%>
		<org.jgrapht.alg.BiconnectivityInspectorTest.java:101, 55.56%>
	<org.jgrapht.alg.BlockCutpointGraphTest: void testBiconnected()>:
		<org.jgrapht.alg.BlockCutpointGraphTest.java:67, 41.67%>
		<org.jgrapht.alg.BlockCutpointGraphTest.java:71, 41.67%>
	<org.jgrapht.alg.BlockCutpointGraphTest: void testGetBlock(org.jgrapht.alg.BlockCutpointGraph)>:
		<org.jgrapht.alg.BlockCutpointGraphTest.java:88, 33.33%>
		<org.jgrapht.alg.BlockCutpointGraphTest.java:94, 19.05%>
	<org.jgrapht.alg.BlockCutpointGraphTest: void testLinearGraph(int)>:
		<org.jgrapht.alg.BlockCutpointGraphTest.java:121, 33.33%>
		<org.jgrapht.alg.BlockCutpointGraphTest.java:125, 33.33%>
	<org.jgrapht.alg.BlockCutpointGraphTest: void testNotBiconnected()>:
		<org.jgrapht.alg.BlockCutpointGraphTest.java:135, 41.67%>
		<org.jgrapht.alg.BlockCutpointGraphTest.java:139, 41.67%>
	<org.jgrapht.alg.BronKerboschCliqueFinderTest: void testFindAll()>:
		<org.jgrapht.alg.BronKerboschCliqueFinderTest.java:143, 26.32%>
		<org.jgrapht.alg.BronKerboschCliqueFinderTest.java:175, 21.05%>
	<org.jgrapht.alg.BronKerboschCliqueFinderTest: void testFindBiggest()>:
		<org.jgrapht.alg.BronKerboschCliqueFinderTest.java:119, 41.67%>
		<org.jgrapht.alg.BronKerboschCliqueFinderTest.java:129, 58.33%>
	<org.jgrapht.alg.ConnectivityInspectorTest: void testStronglyConnected4()>:
		<org.jgrapht.alg.ConnectivityInspectorTest.java:371, 30.77%>
	<org.jgrapht.alg.FloydWarshallShortestPathsTest: void testCompareWithDijkstra()>:
		<org.jgrapht.alg.FloydWarshallShortestPathsTest.java:96, 7.41%>
		<org.jgrapht.alg.FloydWarshallShortestPathsTest.java:121, 7.41%>
	<org.jgrapht.alg.FloydWarshallShortestPathsTest: void testDiameter()>:
		<org.jgrapht.alg.FloydWarshallShortestPathsTest.java:161, 57.14%>
	<org.jgrapht.alg.FloydWarshallShortestPathsTest: void testEdgeLessDiameter()>:
		<org.jgrapht.alg.FloydWarshallShortestPathsTest.java:182, 40.00%>
	<org.jgrapht.alg.FloydWarshallShortestPathsTest: void testEmptyDiameter()>:
		<org.jgrapht.alg.FloydWarshallShortestPathsTest.java:170, 50.00%>
	<org.jgrapht.alg.HamiltonianCycleTest: void testHamiltonianCycle()>:
		<org.jgrapht.alg.HamiltonianCycleTest.java:79, 33.33%>
		<org.jgrapht.alg.HamiltonianCycleTest.java:89, 27.78%>
	<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest: void testBipartiteMatching1()>:
		<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest.java:83, 6.76%>
		<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest.java:86, 6.76%>
	<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest: void testBipartiteMatching2()>:
		<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest.java:112, 5.21%>
		<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest.java:115, 5.21%>
	<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest: void testEmptyMatching()>:
		<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest.java:128, 33.33%>
	<org.jgrapht.alg.KSPDiscardsValidPathsTest: void testNot3connectedGraph()>:
		<org.jgrapht.alg.KSPDiscardsValidPathsTest.java:102, 87.50%>
	<org.jgrapht.alg.KSPExampleTest: void testFourReturnedPathsJGraphT()>:
		<org.jgrapht.alg.KSPExampleTest.java:60, 55.56%>
	<org.jgrapht.alg.KSPExampleTest: void testThreeReturnedPathsJGraphT()>:
		<org.jgrapht.alg.KSPExampleTest.java:72, 60.00%>
	<org.jgrapht.alg.KSPExampleTest: void testTwoReturnedPathsJGraphT()>:
		<org.jgrapht.alg.KSPExampleTest.java:84, 60.00%>
	<org.jgrapht.alg.KShortestPathCostTest: void verifyShortestPathsInIncreasingOrderOfWeight(org.jgrapht.Graph)>:
		<org.jgrapht.alg.KShortestPathCostTest.java:222, 30.77%>
		<org.jgrapht.alg.KShortestPathCostTest.java:225, 30.77%>
	<org.jgrapht.alg.KShortestPathCostTest: void verifyWeightsConsistency(java.util.List,java.util.List)>:
		<org.jgrapht.alg.KShortestPathCostTest.java:294, 53.85%>
	<org.jgrapht.alg.KShortestPathKValuesTest: void verifyNbPathsForAllPairsOfVertices(org.jgrapht.Graph)>:
		<org.jgrapht.alg.KShortestPathKValuesTest.java:148, 36.84%>
	<org.jgrapht.alg.KruskalMinimumSpanningTreeTest: void testMinimumSpanningTree()>:
		<org.jgrapht.alg.KruskalMinimumSpanningTreeTest.java:80, 19.05%>
		<org.jgrapht.alg.KruskalMinimumSpanningTreeTest.java:84, 38.10%>
	<org.jgrapht.alg.StoerWagnerMinimumCutTest: void testMinCut14()>:
		<org.jgrapht.alg.StoerWagnerMinimumCutTest.java:97, 16.67%>
	<org.jgrapht.alg.StoerWagnerMinimumCutTest: void testMinCutDisconnected()>:
		<org.jgrapht.alg.StoerWagnerMinimumCutTest.java:124, 22.73%>
	<org.jgrapht.alg.VertexCoversTest: void testFind2ApproximationCover()>:
		<org.jgrapht.alg.VertexCoversTest.java:74, 60.00%>
	<org.jgrapht.alg.VertexCoversTest: void testFindGreedyCover()>:
		<org.jgrapht.alg.VertexCoversTest.java:89, 50.00%>
	<org.jgrapht.experimental.GraphReaderTest: void testGraphReader()>:
		<org.jgrapht.experimental.GraphReaderTest.java:88, 27.27%>
	<org.jgrapht.experimental.GraphReaderTest: void testGraphReaderWeighted()>:
		<org.jgrapht.experimental.GraphReaderTest.java:116, 23.08%>
	<org.jgrapht.experimental.alg.ColoringTest: void testBacktrackColoring()>:
		<org.jgrapht.experimental.alg.ColoringTest.java:97, 50.00%>
	<org.jgrapht.experimental.alg.ColoringTest: void testGreedyColoring()>:
		<org.jgrapht.experimental.alg.ColoringTest.java:77, 50.00%>
	<org.jgrapht.experimental.dag.DirectedAcyclicGraphTest: void testTopoIterationOrderLinearGraph()>:
		<org.jgrapht.experimental.dag.DirectedAcyclicGraphTest.java:181, 29.41%>
		<org.jgrapht.experimental.dag.DirectedAcyclicGraphTest.java:182, 41.18%>
	<org.jgrapht.experimental.equivalence.EquivalenceGroupCreatorTest: void testOneComparator(org.jgrapht.experimental.equivalence.EquivalenceComparator,int)>:
		<org.jgrapht.experimental.equivalence.EquivalenceGroupCreatorTest.java:152, 23.53%>
		<org.jgrapht.experimental.equivalence.EquivalenceGroupCreatorTest.java:157, 41.18%>
	<org.jgrapht.experimental.isomorphism.IsomorphismInspectorTest: void assertIsomorphic(org.jgrapht.Graph[],boolean,org.jgrapht.experimental.equivalence.EquivalenceComparator,org.jgrapht.experimental.equivalence.EquivalenceComparator)>:
		<org.jgrapht.experimental.isomorphism.IsomorphismInspectorTest.java:138, 28.57%>
		<org.jgrapht.experimental.isomorphism.IsomorphismInspectorTest.java:140, 28.57%>
	<org.jgrapht.experimental.permutation.CompoundPermutationIterTest: void testGetNext()>:
		<org.jgrapht.experimental.permutation.CompoundPermutationIterTest.java:96, 40.00%>
		<org.jgrapht.experimental.permutation.CompoundPermutationIterTest.java:127, 40.00%>
	<org.jgrapht.ext.DOTExporterTest: void testUndirected()>:
		<org.jgrapht.ext.DOTExporterTest.java:110, 41.67%>
	<org.jgrapht.ext.DOTExporterTest: void testValidNodeIDs()>:
		<org.jgrapht.ext.DOTExporterTest.java:149, 16.00%>
	<org.jgrapht.ext.GmlExporterTest: void testUndirected()>:
		<org.jgrapht.ext.GmlExporterTest.java:117, 62.50%>
	<org.jgrapht.ext.MatrixExporterTest: void testAdjacencyDirected()>:
		<org.jgrapht.ext.MatrixExporterTest.java:149, 62.50%>
	<org.jgrapht.ext.MatrixExporterTest: void testAdjacencyUndirected()>:
		<org.jgrapht.ext.MatrixExporterTest.java:133, 62.50%>
	<org.jgrapht.ext.MatrixExporterTest: void testLaplacian()>:
		<org.jgrapht.ext.MatrixExporterTest.java:113, 38.46%>
		<org.jgrapht.ext.MatrixExporterTest.java:117, 38.46%>
	<org.jgrapht.generate.GraphGeneratorTest: void testCompleteBipartiteGraphGenerator()>:
		<org.jgrapht.generate.GraphGeneratorTest.java:243, 50.00%>
		<org.jgrapht.generate.GraphGeneratorTest.java:244, 50.00%>
	<org.jgrapht.generate.GraphGeneratorTest: void testCompleteGraphGenerator()>:
		<org.jgrapht.generate.GraphGeneratorTest.java:185, 62.50%>
	<org.jgrapht.generate.GraphGeneratorTest: void testHyperCubeGraphGenerator()>:
		<org.jgrapht.generate.GraphGeneratorTest.java:265, 50.00%>
		<org.jgrapht.generate.GraphGeneratorTest.java:266, 50.00%>
	<org.jgrapht.generate.RandomGraphGeneratorTest: void testBadVertexFactory()>:
		<org.jgrapht.generate.RandomGraphGeneratorTest.java:106, 12.50%>
	<org.jgrapht.generate.RandomGraphGeneratorTest: void testGenerateDirectedGraph()>:
		<org.jgrapht.generate.RandomGraphGeneratorTest.java:70, 20.00%>
	<org.jgrapht.generate.RandomGraphGeneratorTest: void testGenerateListenableUndirectedGraph()>:
		<org.jgrapht.generate.RandomGraphGeneratorTest.java:89, 20.00%>
	<org.jgrapht.graph.AsUndirectedGraphTest: void testAddEdge()>:
		<org.jgrapht.graph.AsUndirectedGraphTest.java:89, 100.00%>
	<org.jgrapht.graph.AsUnweightedGraphTest: void constructWeighted(org.jgrapht.WeightedGraph)>:
		<org.jgrapht.graph.AsUnweightedGraphTest.java:110, 57.14%>
	<org.jgrapht.graph.DefaultDirectedGraphTest: void testEdgesOf()>:
		<org.jgrapht.graph.DefaultDirectedGraphTest.java:117, 75.00%>
		<org.jgrapht.graph.DefaultDirectedGraphTest.java:118, 75.00%>
	<org.jgrapht.graph.DefaultDirectedGraphTest: void testGetAllEdges()>:
		<org.jgrapht.graph.DefaultDirectedGraphTest.java:130, 100.00%>
	<org.jgrapht.graph.DefaultDirectedGraphTest: void testInDegreeOf()>:
		<org.jgrapht.graph.DefaultDirectedGraphTest.java:141, 83.33%>
		<org.jgrapht.graph.DefaultDirectedGraphTest.java:142, 83.33%>
	<org.jgrapht.graph.DefaultDirectedGraphTest: void testOutDegreeOf()>:
		<org.jgrapht.graph.DefaultDirectedGraphTest.java:153, 83.33%>
		<org.jgrapht.graph.DefaultDirectedGraphTest.java:154, 83.33%>
	<org.jgrapht.graph.GenericGraphsTest: void testAlissaHacker()>:
		<org.jgrapht.graph.GenericGraphsTest.java:134, 83.33%>
	<org.jgrapht.graph.GenericGraphsTest: void testEqualButNotSameVertex()>:
		<org.jgrapht.graph.GenericGraphsTest.java:145, 40.00%>
		<org.jgrapht.graph.GenericGraphsTest.java:146, 40.00%>
	<org.jgrapht.graph.SimpleDirectedGraphTest: void testAddEdgeEdge()>:
		<org.jgrapht.graph.SimpleDirectedGraphTest.java:112, 56.25%>
		<org.jgrapht.graph.SimpleDirectedGraphTest.java:113, 65.63%>
		<org.jgrapht.graph.SimpleDirectedGraphTest.java:114, 75.00%>
	<org.jgrapht.graph.SimpleDirectedGraphTest: void testIncomingOutgoingEdgesOf()>:
		<org.jgrapht.graph.SimpleDirectedGraphTest.java:315, 128.57%>
	<org.jgrapht.graph.SubgraphTest: void testInducedSubgraphUnderlyingEdgeAddition()>:
		<org.jgrapht.graph.SubgraphTest.java:192, 20.00%>
	<org.jgrapht.traverse.AbstractGraphIteratorTest: void testDirectedGraph()>:
		<org.jgrapht.traverse.AbstractGraphIteratorTest.java:86, 47.06%>
		<org.jgrapht.traverse.AbstractGraphIteratorTest.java:88, 52.94%>
	<org.jgrapht.traverse.ClosestFirstIteratorTest: void testNoStart()>:
		<org.jgrapht.traverse.ClosestFirstIteratorTest.java:103, 53.85%>
	<org.jgrapht.traverse.ClosestFirstIteratorTest: void testRadius()>:
		<org.jgrapht.traverse.ClosestFirstIteratorTest.java:80, 53.85%>
	<org.jgrapht.traverse.DepthFirstIteratorTest: void testBug1169182()>:
		<org.jgrapht.traverse.DepthFirstIteratorTest.java:149, 16.00%>
	<org.jgrapht.traverse.TopologicalOrderIteratorTest: void testEmptyGraph()>:
		<org.jgrapht.traverse.TopologicalOrderIteratorTest.java:136, 50.00%>
	<org.jgrapht.traverse.TopologicalOrderIteratorTest: void testRecipe()>:
		<org.jgrapht.traverse.TopologicalOrderIteratorTest.java:109, 9.62%>
		<org.jgrapht.traverse.TopologicalOrderIteratorTest.java:121, 9.62%>
	<org.jgrapht.util.FibonacciHeapTest: void testGrowReplaceShrink()>:
		<org.jgrapht.util.FibonacciHeapTest.java:88, 17.65%>
		<org.jgrapht.util.FibonacciHeapTest.java:91, 17.65%>

Relevant Assertion clone sets (8):
Set (score: 1.00, ccsize: 2, packages: 1, classes: 1): 
	<org.jgrapht.alg.VertexCoversTest: void testFind2ApproximationCover()>:
		<org.jgrapht.alg.VertexCoversTest.java:74, 60.00%>
	<org.jgrapht.alg.VertexCoversTest: void testFindGreedyCover()>:
		<org.jgrapht.alg.VertexCoversTest.java:89, 50.00%>
Set (score: 1.00, ccsize: 2, packages: 1, classes: 1): 
	<org.jgrapht.experimental.GraphReaderTest: void testGraphReader()>:
		<org.jgrapht.experimental.GraphReaderTest.java:88, 27.27%>
	<org.jgrapht.experimental.GraphReaderTest: void testGraphReaderWeighted()>:
		<org.jgrapht.experimental.GraphReaderTest.java:116, 23.08%>
Set (score: 0.67, ccsize: 3, packages: 1, classes: 2): 
	<org.jgrapht.alg.BiconnectivityInspectorTest: void testLinearGraph(int)>:
		<org.jgrapht.alg.BiconnectivityInspectorTest.java:88, 40.00%>
	<org.jgrapht.alg.BlockCutpointGraphTest: void testLinearGraph(int)>:
		<org.jgrapht.alg.BlockCutpointGraphTest.java:121, 33.33%>
		<org.jgrapht.alg.BlockCutpointGraphTest.java:125, 33.33%>
Set (score: 0.67, ccsize: 3, packages: 1, classes: 2): 
	<org.jgrapht.alg.BiconnectivityInspectorTest: void testNotBiconnected()>:
		<org.jgrapht.alg.BiconnectivityInspectorTest.java:100, 55.56%>
	<org.jgrapht.alg.BlockCutpointGraphTest: void testNotBiconnected()>:
		<org.jgrapht.alg.BlockCutpointGraphTest.java:135, 41.67%>
		<org.jgrapht.alg.BlockCutpointGraphTest.java:139, 41.67%>
Set (score: 0.67, ccsize: 2, packages: 1, classes: 2): 
	<org.jgrapht.ext.DOTExporterTest: void testUndirected()>:
		<org.jgrapht.ext.DOTExporterTest.java:110, 41.67%>
	<org.jgrapht.ext.GmlExporterTest: void testUndirected()>:
		<org.jgrapht.ext.GmlExporterTest.java:117, 62.50%>
Set (score: 0.67, ccsize: 2, packages: 1, classes: 1): 
	<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest: void testBipartiteMatching1()>:
		<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest.java:86, 6.76%>
	<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest: void testBipartiteMatching2()>:
		<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest.java:115, 5.21%>
Set (score: 0.50, ccsize: 3, packages: 1, classes: 1): 
	<org.jgrapht.alg.KSPExampleTest: void testFourReturnedPathsJGraphT()>:
		<org.jgrapht.alg.KSPExampleTest.java:60, 55.56%>
	<org.jgrapht.alg.KSPExampleTest: void testThreeReturnedPathsJGraphT()>:
		<org.jgrapht.alg.KSPExampleTest.java:72, 60.00%>
	<org.jgrapht.alg.KSPExampleTest: void testTwoReturnedPathsJGraphT()>:
		<org.jgrapht.alg.KSPExampleTest.java:84, 60.00%>
Set (score: 0.50, ccsize: 2, packages: 1, classes: 1): 
	<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest: void testBipartiteMatching1()>:
		<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest.java:83, 6.76%>
	<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest: void testBipartiteMatching2()>:
		<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest.java:112, 5.21%>
==============================================

[131] Set (editDistance: 2, isComplete: false, packages: 12, classes: 31): 
Centroid (size: 2): <org.jgrapht.experimental.equivalence.EquivalenceGroupCreatorTest: void testOneComparator(org.jgrapht.experimental.equivalence.EquivalenceComparator,int)>

Methods (57): 
	<org.jgrapht.alg.BellmanFordShortestPathTest: void testWithNegativeEdges()>:
		<org.jgrapht.alg.BellmanFordShortestPathTest.java:120, 45.45%>
		<org.jgrapht.alg.BellmanFordShortestPathTest.java:127, 63.64%>
	<org.jgrapht.alg.BiconnectivityInspectorTest: void testBiconnected()>:
		<org.jgrapht.alg.BiconnectivityInspectorTest.java:64, 30.00%>
		<org.jgrapht.alg.BiconnectivityInspectorTest.java:65, 50.00%>
		<org.jgrapht.alg.BiconnectivityInspectorTest.java:66, 50.00%>
	<org.jgrapht.alg.ChromaticNumberTest: void testChromaticNumber()>:
		<org.jgrapht.alg.ChromaticNumberTest.java:78, 18.75%>
		<org.jgrapht.alg.ChromaticNumberTest.java:83, 31.25%>
		<org.jgrapht.alg.ChromaticNumberTest.java:100, 18.75%>
	<org.jgrapht.alg.ConnectivityInspectorTest: void testDirectedGraph()>:
		<org.jgrapht.alg.ConnectivityInspectorTest.java:139, 57.14%>
		<org.jgrapht.alg.ConnectivityInspectorTest.java:143, 57.14%>
	<org.jgrapht.alg.ConnectivityInspectorTest: void testStronglyConnected1()>:
		<org.jgrapht.alg.ConnectivityInspectorTest.java:211, 16.00%>
		<org.jgrapht.alg.ConnectivityInspectorTest.java:222, 12.00%>
		<org.jgrapht.alg.ConnectivityInspectorTest.java:225, 16.00%>
	<org.jgrapht.alg.ConnectivityInspectorTest: void testStronglyConnected2()>:
		<org.jgrapht.alg.ConnectivityInspectorTest.java:268, 16.00%>
		<org.jgrapht.alg.ConnectivityInspectorTest.java:279, 12.00%>
		<org.jgrapht.alg.ConnectivityInspectorTest.java:282, 16.00%>
	<org.jgrapht.alg.ConnectivityInspectorTest: void testStronglyConnected3()>:
		<org.jgrapht.alg.ConnectivityInspectorTest.java:325, 17.39%>
		<org.jgrapht.alg.ConnectivityInspectorTest.java:337, 13.04%>
		<org.jgrapht.alg.ConnectivityInspectorTest.java:340, 17.39%>
	<org.jgrapht.alg.ConnectivityInspectorTest: void testStronglyConnected4()>:
		<org.jgrapht.alg.ConnectivityInspectorTest.java:371, 30.77%>
	<org.jgrapht.alg.FloydWarshallShortestPathsTest: void testDiameter()>:
		<org.jgrapht.alg.FloydWarshallShortestPathsTest.java:161, 57.14%>
	<org.jgrapht.alg.FloydWarshallShortestPathsTest: void testEdgeLessDiameter()>:
		<org.jgrapht.alg.FloydWarshallShortestPathsTest.java:182, 40.00%>
	<org.jgrapht.alg.FloydWarshallShortestPathsTest: void testEmptyDiameter()>:
		<org.jgrapht.alg.FloydWarshallShortestPathsTest.java:170, 50.00%>
	<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest: void testBipartiteMatching1()>:
		<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest.java:83, 6.76%>
		<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest.java:86, 6.76%>
	<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest: void testBipartiteMatching2()>:
		<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest.java:112, 5.21%>
		<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest.java:115, 5.21%>
	<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest: void testEmptyMatching()>:
		<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest.java:128, 33.33%>
	<org.jgrapht.alg.KSPDiscardsValidPathsTest: void testNot3connectedGraph()>:
		<org.jgrapht.alg.KSPDiscardsValidPathsTest.java:102, 87.50%>
	<org.jgrapht.alg.KShortestPathKValuesTest: void verifyNbPathsForAllPairsOfVertices(org.jgrapht.Graph)>:
		<org.jgrapht.alg.KShortestPathKValuesTest.java:148, 36.84%>
	<org.jgrapht.alg.StoerWagnerMinimumCutTest: void testMinCut14()>:
		<org.jgrapht.alg.StoerWagnerMinimumCutTest.java:97, 16.67%>
	<org.jgrapht.alg.StoerWagnerMinimumCutTest: void testMinCutDisconnected()>:
		<org.jgrapht.alg.StoerWagnerMinimumCutTest.java:124, 22.73%>
	<org.jgrapht.alg.TransitiveClosureTest: void testLinearGraph()>:
		<org.jgrapht.alg.TransitiveClosureTest.java:75, 47.83%>
		<org.jgrapht.alg.TransitiveClosureTest.java:78, 43.48%>
	<org.jgrapht.alg.TransitiveClosureTest: void testRingGraph()>:
		<org.jgrapht.alg.TransitiveClosureTest.java:107, 45.45%>
		<org.jgrapht.alg.TransitiveClosureTest.java:110, 50.00%>
	<org.jgrapht.alg.util.UnionFindTest: void testIdentical(java.lang.String[],java.util.ArrayList,org.jgrapht.alg.util.UnionFind)>:
		<org.jgrapht.alg.util.UnionFindTest.java:131, 41.18%>
	<org.jgrapht.experimental.GraphReaderTest: void testGraphReader()>:
		<org.jgrapht.experimental.GraphReaderTest.java:88, 27.27%>
	<org.jgrapht.experimental.GraphReaderTest: void testGraphReaderWeighted()>:
		<org.jgrapht.experimental.GraphReaderTest.java:116, 23.08%>
	<org.jgrapht.experimental.alg.ColoringTest: void testBacktrackColoring()>:
		<org.jgrapht.experimental.alg.ColoringTest.java:97, 50.00%>
	<org.jgrapht.experimental.alg.ColoringTest: void testGreedyColoring()>:
		<org.jgrapht.experimental.alg.ColoringTest.java:77, 50.00%>
	<org.jgrapht.experimental.dag.DirectedAcyclicGraphTest: void testCycleDetectionInRandomGraphBuild()>:
		<org.jgrapht.experimental.dag.DirectedAcyclicGraphTest.java:131, 14.29%>
		<org.jgrapht.experimental.dag.DirectedAcyclicGraphTest.java:141, 12.24%>
		<org.jgrapht.experimental.dag.DirectedAcyclicGraphTest.java:152, 6.12%>
	<org.jgrapht.experimental.dag.DirectedAcyclicGraphTest: void testTopoIterationOrderLinearGraph()>:
		<org.jgrapht.experimental.dag.DirectedAcyclicGraphTest.java:181, 29.41%>
		<org.jgrapht.experimental.dag.DirectedAcyclicGraphTest.java:182, 41.18%>
	<org.jgrapht.experimental.equivalence.EquivalenceGroupCreatorTest: void testOneComparator(org.jgrapht.experimental.equivalence.EquivalenceComparator,int)>:
		<org.jgrapht.experimental.equivalence.EquivalenceGroupCreatorTest.java:152, 23.53%>
		<org.jgrapht.experimental.equivalence.EquivalenceGroupCreatorTest.java:157, 41.18%>
	<org.jgrapht.experimental.isomorphism.IsomorphismInspectorTest: void assertIsomorphicStopAfterFirstMatch(org.jgrapht.Graph[],boolean,boolean,org.jgrapht.experimental.equivalence.EquivalenceComparator,org.jgrapht.experimental.equivalence.EquivalenceComparator)>:
		<org.jgrapht.experimental.isomorphism.IsomorphismInspectorTest.java:485, 14.71%>
	<org.jgrapht.ext.DOTExporterTest: void testUndirected()>:
		<org.jgrapht.ext.DOTExporterTest.java:110, 41.67%>
	<org.jgrapht.ext.DOTExporterTest: void testValidNodeIDs()>:
		<org.jgrapht.ext.DOTExporterTest.java:149, 16.00%>
	<org.jgrapht.ext.GmlExporterTest: void testUndirected()>:
		<org.jgrapht.ext.GmlExporterTest.java:117, 62.50%>
	<org.jgrapht.ext.MatrixExporterTest: void testAdjacencyDirected()>:
		<org.jgrapht.ext.MatrixExporterTest.java:149, 62.50%>
	<org.jgrapht.ext.MatrixExporterTest: void testAdjacencyUndirected()>:
		<org.jgrapht.ext.MatrixExporterTest.java:133, 62.50%>
	<org.jgrapht.ext.MatrixExporterTest: void testLaplacian()>:
		<org.jgrapht.ext.MatrixExporterTest.java:113, 38.46%>
		<org.jgrapht.ext.MatrixExporterTest.java:117, 38.46%>
	<org.jgrapht.generate.RandomGraphGeneratorTest: void testBadVertexFactory()>:
		<org.jgrapht.generate.RandomGraphGeneratorTest.java:106, 12.50%>
	<org.jgrapht.graph.AsUndirectedGraphTest: void testAddEdge()>:
		<org.jgrapht.graph.AsUndirectedGraphTest.java:89, 100.00%>
	<org.jgrapht.graph.AsUndirectedGraphTest: void testAddVertex()>:
		<org.jgrapht.graph.AsUndirectedGraphTest.java:102, 85.71%>
		<org.jgrapht.graph.AsUndirectedGraphTest.java:103, 100.00%>
	<org.jgrapht.graph.AsUndirectedGraphTest: void testRemoveEdge()>:
		<org.jgrapht.graph.AsUndirectedGraphTest.java:155, 88.89%>
		<org.jgrapht.graph.AsUndirectedGraphTest.java:156, 111.11%>
	<org.jgrapht.graph.AsUndirectedGraphTest: void testRemoveVertex()>:
		<org.jgrapht.graph.AsUndirectedGraphTest.java:165, 88.89%>
		<org.jgrapht.graph.AsUndirectedGraphTest.java:166, 111.11%>
	<org.jgrapht.graph.AsUnweightedGraphTest: void constructWeighted(org.jgrapht.WeightedGraph)>:
		<org.jgrapht.graph.AsUnweightedGraphTest.java:110, 57.14%>
	<org.jgrapht.graph.EqualsAndHashCodeTest: void testDefaultDirectedGraph()>:
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:105, 6.52%>
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:106, 10.87%>
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:108, 13.04%>
	<org.jgrapht.graph.EqualsAndHashCodeTest: void testGraphsWithNonIntrusiveEdge()>:
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:187, 3.90%>
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:188, 6.49%>
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:190, 7.79%>
	<org.jgrapht.graph.EqualsAndHashCodeTest: void testGrapshWithCustomEdges()>:
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:268, 7.69%>
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:269, 12.82%>
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:271, 15.38%>
	<org.jgrapht.graph.EqualsAndHashCodeTest: void testPseudograph()>:
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:230, 5.08%>
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:231, 8.47%>
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:233, 10.17%>
	<org.jgrapht.graph.EqualsAndHashCodeTest: void testSimpleGraph()>:
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:148, 6.52%>
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:149, 10.87%>
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:151, 13.04%>
	<org.jgrapht.graph.GenericGraphsTest: void testAlissaHacker()>:
		<org.jgrapht.graph.GenericGraphsTest.java:134, 83.33%>
	<org.jgrapht.graph.SimpleDirectedGraphTest: void testEdgesOf()>:
		<org.jgrapht.graph.SimpleDirectedGraphTest.java:232, 46.67%>
		<org.jgrapht.graph.SimpleDirectedGraphTest.java:233, 60.00%>
		<org.jgrapht.graph.SimpleDirectedGraphTest.java:243, 20.00%>
	<org.jgrapht.graph.SimpleDirectedGraphTest: void testIncomingOutgoingEdgesOf()>:
		<org.jgrapht.graph.SimpleDirectedGraphTest.java:315, 128.57%>
	<org.jgrapht.graph.SubgraphTest: void testInducedSubgraphUnderlyingEdgeAddition()>:
		<org.jgrapht.graph.SubgraphTest.java:192, 20.00%>
	<org.jgrapht.traverse.AbstractGraphIteratorTest: void testDirectedGraph()>:
		<org.jgrapht.traverse.AbstractGraphIteratorTest.java:86, 47.06%>
		<org.jgrapht.traverse.AbstractGraphIteratorTest.java:88, 52.94%>
	<org.jgrapht.traverse.ClosestFirstIteratorTest: void testNoStart()>:
		<org.jgrapht.traverse.ClosestFirstIteratorTest.java:103, 53.85%>
	<org.jgrapht.traverse.ClosestFirstIteratorTest: void testRadius()>:
		<org.jgrapht.traverse.ClosestFirstIteratorTest.java:80, 53.85%>
	<org.jgrapht.traverse.DepthFirstIteratorTest: void testBug1169182()>:
		<org.jgrapht.traverse.DepthFirstIteratorTest.java:149, 16.00%>
	<org.jgrapht.traverse.TopologicalOrderIteratorTest: void testEmptyGraph()>:
		<org.jgrapht.traverse.TopologicalOrderIteratorTest.java:136, 50.00%>
	<org.jgrapht.traverse.TopologicalOrderIteratorTest: void testRecipe()>:
		<org.jgrapht.traverse.TopologicalOrderIteratorTest.java:109, 9.62%>
		<org.jgrapht.traverse.TopologicalOrderIteratorTest.java:121, 9.62%>
	<org.jgrapht.util.FibonacciHeapTest: void testGrowReplaceShrink()>:
		<org.jgrapht.util.FibonacciHeapTest.java:88, 17.65%>
		<org.jgrapht.util.FibonacciHeapTest.java:91, 17.65%>

Relevant Assertion clone sets (7):
Set (score: 1.00, ccsize: 2, packages: 1, classes: 1): 
	<org.jgrapht.alg.ConnectivityInspectorTest: void testStronglyConnected1()>:
		<org.jgrapht.alg.ConnectivityInspectorTest.java:222, 12.00%>
	<org.jgrapht.alg.ConnectivityInspectorTest: void testStronglyConnected2()>:
		<org.jgrapht.alg.ConnectivityInspectorTest.java:279, 12.00%>
	<org.jgrapht.alg.ConnectivityInspectorTest: void testStronglyConnected3()>:
		<org.jgrapht.alg.ConnectivityInspectorTest.java:337, 13.04%>
Set (score: 1.00, ccsize: 2, packages: 1, classes: 1): 
	<org.jgrapht.experimental.GraphReaderTest: void testGraphReader()>:
		<org.jgrapht.experimental.GraphReaderTest.java:88, 27.27%>
	<org.jgrapht.experimental.GraphReaderTest: void testGraphReaderWeighted()>:
		<org.jgrapht.experimental.GraphReaderTest.java:116, 23.08%>
Set (score: 0.67, ccsize: 2, packages: 1, classes: 2): 
	<org.jgrapht.ext.DOTExporterTest: void testUndirected()>:
		<org.jgrapht.ext.DOTExporterTest.java:110, 41.67%>
	<org.jgrapht.ext.GmlExporterTest: void testUndirected()>:
		<org.jgrapht.ext.GmlExporterTest.java:117, 62.50%>
Set (score: 0.67, ccsize: 2, packages: 1, classes: 1): 
	<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest: void testBipartiteMatching1()>:
		<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest.java:86, 6.76%>
	<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest: void testBipartiteMatching2()>:
		<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest.java:115, 5.21%>
Set (score: 0.50, ccsize: 4, packages: 1, classes: 1): 
	<org.jgrapht.graph.EqualsAndHashCodeTest: void testDefaultDirectedGraph()>:
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:106, 10.87%>
	<org.jgrapht.graph.EqualsAndHashCodeTest: void testGraphsWithNonIntrusiveEdge()>:
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:188, 6.49%>
Set (score: 0.50, ccsize: 4, packages: 1, classes: 1): 
	<org.jgrapht.graph.EqualsAndHashCodeTest: void testGrapshWithCustomEdges()>:
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:269, 12.82%>
	<org.jgrapht.graph.EqualsAndHashCodeTest: void testSimpleGraph()>:
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:149, 10.87%>
Set (score: 0.50, ccsize: 2, packages: 1, classes: 1): 
	<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest: void testBipartiteMatching1()>:
		<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest.java:83, 6.76%>
	<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest: void testBipartiteMatching2()>:
		<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest.java:112, 5.21%>
==============================================

[132] Set (editDistance: 2, isComplete: false, packages: 12, classes: 35): 
Centroid (size: 2): <org.jgrapht.experimental.isomorphism.IsomorphismInspectorTest: void assertIsomorphic(org.jgrapht.Graph[],boolean,org.jgrapht.experimental.equivalence.EquivalenceComparator,org.jgrapht.experimental.equivalence.EquivalenceComparator)>

Methods (71): 
	<org.jgrapht.alg.BellmanFordShortestPathTest: void testWithNegativeEdges()>:
		<org.jgrapht.alg.BellmanFordShortestPathTest.java:120, 45.45%>
		<org.jgrapht.alg.BellmanFordShortestPathTest.java:127, 63.64%>
	<org.jgrapht.alg.BiconnectivityInspectorTest: void testBiconnected()>:
		<org.jgrapht.alg.BiconnectivityInspectorTest.java:64, 30.00%>
		<org.jgrapht.alg.BiconnectivityInspectorTest.java:65, 50.00%>
		<org.jgrapht.alg.BiconnectivityInspectorTest.java:66, 50.00%>
	<org.jgrapht.alg.BiconnectivityInspectorTest: void testLinearGraph(int)>:
		<org.jgrapht.alg.BiconnectivityInspectorTest.java:88, 40.00%>
		<org.jgrapht.alg.BiconnectivityInspectorTest.java:89, 40.00%>
	<org.jgrapht.alg.BiconnectivityInspectorTest: void testNotBiconnected()>:
		<org.jgrapht.alg.BiconnectivityInspectorTest.java:100, 55.56%>
		<org.jgrapht.alg.BiconnectivityInspectorTest.java:101, 55.56%>
	<org.jgrapht.alg.BlockCutpointGraphTest: void testBiconnected()>:
		<org.jgrapht.alg.BlockCutpointGraphTest.java:67, 41.67%>
		<org.jgrapht.alg.BlockCutpointGraphTest.java:71, 41.67%>
	<org.jgrapht.alg.BlockCutpointGraphTest: void testLinearGraph(int)>:
		<org.jgrapht.alg.BlockCutpointGraphTest.java:121, 33.33%>
		<org.jgrapht.alg.BlockCutpointGraphTest.java:125, 33.33%>
	<org.jgrapht.alg.BlockCutpointGraphTest: void testNotBiconnected()>:
		<org.jgrapht.alg.BlockCutpointGraphTest.java:135, 41.67%>
		<org.jgrapht.alg.BlockCutpointGraphTest.java:139, 41.67%>
	<org.jgrapht.alg.BronKerboschCliqueFinderTest: void testFindAll()>:
		<org.jgrapht.alg.BronKerboschCliqueFinderTest.java:143, 26.32%>
		<org.jgrapht.alg.BronKerboschCliqueFinderTest.java:175, 21.05%>
	<org.jgrapht.alg.BronKerboschCliqueFinderTest: void testFindBiggest()>:
		<org.jgrapht.alg.BronKerboschCliqueFinderTest.java:119, 41.67%>
		<org.jgrapht.alg.BronKerboschCliqueFinderTest.java:129, 58.33%>
	<org.jgrapht.alg.ConnectivityInspectorTest: void testDirectedGraph()>:
		<org.jgrapht.alg.ConnectivityInspectorTest.java:139, 57.14%>
		<org.jgrapht.alg.ConnectivityInspectorTest.java:143, 57.14%>
	<org.jgrapht.alg.ConnectivityInspectorTest: void testStronglyConnected1()>:
		<org.jgrapht.alg.ConnectivityInspectorTest.java:211, 16.00%>
		<org.jgrapht.alg.ConnectivityInspectorTest.java:222, 12.00%>
		<org.jgrapht.alg.ConnectivityInspectorTest.java:225, 16.00%>
	<org.jgrapht.alg.ConnectivityInspectorTest: void testStronglyConnected2()>:
		<org.jgrapht.alg.ConnectivityInspectorTest.java:268, 16.00%>
		<org.jgrapht.alg.ConnectivityInspectorTest.java:279, 12.00%>
		<org.jgrapht.alg.ConnectivityInspectorTest.java:282, 16.00%>
	<org.jgrapht.alg.ConnectivityInspectorTest: void testStronglyConnected3()>:
		<org.jgrapht.alg.ConnectivityInspectorTest.java:325, 17.39%>
		<org.jgrapht.alg.ConnectivityInspectorTest.java:337, 13.04%>
		<org.jgrapht.alg.ConnectivityInspectorTest.java:340, 17.39%>
	<org.jgrapht.alg.ConnectivityInspectorTest: void testStronglyConnected4()>:
		<org.jgrapht.alg.ConnectivityInspectorTest.java:371, 30.77%>
	<org.jgrapht.alg.EulerianCircuitTest: void testEulerianCircuit()>:
		<org.jgrapht.alg.EulerianCircuitTest.java:77, 11.76%>
		<org.jgrapht.alg.EulerianCircuitTest.java:78, 29.41%>
		<org.jgrapht.alg.EulerianCircuitTest.java:91, 11.76%>
		<org.jgrapht.alg.EulerianCircuitTest.java:95, 23.53%>
	<org.jgrapht.alg.FloydWarshallShortestPathsTest: void testDiameter()>:
		<org.jgrapht.alg.FloydWarshallShortestPathsTest.java:161, 57.14%>
	<org.jgrapht.alg.FloydWarshallShortestPathsTest: void testEdgeLessDiameter()>:
		<org.jgrapht.alg.FloydWarshallShortestPathsTest.java:182, 40.00%>
	<org.jgrapht.alg.FloydWarshallShortestPathsTest: void testEmptyDiameter()>:
		<org.jgrapht.alg.FloydWarshallShortestPathsTest.java:170, 50.00%>
	<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest: void testBipartiteMatching1()>:
		<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest.java:83, 6.76%>
		<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest.java:86, 6.76%>
	<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest: void testBipartiteMatching2()>:
		<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest.java:112, 5.21%>
		<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest.java:115, 5.21%>
	<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest: void testEmptyMatching()>:
		<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest.java:128, 33.33%>
	<org.jgrapht.alg.KSPDiscardsValidPathsTest: void testNot3connectedGraph()>:
		<org.jgrapht.alg.KSPDiscardsValidPathsTest.java:102, 87.50%>
	<org.jgrapht.alg.KSPExampleTest: void testFourReturnedPathsJGraphT()>:
		<org.jgrapht.alg.KSPExampleTest.java:60, 55.56%>
	<org.jgrapht.alg.KSPExampleTest: void testThreeReturnedPathsJGraphT()>:
		<org.jgrapht.alg.KSPExampleTest.java:72, 60.00%>
	<org.jgrapht.alg.KSPExampleTest: void testTwoReturnedPathsJGraphT()>:
		<org.jgrapht.alg.KSPExampleTest.java:84, 60.00%>
	<org.jgrapht.alg.KShortestPathKValuesTest: void verifyNbPathsForAllPairsOfVertices(org.jgrapht.Graph)>:
		<org.jgrapht.alg.KShortestPathKValuesTest.java:148, 36.84%>
	<org.jgrapht.alg.StoerWagnerMinimumCutTest: void testMinCut14()>:
		<org.jgrapht.alg.StoerWagnerMinimumCutTest.java:97, 16.67%>
	<org.jgrapht.alg.StoerWagnerMinimumCutTest: void testMinCutDisconnected()>:
		<org.jgrapht.alg.StoerWagnerMinimumCutTest.java:124, 22.73%>
	<org.jgrapht.alg.TransitiveClosureTest: void testLinearGraph()>:
		<org.jgrapht.alg.TransitiveClosureTest.java:75, 47.83%>
		<org.jgrapht.alg.TransitiveClosureTest.java:78, 43.48%>
	<org.jgrapht.alg.TransitiveClosureTest: void testRingGraph()>:
		<org.jgrapht.alg.TransitiveClosureTest.java:107, 45.45%>
		<org.jgrapht.alg.TransitiveClosureTest.java:110, 50.00%>
	<org.jgrapht.alg.util.UnionFindTest: void testIdentical(java.lang.String[],java.util.ArrayList,org.jgrapht.alg.util.UnionFind)>:
		<org.jgrapht.alg.util.UnionFindTest.java:131, 41.18%>
	<org.jgrapht.experimental.GraphReaderTest: void testGraphReader()>:
		<org.jgrapht.experimental.GraphReaderTest.java:88, 27.27%>
	<org.jgrapht.experimental.GraphReaderTest: void testGraphReaderWeighted()>:
		<org.jgrapht.experimental.GraphReaderTest.java:116, 23.08%>
	<org.jgrapht.experimental.alg.ColoringTest: void testBacktrackColoring()>:
		<org.jgrapht.experimental.alg.ColoringTest.java:97, 50.00%>
	<org.jgrapht.experimental.alg.ColoringTest: void testGreedyColoring()>:
		<org.jgrapht.experimental.alg.ColoringTest.java:77, 50.00%>
	<org.jgrapht.experimental.dag.DirectedAcyclicGraphTest: void testTopoIterationOrderLinearGraph()>:
		<org.jgrapht.experimental.dag.DirectedAcyclicGraphTest.java:181, 29.41%>
		<org.jgrapht.experimental.dag.DirectedAcyclicGraphTest.java:182, 41.18%>
	<org.jgrapht.experimental.isomorphism.IsomorphismInspectorTest: void assertIsomorphic(org.jgrapht.Graph[],boolean,org.jgrapht.experimental.equivalence.EquivalenceComparator,org.jgrapht.experimental.equivalence.EquivalenceComparator)>:
		<org.jgrapht.experimental.isomorphism.IsomorphismInspectorTest.java:138, 28.57%>
		<org.jgrapht.experimental.isomorphism.IsomorphismInspectorTest.java:140, 28.57%>
	<org.jgrapht.experimental.isomorphism.IsomorphismInspectorTest: void assertIsomorphicStopAfterFirstMatch(org.jgrapht.Graph[],boolean,boolean,org.jgrapht.experimental.equivalence.EquivalenceComparator,org.jgrapht.experimental.equivalence.EquivalenceComparator)>:
		<org.jgrapht.experimental.isomorphism.IsomorphismInspectorTest.java:485, 14.71%>
	<org.jgrapht.experimental.permutation.CompoundPermutationIterTest: void testGetNext()>:
		<org.jgrapht.experimental.permutation.CompoundPermutationIterTest.java:96, 40.00%>
		<org.jgrapht.experimental.permutation.CompoundPermutationIterTest.java:127, 40.00%>
	<org.jgrapht.ext.DOTExporterTest: void testUndirected()>:
		<org.jgrapht.ext.DOTExporterTest.java:110, 41.67%>
	<org.jgrapht.ext.DOTExporterTest: void testValidNodeIDs()>:
		<org.jgrapht.ext.DOTExporterTest.java:149, 16.00%>
	<org.jgrapht.ext.GmlExporterTest: void testUndirected()>:
		<org.jgrapht.ext.GmlExporterTest.java:117, 62.50%>
	<org.jgrapht.ext.MatrixExporterTest: void testAdjacencyDirected()>:
		<org.jgrapht.ext.MatrixExporterTest.java:149, 62.50%>
	<org.jgrapht.ext.MatrixExporterTest: void testAdjacencyUndirected()>:
		<org.jgrapht.ext.MatrixExporterTest.java:133, 62.50%>
	<org.jgrapht.ext.MatrixExporterTest: void testLaplacian()>:
		<org.jgrapht.ext.MatrixExporterTest.java:113, 38.46%>
		<org.jgrapht.ext.MatrixExporterTest.java:117, 38.46%>
	<org.jgrapht.generate.GraphGeneratorTest: void testCompleteBipartiteGraphGenerator()>:
		<org.jgrapht.generate.GraphGeneratorTest.java:243, 50.00%>
		<org.jgrapht.generate.GraphGeneratorTest.java:244, 50.00%>
	<org.jgrapht.generate.GraphGeneratorTest: void testCompleteGraphGenerator()>:
		<org.jgrapht.generate.GraphGeneratorTest.java:185, 62.50%>
	<org.jgrapht.generate.GraphGeneratorTest: void testEmptyGraphGenerator()>:
		<org.jgrapht.generate.GraphGeneratorTest.java:90, 38.46%>
		<org.jgrapht.generate.GraphGeneratorTest.java:91, 38.46%>
		<org.jgrapht.generate.GraphGeneratorTest.java:92, 23.08%>
	<org.jgrapht.generate.GraphGeneratorTest: void testHyperCubeGraphGenerator()>:
		<org.jgrapht.generate.GraphGeneratorTest.java:265, 50.00%>
		<org.jgrapht.generate.GraphGeneratorTest.java:266, 50.00%>
	<org.jgrapht.generate.GraphGeneratorTest: void testStarGraphGenerator()>:
		<org.jgrapht.generate.GraphGeneratorTest.java:287, 35.71%>
		<org.jgrapht.generate.GraphGeneratorTest.java:288, 35.71%>
		<org.jgrapht.generate.GraphGeneratorTest.java:289, 42.86%>
	<org.jgrapht.generate.RandomGraphGeneratorTest: void testBadVertexFactory()>:
		<org.jgrapht.generate.RandomGraphGeneratorTest.java:106, 12.50%>
	<org.jgrapht.graph.AsUndirectedGraphTest: void testAddEdge()>:
		<org.jgrapht.graph.AsUndirectedGraphTest.java:89, 100.00%>
	<org.jgrapht.graph.AsUndirectedGraphTest: void testAddVertex()>:
		<org.jgrapht.graph.AsUndirectedGraphTest.java:102, 85.71%>
		<org.jgrapht.graph.AsUndirectedGraphTest.java:103, 100.00%>
	<org.jgrapht.graph.AsUndirectedGraphTest: void testRemoveEdge()>:
		<org.jgrapht.graph.AsUndirectedGraphTest.java:155, 88.89%>
		<org.jgrapht.graph.AsUndirectedGraphTest.java:156, 111.11%>
	<org.jgrapht.graph.AsUndirectedGraphTest: void testRemoveVertex()>:
		<org.jgrapht.graph.AsUndirectedGraphTest.java:165, 88.89%>
		<org.jgrapht.graph.AsUndirectedGraphTest.java:166, 111.11%>
	<org.jgrapht.graph.AsUnweightedGraphTest: void constructWeighted(org.jgrapht.WeightedGraph)>:
		<org.jgrapht.graph.AsUnweightedGraphTest.java:110, 57.14%>
	<org.jgrapht.graph.DefaultDirectedGraphTest: void testEdgesOf()>:
		<org.jgrapht.graph.DefaultDirectedGraphTest.java:117, 75.00%>
		<org.jgrapht.graph.DefaultDirectedGraphTest.java:118, 75.00%>
	<org.jgrapht.graph.DefaultDirectedGraphTest: void testGetAllEdges()>:
		<org.jgrapht.graph.DefaultDirectedGraphTest.java:130, 100.00%>
	<org.jgrapht.graph.DefaultDirectedGraphTest: void testInDegreeOf()>:
		<org.jgrapht.graph.DefaultDirectedGraphTest.java:141, 83.33%>
		<org.jgrapht.graph.DefaultDirectedGraphTest.java:142, 83.33%>
	<org.jgrapht.graph.DefaultDirectedGraphTest: void testOutDegreeOf()>:
		<org.jgrapht.graph.DefaultDirectedGraphTest.java:153, 83.33%>
		<org.jgrapht.graph.DefaultDirectedGraphTest.java:154, 83.33%>
	<org.jgrapht.graph.GenericGraphsTest: void testAlissaHacker()>:
		<org.jgrapht.graph.GenericGraphsTest.java:134, 83.33%>
	<org.jgrapht.graph.GenericGraphsTest: void testEqualButNotSameVertex()>:
		<org.jgrapht.graph.GenericGraphsTest.java:145, 40.00%>
		<org.jgrapht.graph.GenericGraphsTest.java:146, 40.00%>
	<org.jgrapht.graph.SimpleDirectedGraphTest: void testIncomingOutgoingEdgesOf()>:
		<org.jgrapht.graph.SimpleDirectedGraphTest.java:315, 128.57%>
	<org.jgrapht.graph.SubgraphTest: void testInducedSubgraphUnderlyingEdgeAddition()>:
		<org.jgrapht.graph.SubgraphTest.java:192, 20.00%>
	<org.jgrapht.traverse.AbstractGraphIteratorTest: void testDirectedGraph()>:
		<org.jgrapht.traverse.AbstractGraphIteratorTest.java:86, 47.06%>
		<org.jgrapht.traverse.AbstractGraphIteratorTest.java:88, 52.94%>
	<org.jgrapht.traverse.ClosestFirstIteratorTest: void testNoStart()>:
		<org.jgrapht.traverse.ClosestFirstIteratorTest.java:103, 53.85%>
	<org.jgrapht.traverse.ClosestFirstIteratorTest: void testRadius()>:
		<org.jgrapht.traverse.ClosestFirstIteratorTest.java:80, 53.85%>
	<org.jgrapht.traverse.DepthFirstIteratorTest: void testBug1169182()>:
		<org.jgrapht.traverse.DepthFirstIteratorTest.java:149, 16.00%>
	<org.jgrapht.traverse.TopologicalOrderIteratorTest: void testEmptyGraph()>:
		<org.jgrapht.traverse.TopologicalOrderIteratorTest.java:136, 50.00%>
	<org.jgrapht.traverse.TopologicalOrderIteratorTest: void testRecipe()>:
		<org.jgrapht.traverse.TopologicalOrderIteratorTest.java:109, 9.62%>
		<org.jgrapht.traverse.TopologicalOrderIteratorTest.java:121, 9.62%>
	<org.jgrapht.util.FibonacciHeapTest: void testAddRemoveOne()>:
		<org.jgrapht.util.FibonacciHeapTest.java:57, 25.00%>
		<org.jgrapht.util.FibonacciHeapTest.java:59, 25.00%>
		<org.jgrapht.util.FibonacciHeapTest.java:61, 50.00%>
		<org.jgrapht.util.FibonacciHeapTest.java:62, 25.00%>

Relevant Assertion clone sets (9):
Set (score: 1.00, ccsize: 2, packages: 1, classes: 1): 
	<org.jgrapht.alg.ConnectivityInspectorTest: void testStronglyConnected1()>:
		<org.jgrapht.alg.ConnectivityInspectorTest.java:222, 12.00%>
	<org.jgrapht.alg.ConnectivityInspectorTest: void testStronglyConnected2()>:
		<org.jgrapht.alg.ConnectivityInspectorTest.java:279, 12.00%>
	<org.jgrapht.alg.ConnectivityInspectorTest: void testStronglyConnected3()>:
		<org.jgrapht.alg.ConnectivityInspectorTest.java:337, 13.04%>
Set (score: 1.00, ccsize: 2, packages: 1, classes: 1): 
	<org.jgrapht.experimental.GraphReaderTest: void testGraphReader()>:
		<org.jgrapht.experimental.GraphReaderTest.java:88, 27.27%>
	<org.jgrapht.experimental.GraphReaderTest: void testGraphReaderWeighted()>:
		<org.jgrapht.experimental.GraphReaderTest.java:116, 23.08%>
Set (score: 0.67, ccsize: 3, packages: 1, classes: 2): 
	<org.jgrapht.alg.BiconnectivityInspectorTest: void testBiconnected()>:
		<org.jgrapht.alg.BiconnectivityInspectorTest.java:65, 50.00%>
	<org.jgrapht.alg.BlockCutpointGraphTest: void testBiconnected()>:
		<org.jgrapht.alg.BlockCutpointGraphTest.java:67, 41.67%>
		<org.jgrapht.alg.BlockCutpointGraphTest.java:71, 41.67%>
Set (score: 0.67, ccsize: 3, packages: 1, classes: 2): 
	<org.jgrapht.alg.BiconnectivityInspectorTest: void testLinearGraph(int)>:
		<org.jgrapht.alg.BiconnectivityInspectorTest.java:88, 40.00%>
	<org.jgrapht.alg.BlockCutpointGraphTest: void testLinearGraph(int)>:
		<org.jgrapht.alg.BlockCutpointGraphTest.java:121, 33.33%>
		<org.jgrapht.alg.BlockCutpointGraphTest.java:125, 33.33%>
Set (score: 0.67, ccsize: 3, packages: 1, classes: 2): 
	<org.jgrapht.alg.BiconnectivityInspectorTest: void testNotBiconnected()>:
		<org.jgrapht.alg.BiconnectivityInspectorTest.java:100, 55.56%>
	<org.jgrapht.alg.BlockCutpointGraphTest: void testNotBiconnected()>:
		<org.jgrapht.alg.BlockCutpointGraphTest.java:135, 41.67%>
		<org.jgrapht.alg.BlockCutpointGraphTest.java:139, 41.67%>
Set (score: 0.67, ccsize: 2, packages: 1, classes: 2): 
	<org.jgrapht.ext.DOTExporterTest: void testUndirected()>:
		<org.jgrapht.ext.DOTExporterTest.java:110, 41.67%>
	<org.jgrapht.ext.GmlExporterTest: void testUndirected()>:
		<org.jgrapht.ext.GmlExporterTest.java:117, 62.50%>
Set (score: 0.67, ccsize: 2, packages: 1, classes: 1): 
	<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest: void testBipartiteMatching1()>:
		<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest.java:86, 6.76%>
	<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest: void testBipartiteMatching2()>:
		<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest.java:115, 5.21%>
Set (score: 0.50, ccsize: 3, packages: 1, classes: 1): 
	<org.jgrapht.alg.KSPExampleTest: void testFourReturnedPathsJGraphT()>:
		<org.jgrapht.alg.KSPExampleTest.java:60, 55.56%>
	<org.jgrapht.alg.KSPExampleTest: void testThreeReturnedPathsJGraphT()>:
		<org.jgrapht.alg.KSPExampleTest.java:72, 60.00%>
	<org.jgrapht.alg.KSPExampleTest: void testTwoReturnedPathsJGraphT()>:
		<org.jgrapht.alg.KSPExampleTest.java:84, 60.00%>
Set (score: 0.50, ccsize: 2, packages: 1, classes: 1): 
	<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest: void testBipartiteMatching1()>:
		<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest.java:83, 6.76%>
	<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest: void testBipartiteMatching2()>:
		<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest.java:112, 5.21%>
==============================================

[133] Set (editDistance: 2, isComplete: false, packages: 13, classes: 36): 
Centroid (size: 2): <org.jgrapht.experimental.permutation.CompoundPermutationIterTest: void testGetNext()>

Methods (66): 
	<org.jgrapht.EnhancedTestCase: void assertFalse()>:
		<org.jgrapht.EnhancedTestCase.java:79, 100.00%>
	<org.jgrapht.EnhancedTestCase: void assertTrue()>:
		<org.jgrapht.EnhancedTestCase.java:87, 100.00%>
	<org.jgrapht.alg.BellmanFordShortestPathTest: void testWithNegativeEdges()>:
		<org.jgrapht.alg.BellmanFordShortestPathTest.java:120, 45.45%>
		<org.jgrapht.alg.BellmanFordShortestPathTest.java:127, 63.64%>
	<org.jgrapht.alg.BlockCutpointGraphTest: void testGetBlock(org.jgrapht.alg.BlockCutpointGraph)>:
		<org.jgrapht.alg.BlockCutpointGraphTest.java:88, 33.33%>
		<org.jgrapht.alg.BlockCutpointGraphTest.java:94, 19.05%>
	<org.jgrapht.alg.ConnectivityInspectorTest: void testDirectedGraph()>:
		<org.jgrapht.alg.ConnectivityInspectorTest.java:139, 57.14%>
		<org.jgrapht.alg.ConnectivityInspectorTest.java:143, 57.14%>
	<org.jgrapht.alg.ConnectivityInspectorTest: void testStronglyConnected4()>:
		<org.jgrapht.alg.ConnectivityInspectorTest.java:371, 30.77%>
	<org.jgrapht.alg.EdmondsBlossomShrinkingTest: void testOne()>:
		<org.jgrapht.alg.EdmondsBlossomShrinkingTest.java:80, 23.81%>
		<org.jgrapht.alg.EdmondsBlossomShrinkingTest.java:81, 19.05%>
		<org.jgrapht.alg.EdmondsBlossomShrinkingTest.java:82, 19.05%>
	<org.jgrapht.alg.FloydWarshallShortestPathsTest: void testCompareWithDijkstra()>:
		<org.jgrapht.alg.FloydWarshallShortestPathsTest.java:96, 7.41%>
		<org.jgrapht.alg.FloydWarshallShortestPathsTest.java:121, 7.41%>
	<org.jgrapht.alg.FloydWarshallShortestPathsTest: void testDiameter()>:
		<org.jgrapht.alg.FloydWarshallShortestPathsTest.java:161, 57.14%>
	<org.jgrapht.alg.FloydWarshallShortestPathsTest: void testEdgeLessDiameter()>:
		<org.jgrapht.alg.FloydWarshallShortestPathsTest.java:182, 40.00%>
	<org.jgrapht.alg.FloydWarshallShortestPathsTest: void testEmptyDiameter()>:
		<org.jgrapht.alg.FloydWarshallShortestPathsTest.java:170, 50.00%>
	<org.jgrapht.alg.HamiltonianCycleTest: void testHamiltonianCycle()>:
		<org.jgrapht.alg.HamiltonianCycleTest.java:79, 33.33%>
		<org.jgrapht.alg.HamiltonianCycleTest.java:89, 27.78%>
	<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest: void testBipartiteMatching1()>:
		<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest.java:83, 6.76%>
		<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest.java:86, 6.76%>
	<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest: void testBipartiteMatching2()>:
		<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest.java:112, 5.21%>
		<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest.java:115, 5.21%>
	<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest: void testEmptyMatching()>:
		<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest.java:128, 33.33%>
	<org.jgrapht.alg.KSPDiscardsValidPathsTest: void testNot3connectedGraph()>:
		<org.jgrapht.alg.KSPDiscardsValidPathsTest.java:102, 87.50%>
	<org.jgrapht.alg.KShortestPathCostTest: void verifyShortestPathsInIncreasingOrderOfWeight(org.jgrapht.Graph)>:
		<org.jgrapht.alg.KShortestPathCostTest.java:222, 30.77%>
		<org.jgrapht.alg.KShortestPathCostTest.java:225, 30.77%>
	<org.jgrapht.alg.KShortestPathCostTest: void verifyWeightsConsistency(java.util.List,java.util.List)>:
		<org.jgrapht.alg.KShortestPathCostTest.java:294, 53.85%>
	<org.jgrapht.alg.KShortestPathKValuesTest: void verifyNbPathsForAllPairsOfVertices(org.jgrapht.Graph)>:
		<org.jgrapht.alg.KShortestPathKValuesTest.java:148, 36.84%>
	<org.jgrapht.alg.KruskalMinimumSpanningTreeTest: void testMinimumSpanningTree()>:
		<org.jgrapht.alg.KruskalMinimumSpanningTreeTest.java:80, 19.05%>
		<org.jgrapht.alg.KruskalMinimumSpanningTreeTest.java:84, 38.10%>
	<org.jgrapht.alg.StoerWagnerMinimumCutTest: void testMinCut14()>:
		<org.jgrapht.alg.StoerWagnerMinimumCutTest.java:97, 16.67%>
	<org.jgrapht.alg.StoerWagnerMinimumCutTest: void testMinCutDisconnected()>:
		<org.jgrapht.alg.StoerWagnerMinimumCutTest.java:124, 22.73%>
	<org.jgrapht.alg.TransitiveClosureTest: void testLinearGraph()>:
		<org.jgrapht.alg.TransitiveClosureTest.java:75, 47.83%>
		<org.jgrapht.alg.TransitiveClosureTest.java:78, 43.48%>
	<org.jgrapht.alg.TransitiveClosureTest: void testRingGraph()>:
		<org.jgrapht.alg.TransitiveClosureTest.java:107, 45.45%>
		<org.jgrapht.alg.TransitiveClosureTest.java:110, 50.00%>
	<org.jgrapht.alg.VertexCoversTest: void testFind2ApproximationCover()>:
		<org.jgrapht.alg.VertexCoversTest.java:74, 60.00%>
	<org.jgrapht.alg.VertexCoversTest: void testFindGreedyCover()>:
		<org.jgrapht.alg.VertexCoversTest.java:89, 50.00%>
	<org.jgrapht.alg.util.UnionFindTest: void testIdentical(java.lang.String[],java.util.ArrayList,org.jgrapht.alg.util.UnionFind)>:
		<org.jgrapht.alg.util.UnionFindTest.java:131, 41.18%>
	<org.jgrapht.experimental.GraphReaderTest: void testGraphReader()>:
		<org.jgrapht.experimental.GraphReaderTest.java:88, 27.27%>
	<org.jgrapht.experimental.GraphReaderTest: void testGraphReaderWeighted()>:
		<org.jgrapht.experimental.GraphReaderTest.java:116, 23.08%>
	<org.jgrapht.experimental.alg.ColoringTest: void testBacktrackColoring()>:
		<org.jgrapht.experimental.alg.ColoringTest.java:97, 50.00%>
	<org.jgrapht.experimental.alg.ColoringTest: void testGreedyColoring()>:
		<org.jgrapht.experimental.alg.ColoringTest.java:77, 50.00%>
	<org.jgrapht.experimental.dag.DirectedAcyclicGraphTest: void testTopoIterationOrderLinearGraph()>:
		<org.jgrapht.experimental.dag.DirectedAcyclicGraphTest.java:181, 29.41%>
		<org.jgrapht.experimental.dag.DirectedAcyclicGraphTest.java:182, 41.18%>
	<org.jgrapht.experimental.isomorphism.IsomorphismInspectorTest: void assertIsomorphic(org.jgrapht.Graph[],boolean,org.jgrapht.experimental.equivalence.EquivalenceComparator,org.jgrapht.experimental.equivalence.EquivalenceComparator)>:
		<org.jgrapht.experimental.isomorphism.IsomorphismInspectorTest.java:138, 28.57%>
		<org.jgrapht.experimental.isomorphism.IsomorphismInspectorTest.java:140, 28.57%>
	<org.jgrapht.experimental.isomorphism.IsomorphismInspectorTest: void assertIsomorphicStopAfterFirstMatch(org.jgrapht.Graph[],boolean,boolean,org.jgrapht.experimental.equivalence.EquivalenceComparator,org.jgrapht.experimental.equivalence.EquivalenceComparator)>:
		<org.jgrapht.experimental.isomorphism.IsomorphismInspectorTest.java:485, 14.71%>
	<org.jgrapht.experimental.permutation.CompoundPermutationIterTest: void testGetNext()>:
		<org.jgrapht.experimental.permutation.CompoundPermutationIterTest.java:96, 40.00%>
		<org.jgrapht.experimental.permutation.CompoundPermutationIterTest.java:127, 40.00%>
	<org.jgrapht.ext.DOTExporterTest: void testUndirected()>:
		<org.jgrapht.ext.DOTExporterTest.java:110, 41.67%>
	<org.jgrapht.ext.DOTExporterTest: void testValidNodeIDs()>:
		<org.jgrapht.ext.DOTExporterTest.java:149, 16.00%>
	<org.jgrapht.ext.GmlExporterTest: void testUndirected()>:
		<org.jgrapht.ext.GmlExporterTest.java:117, 62.50%>
	<org.jgrapht.ext.MatrixExporterTest: void testAdjacencyDirected()>:
		<org.jgrapht.ext.MatrixExporterTest.java:149, 62.50%>
	<org.jgrapht.ext.MatrixExporterTest: void testAdjacencyUndirected()>:
		<org.jgrapht.ext.MatrixExporterTest.java:133, 62.50%>
	<org.jgrapht.ext.MatrixExporterTest: void testLaplacian()>:
		<org.jgrapht.ext.MatrixExporterTest.java:113, 38.46%>
		<org.jgrapht.ext.MatrixExporterTest.java:117, 38.46%>
	<org.jgrapht.generate.RandomGraphGeneratorTest: void testBadVertexFactory()>:
		<org.jgrapht.generate.RandomGraphGeneratorTest.java:106, 12.50%>
	<org.jgrapht.generate.RandomGraphGeneratorTest: void testGenerateDirectedGraph()>:
		<org.jgrapht.generate.RandomGraphGeneratorTest.java:70, 20.00%>
	<org.jgrapht.generate.RandomGraphGeneratorTest: void testGenerateListenableUndirectedGraph()>:
		<org.jgrapht.generate.RandomGraphGeneratorTest.java:89, 20.00%>
	<org.jgrapht.graph.AsUndirectedGraphTest: void testAddEdge()>:
		<org.jgrapht.graph.AsUndirectedGraphTest.java:89, 100.00%>
	<org.jgrapht.graph.AsUndirectedGraphTest: void testAddVertex()>:
		<org.jgrapht.graph.AsUndirectedGraphTest.java:102, 85.71%>
		<org.jgrapht.graph.AsUndirectedGraphTest.java:103, 100.00%>
	<org.jgrapht.graph.AsUndirectedGraphTest: void testDegreeOf()>:
		<org.jgrapht.graph.AsUndirectedGraphTest.java:111, 46.15%>
		<org.jgrapht.graph.AsUndirectedGraphTest.java:112, 61.54%>
		<org.jgrapht.graph.AsUndirectedGraphTest.java:113, 76.92%>
		<org.jgrapht.graph.AsUndirectedGraphTest.java:114, 92.31%>
	<org.jgrapht.graph.AsUndirectedGraphTest: void testGetAllEdges()>:
		<org.jgrapht.graph.AsUndirectedGraphTest.java:123, 40.00%>
		<org.jgrapht.graph.AsUndirectedGraphTest.java:124, 65.00%>
		<org.jgrapht.graph.AsUndirectedGraphTest.java:128, 70.00%>
		<org.jgrapht.graph.AsUndirectedGraphTest.java:129, 80.00%>
	<org.jgrapht.graph.AsUndirectedGraphTest: void testRemoveEdge()>:
		<org.jgrapht.graph.AsUndirectedGraphTest.java:155, 88.89%>
		<org.jgrapht.graph.AsUndirectedGraphTest.java:156, 111.11%>
	<org.jgrapht.graph.AsUndirectedGraphTest: void testRemoveVertex()>:
		<org.jgrapht.graph.AsUndirectedGraphTest.java:165, 88.89%>
		<org.jgrapht.graph.AsUndirectedGraphTest.java:166, 111.11%>
	<org.jgrapht.graph.AsUnweightedGraphTest: void constructWeighted(org.jgrapht.WeightedGraph)>:
		<org.jgrapht.graph.AsUnweightedGraphTest.java:110, 57.14%>
	<org.jgrapht.graph.EqualsAndHashCodeTest: void testDefaultDirectedGraph()>:
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:105, 6.52%>
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:106, 10.87%>
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:108, 13.04%>
	<org.jgrapht.graph.EqualsAndHashCodeTest: void testGraphsWithNonIntrusiveEdge()>:
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:187, 3.90%>
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:188, 6.49%>
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:190, 7.79%>
	<org.jgrapht.graph.EqualsAndHashCodeTest: void testGrapshWithCustomEdges()>:
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:268, 7.69%>
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:269, 12.82%>
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:271, 15.38%>
	<org.jgrapht.graph.EqualsAndHashCodeTest: void testPseudograph()>:
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:230, 5.08%>
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:231, 8.47%>
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:233, 10.17%>
	<org.jgrapht.graph.EqualsAndHashCodeTest: void testSimpleGraph()>:
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:148, 6.52%>
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:149, 10.87%>
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:151, 13.04%>
	<org.jgrapht.graph.GenericGraphsTest: void testAlissaHacker()>:
		<org.jgrapht.graph.GenericGraphsTest.java:134, 83.33%>
	<org.jgrapht.graph.SimpleDirectedGraphTest: void testIncomingOutgoingEdgesOf()>:
		<org.jgrapht.graph.SimpleDirectedGraphTest.java:315, 128.57%>
	<org.jgrapht.graph.SubgraphTest: void testInducedSubgraphUnderlyingEdgeAddition()>:
		<org.jgrapht.graph.SubgraphTest.java:192, 20.00%>
	<org.jgrapht.traverse.AbstractGraphIteratorTest: void testDirectedGraph()>:
		<org.jgrapht.traverse.AbstractGraphIteratorTest.java:86, 47.06%>
		<org.jgrapht.traverse.AbstractGraphIteratorTest.java:88, 52.94%>
	<org.jgrapht.traverse.ClosestFirstIteratorTest: void testNoStart()>:
		<org.jgrapht.traverse.ClosestFirstIteratorTest.java:103, 53.85%>
	<org.jgrapht.traverse.ClosestFirstIteratorTest: void testRadius()>:
		<org.jgrapht.traverse.ClosestFirstIteratorTest.java:80, 53.85%>
	<org.jgrapht.traverse.DepthFirstIteratorTest: void testBug1169182()>:
		<org.jgrapht.traverse.DepthFirstIteratorTest.java:149, 16.00%>
	<org.jgrapht.traverse.TopologicalOrderIteratorTest: void testEmptyGraph()>:
		<org.jgrapht.traverse.TopologicalOrderIteratorTest.java:136, 50.00%>
	<org.jgrapht.traverse.TopologicalOrderIteratorTest: void testRecipe()>:
		<org.jgrapht.traverse.TopologicalOrderIteratorTest.java:109, 9.62%>
		<org.jgrapht.traverse.TopologicalOrderIteratorTest.java:121, 9.62%>
	<org.jgrapht.util.FibonacciHeapTest: void testGrowReplaceShrink()>:
		<org.jgrapht.util.FibonacciHeapTest.java:88, 17.65%>
		<org.jgrapht.util.FibonacciHeapTest.java:91, 17.65%>

Relevant Assertion clone sets (7):
Set (score: 1.00, ccsize: 2, packages: 1, classes: 1): 
	<org.jgrapht.alg.VertexCoversTest: void testFind2ApproximationCover()>:
		<org.jgrapht.alg.VertexCoversTest.java:74, 60.00%>
	<org.jgrapht.alg.VertexCoversTest: void testFindGreedyCover()>:
		<org.jgrapht.alg.VertexCoversTest.java:89, 50.00%>
Set (score: 1.00, ccsize: 2, packages: 1, classes: 1): 
	<org.jgrapht.experimental.GraphReaderTest: void testGraphReader()>:
		<org.jgrapht.experimental.GraphReaderTest.java:88, 27.27%>
	<org.jgrapht.experimental.GraphReaderTest: void testGraphReaderWeighted()>:
		<org.jgrapht.experimental.GraphReaderTest.java:116, 23.08%>
Set (score: 0.67, ccsize: 2, packages: 1, classes: 2): 
	<org.jgrapht.ext.DOTExporterTest: void testUndirected()>:
		<org.jgrapht.ext.DOTExporterTest.java:110, 41.67%>
	<org.jgrapht.ext.GmlExporterTest: void testUndirected()>:
		<org.jgrapht.ext.GmlExporterTest.java:117, 62.50%>
Set (score: 0.67, ccsize: 2, packages: 1, classes: 1): 
	<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest: void testBipartiteMatching1()>:
		<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest.java:86, 6.76%>
	<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest: void testBipartiteMatching2()>:
		<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest.java:115, 5.21%>
Set (score: 0.50, ccsize: 4, packages: 1, classes: 1): 
	<org.jgrapht.graph.EqualsAndHashCodeTest: void testDefaultDirectedGraph()>:
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:106, 10.87%>
	<org.jgrapht.graph.EqualsAndHashCodeTest: void testGraphsWithNonIntrusiveEdge()>:
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:188, 6.49%>
Set (score: 0.50, ccsize: 4, packages: 1, classes: 1): 
	<org.jgrapht.graph.EqualsAndHashCodeTest: void testGrapshWithCustomEdges()>:
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:269, 12.82%>
	<org.jgrapht.graph.EqualsAndHashCodeTest: void testSimpleGraph()>:
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:149, 10.87%>
Set (score: 0.50, ccsize: 2, packages: 1, classes: 1): 
	<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest: void testBipartiteMatching1()>:
		<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest.java:83, 6.76%>
	<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest: void testBipartiteMatching2()>:
		<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest.java:112, 5.21%>
==============================================

[134] Set (editDistance: 2, isComplete: false, packages: 13, classes: 35): 
Centroid (size: 2): <org.jgrapht.ext.MatrixExporterTest: void testLaplacian()>

Methods (64): 
	<org.jgrapht.EnhancedTestCase: void assertFalse()>:
		<org.jgrapht.EnhancedTestCase.java:79, 100.00%>
	<org.jgrapht.EnhancedTestCase: void assertTrue()>:
		<org.jgrapht.EnhancedTestCase.java:87, 100.00%>
	<org.jgrapht.alg.BellmanFordShortestPathTest: void testWithNegativeEdges()>:
		<org.jgrapht.alg.BellmanFordShortestPathTest.java:120, 45.45%>
		<org.jgrapht.alg.BellmanFordShortestPathTest.java:127, 63.64%>
	<org.jgrapht.alg.BiconnectivityInspectorTest: void testLinearGraph(int)>:
		<org.jgrapht.alg.BiconnectivityInspectorTest.java:88, 40.00%>
		<org.jgrapht.alg.BiconnectivityInspectorTest.java:89, 40.00%>
	<org.jgrapht.alg.BiconnectivityInspectorTest: void testNotBiconnected()>:
		<org.jgrapht.alg.BiconnectivityInspectorTest.java:100, 55.56%>
		<org.jgrapht.alg.BiconnectivityInspectorTest.java:101, 55.56%>
	<org.jgrapht.alg.BlockCutpointGraphTest: void testBiconnected()>:
		<org.jgrapht.alg.BlockCutpointGraphTest.java:67, 41.67%>
		<org.jgrapht.alg.BlockCutpointGraphTest.java:71, 41.67%>
	<org.jgrapht.alg.BlockCutpointGraphTest: void testGetBlock(org.jgrapht.alg.BlockCutpointGraph)>:
		<org.jgrapht.alg.BlockCutpointGraphTest.java:88, 33.33%>
		<org.jgrapht.alg.BlockCutpointGraphTest.java:94, 19.05%>
	<org.jgrapht.alg.BlockCutpointGraphTest: void testLinearGraph(int)>:
		<org.jgrapht.alg.BlockCutpointGraphTest.java:121, 33.33%>
		<org.jgrapht.alg.BlockCutpointGraphTest.java:125, 33.33%>
	<org.jgrapht.alg.BlockCutpointGraphTest: void testNotBiconnected()>:
		<org.jgrapht.alg.BlockCutpointGraphTest.java:135, 41.67%>
		<org.jgrapht.alg.BlockCutpointGraphTest.java:139, 41.67%>
	<org.jgrapht.alg.BronKerboschCliqueFinderTest: void testFindAll()>:
		<org.jgrapht.alg.BronKerboschCliqueFinderTest.java:143, 26.32%>
		<org.jgrapht.alg.BronKerboschCliqueFinderTest.java:175, 21.05%>
	<org.jgrapht.alg.BronKerboschCliqueFinderTest: void testFindBiggest()>:
		<org.jgrapht.alg.BronKerboschCliqueFinderTest.java:119, 41.67%>
		<org.jgrapht.alg.BronKerboschCliqueFinderTest.java:129, 58.33%>
	<org.jgrapht.alg.ConnectivityInspectorTest: void testDirectedGraph()>:
		<org.jgrapht.alg.ConnectivityInspectorTest.java:139, 57.14%>
		<org.jgrapht.alg.ConnectivityInspectorTest.java:143, 57.14%>
	<org.jgrapht.alg.ConnectivityInspectorTest: void testStronglyConnected4()>:
		<org.jgrapht.alg.ConnectivityInspectorTest.java:371, 30.77%>
	<org.jgrapht.alg.FloydWarshallShortestPathsTest: void testCompareWithDijkstra()>:
		<org.jgrapht.alg.FloydWarshallShortestPathsTest.java:96, 7.41%>
		<org.jgrapht.alg.FloydWarshallShortestPathsTest.java:121, 7.41%>
	<org.jgrapht.alg.FloydWarshallShortestPathsTest: void testDiameter()>:
		<org.jgrapht.alg.FloydWarshallShortestPathsTest.java:161, 57.14%>
	<org.jgrapht.alg.FloydWarshallShortestPathsTest: void testEdgeLessDiameter()>:
		<org.jgrapht.alg.FloydWarshallShortestPathsTest.java:182, 40.00%>
	<org.jgrapht.alg.FloydWarshallShortestPathsTest: void testEmptyDiameter()>:
		<org.jgrapht.alg.FloydWarshallShortestPathsTest.java:170, 50.00%>
	<org.jgrapht.alg.HamiltonianCycleTest: void testHamiltonianCycle()>:
		<org.jgrapht.alg.HamiltonianCycleTest.java:79, 33.33%>
		<org.jgrapht.alg.HamiltonianCycleTest.java:89, 27.78%>
	<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest: void testBipartiteMatching1()>:
		<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest.java:83, 6.76%>
		<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest.java:86, 6.76%>
	<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest: void testBipartiteMatching2()>:
		<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest.java:112, 5.21%>
		<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest.java:115, 5.21%>
	<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest: void testEmptyMatching()>:
		<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest.java:128, 33.33%>
	<org.jgrapht.alg.KSPDiscardsValidPathsTest: void testNot3connectedGraph()>:
		<org.jgrapht.alg.KSPDiscardsValidPathsTest.java:102, 87.50%>
	<org.jgrapht.alg.KSPExampleTest: void testFourReturnedPathsJGraphT()>:
		<org.jgrapht.alg.KSPExampleTest.java:60, 55.56%>
	<org.jgrapht.alg.KSPExampleTest: void testThreeReturnedPathsJGraphT()>:
		<org.jgrapht.alg.KSPExampleTest.java:72, 60.00%>
	<org.jgrapht.alg.KSPExampleTest: void testTwoReturnedPathsJGraphT()>:
		<org.jgrapht.alg.KSPExampleTest.java:84, 60.00%>
	<org.jgrapht.alg.KShortestPathCostTest: void verifyShortestPathsInIncreasingOrderOfWeight(org.jgrapht.Graph)>:
		<org.jgrapht.alg.KShortestPathCostTest.java:222, 30.77%>
		<org.jgrapht.alg.KShortestPathCostTest.java:225, 30.77%>
	<org.jgrapht.alg.KShortestPathCostTest: void verifyWeightsConsistency(java.util.List,java.util.List)>:
		<org.jgrapht.alg.KShortestPathCostTest.java:294, 53.85%>
	<org.jgrapht.alg.KShortestPathKValuesTest: void verifyNbPathsForAllPairsOfVertices(org.jgrapht.Graph)>:
		<org.jgrapht.alg.KShortestPathKValuesTest.java:148, 36.84%>
	<org.jgrapht.alg.KruskalMinimumSpanningTreeTest: void testMinimumSpanningTree()>:
		<org.jgrapht.alg.KruskalMinimumSpanningTreeTest.java:80, 19.05%>
		<org.jgrapht.alg.KruskalMinimumSpanningTreeTest.java:84, 38.10%>
	<org.jgrapht.alg.StoerWagnerMinimumCutTest: void testMinCut14()>:
		<org.jgrapht.alg.StoerWagnerMinimumCutTest.java:97, 16.67%>
	<org.jgrapht.alg.StoerWagnerMinimumCutTest: void testMinCutDisconnected()>:
		<org.jgrapht.alg.StoerWagnerMinimumCutTest.java:124, 22.73%>
	<org.jgrapht.alg.TransitiveClosureTest: void testLinearGraph()>:
		<org.jgrapht.alg.TransitiveClosureTest.java:75, 47.83%>
		<org.jgrapht.alg.TransitiveClosureTest.java:78, 43.48%>
	<org.jgrapht.alg.TransitiveClosureTest: void testRingGraph()>:
		<org.jgrapht.alg.TransitiveClosureTest.java:107, 45.45%>
		<org.jgrapht.alg.TransitiveClosureTest.java:110, 50.00%>
	<org.jgrapht.alg.VertexCoversTest: void testFind2ApproximationCover()>:
		<org.jgrapht.alg.VertexCoversTest.java:74, 60.00%>
	<org.jgrapht.alg.VertexCoversTest: void testFindGreedyCover()>:
		<org.jgrapht.alg.VertexCoversTest.java:89, 50.00%>
	<org.jgrapht.alg.util.UnionFindTest: void testIdentical(java.lang.String[],java.util.ArrayList,org.jgrapht.alg.util.UnionFind)>:
		<org.jgrapht.alg.util.UnionFindTest.java:131, 41.18%>
	<org.jgrapht.experimental.alg.ColoringTest: void testBacktrackColoring()>:
		<org.jgrapht.experimental.alg.ColoringTest.java:97, 50.00%>
	<org.jgrapht.experimental.alg.ColoringTest: void testGreedyColoring()>:
		<org.jgrapht.experimental.alg.ColoringTest.java:77, 50.00%>
	<org.jgrapht.experimental.dag.DirectedAcyclicGraphTest: void testTopoIterationOrderLinearGraph()>:
		<org.jgrapht.experimental.dag.DirectedAcyclicGraphTest.java:181, 29.41%>
		<org.jgrapht.experimental.dag.DirectedAcyclicGraphTest.java:182, 41.18%>
	<org.jgrapht.experimental.equivalence.EquivalenceGroupCreatorTest: void testOneComparator(org.jgrapht.experimental.equivalence.EquivalenceComparator,int)>:
		<org.jgrapht.experimental.equivalence.EquivalenceGroupCreatorTest.java:152, 23.53%>
		<org.jgrapht.experimental.equivalence.EquivalenceGroupCreatorTest.java:157, 41.18%>
	<org.jgrapht.experimental.isomorphism.IsomorphismInspectorTest: void assertIsomorphic(org.jgrapht.Graph[],boolean,org.jgrapht.experimental.equivalence.EquivalenceComparator,org.jgrapht.experimental.equivalence.EquivalenceComparator)>:
		<org.jgrapht.experimental.isomorphism.IsomorphismInspectorTest.java:138, 28.57%>
		<org.jgrapht.experimental.isomorphism.IsomorphismInspectorTest.java:140, 28.57%>
	<org.jgrapht.experimental.isomorphism.IsomorphismInspectorTest: void assertIsomorphicStopAfterFirstMatch(org.jgrapht.Graph[],boolean,boolean,org.jgrapht.experimental.equivalence.EquivalenceComparator,org.jgrapht.experimental.equivalence.EquivalenceComparator)>:
		<org.jgrapht.experimental.isomorphism.IsomorphismInspectorTest.java:485, 14.71%>
	<org.jgrapht.experimental.permutation.CompoundPermutationIterTest: void testGetNext()>:
		<org.jgrapht.experimental.permutation.CompoundPermutationIterTest.java:96, 40.00%>
		<org.jgrapht.experimental.permutation.CompoundPermutationIterTest.java:127, 40.00%>
	<org.jgrapht.ext.DOTExporterTest: void testValidNodeIDs()>:
		<org.jgrapht.ext.DOTExporterTest.java:149, 16.00%>
	<org.jgrapht.ext.MatrixExporterTest: void testLaplacian()>:
		<org.jgrapht.ext.MatrixExporterTest.java:113, 38.46%>
		<org.jgrapht.ext.MatrixExporterTest.java:117, 38.46%>
	<org.jgrapht.generate.GraphGeneratorTest: void testCompleteBipartiteGraphGenerator()>:
		<org.jgrapht.generate.GraphGeneratorTest.java:243, 50.00%>
		<org.jgrapht.generate.GraphGeneratorTest.java:244, 50.00%>
	<org.jgrapht.generate.GraphGeneratorTest: void testCompleteGraphGenerator()>:
		<org.jgrapht.generate.GraphGeneratorTest.java:185, 62.50%>
	<org.jgrapht.generate.GraphGeneratorTest: void testHyperCubeGraphGenerator()>:
		<org.jgrapht.generate.GraphGeneratorTest.java:265, 50.00%>
		<org.jgrapht.generate.GraphGeneratorTest.java:266, 50.00%>
	<org.jgrapht.generate.RandomGraphGeneratorTest: void testBadVertexFactory()>:
		<org.jgrapht.generate.RandomGraphGeneratorTest.java:106, 12.50%>
	<org.jgrapht.generate.RandomGraphGeneratorTest: void testGenerateDirectedGraph()>:
		<org.jgrapht.generate.RandomGraphGeneratorTest.java:70, 20.00%>
	<org.jgrapht.generate.RandomGraphGeneratorTest: void testGenerateListenableUndirectedGraph()>:
		<org.jgrapht.generate.RandomGraphGeneratorTest.java:89, 20.00%>
	<org.jgrapht.graph.AsUndirectedGraphTest: void testAddVertex()>:
		<org.jgrapht.graph.AsUndirectedGraphTest.java:102, 85.71%>
		<org.jgrapht.graph.AsUndirectedGraphTest.java:103, 100.00%>
	<org.jgrapht.graph.AsUndirectedGraphTest: void testRemoveEdge()>:
		<org.jgrapht.graph.AsUndirectedGraphTest.java:155, 88.89%>
		<org.jgrapht.graph.AsUndirectedGraphTest.java:156, 111.11%>
	<org.jgrapht.graph.AsUndirectedGraphTest: void testRemoveVertex()>:
		<org.jgrapht.graph.AsUndirectedGraphTest.java:165, 88.89%>
		<org.jgrapht.graph.AsUndirectedGraphTest.java:166, 111.11%>
	<org.jgrapht.graph.AsUnweightedGraphTest: void constructWeighted(org.jgrapht.WeightedGraph)>:
		<org.jgrapht.graph.AsUnweightedGraphTest.java:110, 57.14%>
	<org.jgrapht.graph.DefaultDirectedGraphTest: void testEdgesOf()>:
		<org.jgrapht.graph.DefaultDirectedGraphTest.java:117, 75.00%>
		<org.jgrapht.graph.DefaultDirectedGraphTest.java:118, 75.00%>
	<org.jgrapht.graph.DefaultDirectedGraphTest: void testGetAllEdges()>:
		<org.jgrapht.graph.DefaultDirectedGraphTest.java:130, 100.00%>
	<org.jgrapht.graph.DefaultDirectedGraphTest: void testInDegreeOf()>:
		<org.jgrapht.graph.DefaultDirectedGraphTest.java:141, 83.33%>
		<org.jgrapht.graph.DefaultDirectedGraphTest.java:142, 83.33%>
	<org.jgrapht.graph.DefaultDirectedGraphTest: void testOutDegreeOf()>:
		<org.jgrapht.graph.DefaultDirectedGraphTest.java:153, 83.33%>
		<org.jgrapht.graph.DefaultDirectedGraphTest.java:154, 83.33%>
	<org.jgrapht.graph.GenericGraphsTest: void testEqualButNotSameVertex()>:
		<org.jgrapht.graph.GenericGraphsTest.java:145, 40.00%>
		<org.jgrapht.graph.GenericGraphsTest.java:146, 40.00%>
	<org.jgrapht.graph.SimpleDirectedGraphTest: void testIncomingOutgoingEdgesOf()>:
		<org.jgrapht.graph.SimpleDirectedGraphTest.java:315, 128.57%>
	<org.jgrapht.graph.SubgraphTest: void testInducedSubgraphUnderlyingEdgeAddition()>:
		<org.jgrapht.graph.SubgraphTest.java:192, 20.00%>
	<org.jgrapht.traverse.TopologicalOrderIteratorTest: void testEmptyGraph()>:
		<org.jgrapht.traverse.TopologicalOrderIteratorTest.java:136, 50.00%>
	<org.jgrapht.util.FibonacciHeapTest: void testGrowReplaceShrink()>:
		<org.jgrapht.util.FibonacciHeapTest.java:88, 17.65%>
		<org.jgrapht.util.FibonacciHeapTest.java:91, 17.65%>

Relevant Assertion clone sets (6):
Set (score: 1.00, ccsize: 2, packages: 1, classes: 1): 
	<org.jgrapht.alg.VertexCoversTest: void testFind2ApproximationCover()>:
		<org.jgrapht.alg.VertexCoversTest.java:74, 60.00%>
	<org.jgrapht.alg.VertexCoversTest: void testFindGreedyCover()>:
		<org.jgrapht.alg.VertexCoversTest.java:89, 50.00%>
Set (score: 0.67, ccsize: 3, packages: 1, classes: 2): 
	<org.jgrapht.alg.BiconnectivityInspectorTest: void testLinearGraph(int)>:
		<org.jgrapht.alg.BiconnectivityInspectorTest.java:88, 40.00%>
	<org.jgrapht.alg.BlockCutpointGraphTest: void testLinearGraph(int)>:
		<org.jgrapht.alg.BlockCutpointGraphTest.java:121, 33.33%>
		<org.jgrapht.alg.BlockCutpointGraphTest.java:125, 33.33%>
Set (score: 0.67, ccsize: 3, packages: 1, classes: 2): 
	<org.jgrapht.alg.BiconnectivityInspectorTest: void testNotBiconnected()>:
		<org.jgrapht.alg.BiconnectivityInspectorTest.java:100, 55.56%>
	<org.jgrapht.alg.BlockCutpointGraphTest: void testNotBiconnected()>:
		<org.jgrapht.alg.BlockCutpointGraphTest.java:135, 41.67%>
		<org.jgrapht.alg.BlockCutpointGraphTest.java:139, 41.67%>
Set (score: 0.67, ccsize: 2, packages: 1, classes: 1): 
	<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest: void testBipartiteMatching1()>:
		<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest.java:86, 6.76%>
	<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest: void testBipartiteMatching2()>:
		<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest.java:115, 5.21%>
Set (score: 0.50, ccsize: 3, packages: 1, classes: 1): 
	<org.jgrapht.alg.KSPExampleTest: void testFourReturnedPathsJGraphT()>:
		<org.jgrapht.alg.KSPExampleTest.java:60, 55.56%>
	<org.jgrapht.alg.KSPExampleTest: void testThreeReturnedPathsJGraphT()>:
		<org.jgrapht.alg.KSPExampleTest.java:72, 60.00%>
	<org.jgrapht.alg.KSPExampleTest: void testTwoReturnedPathsJGraphT()>:
		<org.jgrapht.alg.KSPExampleTest.java:84, 60.00%>
Set (score: 0.50, ccsize: 2, packages: 1, classes: 1): 
	<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest: void testBipartiteMatching1()>:
		<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest.java:83, 6.76%>
	<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest: void testBipartiteMatching2()>:
		<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest.java:112, 5.21%>
==============================================

[135] Set (editDistance: 2, isComplete: false, packages: 12, classes: 36): 
Centroid (size: 2): <org.jgrapht.generate.GraphGeneratorTest: void testCompleteBipartiteGraphGenerator()>

Methods (66): 
	<org.jgrapht.EnhancedTestCase: void assertFalse()>:
		<org.jgrapht.EnhancedTestCase.java:79, 100.00%>
	<org.jgrapht.EnhancedTestCase: void assertTrue()>:
		<org.jgrapht.EnhancedTestCase.java:87, 100.00%>
	<org.jgrapht.alg.BellmanFordShortestPathTest: void testWithNegativeEdges()>:
		<org.jgrapht.alg.BellmanFordShortestPathTest.java:120, 45.45%>
		<org.jgrapht.alg.BellmanFordShortestPathTest.java:127, 63.64%>
	<org.jgrapht.alg.BlockCutpointGraphTest: void testGetBlock(org.jgrapht.alg.BlockCutpointGraph)>:
		<org.jgrapht.alg.BlockCutpointGraphTest.java:88, 33.33%>
		<org.jgrapht.alg.BlockCutpointGraphTest.java:94, 19.05%>
	<org.jgrapht.alg.ConnectivityInspectorTest: void testDirectedGraph()>:
		<org.jgrapht.alg.ConnectivityInspectorTest.java:139, 57.14%>
		<org.jgrapht.alg.ConnectivityInspectorTest.java:143, 57.14%>
	<org.jgrapht.alg.ConnectivityInspectorTest: void testStronglyConnected4()>:
		<org.jgrapht.alg.ConnectivityInspectorTest.java:371, 30.77%>
	<org.jgrapht.alg.EdmondsBlossomShrinkingTest: void testOne()>:
		<org.jgrapht.alg.EdmondsBlossomShrinkingTest.java:80, 23.81%>
		<org.jgrapht.alg.EdmondsBlossomShrinkingTest.java:81, 19.05%>
		<org.jgrapht.alg.EdmondsBlossomShrinkingTest.java:82, 19.05%>
	<org.jgrapht.alg.FloydWarshallShortestPathsTest: void testCompareWithDijkstra()>:
		<org.jgrapht.alg.FloydWarshallShortestPathsTest.java:96, 7.41%>
		<org.jgrapht.alg.FloydWarshallShortestPathsTest.java:121, 7.41%>
	<org.jgrapht.alg.FloydWarshallShortestPathsTest: void testDiameter()>:
		<org.jgrapht.alg.FloydWarshallShortestPathsTest.java:161, 57.14%>
	<org.jgrapht.alg.FloydWarshallShortestPathsTest: void testEdgeLessDiameter()>:
		<org.jgrapht.alg.FloydWarshallShortestPathsTest.java:182, 40.00%>
	<org.jgrapht.alg.FloydWarshallShortestPathsTest: void testEmptyDiameter()>:
		<org.jgrapht.alg.FloydWarshallShortestPathsTest.java:170, 50.00%>
	<org.jgrapht.alg.HamiltonianCycleTest: void testHamiltonianCycle()>:
		<org.jgrapht.alg.HamiltonianCycleTest.java:79, 33.33%>
		<org.jgrapht.alg.HamiltonianCycleTest.java:89, 27.78%>
	<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest: void testBipartiteMatching1()>:
		<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest.java:83, 6.76%>
		<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest.java:86, 6.76%>
	<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest: void testBipartiteMatching2()>:
		<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest.java:112, 5.21%>
		<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest.java:115, 5.21%>
	<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest: void testEmptyMatching()>:
		<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest.java:128, 33.33%>
	<org.jgrapht.alg.KSPDiscardsValidPathsTest: void testNot3connectedGraph()>:
		<org.jgrapht.alg.KSPDiscardsValidPathsTest.java:102, 87.50%>
	<org.jgrapht.alg.KShortestPathCostTest: void verifyShortestPathsInIncreasingOrderOfWeight(org.jgrapht.Graph)>:
		<org.jgrapht.alg.KShortestPathCostTest.java:222, 30.77%>
		<org.jgrapht.alg.KShortestPathCostTest.java:225, 30.77%>
	<org.jgrapht.alg.KShortestPathCostTest: void verifyWeightsConsistency(java.util.List,java.util.List)>:
		<org.jgrapht.alg.KShortestPathCostTest.java:294, 53.85%>
	<org.jgrapht.alg.KShortestPathKValuesTest: void verifyNbPathsForAllPairsOfVertices(org.jgrapht.Graph)>:
		<org.jgrapht.alg.KShortestPathKValuesTest.java:148, 36.84%>
	<org.jgrapht.alg.KruskalMinimumSpanningTreeTest: void testMinimumSpanningTree()>:
		<org.jgrapht.alg.KruskalMinimumSpanningTreeTest.java:80, 19.05%>
		<org.jgrapht.alg.KruskalMinimumSpanningTreeTest.java:84, 38.10%>
	<org.jgrapht.alg.StoerWagnerMinimumCutTest: void testMinCut14()>:
		<org.jgrapht.alg.StoerWagnerMinimumCutTest.java:97, 16.67%>
	<org.jgrapht.alg.StoerWagnerMinimumCutTest: void testMinCutDisconnected()>:
		<org.jgrapht.alg.StoerWagnerMinimumCutTest.java:124, 22.73%>
	<org.jgrapht.alg.TransitiveClosureTest: void testLinearGraph()>:
		<org.jgrapht.alg.TransitiveClosureTest.java:75, 47.83%>
		<org.jgrapht.alg.TransitiveClosureTest.java:78, 43.48%>
	<org.jgrapht.alg.TransitiveClosureTest: void testRingGraph()>:
		<org.jgrapht.alg.TransitiveClosureTest.java:107, 45.45%>
		<org.jgrapht.alg.TransitiveClosureTest.java:110, 50.00%>
	<org.jgrapht.alg.VertexCoversTest: void testFind2ApproximationCover()>:
		<org.jgrapht.alg.VertexCoversTest.java:74, 60.00%>
	<org.jgrapht.alg.VertexCoversTest: void testFindGreedyCover()>:
		<org.jgrapht.alg.VertexCoversTest.java:89, 50.00%>
	<org.jgrapht.alg.util.UnionFindTest: void testIdentical(java.lang.String[],java.util.ArrayList,org.jgrapht.alg.util.UnionFind)>:
		<org.jgrapht.alg.util.UnionFindTest.java:131, 41.18%>
	<org.jgrapht.experimental.GraphReaderTest: void testGraphReader()>:
		<org.jgrapht.experimental.GraphReaderTest.java:88, 27.27%>
	<org.jgrapht.experimental.GraphReaderTest: void testGraphReaderWeighted()>:
		<org.jgrapht.experimental.GraphReaderTest.java:116, 23.08%>
	<org.jgrapht.experimental.alg.ColoringTest: void testBacktrackColoring()>:
		<org.jgrapht.experimental.alg.ColoringTest.java:97, 50.00%>
	<org.jgrapht.experimental.alg.ColoringTest: void testGreedyColoring()>:
		<org.jgrapht.experimental.alg.ColoringTest.java:77, 50.00%>
	<org.jgrapht.experimental.dag.DirectedAcyclicGraphTest: void testTopoIterationOrderLinearGraph()>:
		<org.jgrapht.experimental.dag.DirectedAcyclicGraphTest.java:181, 29.41%>
		<org.jgrapht.experimental.dag.DirectedAcyclicGraphTest.java:182, 41.18%>
	<org.jgrapht.experimental.isomorphism.IsomorphismInspectorTest: void assertIsomorphic(org.jgrapht.Graph[],boolean,org.jgrapht.experimental.equivalence.EquivalenceComparator,org.jgrapht.experimental.equivalence.EquivalenceComparator)>:
		<org.jgrapht.experimental.isomorphism.IsomorphismInspectorTest.java:138, 28.57%>
		<org.jgrapht.experimental.isomorphism.IsomorphismInspectorTest.java:140, 28.57%>
	<org.jgrapht.experimental.isomorphism.IsomorphismInspectorTest: void assertIsomorphicStopAfterFirstMatch(org.jgrapht.Graph[],boolean,boolean,org.jgrapht.experimental.equivalence.EquivalenceComparator,org.jgrapht.experimental.equivalence.EquivalenceComparator)>:
		<org.jgrapht.experimental.isomorphism.IsomorphismInspectorTest.java:485, 14.71%>
	<org.jgrapht.ext.DOTExporterTest: void testUndirected()>:
		<org.jgrapht.ext.DOTExporterTest.java:110, 41.67%>
	<org.jgrapht.ext.DOTExporterTest: void testValidNodeIDs()>:
		<org.jgrapht.ext.DOTExporterTest.java:149, 16.00%>
	<org.jgrapht.ext.GmlExporterTest: void testUndirected()>:
		<org.jgrapht.ext.GmlExporterTest.java:117, 62.50%>
	<org.jgrapht.ext.MatrixExporterTest: void testAdjacencyDirected()>:
		<org.jgrapht.ext.MatrixExporterTest.java:149, 62.50%>
	<org.jgrapht.ext.MatrixExporterTest: void testAdjacencyUndirected()>:
		<org.jgrapht.ext.MatrixExporterTest.java:133, 62.50%>
	<org.jgrapht.ext.MatrixExporterTest: void testLaplacian()>:
		<org.jgrapht.ext.MatrixExporterTest.java:113, 38.46%>
		<org.jgrapht.ext.MatrixExporterTest.java:117, 38.46%>
	<org.jgrapht.generate.GraphGeneratorTest: void testCompleteBipartiteGraphGenerator()>:
		<org.jgrapht.generate.GraphGeneratorTest.java:243, 50.00%>
		<org.jgrapht.generate.GraphGeneratorTest.java:244, 50.00%>
	<org.jgrapht.generate.RandomGraphGeneratorTest: void testBadVertexFactory()>:
		<org.jgrapht.generate.RandomGraphGeneratorTest.java:106, 12.50%>
	<org.jgrapht.generate.RandomGraphGeneratorTest: void testGenerateDirectedGraph()>:
		<org.jgrapht.generate.RandomGraphGeneratorTest.java:70, 20.00%>
	<org.jgrapht.generate.RandomGraphGeneratorTest: void testGenerateListenableUndirectedGraph()>:
		<org.jgrapht.generate.RandomGraphGeneratorTest.java:89, 20.00%>
	<org.jgrapht.graph.AsUndirectedGraphTest: void testAddEdge()>:
		<org.jgrapht.graph.AsUndirectedGraphTest.java:89, 100.00%>
	<org.jgrapht.graph.AsUndirectedGraphTest: void testAddVertex()>:
		<org.jgrapht.graph.AsUndirectedGraphTest.java:102, 85.71%>
		<org.jgrapht.graph.AsUndirectedGraphTest.java:103, 100.00%>
	<org.jgrapht.graph.AsUndirectedGraphTest: void testDegreeOf()>:
		<org.jgrapht.graph.AsUndirectedGraphTest.java:111, 46.15%>
		<org.jgrapht.graph.AsUndirectedGraphTest.java:112, 61.54%>
		<org.jgrapht.graph.AsUndirectedGraphTest.java:113, 76.92%>
		<org.jgrapht.graph.AsUndirectedGraphTest.java:114, 92.31%>
	<org.jgrapht.graph.AsUndirectedGraphTest: void testGetAllEdges()>:
		<org.jgrapht.graph.AsUndirectedGraphTest.java:123, 40.00%>
		<org.jgrapht.graph.AsUndirectedGraphTest.java:124, 65.00%>
		<org.jgrapht.graph.AsUndirectedGraphTest.java:128, 70.00%>
		<org.jgrapht.graph.AsUndirectedGraphTest.java:129, 80.00%>
	<org.jgrapht.graph.AsUndirectedGraphTest: void testRemoveEdge()>:
		<org.jgrapht.graph.AsUndirectedGraphTest.java:155, 88.89%>
		<org.jgrapht.graph.AsUndirectedGraphTest.java:156, 111.11%>
	<org.jgrapht.graph.AsUndirectedGraphTest: void testRemoveVertex()>:
		<org.jgrapht.graph.AsUndirectedGraphTest.java:165, 88.89%>
		<org.jgrapht.graph.AsUndirectedGraphTest.java:166, 111.11%>
	<org.jgrapht.graph.AsUnweightedGraphTest: void constructWeighted(org.jgrapht.WeightedGraph)>:
		<org.jgrapht.graph.AsUnweightedGraphTest.java:110, 57.14%>
	<org.jgrapht.graph.EqualsAndHashCodeTest: void testDefaultDirectedGraph()>:
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:105, 6.52%>
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:106, 10.87%>
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:108, 13.04%>
	<org.jgrapht.graph.EqualsAndHashCodeTest: void testGraphsWithNonIntrusiveEdge()>:
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:187, 3.90%>
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:188, 6.49%>
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:190, 7.79%>
	<org.jgrapht.graph.EqualsAndHashCodeTest: void testGrapshWithCustomEdges()>:
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:268, 7.69%>
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:269, 12.82%>
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:271, 15.38%>
	<org.jgrapht.graph.EqualsAndHashCodeTest: void testPseudograph()>:
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:230, 5.08%>
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:231, 8.47%>
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:233, 10.17%>
	<org.jgrapht.graph.EqualsAndHashCodeTest: void testSimpleGraph()>:
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:148, 6.52%>
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:149, 10.87%>
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:151, 13.04%>
	<org.jgrapht.graph.GenericGraphsTest: void testAlissaHacker()>:
		<org.jgrapht.graph.GenericGraphsTest.java:134, 83.33%>
	<org.jgrapht.graph.SimpleDirectedGraphTest: void testIncomingOutgoingEdgesOf()>:
		<org.jgrapht.graph.SimpleDirectedGraphTest.java:315, 128.57%>
	<org.jgrapht.graph.SubgraphTest: void testInducedSubgraphUnderlyingEdgeAddition()>:
		<org.jgrapht.graph.SubgraphTest.java:192, 20.00%>
	<org.jgrapht.traverse.AbstractGraphIteratorTest: void testDirectedGraph()>:
		<org.jgrapht.traverse.AbstractGraphIteratorTest.java:86, 47.06%>
		<org.jgrapht.traverse.AbstractGraphIteratorTest.java:88, 52.94%>
	<org.jgrapht.traverse.ClosestFirstIteratorTest: void testNoStart()>:
		<org.jgrapht.traverse.ClosestFirstIteratorTest.java:103, 53.85%>
	<org.jgrapht.traverse.ClosestFirstIteratorTest: void testRadius()>:
		<org.jgrapht.traverse.ClosestFirstIteratorTest.java:80, 53.85%>
	<org.jgrapht.traverse.DepthFirstIteratorTest: void testBug1169182()>:
		<org.jgrapht.traverse.DepthFirstIteratorTest.java:149, 16.00%>
	<org.jgrapht.traverse.TopologicalOrderIteratorTest: void testEmptyGraph()>:
		<org.jgrapht.traverse.TopologicalOrderIteratorTest.java:136, 50.00%>
	<org.jgrapht.traverse.TopologicalOrderIteratorTest: void testRecipe()>:
		<org.jgrapht.traverse.TopologicalOrderIteratorTest.java:109, 9.62%>
		<org.jgrapht.traverse.TopologicalOrderIteratorTest.java:121, 9.62%>
	<org.jgrapht.util.FibonacciHeapTest: void testGrowReplaceShrink()>:
		<org.jgrapht.util.FibonacciHeapTest.java:88, 17.65%>
		<org.jgrapht.util.FibonacciHeapTest.java:91, 17.65%>

Relevant Assertion clone sets (7):
Set (score: 1.00, ccsize: 2, packages: 1, classes: 1): 
	<org.jgrapht.alg.VertexCoversTest: void testFind2ApproximationCover()>:
		<org.jgrapht.alg.VertexCoversTest.java:74, 60.00%>
	<org.jgrapht.alg.VertexCoversTest: void testFindGreedyCover()>:
		<org.jgrapht.alg.VertexCoversTest.java:89, 50.00%>
Set (score: 1.00, ccsize: 2, packages: 1, classes: 1): 
	<org.jgrapht.experimental.GraphReaderTest: void testGraphReader()>:
		<org.jgrapht.experimental.GraphReaderTest.java:88, 27.27%>
	<org.jgrapht.experimental.GraphReaderTest: void testGraphReaderWeighted()>:
		<org.jgrapht.experimental.GraphReaderTest.java:116, 23.08%>
Set (score: 0.67, ccsize: 2, packages: 1, classes: 2): 
	<org.jgrapht.ext.DOTExporterTest: void testUndirected()>:
		<org.jgrapht.ext.DOTExporterTest.java:110, 41.67%>
	<org.jgrapht.ext.GmlExporterTest: void testUndirected()>:
		<org.jgrapht.ext.GmlExporterTest.java:117, 62.50%>
Set (score: 0.67, ccsize: 2, packages: 1, classes: 1): 
	<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest: void testBipartiteMatching1()>:
		<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest.java:86, 6.76%>
	<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest: void testBipartiteMatching2()>:
		<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest.java:115, 5.21%>
Set (score: 0.50, ccsize: 4, packages: 1, classes: 1): 
	<org.jgrapht.graph.EqualsAndHashCodeTest: void testDefaultDirectedGraph()>:
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:106, 10.87%>
	<org.jgrapht.graph.EqualsAndHashCodeTest: void testGraphsWithNonIntrusiveEdge()>:
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:188, 6.49%>
Set (score: 0.50, ccsize: 4, packages: 1, classes: 1): 
	<org.jgrapht.graph.EqualsAndHashCodeTest: void testGrapshWithCustomEdges()>:
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:269, 12.82%>
	<org.jgrapht.graph.EqualsAndHashCodeTest: void testSimpleGraph()>:
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:149, 10.87%>
Set (score: 0.50, ccsize: 2, packages: 1, classes: 1): 
	<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest: void testBipartiteMatching1()>:
		<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest.java:83, 6.76%>
	<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest: void testBipartiteMatching2()>:
		<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest.java:112, 5.21%>
==============================================

[136] Set (editDistance: 2, isComplete: false, packages: 12, classes: 36): 
Centroid (size: 2): <org.jgrapht.generate.GraphGeneratorTest: void testHyperCubeGraphGenerator()>

Methods (66): 
	<org.jgrapht.EnhancedTestCase: void assertFalse()>:
		<org.jgrapht.EnhancedTestCase.java:79, 100.00%>
	<org.jgrapht.EnhancedTestCase: void assertTrue()>:
		<org.jgrapht.EnhancedTestCase.java:87, 100.00%>
	<org.jgrapht.alg.BellmanFordShortestPathTest: void testWithNegativeEdges()>:
		<org.jgrapht.alg.BellmanFordShortestPathTest.java:120, 45.45%>
		<org.jgrapht.alg.BellmanFordShortestPathTest.java:127, 63.64%>
	<org.jgrapht.alg.BlockCutpointGraphTest: void testGetBlock(org.jgrapht.alg.BlockCutpointGraph)>:
		<org.jgrapht.alg.BlockCutpointGraphTest.java:88, 33.33%>
		<org.jgrapht.alg.BlockCutpointGraphTest.java:94, 19.05%>
	<org.jgrapht.alg.ConnectivityInspectorTest: void testDirectedGraph()>:
		<org.jgrapht.alg.ConnectivityInspectorTest.java:139, 57.14%>
		<org.jgrapht.alg.ConnectivityInspectorTest.java:143, 57.14%>
	<org.jgrapht.alg.ConnectivityInspectorTest: void testStronglyConnected4()>:
		<org.jgrapht.alg.ConnectivityInspectorTest.java:371, 30.77%>
	<org.jgrapht.alg.EdmondsBlossomShrinkingTest: void testOne()>:
		<org.jgrapht.alg.EdmondsBlossomShrinkingTest.java:80, 23.81%>
		<org.jgrapht.alg.EdmondsBlossomShrinkingTest.java:81, 19.05%>
		<org.jgrapht.alg.EdmondsBlossomShrinkingTest.java:82, 19.05%>
	<org.jgrapht.alg.FloydWarshallShortestPathsTest: void testCompareWithDijkstra()>:
		<org.jgrapht.alg.FloydWarshallShortestPathsTest.java:96, 7.41%>
		<org.jgrapht.alg.FloydWarshallShortestPathsTest.java:121, 7.41%>
	<org.jgrapht.alg.FloydWarshallShortestPathsTest: void testDiameter()>:
		<org.jgrapht.alg.FloydWarshallShortestPathsTest.java:161, 57.14%>
	<org.jgrapht.alg.FloydWarshallShortestPathsTest: void testEdgeLessDiameter()>:
		<org.jgrapht.alg.FloydWarshallShortestPathsTest.java:182, 40.00%>
	<org.jgrapht.alg.FloydWarshallShortestPathsTest: void testEmptyDiameter()>:
		<org.jgrapht.alg.FloydWarshallShortestPathsTest.java:170, 50.00%>
	<org.jgrapht.alg.HamiltonianCycleTest: void testHamiltonianCycle()>:
		<org.jgrapht.alg.HamiltonianCycleTest.java:79, 33.33%>
		<org.jgrapht.alg.HamiltonianCycleTest.java:89, 27.78%>
	<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest: void testBipartiteMatching1()>:
		<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest.java:83, 6.76%>
		<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest.java:86, 6.76%>
	<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest: void testBipartiteMatching2()>:
		<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest.java:112, 5.21%>
		<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest.java:115, 5.21%>
	<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest: void testEmptyMatching()>:
		<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest.java:128, 33.33%>
	<org.jgrapht.alg.KSPDiscardsValidPathsTest: void testNot3connectedGraph()>:
		<org.jgrapht.alg.KSPDiscardsValidPathsTest.java:102, 87.50%>
	<org.jgrapht.alg.KShortestPathCostTest: void verifyShortestPathsInIncreasingOrderOfWeight(org.jgrapht.Graph)>:
		<org.jgrapht.alg.KShortestPathCostTest.java:222, 30.77%>
		<org.jgrapht.alg.KShortestPathCostTest.java:225, 30.77%>
	<org.jgrapht.alg.KShortestPathCostTest: void verifyWeightsConsistency(java.util.List,java.util.List)>:
		<org.jgrapht.alg.KShortestPathCostTest.java:294, 53.85%>
	<org.jgrapht.alg.KShortestPathKValuesTest: void verifyNbPathsForAllPairsOfVertices(org.jgrapht.Graph)>:
		<org.jgrapht.alg.KShortestPathKValuesTest.java:148, 36.84%>
	<org.jgrapht.alg.KruskalMinimumSpanningTreeTest: void testMinimumSpanningTree()>:
		<org.jgrapht.alg.KruskalMinimumSpanningTreeTest.java:80, 19.05%>
		<org.jgrapht.alg.KruskalMinimumSpanningTreeTest.java:84, 38.10%>
	<org.jgrapht.alg.StoerWagnerMinimumCutTest: void testMinCut14()>:
		<org.jgrapht.alg.StoerWagnerMinimumCutTest.java:97, 16.67%>
	<org.jgrapht.alg.StoerWagnerMinimumCutTest: void testMinCutDisconnected()>:
		<org.jgrapht.alg.StoerWagnerMinimumCutTest.java:124, 22.73%>
	<org.jgrapht.alg.TransitiveClosureTest: void testLinearGraph()>:
		<org.jgrapht.alg.TransitiveClosureTest.java:75, 47.83%>
		<org.jgrapht.alg.TransitiveClosureTest.java:78, 43.48%>
	<org.jgrapht.alg.TransitiveClosureTest: void testRingGraph()>:
		<org.jgrapht.alg.TransitiveClosureTest.java:107, 45.45%>
		<org.jgrapht.alg.TransitiveClosureTest.java:110, 50.00%>
	<org.jgrapht.alg.VertexCoversTest: void testFind2ApproximationCover()>:
		<org.jgrapht.alg.VertexCoversTest.java:74, 60.00%>
	<org.jgrapht.alg.VertexCoversTest: void testFindGreedyCover()>:
		<org.jgrapht.alg.VertexCoversTest.java:89, 50.00%>
	<org.jgrapht.alg.util.UnionFindTest: void testIdentical(java.lang.String[],java.util.ArrayList,org.jgrapht.alg.util.UnionFind)>:
		<org.jgrapht.alg.util.UnionFindTest.java:131, 41.18%>
	<org.jgrapht.experimental.GraphReaderTest: void testGraphReader()>:
		<org.jgrapht.experimental.GraphReaderTest.java:88, 27.27%>
	<org.jgrapht.experimental.GraphReaderTest: void testGraphReaderWeighted()>:
		<org.jgrapht.experimental.GraphReaderTest.java:116, 23.08%>
	<org.jgrapht.experimental.alg.ColoringTest: void testBacktrackColoring()>:
		<org.jgrapht.experimental.alg.ColoringTest.java:97, 50.00%>
	<org.jgrapht.experimental.alg.ColoringTest: void testGreedyColoring()>:
		<org.jgrapht.experimental.alg.ColoringTest.java:77, 50.00%>
	<org.jgrapht.experimental.dag.DirectedAcyclicGraphTest: void testTopoIterationOrderLinearGraph()>:
		<org.jgrapht.experimental.dag.DirectedAcyclicGraphTest.java:181, 29.41%>
		<org.jgrapht.experimental.dag.DirectedAcyclicGraphTest.java:182, 41.18%>
	<org.jgrapht.experimental.isomorphism.IsomorphismInspectorTest: void assertIsomorphic(org.jgrapht.Graph[],boolean,org.jgrapht.experimental.equivalence.EquivalenceComparator,org.jgrapht.experimental.equivalence.EquivalenceComparator)>:
		<org.jgrapht.experimental.isomorphism.IsomorphismInspectorTest.java:138, 28.57%>
		<org.jgrapht.experimental.isomorphism.IsomorphismInspectorTest.java:140, 28.57%>
	<org.jgrapht.experimental.isomorphism.IsomorphismInspectorTest: void assertIsomorphicStopAfterFirstMatch(org.jgrapht.Graph[],boolean,boolean,org.jgrapht.experimental.equivalence.EquivalenceComparator,org.jgrapht.experimental.equivalence.EquivalenceComparator)>:
		<org.jgrapht.experimental.isomorphism.IsomorphismInspectorTest.java:485, 14.71%>
	<org.jgrapht.ext.DOTExporterTest: void testUndirected()>:
		<org.jgrapht.ext.DOTExporterTest.java:110, 41.67%>
	<org.jgrapht.ext.DOTExporterTest: void testValidNodeIDs()>:
		<org.jgrapht.ext.DOTExporterTest.java:149, 16.00%>
	<org.jgrapht.ext.GmlExporterTest: void testUndirected()>:
		<org.jgrapht.ext.GmlExporterTest.java:117, 62.50%>
	<org.jgrapht.ext.MatrixExporterTest: void testAdjacencyDirected()>:
		<org.jgrapht.ext.MatrixExporterTest.java:149, 62.50%>
	<org.jgrapht.ext.MatrixExporterTest: void testAdjacencyUndirected()>:
		<org.jgrapht.ext.MatrixExporterTest.java:133, 62.50%>
	<org.jgrapht.ext.MatrixExporterTest: void testLaplacian()>:
		<org.jgrapht.ext.MatrixExporterTest.java:113, 38.46%>
		<org.jgrapht.ext.MatrixExporterTest.java:117, 38.46%>
	<org.jgrapht.generate.GraphGeneratorTest: void testHyperCubeGraphGenerator()>:
		<org.jgrapht.generate.GraphGeneratorTest.java:265, 50.00%>
		<org.jgrapht.generate.GraphGeneratorTest.java:266, 50.00%>
	<org.jgrapht.generate.RandomGraphGeneratorTest: void testBadVertexFactory()>:
		<org.jgrapht.generate.RandomGraphGeneratorTest.java:106, 12.50%>
	<org.jgrapht.generate.RandomGraphGeneratorTest: void testGenerateDirectedGraph()>:
		<org.jgrapht.generate.RandomGraphGeneratorTest.java:70, 20.00%>
	<org.jgrapht.generate.RandomGraphGeneratorTest: void testGenerateListenableUndirectedGraph()>:
		<org.jgrapht.generate.RandomGraphGeneratorTest.java:89, 20.00%>
	<org.jgrapht.graph.AsUndirectedGraphTest: void testAddEdge()>:
		<org.jgrapht.graph.AsUndirectedGraphTest.java:89, 100.00%>
	<org.jgrapht.graph.AsUndirectedGraphTest: void testAddVertex()>:
		<org.jgrapht.graph.AsUndirectedGraphTest.java:102, 85.71%>
		<org.jgrapht.graph.AsUndirectedGraphTest.java:103, 100.00%>
	<org.jgrapht.graph.AsUndirectedGraphTest: void testDegreeOf()>:
		<org.jgrapht.graph.AsUndirectedGraphTest.java:111, 46.15%>
		<org.jgrapht.graph.AsUndirectedGraphTest.java:112, 61.54%>
		<org.jgrapht.graph.AsUndirectedGraphTest.java:113, 76.92%>
		<org.jgrapht.graph.AsUndirectedGraphTest.java:114, 92.31%>
	<org.jgrapht.graph.AsUndirectedGraphTest: void testGetAllEdges()>:
		<org.jgrapht.graph.AsUndirectedGraphTest.java:123, 40.00%>
		<org.jgrapht.graph.AsUndirectedGraphTest.java:124, 65.00%>
		<org.jgrapht.graph.AsUndirectedGraphTest.java:128, 70.00%>
		<org.jgrapht.graph.AsUndirectedGraphTest.java:129, 80.00%>
	<org.jgrapht.graph.AsUndirectedGraphTest: void testRemoveEdge()>:
		<org.jgrapht.graph.AsUndirectedGraphTest.java:155, 88.89%>
		<org.jgrapht.graph.AsUndirectedGraphTest.java:156, 111.11%>
	<org.jgrapht.graph.AsUndirectedGraphTest: void testRemoveVertex()>:
		<org.jgrapht.graph.AsUndirectedGraphTest.java:165, 88.89%>
		<org.jgrapht.graph.AsUndirectedGraphTest.java:166, 111.11%>
	<org.jgrapht.graph.AsUnweightedGraphTest: void constructWeighted(org.jgrapht.WeightedGraph)>:
		<org.jgrapht.graph.AsUnweightedGraphTest.java:110, 57.14%>
	<org.jgrapht.graph.EqualsAndHashCodeTest: void testDefaultDirectedGraph()>:
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:105, 6.52%>
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:106, 10.87%>
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:108, 13.04%>
	<org.jgrapht.graph.EqualsAndHashCodeTest: void testGraphsWithNonIntrusiveEdge()>:
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:187, 3.90%>
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:188, 6.49%>
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:190, 7.79%>
	<org.jgrapht.graph.EqualsAndHashCodeTest: void testGrapshWithCustomEdges()>:
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:268, 7.69%>
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:269, 12.82%>
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:271, 15.38%>
	<org.jgrapht.graph.EqualsAndHashCodeTest: void testPseudograph()>:
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:230, 5.08%>
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:231, 8.47%>
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:233, 10.17%>
	<org.jgrapht.graph.EqualsAndHashCodeTest: void testSimpleGraph()>:
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:148, 6.52%>
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:149, 10.87%>
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:151, 13.04%>
	<org.jgrapht.graph.GenericGraphsTest: void testAlissaHacker()>:
		<org.jgrapht.graph.GenericGraphsTest.java:134, 83.33%>
	<org.jgrapht.graph.SimpleDirectedGraphTest: void testIncomingOutgoingEdgesOf()>:
		<org.jgrapht.graph.SimpleDirectedGraphTest.java:315, 128.57%>
	<org.jgrapht.graph.SubgraphTest: void testInducedSubgraphUnderlyingEdgeAddition()>:
		<org.jgrapht.graph.SubgraphTest.java:192, 20.00%>
	<org.jgrapht.traverse.AbstractGraphIteratorTest: void testDirectedGraph()>:
		<org.jgrapht.traverse.AbstractGraphIteratorTest.java:86, 47.06%>
		<org.jgrapht.traverse.AbstractGraphIteratorTest.java:88, 52.94%>
	<org.jgrapht.traverse.ClosestFirstIteratorTest: void testNoStart()>:
		<org.jgrapht.traverse.ClosestFirstIteratorTest.java:103, 53.85%>
	<org.jgrapht.traverse.ClosestFirstIteratorTest: void testRadius()>:
		<org.jgrapht.traverse.ClosestFirstIteratorTest.java:80, 53.85%>
	<org.jgrapht.traverse.DepthFirstIteratorTest: void testBug1169182()>:
		<org.jgrapht.traverse.DepthFirstIteratorTest.java:149, 16.00%>
	<org.jgrapht.traverse.TopologicalOrderIteratorTest: void testEmptyGraph()>:
		<org.jgrapht.traverse.TopologicalOrderIteratorTest.java:136, 50.00%>
	<org.jgrapht.traverse.TopologicalOrderIteratorTest: void testRecipe()>:
		<org.jgrapht.traverse.TopologicalOrderIteratorTest.java:109, 9.62%>
		<org.jgrapht.traverse.TopologicalOrderIteratorTest.java:121, 9.62%>
	<org.jgrapht.util.FibonacciHeapTest: void testGrowReplaceShrink()>:
		<org.jgrapht.util.FibonacciHeapTest.java:88, 17.65%>
		<org.jgrapht.util.FibonacciHeapTest.java:91, 17.65%>

Relevant Assertion clone sets (7):
Set (score: 1.00, ccsize: 2, packages: 1, classes: 1): 
	<org.jgrapht.alg.VertexCoversTest: void testFind2ApproximationCover()>:
		<org.jgrapht.alg.VertexCoversTest.java:74, 60.00%>
	<org.jgrapht.alg.VertexCoversTest: void testFindGreedyCover()>:
		<org.jgrapht.alg.VertexCoversTest.java:89, 50.00%>
Set (score: 1.00, ccsize: 2, packages: 1, classes: 1): 
	<org.jgrapht.experimental.GraphReaderTest: void testGraphReader()>:
		<org.jgrapht.experimental.GraphReaderTest.java:88, 27.27%>
	<org.jgrapht.experimental.GraphReaderTest: void testGraphReaderWeighted()>:
		<org.jgrapht.experimental.GraphReaderTest.java:116, 23.08%>
Set (score: 0.67, ccsize: 2, packages: 1, classes: 2): 
	<org.jgrapht.ext.DOTExporterTest: void testUndirected()>:
		<org.jgrapht.ext.DOTExporterTest.java:110, 41.67%>
	<org.jgrapht.ext.GmlExporterTest: void testUndirected()>:
		<org.jgrapht.ext.GmlExporterTest.java:117, 62.50%>
Set (score: 0.67, ccsize: 2, packages: 1, classes: 1): 
	<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest: void testBipartiteMatching1()>:
		<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest.java:86, 6.76%>
	<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest: void testBipartiteMatching2()>:
		<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest.java:115, 5.21%>
Set (score: 0.50, ccsize: 4, packages: 1, classes: 1): 
	<org.jgrapht.graph.EqualsAndHashCodeTest: void testDefaultDirectedGraph()>:
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:106, 10.87%>
	<org.jgrapht.graph.EqualsAndHashCodeTest: void testGraphsWithNonIntrusiveEdge()>:
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:188, 6.49%>
Set (score: 0.50, ccsize: 4, packages: 1, classes: 1): 
	<org.jgrapht.graph.EqualsAndHashCodeTest: void testGrapshWithCustomEdges()>:
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:269, 12.82%>
	<org.jgrapht.graph.EqualsAndHashCodeTest: void testSimpleGraph()>:
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:149, 10.87%>
Set (score: 0.50, ccsize: 2, packages: 1, classes: 1): 
	<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest: void testBipartiteMatching1()>:
		<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest.java:83, 6.76%>
	<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest: void testBipartiteMatching2()>:
		<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest.java:112, 5.21%>
==============================================

[137] Set (editDistance: 2, isComplete: false, packages: 12, classes: 38): 
Centroid (size: 2): <org.jgrapht.graph.AsUndirectedGraphTest: void testAddVertex()>

Methods (71): 
	<org.jgrapht.EnhancedTestCase: void assertFalse()>:
		<org.jgrapht.EnhancedTestCase.java:79, 100.00%>
	<org.jgrapht.EnhancedTestCase: void assertTrue()>:
		<org.jgrapht.EnhancedTestCase.java:87, 100.00%>
	<org.jgrapht.alg.BellmanFordShortestPathTest: void testWithNegativeEdges()>:
		<org.jgrapht.alg.BellmanFordShortestPathTest.java:120, 45.45%>
		<org.jgrapht.alg.BellmanFordShortestPathTest.java:127, 63.64%>
	<org.jgrapht.alg.BiconnectivityInspectorTest: void testLinearGraph(int)>:
		<org.jgrapht.alg.BiconnectivityInspectorTest.java:88, 40.00%>
		<org.jgrapht.alg.BiconnectivityInspectorTest.java:89, 40.00%>
	<org.jgrapht.alg.BiconnectivityInspectorTest: void testNotBiconnected()>:
		<org.jgrapht.alg.BiconnectivityInspectorTest.java:100, 55.56%>
		<org.jgrapht.alg.BiconnectivityInspectorTest.java:101, 55.56%>
	<org.jgrapht.alg.BlockCutpointGraphTest: void testBiconnected()>:
		<org.jgrapht.alg.BlockCutpointGraphTest.java:67, 41.67%>
		<org.jgrapht.alg.BlockCutpointGraphTest.java:71, 41.67%>
	<org.jgrapht.alg.BlockCutpointGraphTest: void testGetBlock(org.jgrapht.alg.BlockCutpointGraph)>:
		<org.jgrapht.alg.BlockCutpointGraphTest.java:88, 33.33%>
		<org.jgrapht.alg.BlockCutpointGraphTest.java:94, 19.05%>
	<org.jgrapht.alg.BlockCutpointGraphTest: void testLinearGraph(int)>:
		<org.jgrapht.alg.BlockCutpointGraphTest.java:121, 33.33%>
		<org.jgrapht.alg.BlockCutpointGraphTest.java:125, 33.33%>
	<org.jgrapht.alg.BlockCutpointGraphTest: void testNotBiconnected()>:
		<org.jgrapht.alg.BlockCutpointGraphTest.java:135, 41.67%>
		<org.jgrapht.alg.BlockCutpointGraphTest.java:139, 41.67%>
	<org.jgrapht.alg.BronKerboschCliqueFinderTest: void testFindAll()>:
		<org.jgrapht.alg.BronKerboschCliqueFinderTest.java:143, 26.32%>
		<org.jgrapht.alg.BronKerboschCliqueFinderTest.java:175, 21.05%>
	<org.jgrapht.alg.BronKerboschCliqueFinderTest: void testFindBiggest()>:
		<org.jgrapht.alg.BronKerboschCliqueFinderTest.java:119, 41.67%>
		<org.jgrapht.alg.BronKerboschCliqueFinderTest.java:129, 58.33%>
	<org.jgrapht.alg.ConnectivityInspectorTest: void testStronglyConnected4()>:
		<org.jgrapht.alg.ConnectivityInspectorTest.java:371, 30.77%>
	<org.jgrapht.alg.FloydWarshallShortestPathsTest: void testCompareWithDijkstra()>:
		<org.jgrapht.alg.FloydWarshallShortestPathsTest.java:96, 7.41%>
		<org.jgrapht.alg.FloydWarshallShortestPathsTest.java:121, 7.41%>
	<org.jgrapht.alg.FloydWarshallShortestPathsTest: void testDiameter()>:
		<org.jgrapht.alg.FloydWarshallShortestPathsTest.java:161, 57.14%>
	<org.jgrapht.alg.FloydWarshallShortestPathsTest: void testEdgeLessDiameter()>:
		<org.jgrapht.alg.FloydWarshallShortestPathsTest.java:182, 40.00%>
	<org.jgrapht.alg.FloydWarshallShortestPathsTest: void testEmptyDiameter()>:
		<org.jgrapht.alg.FloydWarshallShortestPathsTest.java:170, 50.00%>
	<org.jgrapht.alg.HamiltonianCycleTest: void testHamiltonianCycle()>:
		<org.jgrapht.alg.HamiltonianCycleTest.java:79, 33.33%>
		<org.jgrapht.alg.HamiltonianCycleTest.java:89, 27.78%>
	<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest: void testBipartiteMatching1()>:
		<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest.java:83, 6.76%>
		<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest.java:86, 6.76%>
	<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest: void testBipartiteMatching2()>:
		<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest.java:112, 5.21%>
		<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest.java:115, 5.21%>
	<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest: void testEmptyMatching()>:
		<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest.java:128, 33.33%>
	<org.jgrapht.alg.KSPDiscardsValidPathsTest: void testNot3connectedGraph()>:
		<org.jgrapht.alg.KSPDiscardsValidPathsTest.java:102, 87.50%>
	<org.jgrapht.alg.KSPExampleTest: void testFourReturnedPathsJGraphT()>:
		<org.jgrapht.alg.KSPExampleTest.java:60, 55.56%>
	<org.jgrapht.alg.KSPExampleTest: void testThreeReturnedPathsJGraphT()>:
		<org.jgrapht.alg.KSPExampleTest.java:72, 60.00%>
	<org.jgrapht.alg.KSPExampleTest: void testTwoReturnedPathsJGraphT()>:
		<org.jgrapht.alg.KSPExampleTest.java:84, 60.00%>
	<org.jgrapht.alg.KShortestPathCostTest: void verifyShortestPathsInIncreasingOrderOfWeight(org.jgrapht.Graph)>:
		<org.jgrapht.alg.KShortestPathCostTest.java:222, 30.77%>
		<org.jgrapht.alg.KShortestPathCostTest.java:225, 30.77%>
	<org.jgrapht.alg.KShortestPathCostTest: void verifyWeightsConsistency(java.util.List,java.util.List)>:
		<org.jgrapht.alg.KShortestPathCostTest.java:294, 53.85%>
	<org.jgrapht.alg.KShortestPathKValuesTest: void verifyNbPathsForAllPairsOfVertices(org.jgrapht.Graph)>:
		<org.jgrapht.alg.KShortestPathKValuesTest.java:148, 36.84%>
	<org.jgrapht.alg.KruskalMinimumSpanningTreeTest: void testMinimumSpanningTree()>:
		<org.jgrapht.alg.KruskalMinimumSpanningTreeTest.java:80, 19.05%>
		<org.jgrapht.alg.KruskalMinimumSpanningTreeTest.java:84, 38.10%>
	<org.jgrapht.alg.StoerWagnerMinimumCutTest: void testMinCut14()>:
		<org.jgrapht.alg.StoerWagnerMinimumCutTest.java:97, 16.67%>
	<org.jgrapht.alg.StoerWagnerMinimumCutTest: void testMinCutDisconnected()>:
		<org.jgrapht.alg.StoerWagnerMinimumCutTest.java:124, 22.73%>
	<org.jgrapht.alg.VertexCoversTest: void testFind2ApproximationCover()>:
		<org.jgrapht.alg.VertexCoversTest.java:74, 60.00%>
	<org.jgrapht.alg.VertexCoversTest: void testFindGreedyCover()>:
		<org.jgrapht.alg.VertexCoversTest.java:89, 50.00%>
	<org.jgrapht.experimental.GraphReaderTest: void testGraphReader()>:
		<org.jgrapht.experimental.GraphReaderTest.java:88, 27.27%>
	<org.jgrapht.experimental.GraphReaderTest: void testGraphReaderWeighted()>:
		<org.jgrapht.experimental.GraphReaderTest.java:116, 23.08%>
	<org.jgrapht.experimental.alg.ColoringTest: void testBacktrackColoring()>:
		<org.jgrapht.experimental.alg.ColoringTest.java:97, 50.00%>
	<org.jgrapht.experimental.alg.ColoringTest: void testGreedyColoring()>:
		<org.jgrapht.experimental.alg.ColoringTest.java:77, 50.00%>
	<org.jgrapht.experimental.equivalence.EquivalenceGroupCreatorTest: void testOneComparator(org.jgrapht.experimental.equivalence.EquivalenceComparator,int)>:
		<org.jgrapht.experimental.equivalence.EquivalenceGroupCreatorTest.java:152, 23.53%>
		<org.jgrapht.experimental.equivalence.EquivalenceGroupCreatorTest.java:157, 41.18%>
	<org.jgrapht.experimental.isomorphism.IsomorphismInspectorTest: void assertIsomorphic(org.jgrapht.Graph[],boolean,org.jgrapht.experimental.equivalence.EquivalenceComparator,org.jgrapht.experimental.equivalence.EquivalenceComparator)>:
		<org.jgrapht.experimental.isomorphism.IsomorphismInspectorTest.java:138, 28.57%>
		<org.jgrapht.experimental.isomorphism.IsomorphismInspectorTest.java:140, 28.57%>
	<org.jgrapht.experimental.permutation.CompoundPermutationIterTest: void testGetNext()>:
		<org.jgrapht.experimental.permutation.CompoundPermutationIterTest.java:96, 40.00%>
		<org.jgrapht.experimental.permutation.CompoundPermutationIterTest.java:127, 40.00%>
	<org.jgrapht.ext.DOTExporterTest: void testUndirected()>:
		<org.jgrapht.ext.DOTExporterTest.java:110, 41.67%>
	<org.jgrapht.ext.DOTExporterTest: void testValidNodeIDs()>:
		<org.jgrapht.ext.DOTExporterTest.java:149, 16.00%>
	<org.jgrapht.ext.GmlExporterTest: void testUndirected()>:
		<org.jgrapht.ext.GmlExporterTest.java:117, 62.50%>
	<org.jgrapht.ext.MatrixExporterTest: void testAdjacencyDirected()>:
		<org.jgrapht.ext.MatrixExporterTest.java:149, 62.50%>
	<org.jgrapht.ext.MatrixExporterTest: void testAdjacencyUndirected()>:
		<org.jgrapht.ext.MatrixExporterTest.java:133, 62.50%>
	<org.jgrapht.ext.MatrixExporterTest: void testLaplacian()>:
		<org.jgrapht.ext.MatrixExporterTest.java:113, 38.46%>
		<org.jgrapht.ext.MatrixExporterTest.java:117, 38.46%>
	<org.jgrapht.generate.GraphGeneratorTest: void testCompleteBipartiteGraphGenerator()>:
		<org.jgrapht.generate.GraphGeneratorTest.java:243, 50.00%>
		<org.jgrapht.generate.GraphGeneratorTest.java:244, 50.00%>
	<org.jgrapht.generate.GraphGeneratorTest: void testCompleteGraphGenerator()>:
		<org.jgrapht.generate.GraphGeneratorTest.java:185, 62.50%>
	<org.jgrapht.generate.GraphGeneratorTest: void testHyperCubeGraphGenerator()>:
		<org.jgrapht.generate.GraphGeneratorTest.java:265, 50.00%>
		<org.jgrapht.generate.GraphGeneratorTest.java:266, 50.00%>
	<org.jgrapht.generate.RandomGraphGeneratorTest: void testBadVertexFactory()>:
		<org.jgrapht.generate.RandomGraphGeneratorTest.java:106, 12.50%>
	<org.jgrapht.generate.RandomGraphGeneratorTest: void testGenerateDirectedGraph()>:
		<org.jgrapht.generate.RandomGraphGeneratorTest.java:70, 20.00%>
	<org.jgrapht.generate.RandomGraphGeneratorTest: void testGenerateListenableUndirectedGraph()>:
		<org.jgrapht.generate.RandomGraphGeneratorTest.java:89, 20.00%>
	<org.jgrapht.graph.AsUndirectedGraphTest: void testAddEdge()>:
		<org.jgrapht.graph.AsUndirectedGraphTest.java:89, 100.00%>
	<org.jgrapht.graph.AsUndirectedGraphTest: void testAddVertex()>:
		<org.jgrapht.graph.AsUndirectedGraphTest.java:102, 85.71%>
		<org.jgrapht.graph.AsUndirectedGraphTest.java:103, 100.00%>
	<org.jgrapht.graph.AsUnweightedGraphTest: void constructWeighted(org.jgrapht.WeightedGraph)>:
		<org.jgrapht.graph.AsUnweightedGraphTest.java:110, 57.14%>
	<org.jgrapht.graph.DefaultDirectedGraphTest: void testEdgesOf()>:
		<org.jgrapht.graph.DefaultDirectedGraphTest.java:117, 75.00%>
		<org.jgrapht.graph.DefaultDirectedGraphTest.java:118, 75.00%>
	<org.jgrapht.graph.DefaultDirectedGraphTest: void testGetAllEdges()>:
		<org.jgrapht.graph.DefaultDirectedGraphTest.java:130, 100.00%>
	<org.jgrapht.graph.DefaultDirectedGraphTest: void testInDegreeOf()>:
		<org.jgrapht.graph.DefaultDirectedGraphTest.java:141, 83.33%>
		<org.jgrapht.graph.DefaultDirectedGraphTest.java:142, 83.33%>
	<org.jgrapht.graph.DefaultDirectedGraphTest: void testOutDegreeOf()>:
		<org.jgrapht.graph.DefaultDirectedGraphTest.java:153, 83.33%>
		<org.jgrapht.graph.DefaultDirectedGraphTest.java:154, 83.33%>
	<org.jgrapht.graph.GenericGraphsTest: void testAlissaHacker()>:
		<org.jgrapht.graph.GenericGraphsTest.java:134, 83.33%>
	<org.jgrapht.graph.GenericGraphsTest: void testEqualButNotSameVertex()>:
		<org.jgrapht.graph.GenericGraphsTest.java:145, 40.00%>
		<org.jgrapht.graph.GenericGraphsTest.java:146, 40.00%>
	<org.jgrapht.graph.SimpleDirectedGraphTest: void testIncomingOutgoingEdgesOf()>:
		<org.jgrapht.graph.SimpleDirectedGraphTest.java:315, 128.57%>
	<org.jgrapht.graph.SubgraphTest: void testInducedSubgraphUnderlyingEdgeAddition()>:
		<org.jgrapht.graph.SubgraphTest.java:192, 20.00%>
	<org.jgrapht.traverse.AbstractGraphIteratorTest: void testDirectedGraph()>:
		<org.jgrapht.traverse.AbstractGraphIteratorTest.java:86, 47.06%>
		<org.jgrapht.traverse.AbstractGraphIteratorTest.java:88, 52.94%>
	<org.jgrapht.traverse.ClosestFirstIteratorTest: void testNoStart()>:
		<org.jgrapht.traverse.ClosestFirstIteratorTest.java:103, 53.85%>
	<org.jgrapht.traverse.ClosestFirstIteratorTest: void testRadius()>:
		<org.jgrapht.traverse.ClosestFirstIteratorTest.java:80, 53.85%>
	<org.jgrapht.traverse.DepthFirstIteratorTest: void testBug1169182()>:
		<org.jgrapht.traverse.DepthFirstIteratorTest.java:149, 16.00%>
	<org.jgrapht.traverse.TopologicalOrderIteratorTest: void testEmptyGraph()>:
		<org.jgrapht.traverse.TopologicalOrderIteratorTest.java:136, 50.00%>
	<org.jgrapht.traverse.TopologicalOrderIteratorTest: void testRecipe()>:
		<org.jgrapht.traverse.TopologicalOrderIteratorTest.java:109, 9.62%>
		<org.jgrapht.traverse.TopologicalOrderIteratorTest.java:121, 9.62%>
	<org.jgrapht.util.FibonacciHeapTest: void testGrowReplaceShrink()>:
		<org.jgrapht.util.FibonacciHeapTest.java:88, 17.65%>
		<org.jgrapht.util.FibonacciHeapTest.java:91, 17.65%>
	<org.jgrapht.util.PrefetchIteratorTest: void testEnumInterface()>:
		<org.jgrapht.util.PrefetchIteratorTest.java:71, 33.33%>
		<org.jgrapht.util.PrefetchIteratorTest.java:72, 41.67%>
		<org.jgrapht.util.PrefetchIteratorTest.java:74, 33.33%>
		<org.jgrapht.util.PrefetchIteratorTest.java:81, 16.67%>
	<org.jgrapht.util.PrefetchIteratorTest: void testIteratorInterface()>:
		<org.jgrapht.util.PrefetchIteratorTest.java:54, 33.33%>
		<org.jgrapht.util.PrefetchIteratorTest.java:55, 41.67%>
		<org.jgrapht.util.PrefetchIteratorTest.java:57, 33.33%>
		<org.jgrapht.util.PrefetchIteratorTest.java:64, 16.67%>

Relevant Assertion clone sets (8):
Set (score: 1.00, ccsize: 2, packages: 1, classes: 1): 
	<org.jgrapht.alg.VertexCoversTest: void testFind2ApproximationCover()>:
		<org.jgrapht.alg.VertexCoversTest.java:74, 60.00%>
	<org.jgrapht.alg.VertexCoversTest: void testFindGreedyCover()>:
		<org.jgrapht.alg.VertexCoversTest.java:89, 50.00%>
Set (score: 1.00, ccsize: 2, packages: 1, classes: 1): 
	<org.jgrapht.experimental.GraphReaderTest: void testGraphReader()>:
		<org.jgrapht.experimental.GraphReaderTest.java:88, 27.27%>
	<org.jgrapht.experimental.GraphReaderTest: void testGraphReaderWeighted()>:
		<org.jgrapht.experimental.GraphReaderTest.java:116, 23.08%>
Set (score: 0.67, ccsize: 3, packages: 1, classes: 2): 
	<org.jgrapht.alg.BiconnectivityInspectorTest: void testLinearGraph(int)>:
		<org.jgrapht.alg.BiconnectivityInspectorTest.java:88, 40.00%>
	<org.jgrapht.alg.BlockCutpointGraphTest: void testLinearGraph(int)>:
		<org.jgrapht.alg.BlockCutpointGraphTest.java:121, 33.33%>
		<org.jgrapht.alg.BlockCutpointGraphTest.java:125, 33.33%>
Set (score: 0.67, ccsize: 3, packages: 1, classes: 2): 
	<org.jgrapht.alg.BiconnectivityInspectorTest: void testNotBiconnected()>:
		<org.jgrapht.alg.BiconnectivityInspectorTest.java:100, 55.56%>
	<org.jgrapht.alg.BlockCutpointGraphTest: void testNotBiconnected()>:
		<org.jgrapht.alg.BlockCutpointGraphTest.java:135, 41.67%>
		<org.jgrapht.alg.BlockCutpointGraphTest.java:139, 41.67%>
Set (score: 0.67, ccsize: 2, packages: 1, classes: 2): 
	<org.jgrapht.ext.DOTExporterTest: void testUndirected()>:
		<org.jgrapht.ext.DOTExporterTest.java:110, 41.67%>
	<org.jgrapht.ext.GmlExporterTest: void testUndirected()>:
		<org.jgrapht.ext.GmlExporterTest.java:117, 62.50%>
Set (score: 0.67, ccsize: 2, packages: 1, classes: 1): 
	<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest: void testBipartiteMatching1()>:
		<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest.java:86, 6.76%>
	<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest: void testBipartiteMatching2()>:
		<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest.java:115, 5.21%>
Set (score: 0.50, ccsize: 3, packages: 1, classes: 1): 
	<org.jgrapht.alg.KSPExampleTest: void testFourReturnedPathsJGraphT()>:
		<org.jgrapht.alg.KSPExampleTest.java:60, 55.56%>
	<org.jgrapht.alg.KSPExampleTest: void testThreeReturnedPathsJGraphT()>:
		<org.jgrapht.alg.KSPExampleTest.java:72, 60.00%>
	<org.jgrapht.alg.KSPExampleTest: void testTwoReturnedPathsJGraphT()>:
		<org.jgrapht.alg.KSPExampleTest.java:84, 60.00%>
Set (score: 0.50, ccsize: 2, packages: 1, classes: 1): 
	<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest: void testBipartiteMatching1()>:
		<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest.java:83, 6.76%>
	<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest: void testBipartiteMatching2()>:
		<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest.java:112, 5.21%>
==============================================

[138] Set (editDistance: 2, isComplete: false, packages: 12, classes: 38): 
Centroid (size: 2): <org.jgrapht.graph.AsUndirectedGraphTest: void testRemoveEdge()>

Methods (71): 
	<org.jgrapht.EnhancedTestCase: void assertFalse()>:
		<org.jgrapht.EnhancedTestCase.java:79, 100.00%>
	<org.jgrapht.EnhancedTestCase: void assertTrue()>:
		<org.jgrapht.EnhancedTestCase.java:87, 100.00%>
	<org.jgrapht.alg.BellmanFordShortestPathTest: void testWithNegativeEdges()>:
		<org.jgrapht.alg.BellmanFordShortestPathTest.java:120, 45.45%>
		<org.jgrapht.alg.BellmanFordShortestPathTest.java:127, 63.64%>
	<org.jgrapht.alg.BiconnectivityInspectorTest: void testLinearGraph(int)>:
		<org.jgrapht.alg.BiconnectivityInspectorTest.java:88, 40.00%>
		<org.jgrapht.alg.BiconnectivityInspectorTest.java:89, 40.00%>
	<org.jgrapht.alg.BiconnectivityInspectorTest: void testNotBiconnected()>:
		<org.jgrapht.alg.BiconnectivityInspectorTest.java:100, 55.56%>
		<org.jgrapht.alg.BiconnectivityInspectorTest.java:101, 55.56%>
	<org.jgrapht.alg.BlockCutpointGraphTest: void testBiconnected()>:
		<org.jgrapht.alg.BlockCutpointGraphTest.java:67, 41.67%>
		<org.jgrapht.alg.BlockCutpointGraphTest.java:71, 41.67%>
	<org.jgrapht.alg.BlockCutpointGraphTest: void testGetBlock(org.jgrapht.alg.BlockCutpointGraph)>:
		<org.jgrapht.alg.BlockCutpointGraphTest.java:88, 33.33%>
		<org.jgrapht.alg.BlockCutpointGraphTest.java:94, 19.05%>
	<org.jgrapht.alg.BlockCutpointGraphTest: void testLinearGraph(int)>:
		<org.jgrapht.alg.BlockCutpointGraphTest.java:121, 33.33%>
		<org.jgrapht.alg.BlockCutpointGraphTest.java:125, 33.33%>
	<org.jgrapht.alg.BlockCutpointGraphTest: void testNotBiconnected()>:
		<org.jgrapht.alg.BlockCutpointGraphTest.java:135, 41.67%>
		<org.jgrapht.alg.BlockCutpointGraphTest.java:139, 41.67%>
	<org.jgrapht.alg.BronKerboschCliqueFinderTest: void testFindAll()>:
		<org.jgrapht.alg.BronKerboschCliqueFinderTest.java:143, 26.32%>
		<org.jgrapht.alg.BronKerboschCliqueFinderTest.java:175, 21.05%>
	<org.jgrapht.alg.BronKerboschCliqueFinderTest: void testFindBiggest()>:
		<org.jgrapht.alg.BronKerboschCliqueFinderTest.java:119, 41.67%>
		<org.jgrapht.alg.BronKerboschCliqueFinderTest.java:129, 58.33%>
	<org.jgrapht.alg.ConnectivityInspectorTest: void testStronglyConnected4()>:
		<org.jgrapht.alg.ConnectivityInspectorTest.java:371, 30.77%>
	<org.jgrapht.alg.FloydWarshallShortestPathsTest: void testCompareWithDijkstra()>:
		<org.jgrapht.alg.FloydWarshallShortestPathsTest.java:96, 7.41%>
		<org.jgrapht.alg.FloydWarshallShortestPathsTest.java:121, 7.41%>
	<org.jgrapht.alg.FloydWarshallShortestPathsTest: void testDiameter()>:
		<org.jgrapht.alg.FloydWarshallShortestPathsTest.java:161, 57.14%>
	<org.jgrapht.alg.FloydWarshallShortestPathsTest: void testEdgeLessDiameter()>:
		<org.jgrapht.alg.FloydWarshallShortestPathsTest.java:182, 40.00%>
	<org.jgrapht.alg.FloydWarshallShortestPathsTest: void testEmptyDiameter()>:
		<org.jgrapht.alg.FloydWarshallShortestPathsTest.java:170, 50.00%>
	<org.jgrapht.alg.HamiltonianCycleTest: void testHamiltonianCycle()>:
		<org.jgrapht.alg.HamiltonianCycleTest.java:79, 33.33%>
		<org.jgrapht.alg.HamiltonianCycleTest.java:89, 27.78%>
	<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest: void testBipartiteMatching1()>:
		<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest.java:83, 6.76%>
		<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest.java:86, 6.76%>
	<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest: void testBipartiteMatching2()>:
		<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest.java:112, 5.21%>
		<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest.java:115, 5.21%>
	<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest: void testEmptyMatching()>:
		<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest.java:128, 33.33%>
	<org.jgrapht.alg.KSPDiscardsValidPathsTest: void testNot3connectedGraph()>:
		<org.jgrapht.alg.KSPDiscardsValidPathsTest.java:102, 87.50%>
	<org.jgrapht.alg.KSPExampleTest: void testFourReturnedPathsJGraphT()>:
		<org.jgrapht.alg.KSPExampleTest.java:60, 55.56%>
	<org.jgrapht.alg.KSPExampleTest: void testThreeReturnedPathsJGraphT()>:
		<org.jgrapht.alg.KSPExampleTest.java:72, 60.00%>
	<org.jgrapht.alg.KSPExampleTest: void testTwoReturnedPathsJGraphT()>:
		<org.jgrapht.alg.KSPExampleTest.java:84, 60.00%>
	<org.jgrapht.alg.KShortestPathCostTest: void verifyShortestPathsInIncreasingOrderOfWeight(org.jgrapht.Graph)>:
		<org.jgrapht.alg.KShortestPathCostTest.java:222, 30.77%>
		<org.jgrapht.alg.KShortestPathCostTest.java:225, 30.77%>
	<org.jgrapht.alg.KShortestPathCostTest: void verifyWeightsConsistency(java.util.List,java.util.List)>:
		<org.jgrapht.alg.KShortestPathCostTest.java:294, 53.85%>
	<org.jgrapht.alg.KShortestPathKValuesTest: void verifyNbPathsForAllPairsOfVertices(org.jgrapht.Graph)>:
		<org.jgrapht.alg.KShortestPathKValuesTest.java:148, 36.84%>
	<org.jgrapht.alg.KruskalMinimumSpanningTreeTest: void testMinimumSpanningTree()>:
		<org.jgrapht.alg.KruskalMinimumSpanningTreeTest.java:80, 19.05%>
		<org.jgrapht.alg.KruskalMinimumSpanningTreeTest.java:84, 38.10%>
	<org.jgrapht.alg.StoerWagnerMinimumCutTest: void testMinCut14()>:
		<org.jgrapht.alg.StoerWagnerMinimumCutTest.java:97, 16.67%>
	<org.jgrapht.alg.StoerWagnerMinimumCutTest: void testMinCutDisconnected()>:
		<org.jgrapht.alg.StoerWagnerMinimumCutTest.java:124, 22.73%>
	<org.jgrapht.alg.VertexCoversTest: void testFind2ApproximationCover()>:
		<org.jgrapht.alg.VertexCoversTest.java:74, 60.00%>
	<org.jgrapht.alg.VertexCoversTest: void testFindGreedyCover()>:
		<org.jgrapht.alg.VertexCoversTest.java:89, 50.00%>
	<org.jgrapht.experimental.GraphReaderTest: void testGraphReader()>:
		<org.jgrapht.experimental.GraphReaderTest.java:88, 27.27%>
	<org.jgrapht.experimental.GraphReaderTest: void testGraphReaderWeighted()>:
		<org.jgrapht.experimental.GraphReaderTest.java:116, 23.08%>
	<org.jgrapht.experimental.alg.ColoringTest: void testBacktrackColoring()>:
		<org.jgrapht.experimental.alg.ColoringTest.java:97, 50.00%>
	<org.jgrapht.experimental.alg.ColoringTest: void testGreedyColoring()>:
		<org.jgrapht.experimental.alg.ColoringTest.java:77, 50.00%>
	<org.jgrapht.experimental.equivalence.EquivalenceGroupCreatorTest: void testOneComparator(org.jgrapht.experimental.equivalence.EquivalenceComparator,int)>:
		<org.jgrapht.experimental.equivalence.EquivalenceGroupCreatorTest.java:152, 23.53%>
		<org.jgrapht.experimental.equivalence.EquivalenceGroupCreatorTest.java:157, 41.18%>
	<org.jgrapht.experimental.isomorphism.IsomorphismInspectorTest: void assertIsomorphic(org.jgrapht.Graph[],boolean,org.jgrapht.experimental.equivalence.EquivalenceComparator,org.jgrapht.experimental.equivalence.EquivalenceComparator)>:
		<org.jgrapht.experimental.isomorphism.IsomorphismInspectorTest.java:138, 28.57%>
		<org.jgrapht.experimental.isomorphism.IsomorphismInspectorTest.java:140, 28.57%>
	<org.jgrapht.experimental.permutation.CompoundPermutationIterTest: void testGetNext()>:
		<org.jgrapht.experimental.permutation.CompoundPermutationIterTest.java:96, 40.00%>
		<org.jgrapht.experimental.permutation.CompoundPermutationIterTest.java:127, 40.00%>
	<org.jgrapht.ext.DOTExporterTest: void testUndirected()>:
		<org.jgrapht.ext.DOTExporterTest.java:110, 41.67%>
	<org.jgrapht.ext.DOTExporterTest: void testValidNodeIDs()>:
		<org.jgrapht.ext.DOTExporterTest.java:149, 16.00%>
	<org.jgrapht.ext.GmlExporterTest: void testUndirected()>:
		<org.jgrapht.ext.GmlExporterTest.java:117, 62.50%>
	<org.jgrapht.ext.MatrixExporterTest: void testAdjacencyDirected()>:
		<org.jgrapht.ext.MatrixExporterTest.java:149, 62.50%>
	<org.jgrapht.ext.MatrixExporterTest: void testAdjacencyUndirected()>:
		<org.jgrapht.ext.MatrixExporterTest.java:133, 62.50%>
	<org.jgrapht.ext.MatrixExporterTest: void testLaplacian()>:
		<org.jgrapht.ext.MatrixExporterTest.java:113, 38.46%>
		<org.jgrapht.ext.MatrixExporterTest.java:117, 38.46%>
	<org.jgrapht.generate.GraphGeneratorTest: void testCompleteBipartiteGraphGenerator()>:
		<org.jgrapht.generate.GraphGeneratorTest.java:243, 50.00%>
		<org.jgrapht.generate.GraphGeneratorTest.java:244, 50.00%>
	<org.jgrapht.generate.GraphGeneratorTest: void testCompleteGraphGenerator()>:
		<org.jgrapht.generate.GraphGeneratorTest.java:185, 62.50%>
	<org.jgrapht.generate.GraphGeneratorTest: void testHyperCubeGraphGenerator()>:
		<org.jgrapht.generate.GraphGeneratorTest.java:265, 50.00%>
		<org.jgrapht.generate.GraphGeneratorTest.java:266, 50.00%>
	<org.jgrapht.generate.RandomGraphGeneratorTest: void testBadVertexFactory()>:
		<org.jgrapht.generate.RandomGraphGeneratorTest.java:106, 12.50%>
	<org.jgrapht.generate.RandomGraphGeneratorTest: void testGenerateDirectedGraph()>:
		<org.jgrapht.generate.RandomGraphGeneratorTest.java:70, 20.00%>
	<org.jgrapht.generate.RandomGraphGeneratorTest: void testGenerateListenableUndirectedGraph()>:
		<org.jgrapht.generate.RandomGraphGeneratorTest.java:89, 20.00%>
	<org.jgrapht.graph.AsUndirectedGraphTest: void testAddEdge()>:
		<org.jgrapht.graph.AsUndirectedGraphTest.java:89, 100.00%>
	<org.jgrapht.graph.AsUndirectedGraphTest: void testRemoveEdge()>:
		<org.jgrapht.graph.AsUndirectedGraphTest.java:155, 88.89%>
		<org.jgrapht.graph.AsUndirectedGraphTest.java:156, 111.11%>
	<org.jgrapht.graph.AsUnweightedGraphTest: void constructWeighted(org.jgrapht.WeightedGraph)>:
		<org.jgrapht.graph.AsUnweightedGraphTest.java:110, 57.14%>
	<org.jgrapht.graph.DefaultDirectedGraphTest: void testEdgesOf()>:
		<org.jgrapht.graph.DefaultDirectedGraphTest.java:117, 75.00%>
		<org.jgrapht.graph.DefaultDirectedGraphTest.java:118, 75.00%>
	<org.jgrapht.graph.DefaultDirectedGraphTest: void testGetAllEdges()>:
		<org.jgrapht.graph.DefaultDirectedGraphTest.java:130, 100.00%>
	<org.jgrapht.graph.DefaultDirectedGraphTest: void testInDegreeOf()>:
		<org.jgrapht.graph.DefaultDirectedGraphTest.java:141, 83.33%>
		<org.jgrapht.graph.DefaultDirectedGraphTest.java:142, 83.33%>
	<org.jgrapht.graph.DefaultDirectedGraphTest: void testOutDegreeOf()>:
		<org.jgrapht.graph.DefaultDirectedGraphTest.java:153, 83.33%>
		<org.jgrapht.graph.DefaultDirectedGraphTest.java:154, 83.33%>
	<org.jgrapht.graph.GenericGraphsTest: void testAlissaHacker()>:
		<org.jgrapht.graph.GenericGraphsTest.java:134, 83.33%>
	<org.jgrapht.graph.GenericGraphsTest: void testEqualButNotSameVertex()>:
		<org.jgrapht.graph.GenericGraphsTest.java:145, 40.00%>
		<org.jgrapht.graph.GenericGraphsTest.java:146, 40.00%>
	<org.jgrapht.graph.SimpleDirectedGraphTest: void testIncomingOutgoingEdgesOf()>:
		<org.jgrapht.graph.SimpleDirectedGraphTest.java:315, 128.57%>
	<org.jgrapht.graph.SubgraphTest: void testInducedSubgraphUnderlyingEdgeAddition()>:
		<org.jgrapht.graph.SubgraphTest.java:192, 20.00%>
	<org.jgrapht.traverse.AbstractGraphIteratorTest: void testDirectedGraph()>:
		<org.jgrapht.traverse.AbstractGraphIteratorTest.java:86, 47.06%>
		<org.jgrapht.traverse.AbstractGraphIteratorTest.java:88, 52.94%>
	<org.jgrapht.traverse.ClosestFirstIteratorTest: void testNoStart()>:
		<org.jgrapht.traverse.ClosestFirstIteratorTest.java:103, 53.85%>
	<org.jgrapht.traverse.ClosestFirstIteratorTest: void testRadius()>:
		<org.jgrapht.traverse.ClosestFirstIteratorTest.java:80, 53.85%>
	<org.jgrapht.traverse.DepthFirstIteratorTest: void testBug1169182()>:
		<org.jgrapht.traverse.DepthFirstIteratorTest.java:149, 16.00%>
	<org.jgrapht.traverse.TopologicalOrderIteratorTest: void testEmptyGraph()>:
		<org.jgrapht.traverse.TopologicalOrderIteratorTest.java:136, 50.00%>
	<org.jgrapht.traverse.TopologicalOrderIteratorTest: void testRecipe()>:
		<org.jgrapht.traverse.TopologicalOrderIteratorTest.java:109, 9.62%>
		<org.jgrapht.traverse.TopologicalOrderIteratorTest.java:121, 9.62%>
	<org.jgrapht.util.FibonacciHeapTest: void testGrowReplaceShrink()>:
		<org.jgrapht.util.FibonacciHeapTest.java:88, 17.65%>
		<org.jgrapht.util.FibonacciHeapTest.java:91, 17.65%>
	<org.jgrapht.util.PrefetchIteratorTest: void testEnumInterface()>:
		<org.jgrapht.util.PrefetchIteratorTest.java:71, 33.33%>
		<org.jgrapht.util.PrefetchIteratorTest.java:72, 41.67%>
		<org.jgrapht.util.PrefetchIteratorTest.java:74, 33.33%>
		<org.jgrapht.util.PrefetchIteratorTest.java:81, 16.67%>
	<org.jgrapht.util.PrefetchIteratorTest: void testIteratorInterface()>:
		<org.jgrapht.util.PrefetchIteratorTest.java:54, 33.33%>
		<org.jgrapht.util.PrefetchIteratorTest.java:55, 41.67%>
		<org.jgrapht.util.PrefetchIteratorTest.java:57, 33.33%>
		<org.jgrapht.util.PrefetchIteratorTest.java:64, 16.67%>

Relevant Assertion clone sets (8):
Set (score: 1.00, ccsize: 2, packages: 1, classes: 1): 
	<org.jgrapht.alg.VertexCoversTest: void testFind2ApproximationCover()>:
		<org.jgrapht.alg.VertexCoversTest.java:74, 60.00%>
	<org.jgrapht.alg.VertexCoversTest: void testFindGreedyCover()>:
		<org.jgrapht.alg.VertexCoversTest.java:89, 50.00%>
Set (score: 1.00, ccsize: 2, packages: 1, classes: 1): 
	<org.jgrapht.experimental.GraphReaderTest: void testGraphReader()>:
		<org.jgrapht.experimental.GraphReaderTest.java:88, 27.27%>
	<org.jgrapht.experimental.GraphReaderTest: void testGraphReaderWeighted()>:
		<org.jgrapht.experimental.GraphReaderTest.java:116, 23.08%>
Set (score: 0.67, ccsize: 3, packages: 1, classes: 2): 
	<org.jgrapht.alg.BiconnectivityInspectorTest: void testLinearGraph(int)>:
		<org.jgrapht.alg.BiconnectivityInspectorTest.java:88, 40.00%>
	<org.jgrapht.alg.BlockCutpointGraphTest: void testLinearGraph(int)>:
		<org.jgrapht.alg.BlockCutpointGraphTest.java:121, 33.33%>
		<org.jgrapht.alg.BlockCutpointGraphTest.java:125, 33.33%>
Set (score: 0.67, ccsize: 3, packages: 1, classes: 2): 
	<org.jgrapht.alg.BiconnectivityInspectorTest: void testNotBiconnected()>:
		<org.jgrapht.alg.BiconnectivityInspectorTest.java:100, 55.56%>
	<org.jgrapht.alg.BlockCutpointGraphTest: void testNotBiconnected()>:
		<org.jgrapht.alg.BlockCutpointGraphTest.java:135, 41.67%>
		<org.jgrapht.alg.BlockCutpointGraphTest.java:139, 41.67%>
Set (score: 0.67, ccsize: 2, packages: 1, classes: 2): 
	<org.jgrapht.ext.DOTExporterTest: void testUndirected()>:
		<org.jgrapht.ext.DOTExporterTest.java:110, 41.67%>
	<org.jgrapht.ext.GmlExporterTest: void testUndirected()>:
		<org.jgrapht.ext.GmlExporterTest.java:117, 62.50%>
Set (score: 0.67, ccsize: 2, packages: 1, classes: 1): 
	<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest: void testBipartiteMatching1()>:
		<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest.java:86, 6.76%>
	<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest: void testBipartiteMatching2()>:
		<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest.java:115, 5.21%>
Set (score: 0.50, ccsize: 3, packages: 1, classes: 1): 
	<org.jgrapht.alg.KSPExampleTest: void testFourReturnedPathsJGraphT()>:
		<org.jgrapht.alg.KSPExampleTest.java:60, 55.56%>
	<org.jgrapht.alg.KSPExampleTest: void testThreeReturnedPathsJGraphT()>:
		<org.jgrapht.alg.KSPExampleTest.java:72, 60.00%>
	<org.jgrapht.alg.KSPExampleTest: void testTwoReturnedPathsJGraphT()>:
		<org.jgrapht.alg.KSPExampleTest.java:84, 60.00%>
Set (score: 0.50, ccsize: 2, packages: 1, classes: 1): 
	<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest: void testBipartiteMatching1()>:
		<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest.java:83, 6.76%>
	<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest: void testBipartiteMatching2()>:
		<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest.java:112, 5.21%>
==============================================

[139] Set (editDistance: 2, isComplete: false, packages: 12, classes: 38): 
Centroid (size: 2): <org.jgrapht.graph.AsUndirectedGraphTest: void testRemoveVertex()>

Methods (71): 
	<org.jgrapht.EnhancedTestCase: void assertFalse()>:
		<org.jgrapht.EnhancedTestCase.java:79, 100.00%>
	<org.jgrapht.EnhancedTestCase: void assertTrue()>:
		<org.jgrapht.EnhancedTestCase.java:87, 100.00%>
	<org.jgrapht.alg.BellmanFordShortestPathTest: void testWithNegativeEdges()>:
		<org.jgrapht.alg.BellmanFordShortestPathTest.java:120, 45.45%>
		<org.jgrapht.alg.BellmanFordShortestPathTest.java:127, 63.64%>
	<org.jgrapht.alg.BiconnectivityInspectorTest: void testLinearGraph(int)>:
		<org.jgrapht.alg.BiconnectivityInspectorTest.java:88, 40.00%>
		<org.jgrapht.alg.BiconnectivityInspectorTest.java:89, 40.00%>
	<org.jgrapht.alg.BiconnectivityInspectorTest: void testNotBiconnected()>:
		<org.jgrapht.alg.BiconnectivityInspectorTest.java:100, 55.56%>
		<org.jgrapht.alg.BiconnectivityInspectorTest.java:101, 55.56%>
	<org.jgrapht.alg.BlockCutpointGraphTest: void testBiconnected()>:
		<org.jgrapht.alg.BlockCutpointGraphTest.java:67, 41.67%>
		<org.jgrapht.alg.BlockCutpointGraphTest.java:71, 41.67%>
	<org.jgrapht.alg.BlockCutpointGraphTest: void testGetBlock(org.jgrapht.alg.BlockCutpointGraph)>:
		<org.jgrapht.alg.BlockCutpointGraphTest.java:88, 33.33%>
		<org.jgrapht.alg.BlockCutpointGraphTest.java:94, 19.05%>
	<org.jgrapht.alg.BlockCutpointGraphTest: void testLinearGraph(int)>:
		<org.jgrapht.alg.BlockCutpointGraphTest.java:121, 33.33%>
		<org.jgrapht.alg.BlockCutpointGraphTest.java:125, 33.33%>
	<org.jgrapht.alg.BlockCutpointGraphTest: void testNotBiconnected()>:
		<org.jgrapht.alg.BlockCutpointGraphTest.java:135, 41.67%>
		<org.jgrapht.alg.BlockCutpointGraphTest.java:139, 41.67%>
	<org.jgrapht.alg.BronKerboschCliqueFinderTest: void testFindAll()>:
		<org.jgrapht.alg.BronKerboschCliqueFinderTest.java:143, 26.32%>
		<org.jgrapht.alg.BronKerboschCliqueFinderTest.java:175, 21.05%>
	<org.jgrapht.alg.BronKerboschCliqueFinderTest: void testFindBiggest()>:
		<org.jgrapht.alg.BronKerboschCliqueFinderTest.java:119, 41.67%>
		<org.jgrapht.alg.BronKerboschCliqueFinderTest.java:129, 58.33%>
	<org.jgrapht.alg.ConnectivityInspectorTest: void testStronglyConnected4()>:
		<org.jgrapht.alg.ConnectivityInspectorTest.java:371, 30.77%>
	<org.jgrapht.alg.FloydWarshallShortestPathsTest: void testCompareWithDijkstra()>:
		<org.jgrapht.alg.FloydWarshallShortestPathsTest.java:96, 7.41%>
		<org.jgrapht.alg.FloydWarshallShortestPathsTest.java:121, 7.41%>
	<org.jgrapht.alg.FloydWarshallShortestPathsTest: void testDiameter()>:
		<org.jgrapht.alg.FloydWarshallShortestPathsTest.java:161, 57.14%>
	<org.jgrapht.alg.FloydWarshallShortestPathsTest: void testEdgeLessDiameter()>:
		<org.jgrapht.alg.FloydWarshallShortestPathsTest.java:182, 40.00%>
	<org.jgrapht.alg.FloydWarshallShortestPathsTest: void testEmptyDiameter()>:
		<org.jgrapht.alg.FloydWarshallShortestPathsTest.java:170, 50.00%>
	<org.jgrapht.alg.HamiltonianCycleTest: void testHamiltonianCycle()>:
		<org.jgrapht.alg.HamiltonianCycleTest.java:79, 33.33%>
		<org.jgrapht.alg.HamiltonianCycleTest.java:89, 27.78%>
	<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest: void testBipartiteMatching1()>:
		<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest.java:83, 6.76%>
		<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest.java:86, 6.76%>
	<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest: void testBipartiteMatching2()>:
		<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest.java:112, 5.21%>
		<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest.java:115, 5.21%>
	<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest: void testEmptyMatching()>:
		<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest.java:128, 33.33%>
	<org.jgrapht.alg.KSPDiscardsValidPathsTest: void testNot3connectedGraph()>:
		<org.jgrapht.alg.KSPDiscardsValidPathsTest.java:102, 87.50%>
	<org.jgrapht.alg.KSPExampleTest: void testFourReturnedPathsJGraphT()>:
		<org.jgrapht.alg.KSPExampleTest.java:60, 55.56%>
	<org.jgrapht.alg.KSPExampleTest: void testThreeReturnedPathsJGraphT()>:
		<org.jgrapht.alg.KSPExampleTest.java:72, 60.00%>
	<org.jgrapht.alg.KSPExampleTest: void testTwoReturnedPathsJGraphT()>:
		<org.jgrapht.alg.KSPExampleTest.java:84, 60.00%>
	<org.jgrapht.alg.KShortestPathCostTest: void verifyShortestPathsInIncreasingOrderOfWeight(org.jgrapht.Graph)>:
		<org.jgrapht.alg.KShortestPathCostTest.java:222, 30.77%>
		<org.jgrapht.alg.KShortestPathCostTest.java:225, 30.77%>
	<org.jgrapht.alg.KShortestPathCostTest: void verifyWeightsConsistency(java.util.List,java.util.List)>:
		<org.jgrapht.alg.KShortestPathCostTest.java:294, 53.85%>
	<org.jgrapht.alg.KShortestPathKValuesTest: void verifyNbPathsForAllPairsOfVertices(org.jgrapht.Graph)>:
		<org.jgrapht.alg.KShortestPathKValuesTest.java:148, 36.84%>
	<org.jgrapht.alg.KruskalMinimumSpanningTreeTest: void testMinimumSpanningTree()>:
		<org.jgrapht.alg.KruskalMinimumSpanningTreeTest.java:80, 19.05%>
		<org.jgrapht.alg.KruskalMinimumSpanningTreeTest.java:84, 38.10%>
	<org.jgrapht.alg.StoerWagnerMinimumCutTest: void testMinCut14()>:
		<org.jgrapht.alg.StoerWagnerMinimumCutTest.java:97, 16.67%>
	<org.jgrapht.alg.StoerWagnerMinimumCutTest: void testMinCutDisconnected()>:
		<org.jgrapht.alg.StoerWagnerMinimumCutTest.java:124, 22.73%>
	<org.jgrapht.alg.VertexCoversTest: void testFind2ApproximationCover()>:
		<org.jgrapht.alg.VertexCoversTest.java:74, 60.00%>
	<org.jgrapht.alg.VertexCoversTest: void testFindGreedyCover()>:
		<org.jgrapht.alg.VertexCoversTest.java:89, 50.00%>
	<org.jgrapht.experimental.GraphReaderTest: void testGraphReader()>:
		<org.jgrapht.experimental.GraphReaderTest.java:88, 27.27%>
	<org.jgrapht.experimental.GraphReaderTest: void testGraphReaderWeighted()>:
		<org.jgrapht.experimental.GraphReaderTest.java:116, 23.08%>
	<org.jgrapht.experimental.alg.ColoringTest: void testBacktrackColoring()>:
		<org.jgrapht.experimental.alg.ColoringTest.java:97, 50.00%>
	<org.jgrapht.experimental.alg.ColoringTest: void testGreedyColoring()>:
		<org.jgrapht.experimental.alg.ColoringTest.java:77, 50.00%>
	<org.jgrapht.experimental.equivalence.EquivalenceGroupCreatorTest: void testOneComparator(org.jgrapht.experimental.equivalence.EquivalenceComparator,int)>:
		<org.jgrapht.experimental.equivalence.EquivalenceGroupCreatorTest.java:152, 23.53%>
		<org.jgrapht.experimental.equivalence.EquivalenceGroupCreatorTest.java:157, 41.18%>
	<org.jgrapht.experimental.isomorphism.IsomorphismInspectorTest: void assertIsomorphic(org.jgrapht.Graph[],boolean,org.jgrapht.experimental.equivalence.EquivalenceComparator,org.jgrapht.experimental.equivalence.EquivalenceComparator)>:
		<org.jgrapht.experimental.isomorphism.IsomorphismInspectorTest.java:138, 28.57%>
		<org.jgrapht.experimental.isomorphism.IsomorphismInspectorTest.java:140, 28.57%>
	<org.jgrapht.experimental.permutation.CompoundPermutationIterTest: void testGetNext()>:
		<org.jgrapht.experimental.permutation.CompoundPermutationIterTest.java:96, 40.00%>
		<org.jgrapht.experimental.permutation.CompoundPermutationIterTest.java:127, 40.00%>
	<org.jgrapht.ext.DOTExporterTest: void testUndirected()>:
		<org.jgrapht.ext.DOTExporterTest.java:110, 41.67%>
	<org.jgrapht.ext.DOTExporterTest: void testValidNodeIDs()>:
		<org.jgrapht.ext.DOTExporterTest.java:149, 16.00%>
	<org.jgrapht.ext.GmlExporterTest: void testUndirected()>:
		<org.jgrapht.ext.GmlExporterTest.java:117, 62.50%>
	<org.jgrapht.ext.MatrixExporterTest: void testAdjacencyDirected()>:
		<org.jgrapht.ext.MatrixExporterTest.java:149, 62.50%>
	<org.jgrapht.ext.MatrixExporterTest: void testAdjacencyUndirected()>:
		<org.jgrapht.ext.MatrixExporterTest.java:133, 62.50%>
	<org.jgrapht.ext.MatrixExporterTest: void testLaplacian()>:
		<org.jgrapht.ext.MatrixExporterTest.java:113, 38.46%>
		<org.jgrapht.ext.MatrixExporterTest.java:117, 38.46%>
	<org.jgrapht.generate.GraphGeneratorTest: void testCompleteBipartiteGraphGenerator()>:
		<org.jgrapht.generate.GraphGeneratorTest.java:243, 50.00%>
		<org.jgrapht.generate.GraphGeneratorTest.java:244, 50.00%>
	<org.jgrapht.generate.GraphGeneratorTest: void testCompleteGraphGenerator()>:
		<org.jgrapht.generate.GraphGeneratorTest.java:185, 62.50%>
	<org.jgrapht.generate.GraphGeneratorTest: void testHyperCubeGraphGenerator()>:
		<org.jgrapht.generate.GraphGeneratorTest.java:265, 50.00%>
		<org.jgrapht.generate.GraphGeneratorTest.java:266, 50.00%>
	<org.jgrapht.generate.RandomGraphGeneratorTest: void testBadVertexFactory()>:
		<org.jgrapht.generate.RandomGraphGeneratorTest.java:106, 12.50%>
	<org.jgrapht.generate.RandomGraphGeneratorTest: void testGenerateDirectedGraph()>:
		<org.jgrapht.generate.RandomGraphGeneratorTest.java:70, 20.00%>
	<org.jgrapht.generate.RandomGraphGeneratorTest: void testGenerateListenableUndirectedGraph()>:
		<org.jgrapht.generate.RandomGraphGeneratorTest.java:89, 20.00%>
	<org.jgrapht.graph.AsUndirectedGraphTest: void testAddEdge()>:
		<org.jgrapht.graph.AsUndirectedGraphTest.java:89, 100.00%>
	<org.jgrapht.graph.AsUndirectedGraphTest: void testRemoveVertex()>:
		<org.jgrapht.graph.AsUndirectedGraphTest.java:165, 88.89%>
		<org.jgrapht.graph.AsUndirectedGraphTest.java:166, 111.11%>
	<org.jgrapht.graph.AsUnweightedGraphTest: void constructWeighted(org.jgrapht.WeightedGraph)>:
		<org.jgrapht.graph.AsUnweightedGraphTest.java:110, 57.14%>
	<org.jgrapht.graph.DefaultDirectedGraphTest: void testEdgesOf()>:
		<org.jgrapht.graph.DefaultDirectedGraphTest.java:117, 75.00%>
		<org.jgrapht.graph.DefaultDirectedGraphTest.java:118, 75.00%>
	<org.jgrapht.graph.DefaultDirectedGraphTest: void testGetAllEdges()>:
		<org.jgrapht.graph.DefaultDirectedGraphTest.java:130, 100.00%>
	<org.jgrapht.graph.DefaultDirectedGraphTest: void testInDegreeOf()>:
		<org.jgrapht.graph.DefaultDirectedGraphTest.java:141, 83.33%>
		<org.jgrapht.graph.DefaultDirectedGraphTest.java:142, 83.33%>
	<org.jgrapht.graph.DefaultDirectedGraphTest: void testOutDegreeOf()>:
		<org.jgrapht.graph.DefaultDirectedGraphTest.java:153, 83.33%>
		<org.jgrapht.graph.DefaultDirectedGraphTest.java:154, 83.33%>
	<org.jgrapht.graph.GenericGraphsTest: void testAlissaHacker()>:
		<org.jgrapht.graph.GenericGraphsTest.java:134, 83.33%>
	<org.jgrapht.graph.GenericGraphsTest: void testEqualButNotSameVertex()>:
		<org.jgrapht.graph.GenericGraphsTest.java:145, 40.00%>
		<org.jgrapht.graph.GenericGraphsTest.java:146, 40.00%>
	<org.jgrapht.graph.SimpleDirectedGraphTest: void testIncomingOutgoingEdgesOf()>:
		<org.jgrapht.graph.SimpleDirectedGraphTest.java:315, 128.57%>
	<org.jgrapht.graph.SubgraphTest: void testInducedSubgraphUnderlyingEdgeAddition()>:
		<org.jgrapht.graph.SubgraphTest.java:192, 20.00%>
	<org.jgrapht.traverse.AbstractGraphIteratorTest: void testDirectedGraph()>:
		<org.jgrapht.traverse.AbstractGraphIteratorTest.java:86, 47.06%>
		<org.jgrapht.traverse.AbstractGraphIteratorTest.java:88, 52.94%>
	<org.jgrapht.traverse.ClosestFirstIteratorTest: void testNoStart()>:
		<org.jgrapht.traverse.ClosestFirstIteratorTest.java:103, 53.85%>
	<org.jgrapht.traverse.ClosestFirstIteratorTest: void testRadius()>:
		<org.jgrapht.traverse.ClosestFirstIteratorTest.java:80, 53.85%>
	<org.jgrapht.traverse.DepthFirstIteratorTest: void testBug1169182()>:
		<org.jgrapht.traverse.DepthFirstIteratorTest.java:149, 16.00%>
	<org.jgrapht.traverse.TopologicalOrderIteratorTest: void testEmptyGraph()>:
		<org.jgrapht.traverse.TopologicalOrderIteratorTest.java:136, 50.00%>
	<org.jgrapht.traverse.TopologicalOrderIteratorTest: void testRecipe()>:
		<org.jgrapht.traverse.TopologicalOrderIteratorTest.java:109, 9.62%>
		<org.jgrapht.traverse.TopologicalOrderIteratorTest.java:121, 9.62%>
	<org.jgrapht.util.FibonacciHeapTest: void testGrowReplaceShrink()>:
		<org.jgrapht.util.FibonacciHeapTest.java:88, 17.65%>
		<org.jgrapht.util.FibonacciHeapTest.java:91, 17.65%>
	<org.jgrapht.util.PrefetchIteratorTest: void testEnumInterface()>:
		<org.jgrapht.util.PrefetchIteratorTest.java:71, 33.33%>
		<org.jgrapht.util.PrefetchIteratorTest.java:72, 41.67%>
		<org.jgrapht.util.PrefetchIteratorTest.java:74, 33.33%>
		<org.jgrapht.util.PrefetchIteratorTest.java:81, 16.67%>
	<org.jgrapht.util.PrefetchIteratorTest: void testIteratorInterface()>:
		<org.jgrapht.util.PrefetchIteratorTest.java:54, 33.33%>
		<org.jgrapht.util.PrefetchIteratorTest.java:55, 41.67%>
		<org.jgrapht.util.PrefetchIteratorTest.java:57, 33.33%>
		<org.jgrapht.util.PrefetchIteratorTest.java:64, 16.67%>

Relevant Assertion clone sets (8):
Set (score: 1.00, ccsize: 2, packages: 1, classes: 1): 
	<org.jgrapht.alg.VertexCoversTest: void testFind2ApproximationCover()>:
		<org.jgrapht.alg.VertexCoversTest.java:74, 60.00%>
	<org.jgrapht.alg.VertexCoversTest: void testFindGreedyCover()>:
		<org.jgrapht.alg.VertexCoversTest.java:89, 50.00%>
Set (score: 1.00, ccsize: 2, packages: 1, classes: 1): 
	<org.jgrapht.experimental.GraphReaderTest: void testGraphReader()>:
		<org.jgrapht.experimental.GraphReaderTest.java:88, 27.27%>
	<org.jgrapht.experimental.GraphReaderTest: void testGraphReaderWeighted()>:
		<org.jgrapht.experimental.GraphReaderTest.java:116, 23.08%>
Set (score: 0.67, ccsize: 3, packages: 1, classes: 2): 
	<org.jgrapht.alg.BiconnectivityInspectorTest: void testLinearGraph(int)>:
		<org.jgrapht.alg.BiconnectivityInspectorTest.java:88, 40.00%>
	<org.jgrapht.alg.BlockCutpointGraphTest: void testLinearGraph(int)>:
		<org.jgrapht.alg.BlockCutpointGraphTest.java:121, 33.33%>
		<org.jgrapht.alg.BlockCutpointGraphTest.java:125, 33.33%>
Set (score: 0.67, ccsize: 3, packages: 1, classes: 2): 
	<org.jgrapht.alg.BiconnectivityInspectorTest: void testNotBiconnected()>:
		<org.jgrapht.alg.BiconnectivityInspectorTest.java:100, 55.56%>
	<org.jgrapht.alg.BlockCutpointGraphTest: void testNotBiconnected()>:
		<org.jgrapht.alg.BlockCutpointGraphTest.java:135, 41.67%>
		<org.jgrapht.alg.BlockCutpointGraphTest.java:139, 41.67%>
Set (score: 0.67, ccsize: 2, packages: 1, classes: 2): 
	<org.jgrapht.ext.DOTExporterTest: void testUndirected()>:
		<org.jgrapht.ext.DOTExporterTest.java:110, 41.67%>
	<org.jgrapht.ext.GmlExporterTest: void testUndirected()>:
		<org.jgrapht.ext.GmlExporterTest.java:117, 62.50%>
Set (score: 0.67, ccsize: 2, packages: 1, classes: 1): 
	<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest: void testBipartiteMatching1()>:
		<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest.java:86, 6.76%>
	<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest: void testBipartiteMatching2()>:
		<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest.java:115, 5.21%>
Set (score: 0.50, ccsize: 3, packages: 1, classes: 1): 
	<org.jgrapht.alg.KSPExampleTest: void testFourReturnedPathsJGraphT()>:
		<org.jgrapht.alg.KSPExampleTest.java:60, 55.56%>
	<org.jgrapht.alg.KSPExampleTest: void testThreeReturnedPathsJGraphT()>:
		<org.jgrapht.alg.KSPExampleTest.java:72, 60.00%>
	<org.jgrapht.alg.KSPExampleTest: void testTwoReturnedPathsJGraphT()>:
		<org.jgrapht.alg.KSPExampleTest.java:84, 60.00%>
Set (score: 0.50, ccsize: 2, packages: 1, classes: 1): 
	<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest: void testBipartiteMatching1()>:
		<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest.java:83, 6.76%>
	<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest: void testBipartiteMatching2()>:
		<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest.java:112, 5.21%>
==============================================

[140] Set (editDistance: 2, isComplete: false, packages: 12, classes: 36): 
Centroid (size: 2): <org.jgrapht.graph.DefaultDirectedGraphTest: void testEdgesOf()>

Methods (66): 
	<org.jgrapht.EnhancedTestCase: void assertFalse()>:
		<org.jgrapht.EnhancedTestCase.java:79, 100.00%>
	<org.jgrapht.EnhancedTestCase: void assertTrue()>:
		<org.jgrapht.EnhancedTestCase.java:87, 100.00%>
	<org.jgrapht.alg.BellmanFordShortestPathTest: void testWithNegativeEdges()>:
		<org.jgrapht.alg.BellmanFordShortestPathTest.java:120, 45.45%>
		<org.jgrapht.alg.BellmanFordShortestPathTest.java:127, 63.64%>
	<org.jgrapht.alg.BlockCutpointGraphTest: void testGetBlock(org.jgrapht.alg.BlockCutpointGraph)>:
		<org.jgrapht.alg.BlockCutpointGraphTest.java:88, 33.33%>
		<org.jgrapht.alg.BlockCutpointGraphTest.java:94, 19.05%>
	<org.jgrapht.alg.ConnectivityInspectorTest: void testDirectedGraph()>:
		<org.jgrapht.alg.ConnectivityInspectorTest.java:139, 57.14%>
		<org.jgrapht.alg.ConnectivityInspectorTest.java:143, 57.14%>
	<org.jgrapht.alg.ConnectivityInspectorTest: void testStronglyConnected4()>:
		<org.jgrapht.alg.ConnectivityInspectorTest.java:371, 30.77%>
	<org.jgrapht.alg.EdmondsBlossomShrinkingTest: void testOne()>:
		<org.jgrapht.alg.EdmondsBlossomShrinkingTest.java:80, 23.81%>
		<org.jgrapht.alg.EdmondsBlossomShrinkingTest.java:81, 19.05%>
		<org.jgrapht.alg.EdmondsBlossomShrinkingTest.java:82, 19.05%>
	<org.jgrapht.alg.FloydWarshallShortestPathsTest: void testCompareWithDijkstra()>:
		<org.jgrapht.alg.FloydWarshallShortestPathsTest.java:96, 7.41%>
		<org.jgrapht.alg.FloydWarshallShortestPathsTest.java:121, 7.41%>
	<org.jgrapht.alg.FloydWarshallShortestPathsTest: void testDiameter()>:
		<org.jgrapht.alg.FloydWarshallShortestPathsTest.java:161, 57.14%>
	<org.jgrapht.alg.FloydWarshallShortestPathsTest: void testEdgeLessDiameter()>:
		<org.jgrapht.alg.FloydWarshallShortestPathsTest.java:182, 40.00%>
	<org.jgrapht.alg.FloydWarshallShortestPathsTest: void testEmptyDiameter()>:
		<org.jgrapht.alg.FloydWarshallShortestPathsTest.java:170, 50.00%>
	<org.jgrapht.alg.HamiltonianCycleTest: void testHamiltonianCycle()>:
		<org.jgrapht.alg.HamiltonianCycleTest.java:79, 33.33%>
		<org.jgrapht.alg.HamiltonianCycleTest.java:89, 27.78%>
	<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest: void testBipartiteMatching1()>:
		<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest.java:83, 6.76%>
		<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest.java:86, 6.76%>
	<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest: void testBipartiteMatching2()>:
		<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest.java:112, 5.21%>
		<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest.java:115, 5.21%>
	<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest: void testEmptyMatching()>:
		<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest.java:128, 33.33%>
	<org.jgrapht.alg.KSPDiscardsValidPathsTest: void testNot3connectedGraph()>:
		<org.jgrapht.alg.KSPDiscardsValidPathsTest.java:102, 87.50%>
	<org.jgrapht.alg.KShortestPathCostTest: void verifyShortestPathsInIncreasingOrderOfWeight(org.jgrapht.Graph)>:
		<org.jgrapht.alg.KShortestPathCostTest.java:222, 30.77%>
		<org.jgrapht.alg.KShortestPathCostTest.java:225, 30.77%>
	<org.jgrapht.alg.KShortestPathCostTest: void verifyWeightsConsistency(java.util.List,java.util.List)>:
		<org.jgrapht.alg.KShortestPathCostTest.java:294, 53.85%>
	<org.jgrapht.alg.KShortestPathKValuesTest: void verifyNbPathsForAllPairsOfVertices(org.jgrapht.Graph)>:
		<org.jgrapht.alg.KShortestPathKValuesTest.java:148, 36.84%>
	<org.jgrapht.alg.KruskalMinimumSpanningTreeTest: void testMinimumSpanningTree()>:
		<org.jgrapht.alg.KruskalMinimumSpanningTreeTest.java:80, 19.05%>
		<org.jgrapht.alg.KruskalMinimumSpanningTreeTest.java:84, 38.10%>
	<org.jgrapht.alg.StoerWagnerMinimumCutTest: void testMinCut14()>:
		<org.jgrapht.alg.StoerWagnerMinimumCutTest.java:97, 16.67%>
	<org.jgrapht.alg.StoerWagnerMinimumCutTest: void testMinCutDisconnected()>:
		<org.jgrapht.alg.StoerWagnerMinimumCutTest.java:124, 22.73%>
	<org.jgrapht.alg.TransitiveClosureTest: void testLinearGraph()>:
		<org.jgrapht.alg.TransitiveClosureTest.java:75, 47.83%>
		<org.jgrapht.alg.TransitiveClosureTest.java:78, 43.48%>
	<org.jgrapht.alg.TransitiveClosureTest: void testRingGraph()>:
		<org.jgrapht.alg.TransitiveClosureTest.java:107, 45.45%>
		<org.jgrapht.alg.TransitiveClosureTest.java:110, 50.00%>
	<org.jgrapht.alg.VertexCoversTest: void testFind2ApproximationCover()>:
		<org.jgrapht.alg.VertexCoversTest.java:74, 60.00%>
	<org.jgrapht.alg.VertexCoversTest: void testFindGreedyCover()>:
		<org.jgrapht.alg.VertexCoversTest.java:89, 50.00%>
	<org.jgrapht.alg.util.UnionFindTest: void testIdentical(java.lang.String[],java.util.ArrayList,org.jgrapht.alg.util.UnionFind)>:
		<org.jgrapht.alg.util.UnionFindTest.java:131, 41.18%>
	<org.jgrapht.experimental.GraphReaderTest: void testGraphReader()>:
		<org.jgrapht.experimental.GraphReaderTest.java:88, 27.27%>
	<org.jgrapht.experimental.GraphReaderTest: void testGraphReaderWeighted()>:
		<org.jgrapht.experimental.GraphReaderTest.java:116, 23.08%>
	<org.jgrapht.experimental.alg.ColoringTest: void testBacktrackColoring()>:
		<org.jgrapht.experimental.alg.ColoringTest.java:97, 50.00%>
	<org.jgrapht.experimental.alg.ColoringTest: void testGreedyColoring()>:
		<org.jgrapht.experimental.alg.ColoringTest.java:77, 50.00%>
	<org.jgrapht.experimental.dag.DirectedAcyclicGraphTest: void testTopoIterationOrderLinearGraph()>:
		<org.jgrapht.experimental.dag.DirectedAcyclicGraphTest.java:181, 29.41%>
		<org.jgrapht.experimental.dag.DirectedAcyclicGraphTest.java:182, 41.18%>
	<org.jgrapht.experimental.isomorphism.IsomorphismInspectorTest: void assertIsomorphic(org.jgrapht.Graph[],boolean,org.jgrapht.experimental.equivalence.EquivalenceComparator,org.jgrapht.experimental.equivalence.EquivalenceComparator)>:
		<org.jgrapht.experimental.isomorphism.IsomorphismInspectorTest.java:138, 28.57%>
		<org.jgrapht.experimental.isomorphism.IsomorphismInspectorTest.java:140, 28.57%>
	<org.jgrapht.experimental.isomorphism.IsomorphismInspectorTest: void assertIsomorphicStopAfterFirstMatch(org.jgrapht.Graph[],boolean,boolean,org.jgrapht.experimental.equivalence.EquivalenceComparator,org.jgrapht.experimental.equivalence.EquivalenceComparator)>:
		<org.jgrapht.experimental.isomorphism.IsomorphismInspectorTest.java:485, 14.71%>
	<org.jgrapht.ext.DOTExporterTest: void testUndirected()>:
		<org.jgrapht.ext.DOTExporterTest.java:110, 41.67%>
	<org.jgrapht.ext.DOTExporterTest: void testValidNodeIDs()>:
		<org.jgrapht.ext.DOTExporterTest.java:149, 16.00%>
	<org.jgrapht.ext.GmlExporterTest: void testUndirected()>:
		<org.jgrapht.ext.GmlExporterTest.java:117, 62.50%>
	<org.jgrapht.ext.MatrixExporterTest: void testAdjacencyDirected()>:
		<org.jgrapht.ext.MatrixExporterTest.java:149, 62.50%>
	<org.jgrapht.ext.MatrixExporterTest: void testAdjacencyUndirected()>:
		<org.jgrapht.ext.MatrixExporterTest.java:133, 62.50%>
	<org.jgrapht.ext.MatrixExporterTest: void testLaplacian()>:
		<org.jgrapht.ext.MatrixExporterTest.java:113, 38.46%>
		<org.jgrapht.ext.MatrixExporterTest.java:117, 38.46%>
	<org.jgrapht.generate.RandomGraphGeneratorTest: void testBadVertexFactory()>:
		<org.jgrapht.generate.RandomGraphGeneratorTest.java:106, 12.50%>
	<org.jgrapht.generate.RandomGraphGeneratorTest: void testGenerateDirectedGraph()>:
		<org.jgrapht.generate.RandomGraphGeneratorTest.java:70, 20.00%>
	<org.jgrapht.generate.RandomGraphGeneratorTest: void testGenerateListenableUndirectedGraph()>:
		<org.jgrapht.generate.RandomGraphGeneratorTest.java:89, 20.00%>
	<org.jgrapht.graph.AsUndirectedGraphTest: void testAddEdge()>:
		<org.jgrapht.graph.AsUndirectedGraphTest.java:89, 100.00%>
	<org.jgrapht.graph.AsUndirectedGraphTest: void testAddVertex()>:
		<org.jgrapht.graph.AsUndirectedGraphTest.java:102, 85.71%>
		<org.jgrapht.graph.AsUndirectedGraphTest.java:103, 100.00%>
	<org.jgrapht.graph.AsUndirectedGraphTest: void testDegreeOf()>:
		<org.jgrapht.graph.AsUndirectedGraphTest.java:111, 46.15%>
		<org.jgrapht.graph.AsUndirectedGraphTest.java:112, 61.54%>
		<org.jgrapht.graph.AsUndirectedGraphTest.java:113, 76.92%>
		<org.jgrapht.graph.AsUndirectedGraphTest.java:114, 92.31%>
	<org.jgrapht.graph.AsUndirectedGraphTest: void testGetAllEdges()>:
		<org.jgrapht.graph.AsUndirectedGraphTest.java:123, 40.00%>
		<org.jgrapht.graph.AsUndirectedGraphTest.java:124, 65.00%>
		<org.jgrapht.graph.AsUndirectedGraphTest.java:128, 70.00%>
		<org.jgrapht.graph.AsUndirectedGraphTest.java:129, 80.00%>
	<org.jgrapht.graph.AsUndirectedGraphTest: void testRemoveEdge()>:
		<org.jgrapht.graph.AsUndirectedGraphTest.java:155, 88.89%>
		<org.jgrapht.graph.AsUndirectedGraphTest.java:156, 111.11%>
	<org.jgrapht.graph.AsUndirectedGraphTest: void testRemoveVertex()>:
		<org.jgrapht.graph.AsUndirectedGraphTest.java:165, 88.89%>
		<org.jgrapht.graph.AsUndirectedGraphTest.java:166, 111.11%>
	<org.jgrapht.graph.AsUnweightedGraphTest: void constructWeighted(org.jgrapht.WeightedGraph)>:
		<org.jgrapht.graph.AsUnweightedGraphTest.java:110, 57.14%>
	<org.jgrapht.graph.DefaultDirectedGraphTest: void testEdgesOf()>:
		<org.jgrapht.graph.DefaultDirectedGraphTest.java:117, 75.00%>
		<org.jgrapht.graph.DefaultDirectedGraphTest.java:118, 75.00%>
	<org.jgrapht.graph.EqualsAndHashCodeTest: void testDefaultDirectedGraph()>:
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:105, 6.52%>
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:106, 10.87%>
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:108, 13.04%>
	<org.jgrapht.graph.EqualsAndHashCodeTest: void testGraphsWithNonIntrusiveEdge()>:
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:187, 3.90%>
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:188, 6.49%>
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:190, 7.79%>
	<org.jgrapht.graph.EqualsAndHashCodeTest: void testGrapshWithCustomEdges()>:
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:268, 7.69%>
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:269, 12.82%>
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:271, 15.38%>
	<org.jgrapht.graph.EqualsAndHashCodeTest: void testPseudograph()>:
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:230, 5.08%>
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:231, 8.47%>
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:233, 10.17%>
	<org.jgrapht.graph.EqualsAndHashCodeTest: void testSimpleGraph()>:
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:148, 6.52%>
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:149, 10.87%>
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:151, 13.04%>
	<org.jgrapht.graph.GenericGraphsTest: void testAlissaHacker()>:
		<org.jgrapht.graph.GenericGraphsTest.java:134, 83.33%>
	<org.jgrapht.graph.SimpleDirectedGraphTest: void testIncomingOutgoingEdgesOf()>:
		<org.jgrapht.graph.SimpleDirectedGraphTest.java:315, 128.57%>
	<org.jgrapht.graph.SubgraphTest: void testInducedSubgraphUnderlyingEdgeAddition()>:
		<org.jgrapht.graph.SubgraphTest.java:192, 20.00%>
	<org.jgrapht.traverse.AbstractGraphIteratorTest: void testDirectedGraph()>:
		<org.jgrapht.traverse.AbstractGraphIteratorTest.java:86, 47.06%>
		<org.jgrapht.traverse.AbstractGraphIteratorTest.java:88, 52.94%>
	<org.jgrapht.traverse.ClosestFirstIteratorTest: void testNoStart()>:
		<org.jgrapht.traverse.ClosestFirstIteratorTest.java:103, 53.85%>
	<org.jgrapht.traverse.ClosestFirstIteratorTest: void testRadius()>:
		<org.jgrapht.traverse.ClosestFirstIteratorTest.java:80, 53.85%>
	<org.jgrapht.traverse.DepthFirstIteratorTest: void testBug1169182()>:
		<org.jgrapht.traverse.DepthFirstIteratorTest.java:149, 16.00%>
	<org.jgrapht.traverse.TopologicalOrderIteratorTest: void testEmptyGraph()>:
		<org.jgrapht.traverse.TopologicalOrderIteratorTest.java:136, 50.00%>
	<org.jgrapht.traverse.TopologicalOrderIteratorTest: void testRecipe()>:
		<org.jgrapht.traverse.TopologicalOrderIteratorTest.java:109, 9.62%>
		<org.jgrapht.traverse.TopologicalOrderIteratorTest.java:121, 9.62%>
	<org.jgrapht.util.FibonacciHeapTest: void testGrowReplaceShrink()>:
		<org.jgrapht.util.FibonacciHeapTest.java:88, 17.65%>
		<org.jgrapht.util.FibonacciHeapTest.java:91, 17.65%>

Relevant Assertion clone sets (7):
Set (score: 1.00, ccsize: 2, packages: 1, classes: 1): 
	<org.jgrapht.alg.VertexCoversTest: void testFind2ApproximationCover()>:
		<org.jgrapht.alg.VertexCoversTest.java:74, 60.00%>
	<org.jgrapht.alg.VertexCoversTest: void testFindGreedyCover()>:
		<org.jgrapht.alg.VertexCoversTest.java:89, 50.00%>
Set (score: 1.00, ccsize: 2, packages: 1, classes: 1): 
	<org.jgrapht.experimental.GraphReaderTest: void testGraphReader()>:
		<org.jgrapht.experimental.GraphReaderTest.java:88, 27.27%>
	<org.jgrapht.experimental.GraphReaderTest: void testGraphReaderWeighted()>:
		<org.jgrapht.experimental.GraphReaderTest.java:116, 23.08%>
Set (score: 0.67, ccsize: 2, packages: 1, classes: 2): 
	<org.jgrapht.ext.DOTExporterTest: void testUndirected()>:
		<org.jgrapht.ext.DOTExporterTest.java:110, 41.67%>
	<org.jgrapht.ext.GmlExporterTest: void testUndirected()>:
		<org.jgrapht.ext.GmlExporterTest.java:117, 62.50%>
Set (score: 0.67, ccsize: 2, packages: 1, classes: 1): 
	<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest: void testBipartiteMatching1()>:
		<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest.java:86, 6.76%>
	<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest: void testBipartiteMatching2()>:
		<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest.java:115, 5.21%>
Set (score: 0.50, ccsize: 4, packages: 1, classes: 1): 
	<org.jgrapht.graph.EqualsAndHashCodeTest: void testDefaultDirectedGraph()>:
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:106, 10.87%>
	<org.jgrapht.graph.EqualsAndHashCodeTest: void testGraphsWithNonIntrusiveEdge()>:
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:188, 6.49%>
Set (score: 0.50, ccsize: 4, packages: 1, classes: 1): 
	<org.jgrapht.graph.EqualsAndHashCodeTest: void testGrapshWithCustomEdges()>:
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:269, 12.82%>
	<org.jgrapht.graph.EqualsAndHashCodeTest: void testSimpleGraph()>:
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:149, 10.87%>
Set (score: 0.50, ccsize: 2, packages: 1, classes: 1): 
	<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest: void testBipartiteMatching1()>:
		<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest.java:83, 6.76%>
	<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest: void testBipartiteMatching2()>:
		<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest.java:112, 5.21%>
==============================================

[141] Set (editDistance: 2, isComplete: false, packages: 12, classes: 36): 
Centroid (size: 2): <org.jgrapht.graph.DefaultDirectedGraphTest: void testInDegreeOf()>

Methods (66): 
	<org.jgrapht.EnhancedTestCase: void assertFalse()>:
		<org.jgrapht.EnhancedTestCase.java:79, 100.00%>
	<org.jgrapht.EnhancedTestCase: void assertTrue()>:
		<org.jgrapht.EnhancedTestCase.java:87, 100.00%>
	<org.jgrapht.alg.BellmanFordShortestPathTest: void testWithNegativeEdges()>:
		<org.jgrapht.alg.BellmanFordShortestPathTest.java:120, 45.45%>
		<org.jgrapht.alg.BellmanFordShortestPathTest.java:127, 63.64%>
	<org.jgrapht.alg.BlockCutpointGraphTest: void testGetBlock(org.jgrapht.alg.BlockCutpointGraph)>:
		<org.jgrapht.alg.BlockCutpointGraphTest.java:88, 33.33%>
		<org.jgrapht.alg.BlockCutpointGraphTest.java:94, 19.05%>
	<org.jgrapht.alg.ConnectivityInspectorTest: void testDirectedGraph()>:
		<org.jgrapht.alg.ConnectivityInspectorTest.java:139, 57.14%>
		<org.jgrapht.alg.ConnectivityInspectorTest.java:143, 57.14%>
	<org.jgrapht.alg.ConnectivityInspectorTest: void testStronglyConnected4()>:
		<org.jgrapht.alg.ConnectivityInspectorTest.java:371, 30.77%>
	<org.jgrapht.alg.EdmondsBlossomShrinkingTest: void testOne()>:
		<org.jgrapht.alg.EdmondsBlossomShrinkingTest.java:80, 23.81%>
		<org.jgrapht.alg.EdmondsBlossomShrinkingTest.java:81, 19.05%>
		<org.jgrapht.alg.EdmondsBlossomShrinkingTest.java:82, 19.05%>
	<org.jgrapht.alg.FloydWarshallShortestPathsTest: void testCompareWithDijkstra()>:
		<org.jgrapht.alg.FloydWarshallShortestPathsTest.java:96, 7.41%>
		<org.jgrapht.alg.FloydWarshallShortestPathsTest.java:121, 7.41%>
	<org.jgrapht.alg.FloydWarshallShortestPathsTest: void testDiameter()>:
		<org.jgrapht.alg.FloydWarshallShortestPathsTest.java:161, 57.14%>
	<org.jgrapht.alg.FloydWarshallShortestPathsTest: void testEdgeLessDiameter()>:
		<org.jgrapht.alg.FloydWarshallShortestPathsTest.java:182, 40.00%>
	<org.jgrapht.alg.FloydWarshallShortestPathsTest: void testEmptyDiameter()>:
		<org.jgrapht.alg.FloydWarshallShortestPathsTest.java:170, 50.00%>
	<org.jgrapht.alg.HamiltonianCycleTest: void testHamiltonianCycle()>:
		<org.jgrapht.alg.HamiltonianCycleTest.java:79, 33.33%>
		<org.jgrapht.alg.HamiltonianCycleTest.java:89, 27.78%>
	<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest: void testBipartiteMatching1()>:
		<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest.java:83, 6.76%>
		<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest.java:86, 6.76%>
	<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest: void testBipartiteMatching2()>:
		<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest.java:112, 5.21%>
		<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest.java:115, 5.21%>
	<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest: void testEmptyMatching()>:
		<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest.java:128, 33.33%>
	<org.jgrapht.alg.KSPDiscardsValidPathsTest: void testNot3connectedGraph()>:
		<org.jgrapht.alg.KSPDiscardsValidPathsTest.java:102, 87.50%>
	<org.jgrapht.alg.KShortestPathCostTest: void verifyShortestPathsInIncreasingOrderOfWeight(org.jgrapht.Graph)>:
		<org.jgrapht.alg.KShortestPathCostTest.java:222, 30.77%>
		<org.jgrapht.alg.KShortestPathCostTest.java:225, 30.77%>
	<org.jgrapht.alg.KShortestPathCostTest: void verifyWeightsConsistency(java.util.List,java.util.List)>:
		<org.jgrapht.alg.KShortestPathCostTest.java:294, 53.85%>
	<org.jgrapht.alg.KShortestPathKValuesTest: void verifyNbPathsForAllPairsOfVertices(org.jgrapht.Graph)>:
		<org.jgrapht.alg.KShortestPathKValuesTest.java:148, 36.84%>
	<org.jgrapht.alg.KruskalMinimumSpanningTreeTest: void testMinimumSpanningTree()>:
		<org.jgrapht.alg.KruskalMinimumSpanningTreeTest.java:80, 19.05%>
		<org.jgrapht.alg.KruskalMinimumSpanningTreeTest.java:84, 38.10%>
	<org.jgrapht.alg.StoerWagnerMinimumCutTest: void testMinCut14()>:
		<org.jgrapht.alg.StoerWagnerMinimumCutTest.java:97, 16.67%>
	<org.jgrapht.alg.StoerWagnerMinimumCutTest: void testMinCutDisconnected()>:
		<org.jgrapht.alg.StoerWagnerMinimumCutTest.java:124, 22.73%>
	<org.jgrapht.alg.TransitiveClosureTest: void testLinearGraph()>:
		<org.jgrapht.alg.TransitiveClosureTest.java:75, 47.83%>
		<org.jgrapht.alg.TransitiveClosureTest.java:78, 43.48%>
	<org.jgrapht.alg.TransitiveClosureTest: void testRingGraph()>:
		<org.jgrapht.alg.TransitiveClosureTest.java:107, 45.45%>
		<org.jgrapht.alg.TransitiveClosureTest.java:110, 50.00%>
	<org.jgrapht.alg.VertexCoversTest: void testFind2ApproximationCover()>:
		<org.jgrapht.alg.VertexCoversTest.java:74, 60.00%>
	<org.jgrapht.alg.VertexCoversTest: void testFindGreedyCover()>:
		<org.jgrapht.alg.VertexCoversTest.java:89, 50.00%>
	<org.jgrapht.alg.util.UnionFindTest: void testIdentical(java.lang.String[],java.util.ArrayList,org.jgrapht.alg.util.UnionFind)>:
		<org.jgrapht.alg.util.UnionFindTest.java:131, 41.18%>
	<org.jgrapht.experimental.GraphReaderTest: void testGraphReader()>:
		<org.jgrapht.experimental.GraphReaderTest.java:88, 27.27%>
	<org.jgrapht.experimental.GraphReaderTest: void testGraphReaderWeighted()>:
		<org.jgrapht.experimental.GraphReaderTest.java:116, 23.08%>
	<org.jgrapht.experimental.alg.ColoringTest: void testBacktrackColoring()>:
		<org.jgrapht.experimental.alg.ColoringTest.java:97, 50.00%>
	<org.jgrapht.experimental.alg.ColoringTest: void testGreedyColoring()>:
		<org.jgrapht.experimental.alg.ColoringTest.java:77, 50.00%>
	<org.jgrapht.experimental.dag.DirectedAcyclicGraphTest: void testTopoIterationOrderLinearGraph()>:
		<org.jgrapht.experimental.dag.DirectedAcyclicGraphTest.java:181, 29.41%>
		<org.jgrapht.experimental.dag.DirectedAcyclicGraphTest.java:182, 41.18%>
	<org.jgrapht.experimental.isomorphism.IsomorphismInspectorTest: void assertIsomorphic(org.jgrapht.Graph[],boolean,org.jgrapht.experimental.equivalence.EquivalenceComparator,org.jgrapht.experimental.equivalence.EquivalenceComparator)>:
		<org.jgrapht.experimental.isomorphism.IsomorphismInspectorTest.java:138, 28.57%>
		<org.jgrapht.experimental.isomorphism.IsomorphismInspectorTest.java:140, 28.57%>
	<org.jgrapht.experimental.isomorphism.IsomorphismInspectorTest: void assertIsomorphicStopAfterFirstMatch(org.jgrapht.Graph[],boolean,boolean,org.jgrapht.experimental.equivalence.EquivalenceComparator,org.jgrapht.experimental.equivalence.EquivalenceComparator)>:
		<org.jgrapht.experimental.isomorphism.IsomorphismInspectorTest.java:485, 14.71%>
	<org.jgrapht.ext.DOTExporterTest: void testUndirected()>:
		<org.jgrapht.ext.DOTExporterTest.java:110, 41.67%>
	<org.jgrapht.ext.DOTExporterTest: void testValidNodeIDs()>:
		<org.jgrapht.ext.DOTExporterTest.java:149, 16.00%>
	<org.jgrapht.ext.GmlExporterTest: void testUndirected()>:
		<org.jgrapht.ext.GmlExporterTest.java:117, 62.50%>
	<org.jgrapht.ext.MatrixExporterTest: void testAdjacencyDirected()>:
		<org.jgrapht.ext.MatrixExporterTest.java:149, 62.50%>
	<org.jgrapht.ext.MatrixExporterTest: void testAdjacencyUndirected()>:
		<org.jgrapht.ext.MatrixExporterTest.java:133, 62.50%>
	<org.jgrapht.ext.MatrixExporterTest: void testLaplacian()>:
		<org.jgrapht.ext.MatrixExporterTest.java:113, 38.46%>
		<org.jgrapht.ext.MatrixExporterTest.java:117, 38.46%>
	<org.jgrapht.generate.RandomGraphGeneratorTest: void testBadVertexFactory()>:
		<org.jgrapht.generate.RandomGraphGeneratorTest.java:106, 12.50%>
	<org.jgrapht.generate.RandomGraphGeneratorTest: void testGenerateDirectedGraph()>:
		<org.jgrapht.generate.RandomGraphGeneratorTest.java:70, 20.00%>
	<org.jgrapht.generate.RandomGraphGeneratorTest: void testGenerateListenableUndirectedGraph()>:
		<org.jgrapht.generate.RandomGraphGeneratorTest.java:89, 20.00%>
	<org.jgrapht.graph.AsUndirectedGraphTest: void testAddEdge()>:
		<org.jgrapht.graph.AsUndirectedGraphTest.java:89, 100.00%>
	<org.jgrapht.graph.AsUndirectedGraphTest: void testAddVertex()>:
		<org.jgrapht.graph.AsUndirectedGraphTest.java:102, 85.71%>
		<org.jgrapht.graph.AsUndirectedGraphTest.java:103, 100.00%>
	<org.jgrapht.graph.AsUndirectedGraphTest: void testDegreeOf()>:
		<org.jgrapht.graph.AsUndirectedGraphTest.java:111, 46.15%>
		<org.jgrapht.graph.AsUndirectedGraphTest.java:112, 61.54%>
		<org.jgrapht.graph.AsUndirectedGraphTest.java:113, 76.92%>
		<org.jgrapht.graph.AsUndirectedGraphTest.java:114, 92.31%>
	<org.jgrapht.graph.AsUndirectedGraphTest: void testGetAllEdges()>:
		<org.jgrapht.graph.AsUndirectedGraphTest.java:123, 40.00%>
		<org.jgrapht.graph.AsUndirectedGraphTest.java:124, 65.00%>
		<org.jgrapht.graph.AsUndirectedGraphTest.java:128, 70.00%>
		<org.jgrapht.graph.AsUndirectedGraphTest.java:129, 80.00%>
	<org.jgrapht.graph.AsUndirectedGraphTest: void testRemoveEdge()>:
		<org.jgrapht.graph.AsUndirectedGraphTest.java:155, 88.89%>
		<org.jgrapht.graph.AsUndirectedGraphTest.java:156, 111.11%>
	<org.jgrapht.graph.AsUndirectedGraphTest: void testRemoveVertex()>:
		<org.jgrapht.graph.AsUndirectedGraphTest.java:165, 88.89%>
		<org.jgrapht.graph.AsUndirectedGraphTest.java:166, 111.11%>
	<org.jgrapht.graph.AsUnweightedGraphTest: void constructWeighted(org.jgrapht.WeightedGraph)>:
		<org.jgrapht.graph.AsUnweightedGraphTest.java:110, 57.14%>
	<org.jgrapht.graph.DefaultDirectedGraphTest: void testInDegreeOf()>:
		<org.jgrapht.graph.DefaultDirectedGraphTest.java:141, 83.33%>
		<org.jgrapht.graph.DefaultDirectedGraphTest.java:142, 83.33%>
	<org.jgrapht.graph.EqualsAndHashCodeTest: void testDefaultDirectedGraph()>:
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:105, 6.52%>
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:106, 10.87%>
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:108, 13.04%>
	<org.jgrapht.graph.EqualsAndHashCodeTest: void testGraphsWithNonIntrusiveEdge()>:
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:187, 3.90%>
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:188, 6.49%>
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:190, 7.79%>
	<org.jgrapht.graph.EqualsAndHashCodeTest: void testGrapshWithCustomEdges()>:
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:268, 7.69%>
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:269, 12.82%>
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:271, 15.38%>
	<org.jgrapht.graph.EqualsAndHashCodeTest: void testPseudograph()>:
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:230, 5.08%>
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:231, 8.47%>
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:233, 10.17%>
	<org.jgrapht.graph.EqualsAndHashCodeTest: void testSimpleGraph()>:
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:148, 6.52%>
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:149, 10.87%>
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:151, 13.04%>
	<org.jgrapht.graph.GenericGraphsTest: void testAlissaHacker()>:
		<org.jgrapht.graph.GenericGraphsTest.java:134, 83.33%>
	<org.jgrapht.graph.SimpleDirectedGraphTest: void testIncomingOutgoingEdgesOf()>:
		<org.jgrapht.graph.SimpleDirectedGraphTest.java:315, 128.57%>
	<org.jgrapht.graph.SubgraphTest: void testInducedSubgraphUnderlyingEdgeAddition()>:
		<org.jgrapht.graph.SubgraphTest.java:192, 20.00%>
	<org.jgrapht.traverse.AbstractGraphIteratorTest: void testDirectedGraph()>:
		<org.jgrapht.traverse.AbstractGraphIteratorTest.java:86, 47.06%>
		<org.jgrapht.traverse.AbstractGraphIteratorTest.java:88, 52.94%>
	<org.jgrapht.traverse.ClosestFirstIteratorTest: void testNoStart()>:
		<org.jgrapht.traverse.ClosestFirstIteratorTest.java:103, 53.85%>
	<org.jgrapht.traverse.ClosestFirstIteratorTest: void testRadius()>:
		<org.jgrapht.traverse.ClosestFirstIteratorTest.java:80, 53.85%>
	<org.jgrapht.traverse.DepthFirstIteratorTest: void testBug1169182()>:
		<org.jgrapht.traverse.DepthFirstIteratorTest.java:149, 16.00%>
	<org.jgrapht.traverse.TopologicalOrderIteratorTest: void testEmptyGraph()>:
		<org.jgrapht.traverse.TopologicalOrderIteratorTest.java:136, 50.00%>
	<org.jgrapht.traverse.TopologicalOrderIteratorTest: void testRecipe()>:
		<org.jgrapht.traverse.TopologicalOrderIteratorTest.java:109, 9.62%>
		<org.jgrapht.traverse.TopologicalOrderIteratorTest.java:121, 9.62%>
	<org.jgrapht.util.FibonacciHeapTest: void testGrowReplaceShrink()>:
		<org.jgrapht.util.FibonacciHeapTest.java:88, 17.65%>
		<org.jgrapht.util.FibonacciHeapTest.java:91, 17.65%>

Relevant Assertion clone sets (7):
Set (score: 1.00, ccsize: 2, packages: 1, classes: 1): 
	<org.jgrapht.alg.VertexCoversTest: void testFind2ApproximationCover()>:
		<org.jgrapht.alg.VertexCoversTest.java:74, 60.00%>
	<org.jgrapht.alg.VertexCoversTest: void testFindGreedyCover()>:
		<org.jgrapht.alg.VertexCoversTest.java:89, 50.00%>
Set (score: 1.00, ccsize: 2, packages: 1, classes: 1): 
	<org.jgrapht.experimental.GraphReaderTest: void testGraphReader()>:
		<org.jgrapht.experimental.GraphReaderTest.java:88, 27.27%>
	<org.jgrapht.experimental.GraphReaderTest: void testGraphReaderWeighted()>:
		<org.jgrapht.experimental.GraphReaderTest.java:116, 23.08%>
Set (score: 0.67, ccsize: 2, packages: 1, classes: 2): 
	<org.jgrapht.ext.DOTExporterTest: void testUndirected()>:
		<org.jgrapht.ext.DOTExporterTest.java:110, 41.67%>
	<org.jgrapht.ext.GmlExporterTest: void testUndirected()>:
		<org.jgrapht.ext.GmlExporterTest.java:117, 62.50%>
Set (score: 0.67, ccsize: 2, packages: 1, classes: 1): 
	<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest: void testBipartiteMatching1()>:
		<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest.java:86, 6.76%>
	<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest: void testBipartiteMatching2()>:
		<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest.java:115, 5.21%>
Set (score: 0.50, ccsize: 4, packages: 1, classes: 1): 
	<org.jgrapht.graph.EqualsAndHashCodeTest: void testDefaultDirectedGraph()>:
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:106, 10.87%>
	<org.jgrapht.graph.EqualsAndHashCodeTest: void testGraphsWithNonIntrusiveEdge()>:
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:188, 6.49%>
Set (score: 0.50, ccsize: 4, packages: 1, classes: 1): 
	<org.jgrapht.graph.EqualsAndHashCodeTest: void testGrapshWithCustomEdges()>:
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:269, 12.82%>
	<org.jgrapht.graph.EqualsAndHashCodeTest: void testSimpleGraph()>:
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:149, 10.87%>
Set (score: 0.50, ccsize: 2, packages: 1, classes: 1): 
	<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest: void testBipartiteMatching1()>:
		<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest.java:83, 6.76%>
	<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest: void testBipartiteMatching2()>:
		<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest.java:112, 5.21%>
==============================================

[142] Set (editDistance: 2, isComplete: false, packages: 12, classes: 36): 
Centroid (size: 2): <org.jgrapht.graph.DefaultDirectedGraphTest: void testOutDegreeOf()>

Methods (66): 
	<org.jgrapht.EnhancedTestCase: void assertFalse()>:
		<org.jgrapht.EnhancedTestCase.java:79, 100.00%>
	<org.jgrapht.EnhancedTestCase: void assertTrue()>:
		<org.jgrapht.EnhancedTestCase.java:87, 100.00%>
	<org.jgrapht.alg.BellmanFordShortestPathTest: void testWithNegativeEdges()>:
		<org.jgrapht.alg.BellmanFordShortestPathTest.java:120, 45.45%>
		<org.jgrapht.alg.BellmanFordShortestPathTest.java:127, 63.64%>
	<org.jgrapht.alg.BlockCutpointGraphTest: void testGetBlock(org.jgrapht.alg.BlockCutpointGraph)>:
		<org.jgrapht.alg.BlockCutpointGraphTest.java:88, 33.33%>
		<org.jgrapht.alg.BlockCutpointGraphTest.java:94, 19.05%>
	<org.jgrapht.alg.ConnectivityInspectorTest: void testDirectedGraph()>:
		<org.jgrapht.alg.ConnectivityInspectorTest.java:139, 57.14%>
		<org.jgrapht.alg.ConnectivityInspectorTest.java:143, 57.14%>
	<org.jgrapht.alg.ConnectivityInspectorTest: void testStronglyConnected4()>:
		<org.jgrapht.alg.ConnectivityInspectorTest.java:371, 30.77%>
	<org.jgrapht.alg.EdmondsBlossomShrinkingTest: void testOne()>:
		<org.jgrapht.alg.EdmondsBlossomShrinkingTest.java:80, 23.81%>
		<org.jgrapht.alg.EdmondsBlossomShrinkingTest.java:81, 19.05%>
		<org.jgrapht.alg.EdmondsBlossomShrinkingTest.java:82, 19.05%>
	<org.jgrapht.alg.FloydWarshallShortestPathsTest: void testCompareWithDijkstra()>:
		<org.jgrapht.alg.FloydWarshallShortestPathsTest.java:96, 7.41%>
		<org.jgrapht.alg.FloydWarshallShortestPathsTest.java:121, 7.41%>
	<org.jgrapht.alg.FloydWarshallShortestPathsTest: void testDiameter()>:
		<org.jgrapht.alg.FloydWarshallShortestPathsTest.java:161, 57.14%>
	<org.jgrapht.alg.FloydWarshallShortestPathsTest: void testEdgeLessDiameter()>:
		<org.jgrapht.alg.FloydWarshallShortestPathsTest.java:182, 40.00%>
	<org.jgrapht.alg.FloydWarshallShortestPathsTest: void testEmptyDiameter()>:
		<org.jgrapht.alg.FloydWarshallShortestPathsTest.java:170, 50.00%>
	<org.jgrapht.alg.HamiltonianCycleTest: void testHamiltonianCycle()>:
		<org.jgrapht.alg.HamiltonianCycleTest.java:79, 33.33%>
		<org.jgrapht.alg.HamiltonianCycleTest.java:89, 27.78%>
	<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest: void testBipartiteMatching1()>:
		<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest.java:83, 6.76%>
		<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest.java:86, 6.76%>
	<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest: void testBipartiteMatching2()>:
		<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest.java:112, 5.21%>
		<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest.java:115, 5.21%>
	<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest: void testEmptyMatching()>:
		<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest.java:128, 33.33%>
	<org.jgrapht.alg.KSPDiscardsValidPathsTest: void testNot3connectedGraph()>:
		<org.jgrapht.alg.KSPDiscardsValidPathsTest.java:102, 87.50%>
	<org.jgrapht.alg.KShortestPathCostTest: void verifyShortestPathsInIncreasingOrderOfWeight(org.jgrapht.Graph)>:
		<org.jgrapht.alg.KShortestPathCostTest.java:222, 30.77%>
		<org.jgrapht.alg.KShortestPathCostTest.java:225, 30.77%>
	<org.jgrapht.alg.KShortestPathCostTest: void verifyWeightsConsistency(java.util.List,java.util.List)>:
		<org.jgrapht.alg.KShortestPathCostTest.java:294, 53.85%>
	<org.jgrapht.alg.KShortestPathKValuesTest: void verifyNbPathsForAllPairsOfVertices(org.jgrapht.Graph)>:
		<org.jgrapht.alg.KShortestPathKValuesTest.java:148, 36.84%>
	<org.jgrapht.alg.KruskalMinimumSpanningTreeTest: void testMinimumSpanningTree()>:
		<org.jgrapht.alg.KruskalMinimumSpanningTreeTest.java:80, 19.05%>
		<org.jgrapht.alg.KruskalMinimumSpanningTreeTest.java:84, 38.10%>
	<org.jgrapht.alg.StoerWagnerMinimumCutTest: void testMinCut14()>:
		<org.jgrapht.alg.StoerWagnerMinimumCutTest.java:97, 16.67%>
	<org.jgrapht.alg.StoerWagnerMinimumCutTest: void testMinCutDisconnected()>:
		<org.jgrapht.alg.StoerWagnerMinimumCutTest.java:124, 22.73%>
	<org.jgrapht.alg.TransitiveClosureTest: void testLinearGraph()>:
		<org.jgrapht.alg.TransitiveClosureTest.java:75, 47.83%>
		<org.jgrapht.alg.TransitiveClosureTest.java:78, 43.48%>
	<org.jgrapht.alg.TransitiveClosureTest: void testRingGraph()>:
		<org.jgrapht.alg.TransitiveClosureTest.java:107, 45.45%>
		<org.jgrapht.alg.TransitiveClosureTest.java:110, 50.00%>
	<org.jgrapht.alg.VertexCoversTest: void testFind2ApproximationCover()>:
		<org.jgrapht.alg.VertexCoversTest.java:74, 60.00%>
	<org.jgrapht.alg.VertexCoversTest: void testFindGreedyCover()>:
		<org.jgrapht.alg.VertexCoversTest.java:89, 50.00%>
	<org.jgrapht.alg.util.UnionFindTest: void testIdentical(java.lang.String[],java.util.ArrayList,org.jgrapht.alg.util.UnionFind)>:
		<org.jgrapht.alg.util.UnionFindTest.java:131, 41.18%>
	<org.jgrapht.experimental.GraphReaderTest: void testGraphReader()>:
		<org.jgrapht.experimental.GraphReaderTest.java:88, 27.27%>
	<org.jgrapht.experimental.GraphReaderTest: void testGraphReaderWeighted()>:
		<org.jgrapht.experimental.GraphReaderTest.java:116, 23.08%>
	<org.jgrapht.experimental.alg.ColoringTest: void testBacktrackColoring()>:
		<org.jgrapht.experimental.alg.ColoringTest.java:97, 50.00%>
	<org.jgrapht.experimental.alg.ColoringTest: void testGreedyColoring()>:
		<org.jgrapht.experimental.alg.ColoringTest.java:77, 50.00%>
	<org.jgrapht.experimental.dag.DirectedAcyclicGraphTest: void testTopoIterationOrderLinearGraph()>:
		<org.jgrapht.experimental.dag.DirectedAcyclicGraphTest.java:181, 29.41%>
		<org.jgrapht.experimental.dag.DirectedAcyclicGraphTest.java:182, 41.18%>
	<org.jgrapht.experimental.isomorphism.IsomorphismInspectorTest: void assertIsomorphic(org.jgrapht.Graph[],boolean,org.jgrapht.experimental.equivalence.EquivalenceComparator,org.jgrapht.experimental.equivalence.EquivalenceComparator)>:
		<org.jgrapht.experimental.isomorphism.IsomorphismInspectorTest.java:138, 28.57%>
		<org.jgrapht.experimental.isomorphism.IsomorphismInspectorTest.java:140, 28.57%>
	<org.jgrapht.experimental.isomorphism.IsomorphismInspectorTest: void assertIsomorphicStopAfterFirstMatch(org.jgrapht.Graph[],boolean,boolean,org.jgrapht.experimental.equivalence.EquivalenceComparator,org.jgrapht.experimental.equivalence.EquivalenceComparator)>:
		<org.jgrapht.experimental.isomorphism.IsomorphismInspectorTest.java:485, 14.71%>
	<org.jgrapht.ext.DOTExporterTest: void testUndirected()>:
		<org.jgrapht.ext.DOTExporterTest.java:110, 41.67%>
	<org.jgrapht.ext.DOTExporterTest: void testValidNodeIDs()>:
		<org.jgrapht.ext.DOTExporterTest.java:149, 16.00%>
	<org.jgrapht.ext.GmlExporterTest: void testUndirected()>:
		<org.jgrapht.ext.GmlExporterTest.java:117, 62.50%>
	<org.jgrapht.ext.MatrixExporterTest: void testAdjacencyDirected()>:
		<org.jgrapht.ext.MatrixExporterTest.java:149, 62.50%>
	<org.jgrapht.ext.MatrixExporterTest: void testAdjacencyUndirected()>:
		<org.jgrapht.ext.MatrixExporterTest.java:133, 62.50%>
	<org.jgrapht.ext.MatrixExporterTest: void testLaplacian()>:
		<org.jgrapht.ext.MatrixExporterTest.java:113, 38.46%>
		<org.jgrapht.ext.MatrixExporterTest.java:117, 38.46%>
	<org.jgrapht.generate.RandomGraphGeneratorTest: void testBadVertexFactory()>:
		<org.jgrapht.generate.RandomGraphGeneratorTest.java:106, 12.50%>
	<org.jgrapht.generate.RandomGraphGeneratorTest: void testGenerateDirectedGraph()>:
		<org.jgrapht.generate.RandomGraphGeneratorTest.java:70, 20.00%>
	<org.jgrapht.generate.RandomGraphGeneratorTest: void testGenerateListenableUndirectedGraph()>:
		<org.jgrapht.generate.RandomGraphGeneratorTest.java:89, 20.00%>
	<org.jgrapht.graph.AsUndirectedGraphTest: void testAddEdge()>:
		<org.jgrapht.graph.AsUndirectedGraphTest.java:89, 100.00%>
	<org.jgrapht.graph.AsUndirectedGraphTest: void testAddVertex()>:
		<org.jgrapht.graph.AsUndirectedGraphTest.java:102, 85.71%>
		<org.jgrapht.graph.AsUndirectedGraphTest.java:103, 100.00%>
	<org.jgrapht.graph.AsUndirectedGraphTest: void testDegreeOf()>:
		<org.jgrapht.graph.AsUndirectedGraphTest.java:111, 46.15%>
		<org.jgrapht.graph.AsUndirectedGraphTest.java:112, 61.54%>
		<org.jgrapht.graph.AsUndirectedGraphTest.java:113, 76.92%>
		<org.jgrapht.graph.AsUndirectedGraphTest.java:114, 92.31%>
	<org.jgrapht.graph.AsUndirectedGraphTest: void testGetAllEdges()>:
		<org.jgrapht.graph.AsUndirectedGraphTest.java:123, 40.00%>
		<org.jgrapht.graph.AsUndirectedGraphTest.java:124, 65.00%>
		<org.jgrapht.graph.AsUndirectedGraphTest.java:128, 70.00%>
		<org.jgrapht.graph.AsUndirectedGraphTest.java:129, 80.00%>
	<org.jgrapht.graph.AsUndirectedGraphTest: void testRemoveEdge()>:
		<org.jgrapht.graph.AsUndirectedGraphTest.java:155, 88.89%>
		<org.jgrapht.graph.AsUndirectedGraphTest.java:156, 111.11%>
	<org.jgrapht.graph.AsUndirectedGraphTest: void testRemoveVertex()>:
		<org.jgrapht.graph.AsUndirectedGraphTest.java:165, 88.89%>
		<org.jgrapht.graph.AsUndirectedGraphTest.java:166, 111.11%>
	<org.jgrapht.graph.AsUnweightedGraphTest: void constructWeighted(org.jgrapht.WeightedGraph)>:
		<org.jgrapht.graph.AsUnweightedGraphTest.java:110, 57.14%>
	<org.jgrapht.graph.DefaultDirectedGraphTest: void testOutDegreeOf()>:
		<org.jgrapht.graph.DefaultDirectedGraphTest.java:153, 83.33%>
		<org.jgrapht.graph.DefaultDirectedGraphTest.java:154, 83.33%>
	<org.jgrapht.graph.EqualsAndHashCodeTest: void testDefaultDirectedGraph()>:
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:105, 6.52%>
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:106, 10.87%>
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:108, 13.04%>
	<org.jgrapht.graph.EqualsAndHashCodeTest: void testGraphsWithNonIntrusiveEdge()>:
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:187, 3.90%>
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:188, 6.49%>
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:190, 7.79%>
	<org.jgrapht.graph.EqualsAndHashCodeTest: void testGrapshWithCustomEdges()>:
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:268, 7.69%>
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:269, 12.82%>
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:271, 15.38%>
	<org.jgrapht.graph.EqualsAndHashCodeTest: void testPseudograph()>:
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:230, 5.08%>
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:231, 8.47%>
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:233, 10.17%>
	<org.jgrapht.graph.EqualsAndHashCodeTest: void testSimpleGraph()>:
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:148, 6.52%>
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:149, 10.87%>
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:151, 13.04%>
	<org.jgrapht.graph.GenericGraphsTest: void testAlissaHacker()>:
		<org.jgrapht.graph.GenericGraphsTest.java:134, 83.33%>
	<org.jgrapht.graph.SimpleDirectedGraphTest: void testIncomingOutgoingEdgesOf()>:
		<org.jgrapht.graph.SimpleDirectedGraphTest.java:315, 128.57%>
	<org.jgrapht.graph.SubgraphTest: void testInducedSubgraphUnderlyingEdgeAddition()>:
		<org.jgrapht.graph.SubgraphTest.java:192, 20.00%>
	<org.jgrapht.traverse.AbstractGraphIteratorTest: void testDirectedGraph()>:
		<org.jgrapht.traverse.AbstractGraphIteratorTest.java:86, 47.06%>
		<org.jgrapht.traverse.AbstractGraphIteratorTest.java:88, 52.94%>
	<org.jgrapht.traverse.ClosestFirstIteratorTest: void testNoStart()>:
		<org.jgrapht.traverse.ClosestFirstIteratorTest.java:103, 53.85%>
	<org.jgrapht.traverse.ClosestFirstIteratorTest: void testRadius()>:
		<org.jgrapht.traverse.ClosestFirstIteratorTest.java:80, 53.85%>
	<org.jgrapht.traverse.DepthFirstIteratorTest: void testBug1169182()>:
		<org.jgrapht.traverse.DepthFirstIteratorTest.java:149, 16.00%>
	<org.jgrapht.traverse.TopologicalOrderIteratorTest: void testEmptyGraph()>:
		<org.jgrapht.traverse.TopologicalOrderIteratorTest.java:136, 50.00%>
	<org.jgrapht.traverse.TopologicalOrderIteratorTest: void testRecipe()>:
		<org.jgrapht.traverse.TopologicalOrderIteratorTest.java:109, 9.62%>
		<org.jgrapht.traverse.TopologicalOrderIteratorTest.java:121, 9.62%>
	<org.jgrapht.util.FibonacciHeapTest: void testGrowReplaceShrink()>:
		<org.jgrapht.util.FibonacciHeapTest.java:88, 17.65%>
		<org.jgrapht.util.FibonacciHeapTest.java:91, 17.65%>

Relevant Assertion clone sets (7):
Set (score: 1.00, ccsize: 2, packages: 1, classes: 1): 
	<org.jgrapht.alg.VertexCoversTest: void testFind2ApproximationCover()>:
		<org.jgrapht.alg.VertexCoversTest.java:74, 60.00%>
	<org.jgrapht.alg.VertexCoversTest: void testFindGreedyCover()>:
		<org.jgrapht.alg.VertexCoversTest.java:89, 50.00%>
Set (score: 1.00, ccsize: 2, packages: 1, classes: 1): 
	<org.jgrapht.experimental.GraphReaderTest: void testGraphReader()>:
		<org.jgrapht.experimental.GraphReaderTest.java:88, 27.27%>
	<org.jgrapht.experimental.GraphReaderTest: void testGraphReaderWeighted()>:
		<org.jgrapht.experimental.GraphReaderTest.java:116, 23.08%>
Set (score: 0.67, ccsize: 2, packages: 1, classes: 2): 
	<org.jgrapht.ext.DOTExporterTest: void testUndirected()>:
		<org.jgrapht.ext.DOTExporterTest.java:110, 41.67%>
	<org.jgrapht.ext.GmlExporterTest: void testUndirected()>:
		<org.jgrapht.ext.GmlExporterTest.java:117, 62.50%>
Set (score: 0.67, ccsize: 2, packages: 1, classes: 1): 
	<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest: void testBipartiteMatching1()>:
		<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest.java:86, 6.76%>
	<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest: void testBipartiteMatching2()>:
		<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest.java:115, 5.21%>
Set (score: 0.50, ccsize: 4, packages: 1, classes: 1): 
	<org.jgrapht.graph.EqualsAndHashCodeTest: void testDefaultDirectedGraph()>:
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:106, 10.87%>
	<org.jgrapht.graph.EqualsAndHashCodeTest: void testGraphsWithNonIntrusiveEdge()>:
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:188, 6.49%>
Set (score: 0.50, ccsize: 4, packages: 1, classes: 1): 
	<org.jgrapht.graph.EqualsAndHashCodeTest: void testGrapshWithCustomEdges()>:
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:269, 12.82%>
	<org.jgrapht.graph.EqualsAndHashCodeTest: void testSimpleGraph()>:
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:149, 10.87%>
Set (score: 0.50, ccsize: 2, packages: 1, classes: 1): 
	<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest: void testBipartiteMatching1()>:
		<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest.java:83, 6.76%>
	<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest: void testBipartiteMatching2()>:
		<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest.java:112, 5.21%>
==============================================

[143] Set (editDistance: 2, isComplete: false, packages: 12, classes: 35): 
Centroid (size: 2): <org.jgrapht.graph.GenericGraphsTest: void testEqualButNotSameVertex()>

Methods (66): 
	<org.jgrapht.EnhancedTestCase: void assertFalse()>:
		<org.jgrapht.EnhancedTestCase.java:79, 100.00%>
	<org.jgrapht.EnhancedTestCase: void assertTrue()>:
		<org.jgrapht.EnhancedTestCase.java:87, 100.00%>
	<org.jgrapht.alg.BellmanFordShortestPathTest: void testWithNegativeEdges()>:
		<org.jgrapht.alg.BellmanFordShortestPathTest.java:120, 45.45%>
		<org.jgrapht.alg.BellmanFordShortestPathTest.java:127, 63.64%>
	<org.jgrapht.alg.BlockCutpointGraphTest: void testGetBlock(org.jgrapht.alg.BlockCutpointGraph)>:
		<org.jgrapht.alg.BlockCutpointGraphTest.java:88, 33.33%>
		<org.jgrapht.alg.BlockCutpointGraphTest.java:94, 19.05%>
	<org.jgrapht.alg.ConnectivityInspectorTest: void testDirectedGraph()>:
		<org.jgrapht.alg.ConnectivityInspectorTest.java:139, 57.14%>
		<org.jgrapht.alg.ConnectivityInspectorTest.java:143, 57.14%>
	<org.jgrapht.alg.ConnectivityInspectorTest: void testStronglyConnected4()>:
		<org.jgrapht.alg.ConnectivityInspectorTest.java:371, 30.77%>
	<org.jgrapht.alg.EdmondsBlossomShrinkingTest: void testOne()>:
		<org.jgrapht.alg.EdmondsBlossomShrinkingTest.java:80, 23.81%>
		<org.jgrapht.alg.EdmondsBlossomShrinkingTest.java:81, 19.05%>
		<org.jgrapht.alg.EdmondsBlossomShrinkingTest.java:82, 19.05%>
	<org.jgrapht.alg.FloydWarshallShortestPathsTest: void testCompareWithDijkstra()>:
		<org.jgrapht.alg.FloydWarshallShortestPathsTest.java:96, 7.41%>
		<org.jgrapht.alg.FloydWarshallShortestPathsTest.java:121, 7.41%>
	<org.jgrapht.alg.FloydWarshallShortestPathsTest: void testDiameter()>:
		<org.jgrapht.alg.FloydWarshallShortestPathsTest.java:161, 57.14%>
	<org.jgrapht.alg.FloydWarshallShortestPathsTest: void testEdgeLessDiameter()>:
		<org.jgrapht.alg.FloydWarshallShortestPathsTest.java:182, 40.00%>
	<org.jgrapht.alg.FloydWarshallShortestPathsTest: void testEmptyDiameter()>:
		<org.jgrapht.alg.FloydWarshallShortestPathsTest.java:170, 50.00%>
	<org.jgrapht.alg.HamiltonianCycleTest: void testHamiltonianCycle()>:
		<org.jgrapht.alg.HamiltonianCycleTest.java:79, 33.33%>
		<org.jgrapht.alg.HamiltonianCycleTest.java:89, 27.78%>
	<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest: void testBipartiteMatching1()>:
		<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest.java:83, 6.76%>
		<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest.java:86, 6.76%>
	<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest: void testBipartiteMatching2()>:
		<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest.java:112, 5.21%>
		<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest.java:115, 5.21%>
	<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest: void testEmptyMatching()>:
		<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest.java:128, 33.33%>
	<org.jgrapht.alg.KSPDiscardsValidPathsTest: void testNot3connectedGraph()>:
		<org.jgrapht.alg.KSPDiscardsValidPathsTest.java:102, 87.50%>
	<org.jgrapht.alg.KShortestPathCostTest: void verifyShortestPathsInIncreasingOrderOfWeight(org.jgrapht.Graph)>:
		<org.jgrapht.alg.KShortestPathCostTest.java:222, 30.77%>
		<org.jgrapht.alg.KShortestPathCostTest.java:225, 30.77%>
	<org.jgrapht.alg.KShortestPathCostTest: void verifyWeightsConsistency(java.util.List,java.util.List)>:
		<org.jgrapht.alg.KShortestPathCostTest.java:294, 53.85%>
	<org.jgrapht.alg.KShortestPathKValuesTest: void verifyNbPathsForAllPairsOfVertices(org.jgrapht.Graph)>:
		<org.jgrapht.alg.KShortestPathKValuesTest.java:148, 36.84%>
	<org.jgrapht.alg.KruskalMinimumSpanningTreeTest: void testMinimumSpanningTree()>:
		<org.jgrapht.alg.KruskalMinimumSpanningTreeTest.java:80, 19.05%>
		<org.jgrapht.alg.KruskalMinimumSpanningTreeTest.java:84, 38.10%>
	<org.jgrapht.alg.StoerWagnerMinimumCutTest: void testMinCut14()>:
		<org.jgrapht.alg.StoerWagnerMinimumCutTest.java:97, 16.67%>
	<org.jgrapht.alg.StoerWagnerMinimumCutTest: void testMinCutDisconnected()>:
		<org.jgrapht.alg.StoerWagnerMinimumCutTest.java:124, 22.73%>
	<org.jgrapht.alg.TransitiveClosureTest: void testLinearGraph()>:
		<org.jgrapht.alg.TransitiveClosureTest.java:75, 47.83%>
		<org.jgrapht.alg.TransitiveClosureTest.java:78, 43.48%>
	<org.jgrapht.alg.TransitiveClosureTest: void testRingGraph()>:
		<org.jgrapht.alg.TransitiveClosureTest.java:107, 45.45%>
		<org.jgrapht.alg.TransitiveClosureTest.java:110, 50.00%>
	<org.jgrapht.alg.VertexCoversTest: void testFind2ApproximationCover()>:
		<org.jgrapht.alg.VertexCoversTest.java:74, 60.00%>
	<org.jgrapht.alg.VertexCoversTest: void testFindGreedyCover()>:
		<org.jgrapht.alg.VertexCoversTest.java:89, 50.00%>
	<org.jgrapht.alg.util.UnionFindTest: void testIdentical(java.lang.String[],java.util.ArrayList,org.jgrapht.alg.util.UnionFind)>:
		<org.jgrapht.alg.util.UnionFindTest.java:131, 41.18%>
	<org.jgrapht.experimental.GraphReaderTest: void testGraphReader()>:
		<org.jgrapht.experimental.GraphReaderTest.java:88, 27.27%>
	<org.jgrapht.experimental.GraphReaderTest: void testGraphReaderWeighted()>:
		<org.jgrapht.experimental.GraphReaderTest.java:116, 23.08%>
	<org.jgrapht.experimental.alg.ColoringTest: void testBacktrackColoring()>:
		<org.jgrapht.experimental.alg.ColoringTest.java:97, 50.00%>
	<org.jgrapht.experimental.alg.ColoringTest: void testGreedyColoring()>:
		<org.jgrapht.experimental.alg.ColoringTest.java:77, 50.00%>
	<org.jgrapht.experimental.dag.DirectedAcyclicGraphTest: void testTopoIterationOrderLinearGraph()>:
		<org.jgrapht.experimental.dag.DirectedAcyclicGraphTest.java:181, 29.41%>
		<org.jgrapht.experimental.dag.DirectedAcyclicGraphTest.java:182, 41.18%>
	<org.jgrapht.experimental.isomorphism.IsomorphismInspectorTest: void assertIsomorphic(org.jgrapht.Graph[],boolean,org.jgrapht.experimental.equivalence.EquivalenceComparator,org.jgrapht.experimental.equivalence.EquivalenceComparator)>:
		<org.jgrapht.experimental.isomorphism.IsomorphismInspectorTest.java:138, 28.57%>
		<org.jgrapht.experimental.isomorphism.IsomorphismInspectorTest.java:140, 28.57%>
	<org.jgrapht.experimental.isomorphism.IsomorphismInspectorTest: void assertIsomorphicStopAfterFirstMatch(org.jgrapht.Graph[],boolean,boolean,org.jgrapht.experimental.equivalence.EquivalenceComparator,org.jgrapht.experimental.equivalence.EquivalenceComparator)>:
		<org.jgrapht.experimental.isomorphism.IsomorphismInspectorTest.java:485, 14.71%>
	<org.jgrapht.ext.DOTExporterTest: void testUndirected()>:
		<org.jgrapht.ext.DOTExporterTest.java:110, 41.67%>
	<org.jgrapht.ext.DOTExporterTest: void testValidNodeIDs()>:
		<org.jgrapht.ext.DOTExporterTest.java:149, 16.00%>
	<org.jgrapht.ext.GmlExporterTest: void testUndirected()>:
		<org.jgrapht.ext.GmlExporterTest.java:117, 62.50%>
	<org.jgrapht.ext.MatrixExporterTest: void testAdjacencyDirected()>:
		<org.jgrapht.ext.MatrixExporterTest.java:149, 62.50%>
	<org.jgrapht.ext.MatrixExporterTest: void testAdjacencyUndirected()>:
		<org.jgrapht.ext.MatrixExporterTest.java:133, 62.50%>
	<org.jgrapht.ext.MatrixExporterTest: void testLaplacian()>:
		<org.jgrapht.ext.MatrixExporterTest.java:113, 38.46%>
		<org.jgrapht.ext.MatrixExporterTest.java:117, 38.46%>
	<org.jgrapht.generate.RandomGraphGeneratorTest: void testBadVertexFactory()>:
		<org.jgrapht.generate.RandomGraphGeneratorTest.java:106, 12.50%>
	<org.jgrapht.generate.RandomGraphGeneratorTest: void testGenerateDirectedGraph()>:
		<org.jgrapht.generate.RandomGraphGeneratorTest.java:70, 20.00%>
	<org.jgrapht.generate.RandomGraphGeneratorTest: void testGenerateListenableUndirectedGraph()>:
		<org.jgrapht.generate.RandomGraphGeneratorTest.java:89, 20.00%>
	<org.jgrapht.graph.AsUndirectedGraphTest: void testAddEdge()>:
		<org.jgrapht.graph.AsUndirectedGraphTest.java:89, 100.00%>
	<org.jgrapht.graph.AsUndirectedGraphTest: void testAddVertex()>:
		<org.jgrapht.graph.AsUndirectedGraphTest.java:102, 85.71%>
		<org.jgrapht.graph.AsUndirectedGraphTest.java:103, 100.00%>
	<org.jgrapht.graph.AsUndirectedGraphTest: void testDegreeOf()>:
		<org.jgrapht.graph.AsUndirectedGraphTest.java:111, 46.15%>
		<org.jgrapht.graph.AsUndirectedGraphTest.java:112, 61.54%>
		<org.jgrapht.graph.AsUndirectedGraphTest.java:113, 76.92%>
		<org.jgrapht.graph.AsUndirectedGraphTest.java:114, 92.31%>
	<org.jgrapht.graph.AsUndirectedGraphTest: void testGetAllEdges()>:
		<org.jgrapht.graph.AsUndirectedGraphTest.java:123, 40.00%>
		<org.jgrapht.graph.AsUndirectedGraphTest.java:124, 65.00%>
		<org.jgrapht.graph.AsUndirectedGraphTest.java:128, 70.00%>
		<org.jgrapht.graph.AsUndirectedGraphTest.java:129, 80.00%>
	<org.jgrapht.graph.AsUndirectedGraphTest: void testRemoveEdge()>:
		<org.jgrapht.graph.AsUndirectedGraphTest.java:155, 88.89%>
		<org.jgrapht.graph.AsUndirectedGraphTest.java:156, 111.11%>
	<org.jgrapht.graph.AsUndirectedGraphTest: void testRemoveVertex()>:
		<org.jgrapht.graph.AsUndirectedGraphTest.java:165, 88.89%>
		<org.jgrapht.graph.AsUndirectedGraphTest.java:166, 111.11%>
	<org.jgrapht.graph.AsUnweightedGraphTest: void constructWeighted(org.jgrapht.WeightedGraph)>:
		<org.jgrapht.graph.AsUnweightedGraphTest.java:110, 57.14%>
	<org.jgrapht.graph.EqualsAndHashCodeTest: void testDefaultDirectedGraph()>:
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:105, 6.52%>
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:106, 10.87%>
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:108, 13.04%>
	<org.jgrapht.graph.EqualsAndHashCodeTest: void testGraphsWithNonIntrusiveEdge()>:
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:187, 3.90%>
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:188, 6.49%>
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:190, 7.79%>
	<org.jgrapht.graph.EqualsAndHashCodeTest: void testGrapshWithCustomEdges()>:
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:268, 7.69%>
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:269, 12.82%>
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:271, 15.38%>
	<org.jgrapht.graph.EqualsAndHashCodeTest: void testPseudograph()>:
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:230, 5.08%>
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:231, 8.47%>
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:233, 10.17%>
	<org.jgrapht.graph.EqualsAndHashCodeTest: void testSimpleGraph()>:
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:148, 6.52%>
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:149, 10.87%>
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:151, 13.04%>
	<org.jgrapht.graph.GenericGraphsTest: void testAlissaHacker()>:
		<org.jgrapht.graph.GenericGraphsTest.java:134, 83.33%>
	<org.jgrapht.graph.GenericGraphsTest: void testEqualButNotSameVertex()>:
		<org.jgrapht.graph.GenericGraphsTest.java:145, 40.00%>
		<org.jgrapht.graph.GenericGraphsTest.java:146, 40.00%>
	<org.jgrapht.graph.SimpleDirectedGraphTest: void testIncomingOutgoingEdgesOf()>:
		<org.jgrapht.graph.SimpleDirectedGraphTest.java:315, 128.57%>
	<org.jgrapht.graph.SubgraphTest: void testInducedSubgraphUnderlyingEdgeAddition()>:
		<org.jgrapht.graph.SubgraphTest.java:192, 20.00%>
	<org.jgrapht.traverse.AbstractGraphIteratorTest: void testDirectedGraph()>:
		<org.jgrapht.traverse.AbstractGraphIteratorTest.java:86, 47.06%>
		<org.jgrapht.traverse.AbstractGraphIteratorTest.java:88, 52.94%>
	<org.jgrapht.traverse.ClosestFirstIteratorTest: void testNoStart()>:
		<org.jgrapht.traverse.ClosestFirstIteratorTest.java:103, 53.85%>
	<org.jgrapht.traverse.ClosestFirstIteratorTest: void testRadius()>:
		<org.jgrapht.traverse.ClosestFirstIteratorTest.java:80, 53.85%>
	<org.jgrapht.traverse.DepthFirstIteratorTest: void testBug1169182()>:
		<org.jgrapht.traverse.DepthFirstIteratorTest.java:149, 16.00%>
	<org.jgrapht.traverse.TopologicalOrderIteratorTest: void testEmptyGraph()>:
		<org.jgrapht.traverse.TopologicalOrderIteratorTest.java:136, 50.00%>
	<org.jgrapht.traverse.TopologicalOrderIteratorTest: void testRecipe()>:
		<org.jgrapht.traverse.TopologicalOrderIteratorTest.java:109, 9.62%>
		<org.jgrapht.traverse.TopologicalOrderIteratorTest.java:121, 9.62%>
	<org.jgrapht.util.FibonacciHeapTest: void testGrowReplaceShrink()>:
		<org.jgrapht.util.FibonacciHeapTest.java:88, 17.65%>
		<org.jgrapht.util.FibonacciHeapTest.java:91, 17.65%>

Relevant Assertion clone sets (7):
Set (score: 1.00, ccsize: 2, packages: 1, classes: 1): 
	<org.jgrapht.alg.VertexCoversTest: void testFind2ApproximationCover()>:
		<org.jgrapht.alg.VertexCoversTest.java:74, 60.00%>
	<org.jgrapht.alg.VertexCoversTest: void testFindGreedyCover()>:
		<org.jgrapht.alg.VertexCoversTest.java:89, 50.00%>
Set (score: 1.00, ccsize: 2, packages: 1, classes: 1): 
	<org.jgrapht.experimental.GraphReaderTest: void testGraphReader()>:
		<org.jgrapht.experimental.GraphReaderTest.java:88, 27.27%>
	<org.jgrapht.experimental.GraphReaderTest: void testGraphReaderWeighted()>:
		<org.jgrapht.experimental.GraphReaderTest.java:116, 23.08%>
Set (score: 0.67, ccsize: 2, packages: 1, classes: 2): 
	<org.jgrapht.ext.DOTExporterTest: void testUndirected()>:
		<org.jgrapht.ext.DOTExporterTest.java:110, 41.67%>
	<org.jgrapht.ext.GmlExporterTest: void testUndirected()>:
		<org.jgrapht.ext.GmlExporterTest.java:117, 62.50%>
Set (score: 0.67, ccsize: 2, packages: 1, classes: 1): 
	<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest: void testBipartiteMatching1()>:
		<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest.java:86, 6.76%>
	<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest: void testBipartiteMatching2()>:
		<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest.java:115, 5.21%>
Set (score: 0.50, ccsize: 4, packages: 1, classes: 1): 
	<org.jgrapht.graph.EqualsAndHashCodeTest: void testDefaultDirectedGraph()>:
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:106, 10.87%>
	<org.jgrapht.graph.EqualsAndHashCodeTest: void testGraphsWithNonIntrusiveEdge()>:
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:188, 6.49%>
Set (score: 0.50, ccsize: 4, packages: 1, classes: 1): 
	<org.jgrapht.graph.EqualsAndHashCodeTest: void testGrapshWithCustomEdges()>:
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:269, 12.82%>
	<org.jgrapht.graph.EqualsAndHashCodeTest: void testSimpleGraph()>:
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:149, 10.87%>
Set (score: 0.50, ccsize: 2, packages: 1, classes: 1): 
	<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest: void testBipartiteMatching1()>:
		<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest.java:83, 6.76%>
	<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest: void testBipartiteMatching2()>:
		<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest.java:112, 5.21%>
==============================================

[144] Set (editDistance: 2, isComplete: false, packages: 13, classes: 35): 
Centroid (size: 2): <org.jgrapht.traverse.AbstractGraphIteratorTest: void testDirectedGraph()>

Methods (64): 
	<org.jgrapht.EnhancedTestCase: void assertFalse()>:
		<org.jgrapht.EnhancedTestCase.java:79, 100.00%>
	<org.jgrapht.EnhancedTestCase: void assertTrue()>:
		<org.jgrapht.EnhancedTestCase.java:87, 100.00%>
	<org.jgrapht.alg.BellmanFordShortestPathTest: void testWithNegativeEdges()>:
		<org.jgrapht.alg.BellmanFordShortestPathTest.java:120, 45.45%>
		<org.jgrapht.alg.BellmanFordShortestPathTest.java:127, 63.64%>
	<org.jgrapht.alg.BiconnectivityInspectorTest: void testLinearGraph(int)>:
		<org.jgrapht.alg.BiconnectivityInspectorTest.java:88, 40.00%>
		<org.jgrapht.alg.BiconnectivityInspectorTest.java:89, 40.00%>
	<org.jgrapht.alg.BiconnectivityInspectorTest: void testNotBiconnected()>:
		<org.jgrapht.alg.BiconnectivityInspectorTest.java:100, 55.56%>
		<org.jgrapht.alg.BiconnectivityInspectorTest.java:101, 55.56%>
	<org.jgrapht.alg.BlockCutpointGraphTest: void testBiconnected()>:
		<org.jgrapht.alg.BlockCutpointGraphTest.java:67, 41.67%>
		<org.jgrapht.alg.BlockCutpointGraphTest.java:71, 41.67%>
	<org.jgrapht.alg.BlockCutpointGraphTest: void testGetBlock(org.jgrapht.alg.BlockCutpointGraph)>:
		<org.jgrapht.alg.BlockCutpointGraphTest.java:88, 33.33%>
		<org.jgrapht.alg.BlockCutpointGraphTest.java:94, 19.05%>
	<org.jgrapht.alg.BlockCutpointGraphTest: void testLinearGraph(int)>:
		<org.jgrapht.alg.BlockCutpointGraphTest.java:121, 33.33%>
		<org.jgrapht.alg.BlockCutpointGraphTest.java:125, 33.33%>
	<org.jgrapht.alg.BlockCutpointGraphTest: void testNotBiconnected()>:
		<org.jgrapht.alg.BlockCutpointGraphTest.java:135, 41.67%>
		<org.jgrapht.alg.BlockCutpointGraphTest.java:139, 41.67%>
	<org.jgrapht.alg.BronKerboschCliqueFinderTest: void testFindAll()>:
		<org.jgrapht.alg.BronKerboschCliqueFinderTest.java:143, 26.32%>
		<org.jgrapht.alg.BronKerboschCliqueFinderTest.java:175, 21.05%>
	<org.jgrapht.alg.BronKerboschCliqueFinderTest: void testFindBiggest()>:
		<org.jgrapht.alg.BronKerboschCliqueFinderTest.java:119, 41.67%>
		<org.jgrapht.alg.BronKerboschCliqueFinderTest.java:129, 58.33%>
	<org.jgrapht.alg.ConnectivityInspectorTest: void testDirectedGraph()>:
		<org.jgrapht.alg.ConnectivityInspectorTest.java:139, 57.14%>
		<org.jgrapht.alg.ConnectivityInspectorTest.java:143, 57.14%>
	<org.jgrapht.alg.ConnectivityInspectorTest: void testStronglyConnected4()>:
		<org.jgrapht.alg.ConnectivityInspectorTest.java:371, 30.77%>
	<org.jgrapht.alg.FloydWarshallShortestPathsTest: void testCompareWithDijkstra()>:
		<org.jgrapht.alg.FloydWarshallShortestPathsTest.java:96, 7.41%>
		<org.jgrapht.alg.FloydWarshallShortestPathsTest.java:121, 7.41%>
	<org.jgrapht.alg.FloydWarshallShortestPathsTest: void testDiameter()>:
		<org.jgrapht.alg.FloydWarshallShortestPathsTest.java:161, 57.14%>
	<org.jgrapht.alg.FloydWarshallShortestPathsTest: void testEdgeLessDiameter()>:
		<org.jgrapht.alg.FloydWarshallShortestPathsTest.java:182, 40.00%>
	<org.jgrapht.alg.FloydWarshallShortestPathsTest: void testEmptyDiameter()>:
		<org.jgrapht.alg.FloydWarshallShortestPathsTest.java:170, 50.00%>
	<org.jgrapht.alg.HamiltonianCycleTest: void testHamiltonianCycle()>:
		<org.jgrapht.alg.HamiltonianCycleTest.java:79, 33.33%>
		<org.jgrapht.alg.HamiltonianCycleTest.java:89, 27.78%>
	<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest: void testBipartiteMatching1()>:
		<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest.java:83, 6.76%>
		<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest.java:86, 6.76%>
	<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest: void testBipartiteMatching2()>:
		<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest.java:112, 5.21%>
		<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest.java:115, 5.21%>
	<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest: void testEmptyMatching()>:
		<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest.java:128, 33.33%>
	<org.jgrapht.alg.KSPDiscardsValidPathsTest: void testNot3connectedGraph()>:
		<org.jgrapht.alg.KSPDiscardsValidPathsTest.java:102, 87.50%>
	<org.jgrapht.alg.KSPExampleTest: void testFourReturnedPathsJGraphT()>:
		<org.jgrapht.alg.KSPExampleTest.java:60, 55.56%>
	<org.jgrapht.alg.KSPExampleTest: void testThreeReturnedPathsJGraphT()>:
		<org.jgrapht.alg.KSPExampleTest.java:72, 60.00%>
	<org.jgrapht.alg.KSPExampleTest: void testTwoReturnedPathsJGraphT()>:
		<org.jgrapht.alg.KSPExampleTest.java:84, 60.00%>
	<org.jgrapht.alg.KShortestPathCostTest: void verifyShortestPathsInIncreasingOrderOfWeight(org.jgrapht.Graph)>:
		<org.jgrapht.alg.KShortestPathCostTest.java:222, 30.77%>
		<org.jgrapht.alg.KShortestPathCostTest.java:225, 30.77%>
	<org.jgrapht.alg.KShortestPathCostTest: void verifyWeightsConsistency(java.util.List,java.util.List)>:
		<org.jgrapht.alg.KShortestPathCostTest.java:294, 53.85%>
	<org.jgrapht.alg.KShortestPathKValuesTest: void verifyNbPathsForAllPairsOfVertices(org.jgrapht.Graph)>:
		<org.jgrapht.alg.KShortestPathKValuesTest.java:148, 36.84%>
	<org.jgrapht.alg.KruskalMinimumSpanningTreeTest: void testMinimumSpanningTree()>:
		<org.jgrapht.alg.KruskalMinimumSpanningTreeTest.java:80, 19.05%>
		<org.jgrapht.alg.KruskalMinimumSpanningTreeTest.java:84, 38.10%>
	<org.jgrapht.alg.StoerWagnerMinimumCutTest: void testMinCut14()>:
		<org.jgrapht.alg.StoerWagnerMinimumCutTest.java:97, 16.67%>
	<org.jgrapht.alg.StoerWagnerMinimumCutTest: void testMinCutDisconnected()>:
		<org.jgrapht.alg.StoerWagnerMinimumCutTest.java:124, 22.73%>
	<org.jgrapht.alg.TransitiveClosureTest: void testLinearGraph()>:
		<org.jgrapht.alg.TransitiveClosureTest.java:75, 47.83%>
		<org.jgrapht.alg.TransitiveClosureTest.java:78, 43.48%>
	<org.jgrapht.alg.TransitiveClosureTest: void testRingGraph()>:
		<org.jgrapht.alg.TransitiveClosureTest.java:107, 45.45%>
		<org.jgrapht.alg.TransitiveClosureTest.java:110, 50.00%>
	<org.jgrapht.alg.VertexCoversTest: void testFind2ApproximationCover()>:
		<org.jgrapht.alg.VertexCoversTest.java:74, 60.00%>
	<org.jgrapht.alg.VertexCoversTest: void testFindGreedyCover()>:
		<org.jgrapht.alg.VertexCoversTest.java:89, 50.00%>
	<org.jgrapht.alg.util.UnionFindTest: void testIdentical(java.lang.String[],java.util.ArrayList,org.jgrapht.alg.util.UnionFind)>:
		<org.jgrapht.alg.util.UnionFindTest.java:131, 41.18%>
	<org.jgrapht.experimental.alg.ColoringTest: void testBacktrackColoring()>:
		<org.jgrapht.experimental.alg.ColoringTest.java:97, 50.00%>
	<org.jgrapht.experimental.alg.ColoringTest: void testGreedyColoring()>:
		<org.jgrapht.experimental.alg.ColoringTest.java:77, 50.00%>
	<org.jgrapht.experimental.dag.DirectedAcyclicGraphTest: void testTopoIterationOrderLinearGraph()>:
		<org.jgrapht.experimental.dag.DirectedAcyclicGraphTest.java:181, 29.41%>
		<org.jgrapht.experimental.dag.DirectedAcyclicGraphTest.java:182, 41.18%>
	<org.jgrapht.experimental.equivalence.EquivalenceGroupCreatorTest: void testOneComparator(org.jgrapht.experimental.equivalence.EquivalenceComparator,int)>:
		<org.jgrapht.experimental.equivalence.EquivalenceGroupCreatorTest.java:152, 23.53%>
		<org.jgrapht.experimental.equivalence.EquivalenceGroupCreatorTest.java:157, 41.18%>
	<org.jgrapht.experimental.isomorphism.IsomorphismInspectorTest: void assertIsomorphic(org.jgrapht.Graph[],boolean,org.jgrapht.experimental.equivalence.EquivalenceComparator,org.jgrapht.experimental.equivalence.EquivalenceComparator)>:
		<org.jgrapht.experimental.isomorphism.IsomorphismInspectorTest.java:138, 28.57%>
		<org.jgrapht.experimental.isomorphism.IsomorphismInspectorTest.java:140, 28.57%>
	<org.jgrapht.experimental.isomorphism.IsomorphismInspectorTest: void assertIsomorphicStopAfterFirstMatch(org.jgrapht.Graph[],boolean,boolean,org.jgrapht.experimental.equivalence.EquivalenceComparator,org.jgrapht.experimental.equivalence.EquivalenceComparator)>:
		<org.jgrapht.experimental.isomorphism.IsomorphismInspectorTest.java:485, 14.71%>
	<org.jgrapht.experimental.permutation.CompoundPermutationIterTest: void testGetNext()>:
		<org.jgrapht.experimental.permutation.CompoundPermutationIterTest.java:96, 40.00%>
		<org.jgrapht.experimental.permutation.CompoundPermutationIterTest.java:127, 40.00%>
	<org.jgrapht.ext.DOTExporterTest: void testValidNodeIDs()>:
		<org.jgrapht.ext.DOTExporterTest.java:149, 16.00%>
	<org.jgrapht.generate.GraphGeneratorTest: void testCompleteBipartiteGraphGenerator()>:
		<org.jgrapht.generate.GraphGeneratorTest.java:243, 50.00%>
		<org.jgrapht.generate.GraphGeneratorTest.java:244, 50.00%>
	<org.jgrapht.generate.GraphGeneratorTest: void testCompleteGraphGenerator()>:
		<org.jgrapht.generate.GraphGeneratorTest.java:185, 62.50%>
	<org.jgrapht.generate.GraphGeneratorTest: void testHyperCubeGraphGenerator()>:
		<org.jgrapht.generate.GraphGeneratorTest.java:265, 50.00%>
		<org.jgrapht.generate.GraphGeneratorTest.java:266, 50.00%>
	<org.jgrapht.generate.RandomGraphGeneratorTest: void testBadVertexFactory()>:
		<org.jgrapht.generate.RandomGraphGeneratorTest.java:106, 12.50%>
	<org.jgrapht.generate.RandomGraphGeneratorTest: void testGenerateDirectedGraph()>:
		<org.jgrapht.generate.RandomGraphGeneratorTest.java:70, 20.00%>
	<org.jgrapht.generate.RandomGraphGeneratorTest: void testGenerateListenableUndirectedGraph()>:
		<org.jgrapht.generate.RandomGraphGeneratorTest.java:89, 20.00%>
	<org.jgrapht.graph.AsUndirectedGraphTest: void testAddVertex()>:
		<org.jgrapht.graph.AsUndirectedGraphTest.java:102, 85.71%>
		<org.jgrapht.graph.AsUndirectedGraphTest.java:103, 100.00%>
	<org.jgrapht.graph.AsUndirectedGraphTest: void testRemoveEdge()>:
		<org.jgrapht.graph.AsUndirectedGraphTest.java:155, 88.89%>
		<org.jgrapht.graph.AsUndirectedGraphTest.java:156, 111.11%>
	<org.jgrapht.graph.AsUndirectedGraphTest: void testRemoveVertex()>:
		<org.jgrapht.graph.AsUndirectedGraphTest.java:165, 88.89%>
		<org.jgrapht.graph.AsUndirectedGraphTest.java:166, 111.11%>
	<org.jgrapht.graph.AsUnweightedGraphTest: void constructWeighted(org.jgrapht.WeightedGraph)>:
		<org.jgrapht.graph.AsUnweightedGraphTest.java:110, 57.14%>
	<org.jgrapht.graph.DefaultDirectedGraphTest: void testEdgesOf()>:
		<org.jgrapht.graph.DefaultDirectedGraphTest.java:117, 75.00%>
		<org.jgrapht.graph.DefaultDirectedGraphTest.java:118, 75.00%>
	<org.jgrapht.graph.DefaultDirectedGraphTest: void testGetAllEdges()>:
		<org.jgrapht.graph.DefaultDirectedGraphTest.java:130, 100.00%>
	<org.jgrapht.graph.DefaultDirectedGraphTest: void testInDegreeOf()>:
		<org.jgrapht.graph.DefaultDirectedGraphTest.java:141, 83.33%>
		<org.jgrapht.graph.DefaultDirectedGraphTest.java:142, 83.33%>
	<org.jgrapht.graph.DefaultDirectedGraphTest: void testOutDegreeOf()>:
		<org.jgrapht.graph.DefaultDirectedGraphTest.java:153, 83.33%>
		<org.jgrapht.graph.DefaultDirectedGraphTest.java:154, 83.33%>
	<org.jgrapht.graph.GenericGraphsTest: void testEqualButNotSameVertex()>:
		<org.jgrapht.graph.GenericGraphsTest.java:145, 40.00%>
		<org.jgrapht.graph.GenericGraphsTest.java:146, 40.00%>
	<org.jgrapht.graph.SimpleDirectedGraphTest: void testIncomingOutgoingEdgesOf()>:
		<org.jgrapht.graph.SimpleDirectedGraphTest.java:315, 128.57%>
	<org.jgrapht.graph.SubgraphTest: void testInducedSubgraphUnderlyingEdgeAddition()>:
		<org.jgrapht.graph.SubgraphTest.java:192, 20.00%>
	<org.jgrapht.traverse.AbstractGraphIteratorTest: void testDirectedGraph()>:
		<org.jgrapht.traverse.AbstractGraphIteratorTest.java:86, 47.06%>
		<org.jgrapht.traverse.AbstractGraphIteratorTest.java:88, 52.94%>
	<org.jgrapht.traverse.TopologicalOrderIteratorTest: void testEmptyGraph()>:
		<org.jgrapht.traverse.TopologicalOrderIteratorTest.java:136, 50.00%>
	<org.jgrapht.util.FibonacciHeapTest: void testGrowReplaceShrink()>:
		<org.jgrapht.util.FibonacciHeapTest.java:88, 17.65%>
		<org.jgrapht.util.FibonacciHeapTest.java:91, 17.65%>

Relevant Assertion clone sets (6):
Set (score: 1.00, ccsize: 2, packages: 1, classes: 1): 
	<org.jgrapht.alg.VertexCoversTest: void testFind2ApproximationCover()>:
		<org.jgrapht.alg.VertexCoversTest.java:74, 60.00%>
	<org.jgrapht.alg.VertexCoversTest: void testFindGreedyCover()>:
		<org.jgrapht.alg.VertexCoversTest.java:89, 50.00%>
Set (score: 0.67, ccsize: 3, packages: 1, classes: 2): 
	<org.jgrapht.alg.BiconnectivityInspectorTest: void testLinearGraph(int)>:
		<org.jgrapht.alg.BiconnectivityInspectorTest.java:88, 40.00%>
	<org.jgrapht.alg.BlockCutpointGraphTest: void testLinearGraph(int)>:
		<org.jgrapht.alg.BlockCutpointGraphTest.java:121, 33.33%>
		<org.jgrapht.alg.BlockCutpointGraphTest.java:125, 33.33%>
Set (score: 0.67, ccsize: 3, packages: 1, classes: 2): 
	<org.jgrapht.alg.BiconnectivityInspectorTest: void testNotBiconnected()>:
		<org.jgrapht.alg.BiconnectivityInspectorTest.java:100, 55.56%>
	<org.jgrapht.alg.BlockCutpointGraphTest: void testNotBiconnected()>:
		<org.jgrapht.alg.BlockCutpointGraphTest.java:135, 41.67%>
		<org.jgrapht.alg.BlockCutpointGraphTest.java:139, 41.67%>
Set (score: 0.67, ccsize: 2, packages: 1, classes: 1): 
	<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest: void testBipartiteMatching1()>:
		<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest.java:86, 6.76%>
	<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest: void testBipartiteMatching2()>:
		<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest.java:115, 5.21%>
Set (score: 0.50, ccsize: 3, packages: 1, classes: 1): 
	<org.jgrapht.alg.KSPExampleTest: void testFourReturnedPathsJGraphT()>:
		<org.jgrapht.alg.KSPExampleTest.java:60, 55.56%>
	<org.jgrapht.alg.KSPExampleTest: void testThreeReturnedPathsJGraphT()>:
		<org.jgrapht.alg.KSPExampleTest.java:72, 60.00%>
	<org.jgrapht.alg.KSPExampleTest: void testTwoReturnedPathsJGraphT()>:
		<org.jgrapht.alg.KSPExampleTest.java:84, 60.00%>
Set (score: 0.50, ccsize: 2, packages: 1, classes: 1): 
	<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest: void testBipartiteMatching1()>:
		<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest.java:83, 6.76%>
	<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest: void testBipartiteMatching2()>:
		<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest.java:112, 5.21%>
==============================================

[145] Set (editDistance: 2, isComplete: false, packages: 13, classes: 34): 
Centroid (size: 2): <org.jgrapht.traverse.TopologicalOrderIteratorTest: void testRecipe()>

Methods (64): 
	<org.jgrapht.EnhancedTestCase: void assertFalse()>:
		<org.jgrapht.EnhancedTestCase.java:79, 100.00%>
	<org.jgrapht.EnhancedTestCase: void assertTrue()>:
		<org.jgrapht.EnhancedTestCase.java:87, 100.00%>
	<org.jgrapht.alg.BellmanFordShortestPathTest: void testWithNegativeEdges()>:
		<org.jgrapht.alg.BellmanFordShortestPathTest.java:120, 45.45%>
		<org.jgrapht.alg.BellmanFordShortestPathTest.java:127, 63.64%>
	<org.jgrapht.alg.BiconnectivityInspectorTest: void testLinearGraph(int)>:
		<org.jgrapht.alg.BiconnectivityInspectorTest.java:88, 40.00%>
		<org.jgrapht.alg.BiconnectivityInspectorTest.java:89, 40.00%>
	<org.jgrapht.alg.BiconnectivityInspectorTest: void testNotBiconnected()>:
		<org.jgrapht.alg.BiconnectivityInspectorTest.java:100, 55.56%>
		<org.jgrapht.alg.BiconnectivityInspectorTest.java:101, 55.56%>
	<org.jgrapht.alg.BlockCutpointGraphTest: void testBiconnected()>:
		<org.jgrapht.alg.BlockCutpointGraphTest.java:67, 41.67%>
		<org.jgrapht.alg.BlockCutpointGraphTest.java:71, 41.67%>
	<org.jgrapht.alg.BlockCutpointGraphTest: void testGetBlock(org.jgrapht.alg.BlockCutpointGraph)>:
		<org.jgrapht.alg.BlockCutpointGraphTest.java:88, 33.33%>
		<org.jgrapht.alg.BlockCutpointGraphTest.java:94, 19.05%>
	<org.jgrapht.alg.BlockCutpointGraphTest: void testLinearGraph(int)>:
		<org.jgrapht.alg.BlockCutpointGraphTest.java:121, 33.33%>
		<org.jgrapht.alg.BlockCutpointGraphTest.java:125, 33.33%>
	<org.jgrapht.alg.BlockCutpointGraphTest: void testNotBiconnected()>:
		<org.jgrapht.alg.BlockCutpointGraphTest.java:135, 41.67%>
		<org.jgrapht.alg.BlockCutpointGraphTest.java:139, 41.67%>
	<org.jgrapht.alg.BronKerboschCliqueFinderTest: void testFindAll()>:
		<org.jgrapht.alg.BronKerboschCliqueFinderTest.java:143, 26.32%>
		<org.jgrapht.alg.BronKerboschCliqueFinderTest.java:175, 21.05%>
	<org.jgrapht.alg.BronKerboschCliqueFinderTest: void testFindBiggest()>:
		<org.jgrapht.alg.BronKerboschCliqueFinderTest.java:119, 41.67%>
		<org.jgrapht.alg.BronKerboschCliqueFinderTest.java:129, 58.33%>
	<org.jgrapht.alg.ConnectivityInspectorTest: void testDirectedGraph()>:
		<org.jgrapht.alg.ConnectivityInspectorTest.java:139, 57.14%>
		<org.jgrapht.alg.ConnectivityInspectorTest.java:143, 57.14%>
	<org.jgrapht.alg.ConnectivityInspectorTest: void testStronglyConnected4()>:
		<org.jgrapht.alg.ConnectivityInspectorTest.java:371, 30.77%>
	<org.jgrapht.alg.FloydWarshallShortestPathsTest: void testCompareWithDijkstra()>:
		<org.jgrapht.alg.FloydWarshallShortestPathsTest.java:96, 7.41%>
		<org.jgrapht.alg.FloydWarshallShortestPathsTest.java:121, 7.41%>
	<org.jgrapht.alg.FloydWarshallShortestPathsTest: void testDiameter()>:
		<org.jgrapht.alg.FloydWarshallShortestPathsTest.java:161, 57.14%>
	<org.jgrapht.alg.FloydWarshallShortestPathsTest: void testEdgeLessDiameter()>:
		<org.jgrapht.alg.FloydWarshallShortestPathsTest.java:182, 40.00%>
	<org.jgrapht.alg.FloydWarshallShortestPathsTest: void testEmptyDiameter()>:
		<org.jgrapht.alg.FloydWarshallShortestPathsTest.java:170, 50.00%>
	<org.jgrapht.alg.HamiltonianCycleTest: void testHamiltonianCycle()>:
		<org.jgrapht.alg.HamiltonianCycleTest.java:79, 33.33%>
		<org.jgrapht.alg.HamiltonianCycleTest.java:89, 27.78%>
	<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest: void testBipartiteMatching1()>:
		<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest.java:83, 6.76%>
		<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest.java:86, 6.76%>
	<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest: void testBipartiteMatching2()>:
		<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest.java:112, 5.21%>
		<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest.java:115, 5.21%>
	<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest: void testEmptyMatching()>:
		<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest.java:128, 33.33%>
	<org.jgrapht.alg.KSPDiscardsValidPathsTest: void testNot3connectedGraph()>:
		<org.jgrapht.alg.KSPDiscardsValidPathsTest.java:102, 87.50%>
	<org.jgrapht.alg.KSPExampleTest: void testFourReturnedPathsJGraphT()>:
		<org.jgrapht.alg.KSPExampleTest.java:60, 55.56%>
	<org.jgrapht.alg.KSPExampleTest: void testThreeReturnedPathsJGraphT()>:
		<org.jgrapht.alg.KSPExampleTest.java:72, 60.00%>
	<org.jgrapht.alg.KSPExampleTest: void testTwoReturnedPathsJGraphT()>:
		<org.jgrapht.alg.KSPExampleTest.java:84, 60.00%>
	<org.jgrapht.alg.KShortestPathCostTest: void verifyShortestPathsInIncreasingOrderOfWeight(org.jgrapht.Graph)>:
		<org.jgrapht.alg.KShortestPathCostTest.java:222, 30.77%>
		<org.jgrapht.alg.KShortestPathCostTest.java:225, 30.77%>
	<org.jgrapht.alg.KShortestPathCostTest: void verifyWeightsConsistency(java.util.List,java.util.List)>:
		<org.jgrapht.alg.KShortestPathCostTest.java:294, 53.85%>
	<org.jgrapht.alg.KShortestPathKValuesTest: void verifyNbPathsForAllPairsOfVertices(org.jgrapht.Graph)>:
		<org.jgrapht.alg.KShortestPathKValuesTest.java:148, 36.84%>
	<org.jgrapht.alg.KruskalMinimumSpanningTreeTest: void testMinimumSpanningTree()>:
		<org.jgrapht.alg.KruskalMinimumSpanningTreeTest.java:80, 19.05%>
		<org.jgrapht.alg.KruskalMinimumSpanningTreeTest.java:84, 38.10%>
	<org.jgrapht.alg.StoerWagnerMinimumCutTest: void testMinCut14()>:
		<org.jgrapht.alg.StoerWagnerMinimumCutTest.java:97, 16.67%>
	<org.jgrapht.alg.StoerWagnerMinimumCutTest: void testMinCutDisconnected()>:
		<org.jgrapht.alg.StoerWagnerMinimumCutTest.java:124, 22.73%>
	<org.jgrapht.alg.TransitiveClosureTest: void testLinearGraph()>:
		<org.jgrapht.alg.TransitiveClosureTest.java:75, 47.83%>
		<org.jgrapht.alg.TransitiveClosureTest.java:78, 43.48%>
	<org.jgrapht.alg.TransitiveClosureTest: void testRingGraph()>:
		<org.jgrapht.alg.TransitiveClosureTest.java:107, 45.45%>
		<org.jgrapht.alg.TransitiveClosureTest.java:110, 50.00%>
	<org.jgrapht.alg.VertexCoversTest: void testFind2ApproximationCover()>:
		<org.jgrapht.alg.VertexCoversTest.java:74, 60.00%>
	<org.jgrapht.alg.VertexCoversTest: void testFindGreedyCover()>:
		<org.jgrapht.alg.VertexCoversTest.java:89, 50.00%>
	<org.jgrapht.alg.util.UnionFindTest: void testIdentical(java.lang.String[],java.util.ArrayList,org.jgrapht.alg.util.UnionFind)>:
		<org.jgrapht.alg.util.UnionFindTest.java:131, 41.18%>
	<org.jgrapht.experimental.alg.ColoringTest: void testBacktrackColoring()>:
		<org.jgrapht.experimental.alg.ColoringTest.java:97, 50.00%>
	<org.jgrapht.experimental.alg.ColoringTest: void testGreedyColoring()>:
		<org.jgrapht.experimental.alg.ColoringTest.java:77, 50.00%>
	<org.jgrapht.experimental.dag.DirectedAcyclicGraphTest: void testTopoIterationOrderLinearGraph()>:
		<org.jgrapht.experimental.dag.DirectedAcyclicGraphTest.java:181, 29.41%>
		<org.jgrapht.experimental.dag.DirectedAcyclicGraphTest.java:182, 41.18%>
	<org.jgrapht.experimental.equivalence.EquivalenceGroupCreatorTest: void testOneComparator(org.jgrapht.experimental.equivalence.EquivalenceComparator,int)>:
		<org.jgrapht.experimental.equivalence.EquivalenceGroupCreatorTest.java:152, 23.53%>
		<org.jgrapht.experimental.equivalence.EquivalenceGroupCreatorTest.java:157, 41.18%>
	<org.jgrapht.experimental.isomorphism.IsomorphismInspectorTest: void assertIsomorphic(org.jgrapht.Graph[],boolean,org.jgrapht.experimental.equivalence.EquivalenceComparator,org.jgrapht.experimental.equivalence.EquivalenceComparator)>:
		<org.jgrapht.experimental.isomorphism.IsomorphismInspectorTest.java:138, 28.57%>
		<org.jgrapht.experimental.isomorphism.IsomorphismInspectorTest.java:140, 28.57%>
	<org.jgrapht.experimental.isomorphism.IsomorphismInspectorTest: void assertIsomorphicStopAfterFirstMatch(org.jgrapht.Graph[],boolean,boolean,org.jgrapht.experimental.equivalence.EquivalenceComparator,org.jgrapht.experimental.equivalence.EquivalenceComparator)>:
		<org.jgrapht.experimental.isomorphism.IsomorphismInspectorTest.java:485, 14.71%>
	<org.jgrapht.experimental.permutation.CompoundPermutationIterTest: void testGetNext()>:
		<org.jgrapht.experimental.permutation.CompoundPermutationIterTest.java:96, 40.00%>
		<org.jgrapht.experimental.permutation.CompoundPermutationIterTest.java:127, 40.00%>
	<org.jgrapht.ext.DOTExporterTest: void testValidNodeIDs()>:
		<org.jgrapht.ext.DOTExporterTest.java:149, 16.00%>
	<org.jgrapht.generate.GraphGeneratorTest: void testCompleteBipartiteGraphGenerator()>:
		<org.jgrapht.generate.GraphGeneratorTest.java:243, 50.00%>
		<org.jgrapht.generate.GraphGeneratorTest.java:244, 50.00%>
	<org.jgrapht.generate.GraphGeneratorTest: void testCompleteGraphGenerator()>:
		<org.jgrapht.generate.GraphGeneratorTest.java:185, 62.50%>
	<org.jgrapht.generate.GraphGeneratorTest: void testHyperCubeGraphGenerator()>:
		<org.jgrapht.generate.GraphGeneratorTest.java:265, 50.00%>
		<org.jgrapht.generate.GraphGeneratorTest.java:266, 50.00%>
	<org.jgrapht.generate.RandomGraphGeneratorTest: void testBadVertexFactory()>:
		<org.jgrapht.generate.RandomGraphGeneratorTest.java:106, 12.50%>
	<org.jgrapht.generate.RandomGraphGeneratorTest: void testGenerateDirectedGraph()>:
		<org.jgrapht.generate.RandomGraphGeneratorTest.java:70, 20.00%>
	<org.jgrapht.generate.RandomGraphGeneratorTest: void testGenerateListenableUndirectedGraph()>:
		<org.jgrapht.generate.RandomGraphGeneratorTest.java:89, 20.00%>
	<org.jgrapht.graph.AsUndirectedGraphTest: void testAddVertex()>:
		<org.jgrapht.graph.AsUndirectedGraphTest.java:102, 85.71%>
		<org.jgrapht.graph.AsUndirectedGraphTest.java:103, 100.00%>
	<org.jgrapht.graph.AsUndirectedGraphTest: void testRemoveEdge()>:
		<org.jgrapht.graph.AsUndirectedGraphTest.java:155, 88.89%>
		<org.jgrapht.graph.AsUndirectedGraphTest.java:156, 111.11%>
	<org.jgrapht.graph.AsUndirectedGraphTest: void testRemoveVertex()>:
		<org.jgrapht.graph.AsUndirectedGraphTest.java:165, 88.89%>
		<org.jgrapht.graph.AsUndirectedGraphTest.java:166, 111.11%>
	<org.jgrapht.graph.AsUnweightedGraphTest: void constructWeighted(org.jgrapht.WeightedGraph)>:
		<org.jgrapht.graph.AsUnweightedGraphTest.java:110, 57.14%>
	<org.jgrapht.graph.DefaultDirectedGraphTest: void testEdgesOf()>:
		<org.jgrapht.graph.DefaultDirectedGraphTest.java:117, 75.00%>
		<org.jgrapht.graph.DefaultDirectedGraphTest.java:118, 75.00%>
	<org.jgrapht.graph.DefaultDirectedGraphTest: void testGetAllEdges()>:
		<org.jgrapht.graph.DefaultDirectedGraphTest.java:130, 100.00%>
	<org.jgrapht.graph.DefaultDirectedGraphTest: void testInDegreeOf()>:
		<org.jgrapht.graph.DefaultDirectedGraphTest.java:141, 83.33%>
		<org.jgrapht.graph.DefaultDirectedGraphTest.java:142, 83.33%>
	<org.jgrapht.graph.DefaultDirectedGraphTest: void testOutDegreeOf()>:
		<org.jgrapht.graph.DefaultDirectedGraphTest.java:153, 83.33%>
		<org.jgrapht.graph.DefaultDirectedGraphTest.java:154, 83.33%>
	<org.jgrapht.graph.GenericGraphsTest: void testEqualButNotSameVertex()>:
		<org.jgrapht.graph.GenericGraphsTest.java:145, 40.00%>
		<org.jgrapht.graph.GenericGraphsTest.java:146, 40.00%>
	<org.jgrapht.graph.SimpleDirectedGraphTest: void testIncomingOutgoingEdgesOf()>:
		<org.jgrapht.graph.SimpleDirectedGraphTest.java:315, 128.57%>
	<org.jgrapht.graph.SubgraphTest: void testInducedSubgraphUnderlyingEdgeAddition()>:
		<org.jgrapht.graph.SubgraphTest.java:192, 20.00%>
	<org.jgrapht.traverse.TopologicalOrderIteratorTest: void testEmptyGraph()>:
		<org.jgrapht.traverse.TopologicalOrderIteratorTest.java:136, 50.00%>
	<org.jgrapht.traverse.TopologicalOrderIteratorTest: void testRecipe()>:
		<org.jgrapht.traverse.TopologicalOrderIteratorTest.java:109, 9.62%>
		<org.jgrapht.traverse.TopologicalOrderIteratorTest.java:121, 9.62%>
	<org.jgrapht.util.FibonacciHeapTest: void testGrowReplaceShrink()>:
		<org.jgrapht.util.FibonacciHeapTest.java:88, 17.65%>
		<org.jgrapht.util.FibonacciHeapTest.java:91, 17.65%>

Relevant Assertion clone sets (6):
Set (score: 1.00, ccsize: 2, packages: 1, classes: 1): 
	<org.jgrapht.alg.VertexCoversTest: void testFind2ApproximationCover()>:
		<org.jgrapht.alg.VertexCoversTest.java:74, 60.00%>
	<org.jgrapht.alg.VertexCoversTest: void testFindGreedyCover()>:
		<org.jgrapht.alg.VertexCoversTest.java:89, 50.00%>
Set (score: 0.67, ccsize: 3, packages: 1, classes: 2): 
	<org.jgrapht.alg.BiconnectivityInspectorTest: void testLinearGraph(int)>:
		<org.jgrapht.alg.BiconnectivityInspectorTest.java:88, 40.00%>
	<org.jgrapht.alg.BlockCutpointGraphTest: void testLinearGraph(int)>:
		<org.jgrapht.alg.BlockCutpointGraphTest.java:121, 33.33%>
		<org.jgrapht.alg.BlockCutpointGraphTest.java:125, 33.33%>
Set (score: 0.67, ccsize: 3, packages: 1, classes: 2): 
	<org.jgrapht.alg.BiconnectivityInspectorTest: void testNotBiconnected()>:
		<org.jgrapht.alg.BiconnectivityInspectorTest.java:100, 55.56%>
	<org.jgrapht.alg.BlockCutpointGraphTest: void testNotBiconnected()>:
		<org.jgrapht.alg.BlockCutpointGraphTest.java:135, 41.67%>
		<org.jgrapht.alg.BlockCutpointGraphTest.java:139, 41.67%>
Set (score: 0.67, ccsize: 2, packages: 1, classes: 1): 
	<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest: void testBipartiteMatching1()>:
		<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest.java:86, 6.76%>
	<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest: void testBipartiteMatching2()>:
		<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest.java:115, 5.21%>
Set (score: 0.50, ccsize: 3, packages: 1, classes: 1): 
	<org.jgrapht.alg.KSPExampleTest: void testFourReturnedPathsJGraphT()>:
		<org.jgrapht.alg.KSPExampleTest.java:60, 55.56%>
	<org.jgrapht.alg.KSPExampleTest: void testThreeReturnedPathsJGraphT()>:
		<org.jgrapht.alg.KSPExampleTest.java:72, 60.00%>
	<org.jgrapht.alg.KSPExampleTest: void testTwoReturnedPathsJGraphT()>:
		<org.jgrapht.alg.KSPExampleTest.java:84, 60.00%>
Set (score: 0.50, ccsize: 2, packages: 1, classes: 1): 
	<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest: void testBipartiteMatching1()>:
		<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest.java:83, 6.76%>
	<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest: void testBipartiteMatching2()>:
		<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest.java:112, 5.21%>
==============================================

[146] Set (editDistance: 2, isComplete: false, packages: 13, classes: 37): 
Centroid (size: 2): <org.jgrapht.util.FibonacciHeapTest: void testGrowReplaceShrink()>

Methods (75): 
	<org.jgrapht.alg.BellmanFordShortestPathTest: void testWithNegativeEdges()>:
		<org.jgrapht.alg.BellmanFordShortestPathTest.java:120, 45.45%>
		<org.jgrapht.alg.BellmanFordShortestPathTest.java:127, 63.64%>
	<org.jgrapht.alg.BiconnectivityInspectorTest: void testBiconnected()>:
		<org.jgrapht.alg.BiconnectivityInspectorTest.java:64, 30.00%>
		<org.jgrapht.alg.BiconnectivityInspectorTest.java:65, 50.00%>
		<org.jgrapht.alg.BiconnectivityInspectorTest.java:66, 50.00%>
	<org.jgrapht.alg.BiconnectivityInspectorTest: void testLinearGraph(int)>:
		<org.jgrapht.alg.BiconnectivityInspectorTest.java:88, 40.00%>
		<org.jgrapht.alg.BiconnectivityInspectorTest.java:89, 40.00%>
	<org.jgrapht.alg.BiconnectivityInspectorTest: void testNotBiconnected()>:
		<org.jgrapht.alg.BiconnectivityInspectorTest.java:100, 55.56%>
		<org.jgrapht.alg.BiconnectivityInspectorTest.java:101, 55.56%>
	<org.jgrapht.alg.BlockCutpointGraphTest: void testBiconnected()>:
		<org.jgrapht.alg.BlockCutpointGraphTest.java:67, 41.67%>
		<org.jgrapht.alg.BlockCutpointGraphTest.java:71, 41.67%>
	<org.jgrapht.alg.BlockCutpointGraphTest: void testGetBlock(org.jgrapht.alg.BlockCutpointGraph)>:
		<org.jgrapht.alg.BlockCutpointGraphTest.java:88, 33.33%>
		<org.jgrapht.alg.BlockCutpointGraphTest.java:94, 19.05%>
	<org.jgrapht.alg.BlockCutpointGraphTest: void testLinearGraph(int)>:
		<org.jgrapht.alg.BlockCutpointGraphTest.java:121, 33.33%>
		<org.jgrapht.alg.BlockCutpointGraphTest.java:125, 33.33%>
	<org.jgrapht.alg.BlockCutpointGraphTest: void testNotBiconnected()>:
		<org.jgrapht.alg.BlockCutpointGraphTest.java:135, 41.67%>
		<org.jgrapht.alg.BlockCutpointGraphTest.java:139, 41.67%>
	<org.jgrapht.alg.BronKerboschCliqueFinderTest: void testFindAll()>:
		<org.jgrapht.alg.BronKerboschCliqueFinderTest.java:143, 26.32%>
		<org.jgrapht.alg.BronKerboschCliqueFinderTest.java:175, 21.05%>
	<org.jgrapht.alg.BronKerboschCliqueFinderTest: void testFindBiggest()>:
		<org.jgrapht.alg.BronKerboschCliqueFinderTest.java:119, 41.67%>
		<org.jgrapht.alg.BronKerboschCliqueFinderTest.java:129, 58.33%>
	<org.jgrapht.alg.ConnectivityInspectorTest: void testDirectedGraph()>:
		<org.jgrapht.alg.ConnectivityInspectorTest.java:139, 57.14%>
		<org.jgrapht.alg.ConnectivityInspectorTest.java:143, 57.14%>
	<org.jgrapht.alg.ConnectivityInspectorTest: void testStronglyConnected1()>:
		<org.jgrapht.alg.ConnectivityInspectorTest.java:211, 16.00%>
		<org.jgrapht.alg.ConnectivityInspectorTest.java:222, 12.00%>
		<org.jgrapht.alg.ConnectivityInspectorTest.java:225, 16.00%>
	<org.jgrapht.alg.ConnectivityInspectorTest: void testStronglyConnected2()>:
		<org.jgrapht.alg.ConnectivityInspectorTest.java:268, 16.00%>
		<org.jgrapht.alg.ConnectivityInspectorTest.java:279, 12.00%>
		<org.jgrapht.alg.ConnectivityInspectorTest.java:282, 16.00%>
	<org.jgrapht.alg.ConnectivityInspectorTest: void testStronglyConnected3()>:
		<org.jgrapht.alg.ConnectivityInspectorTest.java:325, 17.39%>
		<org.jgrapht.alg.ConnectivityInspectorTest.java:337, 13.04%>
		<org.jgrapht.alg.ConnectivityInspectorTest.java:340, 17.39%>
	<org.jgrapht.alg.ConnectivityInspectorTest: void testStronglyConnected4()>:
		<org.jgrapht.alg.ConnectivityInspectorTest.java:371, 30.77%>
	<org.jgrapht.alg.EdmondsBlossomShrinkingTest: void testOne()>:
		<org.jgrapht.alg.EdmondsBlossomShrinkingTest.java:80, 23.81%>
		<org.jgrapht.alg.EdmondsBlossomShrinkingTest.java:81, 19.05%>
		<org.jgrapht.alg.EdmondsBlossomShrinkingTest.java:82, 19.05%>
	<org.jgrapht.alg.FloydWarshallShortestPathsTest: void testDiameter()>:
		<org.jgrapht.alg.FloydWarshallShortestPathsTest.java:161, 57.14%>
	<org.jgrapht.alg.FloydWarshallShortestPathsTest: void testEdgeLessDiameter()>:
		<org.jgrapht.alg.FloydWarshallShortestPathsTest.java:182, 40.00%>
	<org.jgrapht.alg.FloydWarshallShortestPathsTest: void testEmptyDiameter()>:
		<org.jgrapht.alg.FloydWarshallShortestPathsTest.java:170, 50.00%>
	<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest: void testBipartiteMatching1()>:
		<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest.java:83, 6.76%>
		<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest.java:86, 6.76%>
	<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest: void testBipartiteMatching2()>:
		<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest.java:112, 5.21%>
		<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest.java:115, 5.21%>
	<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest: void testEmptyMatching()>:
		<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest.java:128, 33.33%>
	<org.jgrapht.alg.KSPDiscardsValidPathsTest: void testNot3connectedGraph()>:
		<org.jgrapht.alg.KSPDiscardsValidPathsTest.java:102, 87.50%>
	<org.jgrapht.alg.KSPExampleTest: void testFourReturnedPathsJGraphT()>:
		<org.jgrapht.alg.KSPExampleTest.java:60, 55.56%>
	<org.jgrapht.alg.KSPExampleTest: void testThreeReturnedPathsJGraphT()>:
		<org.jgrapht.alg.KSPExampleTest.java:72, 60.00%>
	<org.jgrapht.alg.KSPExampleTest: void testTwoReturnedPathsJGraphT()>:
		<org.jgrapht.alg.KSPExampleTest.java:84, 60.00%>
	<org.jgrapht.alg.KShortestPathKValuesTest: void verifyNbPathsForAllPairsOfVertices(org.jgrapht.Graph)>:
		<org.jgrapht.alg.KShortestPathKValuesTest.java:148, 36.84%>
	<org.jgrapht.alg.KruskalMinimumSpanningTreeTest: void testMinimumSpanningTree()>:
		<org.jgrapht.alg.KruskalMinimumSpanningTreeTest.java:80, 19.05%>
		<org.jgrapht.alg.KruskalMinimumSpanningTreeTest.java:84, 38.10%>
	<org.jgrapht.alg.TransitiveClosureTest: void testLinearGraph()>:
		<org.jgrapht.alg.TransitiveClosureTest.java:75, 47.83%>
		<org.jgrapht.alg.TransitiveClosureTest.java:78, 43.48%>
	<org.jgrapht.alg.TransitiveClosureTest: void testRingGraph()>:
		<org.jgrapht.alg.TransitiveClosureTest.java:107, 45.45%>
		<org.jgrapht.alg.TransitiveClosureTest.java:110, 50.00%>
	<org.jgrapht.alg.util.UnionFindTest: void testIdentical(java.lang.String[],java.util.ArrayList,org.jgrapht.alg.util.UnionFind)>:
		<org.jgrapht.alg.util.UnionFindTest.java:131, 41.18%>
	<org.jgrapht.experimental.GraphReaderTest: void testGraphReader()>:
		<org.jgrapht.experimental.GraphReaderTest.java:88, 27.27%>
	<org.jgrapht.experimental.GraphReaderTest: void testGraphReaderWeighted()>:
		<org.jgrapht.experimental.GraphReaderTest.java:116, 23.08%>
	<org.jgrapht.experimental.alg.ColoringTest: void testBacktrackColoring()>:
		<org.jgrapht.experimental.alg.ColoringTest.java:97, 50.00%>
	<org.jgrapht.experimental.alg.ColoringTest: void testGreedyColoring()>:
		<org.jgrapht.experimental.alg.ColoringTest.java:77, 50.00%>
	<org.jgrapht.experimental.dag.DirectedAcyclicGraphTest: void testCycleDetectionInRandomGraphBuild()>:
		<org.jgrapht.experimental.dag.DirectedAcyclicGraphTest.java:131, 14.29%>
		<org.jgrapht.experimental.dag.DirectedAcyclicGraphTest.java:141, 12.24%>
		<org.jgrapht.experimental.dag.DirectedAcyclicGraphTest.java:152, 6.12%>
	<org.jgrapht.experimental.dag.DirectedAcyclicGraphTest: void testTopoIterationOrderLinearGraph()>:
		<org.jgrapht.experimental.dag.DirectedAcyclicGraphTest.java:181, 29.41%>
		<org.jgrapht.experimental.dag.DirectedAcyclicGraphTest.java:182, 41.18%>
	<org.jgrapht.experimental.equivalence.EquivalenceGroupCreatorTest: void testOneComparator(org.jgrapht.experimental.equivalence.EquivalenceComparator,int)>:
		<org.jgrapht.experimental.equivalence.EquivalenceGroupCreatorTest.java:152, 23.53%>
		<org.jgrapht.experimental.equivalence.EquivalenceGroupCreatorTest.java:157, 41.18%>
	<org.jgrapht.experimental.isomorphism.IsomorphismInspectorTest: void assertIsomorphicStopAfterFirstMatch(org.jgrapht.Graph[],boolean,boolean,org.jgrapht.experimental.equivalence.EquivalenceComparator,org.jgrapht.experimental.equivalence.EquivalenceComparator)>:
		<org.jgrapht.experimental.isomorphism.IsomorphismInspectorTest.java:485, 14.71%>
	<org.jgrapht.experimental.permutation.CompoundPermutationIterTest: void testGetNext()>:
		<org.jgrapht.experimental.permutation.CompoundPermutationIterTest.java:96, 40.00%>
		<org.jgrapht.experimental.permutation.CompoundPermutationIterTest.java:127, 40.00%>
	<org.jgrapht.ext.DOTExporterTest: void testUndirected()>:
		<org.jgrapht.ext.DOTExporterTest.java:110, 41.67%>
	<org.jgrapht.ext.DOTExporterTest: void testValidNodeIDs()>:
		<org.jgrapht.ext.DOTExporterTest.java:149, 16.00%>
	<org.jgrapht.ext.GmlExporterTest: void testUndirected()>:
		<org.jgrapht.ext.GmlExporterTest.java:117, 62.50%>
	<org.jgrapht.ext.MatrixExporterTest: void testAdjacencyDirected()>:
		<org.jgrapht.ext.MatrixExporterTest.java:149, 62.50%>
	<org.jgrapht.ext.MatrixExporterTest: void testAdjacencyUndirected()>:
		<org.jgrapht.ext.MatrixExporterTest.java:133, 62.50%>
	<org.jgrapht.ext.MatrixExporterTest: void testLaplacian()>:
		<org.jgrapht.ext.MatrixExporterTest.java:113, 38.46%>
		<org.jgrapht.ext.MatrixExporterTest.java:117, 38.46%>
	<org.jgrapht.generate.GraphGeneratorTest: void testCompleteBipartiteGraphGenerator()>:
		<org.jgrapht.generate.GraphGeneratorTest.java:243, 50.00%>
		<org.jgrapht.generate.GraphGeneratorTest.java:244, 50.00%>
	<org.jgrapht.generate.GraphGeneratorTest: void testCompleteGraphGenerator()>:
		<org.jgrapht.generate.GraphGeneratorTest.java:185, 62.50%>
	<org.jgrapht.generate.GraphGeneratorTest: void testHyperCubeGraphGenerator()>:
		<org.jgrapht.generate.GraphGeneratorTest.java:265, 50.00%>
		<org.jgrapht.generate.GraphGeneratorTest.java:266, 50.00%>
	<org.jgrapht.generate.RandomGraphGeneratorTest: void testBadVertexFactory()>:
		<org.jgrapht.generate.RandomGraphGeneratorTest.java:106, 12.50%>
	<org.jgrapht.graph.AsUndirectedGraphTest: void testAddEdge()>:
		<org.jgrapht.graph.AsUndirectedGraphTest.java:89, 100.00%>
	<org.jgrapht.graph.AsUndirectedGraphTest: void testAddVertex()>:
		<org.jgrapht.graph.AsUndirectedGraphTest.java:102, 85.71%>
		<org.jgrapht.graph.AsUndirectedGraphTest.java:103, 100.00%>
	<org.jgrapht.graph.AsUndirectedGraphTest: void testRemoveEdge()>:
		<org.jgrapht.graph.AsUndirectedGraphTest.java:155, 88.89%>
		<org.jgrapht.graph.AsUndirectedGraphTest.java:156, 111.11%>
	<org.jgrapht.graph.AsUndirectedGraphTest: void testRemoveVertex()>:
		<org.jgrapht.graph.AsUndirectedGraphTest.java:165, 88.89%>
		<org.jgrapht.graph.AsUndirectedGraphTest.java:166, 111.11%>
	<org.jgrapht.graph.AsUnweightedGraphTest: void constructWeighted(org.jgrapht.WeightedGraph)>:
		<org.jgrapht.graph.AsUnweightedGraphTest.java:110, 57.14%>
	<org.jgrapht.graph.DefaultDirectedGraphTest: void testEdgesOf()>:
		<org.jgrapht.graph.DefaultDirectedGraphTest.java:117, 75.00%>
		<org.jgrapht.graph.DefaultDirectedGraphTest.java:118, 75.00%>
	<org.jgrapht.graph.DefaultDirectedGraphTest: void testGetAllEdges()>:
		<org.jgrapht.graph.DefaultDirectedGraphTest.java:130, 100.00%>
	<org.jgrapht.graph.DefaultDirectedGraphTest: void testInDegreeOf()>:
		<org.jgrapht.graph.DefaultDirectedGraphTest.java:141, 83.33%>
		<org.jgrapht.graph.DefaultDirectedGraphTest.java:142, 83.33%>
	<org.jgrapht.graph.DefaultDirectedGraphTest: void testOutDegreeOf()>:
		<org.jgrapht.graph.DefaultDirectedGraphTest.java:153, 83.33%>
		<org.jgrapht.graph.DefaultDirectedGraphTest.java:154, 83.33%>
	<org.jgrapht.graph.EqualsAndHashCodeTest: void testDefaultDirectedGraph()>:
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:105, 6.52%>
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:106, 10.87%>
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:108, 13.04%>
	<org.jgrapht.graph.EqualsAndHashCodeTest: void testGraphsWithNonIntrusiveEdge()>:
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:187, 3.90%>
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:188, 6.49%>
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:190, 7.79%>
	<org.jgrapht.graph.EqualsAndHashCodeTest: void testGrapshWithCustomEdges()>:
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:268, 7.69%>
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:269, 12.82%>
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:271, 15.38%>
	<org.jgrapht.graph.EqualsAndHashCodeTest: void testPseudograph()>:
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:230, 5.08%>
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:231, 8.47%>
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:233, 10.17%>
	<org.jgrapht.graph.EqualsAndHashCodeTest: void testSimpleGraph()>:
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:148, 6.52%>
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:149, 10.87%>
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:151, 13.04%>
	<org.jgrapht.graph.GenericGraphsTest: void testAlissaHacker()>:
		<org.jgrapht.graph.GenericGraphsTest.java:134, 83.33%>
	<org.jgrapht.graph.GenericGraphsTest: void testEqualButNotSameVertex()>:
		<org.jgrapht.graph.GenericGraphsTest.java:145, 40.00%>
		<org.jgrapht.graph.GenericGraphsTest.java:146, 40.00%>
	<org.jgrapht.graph.SimpleDirectedGraphTest: void testIncomingOutgoingEdgesOf()>:
		<org.jgrapht.graph.SimpleDirectedGraphTest.java:315, 128.57%>
	<org.jgrapht.graph.SubgraphTest: void testInducedSubgraphUnderlyingEdgeAddition()>:
		<org.jgrapht.graph.SubgraphTest.java:192, 20.00%>
	<org.jgrapht.traverse.AbstractGraphIteratorTest: void testDirectedGraph()>:
		<org.jgrapht.traverse.AbstractGraphIteratorTest.java:86, 47.06%>
		<org.jgrapht.traverse.AbstractGraphIteratorTest.java:88, 52.94%>
	<org.jgrapht.traverse.ClosestFirstIteratorTest: void testNoStart()>:
		<org.jgrapht.traverse.ClosestFirstIteratorTest.java:103, 53.85%>
	<org.jgrapht.traverse.ClosestFirstIteratorTest: void testRadius()>:
		<org.jgrapht.traverse.ClosestFirstIteratorTest.java:80, 53.85%>
	<org.jgrapht.traverse.DepthFirstIteratorTest: void testBug1169182()>:
		<org.jgrapht.traverse.DepthFirstIteratorTest.java:149, 16.00%>
	<org.jgrapht.traverse.TopologicalOrderIteratorTest: void testEmptyGraph()>:
		<org.jgrapht.traverse.TopologicalOrderIteratorTest.java:136, 50.00%>
	<org.jgrapht.traverse.TopologicalOrderIteratorTest: void testRecipe()>:
		<org.jgrapht.traverse.TopologicalOrderIteratorTest.java:109, 9.62%>
		<org.jgrapht.traverse.TopologicalOrderIteratorTest.java:121, 9.62%>
	<org.jgrapht.util.FibonacciHeapTest: void testGrowReplaceShrink()>:
		<org.jgrapht.util.FibonacciHeapTest.java:88, 17.65%>
		<org.jgrapht.util.FibonacciHeapTest.java:91, 17.65%>

Relevant Assertion clone sets (11):
Set (score: 1.00, ccsize: 2, packages: 1, classes: 1): 
	<org.jgrapht.alg.ConnectivityInspectorTest: void testStronglyConnected1()>:
		<org.jgrapht.alg.ConnectivityInspectorTest.java:222, 12.00%>
	<org.jgrapht.alg.ConnectivityInspectorTest: void testStronglyConnected2()>:
		<org.jgrapht.alg.ConnectivityInspectorTest.java:279, 12.00%>
	<org.jgrapht.alg.ConnectivityInspectorTest: void testStronglyConnected3()>:
		<org.jgrapht.alg.ConnectivityInspectorTest.java:337, 13.04%>
Set (score: 1.00, ccsize: 2, packages: 1, classes: 1): 
	<org.jgrapht.experimental.GraphReaderTest: void testGraphReader()>:
		<org.jgrapht.experimental.GraphReaderTest.java:88, 27.27%>
	<org.jgrapht.experimental.GraphReaderTest: void testGraphReaderWeighted()>:
		<org.jgrapht.experimental.GraphReaderTest.java:116, 23.08%>
Set (score: 0.67, ccsize: 3, packages: 1, classes: 2): 
	<org.jgrapht.alg.BiconnectivityInspectorTest: void testBiconnected()>:
		<org.jgrapht.alg.BiconnectivityInspectorTest.java:65, 50.00%>
	<org.jgrapht.alg.BlockCutpointGraphTest: void testBiconnected()>:
		<org.jgrapht.alg.BlockCutpointGraphTest.java:67, 41.67%>
		<org.jgrapht.alg.BlockCutpointGraphTest.java:71, 41.67%>
Set (score: 0.67, ccsize: 3, packages: 1, classes: 2): 
	<org.jgrapht.alg.BiconnectivityInspectorTest: void testLinearGraph(int)>:
		<org.jgrapht.alg.BiconnectivityInspectorTest.java:88, 40.00%>
	<org.jgrapht.alg.BlockCutpointGraphTest: void testLinearGraph(int)>:
		<org.jgrapht.alg.BlockCutpointGraphTest.java:121, 33.33%>
		<org.jgrapht.alg.BlockCutpointGraphTest.java:125, 33.33%>
Set (score: 0.67, ccsize: 3, packages: 1, classes: 2): 
	<org.jgrapht.alg.BiconnectivityInspectorTest: void testNotBiconnected()>:
		<org.jgrapht.alg.BiconnectivityInspectorTest.java:100, 55.56%>
	<org.jgrapht.alg.BlockCutpointGraphTest: void testNotBiconnected()>:
		<org.jgrapht.alg.BlockCutpointGraphTest.java:135, 41.67%>
		<org.jgrapht.alg.BlockCutpointGraphTest.java:139, 41.67%>
Set (score: 0.67, ccsize: 2, packages: 1, classes: 2): 
	<org.jgrapht.ext.DOTExporterTest: void testUndirected()>:
		<org.jgrapht.ext.DOTExporterTest.java:110, 41.67%>
	<org.jgrapht.ext.GmlExporterTest: void testUndirected()>:
		<org.jgrapht.ext.GmlExporterTest.java:117, 62.50%>
Set (score: 0.67, ccsize: 2, packages: 1, classes: 1): 
	<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest: void testBipartiteMatching1()>:
		<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest.java:86, 6.76%>
	<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest: void testBipartiteMatching2()>:
		<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest.java:115, 5.21%>
Set (score: 0.50, ccsize: 4, packages: 1, classes: 1): 
	<org.jgrapht.graph.EqualsAndHashCodeTest: void testDefaultDirectedGraph()>:
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:106, 10.87%>
	<org.jgrapht.graph.EqualsAndHashCodeTest: void testGraphsWithNonIntrusiveEdge()>:
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:188, 6.49%>
Set (score: 0.50, ccsize: 4, packages: 1, classes: 1): 
	<org.jgrapht.graph.EqualsAndHashCodeTest: void testGrapshWithCustomEdges()>:
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:269, 12.82%>
	<org.jgrapht.graph.EqualsAndHashCodeTest: void testSimpleGraph()>:
		<org.jgrapht.graph.EqualsAndHashCodeTest.java:149, 10.87%>
Set (score: 0.50, ccsize: 3, packages: 1, classes: 1): 
	<org.jgrapht.alg.KSPExampleTest: void testFourReturnedPathsJGraphT()>:
		<org.jgrapht.alg.KSPExampleTest.java:60, 55.56%>
	<org.jgrapht.alg.KSPExampleTest: void testThreeReturnedPathsJGraphT()>:
		<org.jgrapht.alg.KSPExampleTest.java:72, 60.00%>
	<org.jgrapht.alg.KSPExampleTest: void testTwoReturnedPathsJGraphT()>:
		<org.jgrapht.alg.KSPExampleTest.java:84, 60.00%>
Set (score: 0.50, ccsize: 2, packages: 1, classes: 1): 
	<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest: void testBipartiteMatching1()>:
		<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest.java:83, 6.76%>
	<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest: void testBipartiteMatching2()>:
		<org.jgrapht.alg.HopcroftKarpBipartiteMatchingTest.java:112, 5.21%>
==============================================

[147] Set (editDistance: 2, isComplete: false, packages: 1, classes: 2): 
Centroid (size: 13): <org.jgrapht.graph.ListenableGraphTest: void testGraphListener()>

Methods (2): 
	<org.jgrapht.graph.AsWeightedGraphTest: void test1()>:
		<org.jgrapht.graph.AsWeightedGraphTest.java:112, 5.88%>
		<org.jgrapht.graph.AsWeightedGraphTest.java:125, 5.88%>
		<org.jgrapht.graph.AsWeightedGraphTest.java:126, 5.88%>
		<org.jgrapht.graph.AsWeightedGraphTest.java:127, 5.88%>
		<org.jgrapht.graph.AsWeightedGraphTest.java:129, 5.88%>
		<org.jgrapht.graph.AsWeightedGraphTest.java:130, 5.88%>
		<org.jgrapht.graph.AsWeightedGraphTest.java:131, 5.88%>
		<org.jgrapht.graph.AsWeightedGraphTest.java:136, 5.88%>
		<org.jgrapht.graph.AsWeightedGraphTest.java:137, 5.88%>
		<org.jgrapht.graph.AsWeightedGraphTest.java:141, 5.88%>
		<org.jgrapht.graph.AsWeightedGraphTest.java:142, 5.88%>
	<org.jgrapht.graph.ListenableGraphTest: void testGraphListener()>:
		<org.jgrapht.graph.ListenableGraphTest.java:95, 66.67%>
		<org.jgrapht.graph.ListenableGraphTest.java:96, 62.50%>
		<org.jgrapht.graph.ListenableGraphTest.java:100, 66.67%>
		<org.jgrapht.graph.ListenableGraphTest.java:101, 62.50%>
		<org.jgrapht.graph.ListenableGraphTest.java:110, 70.83%>
		<org.jgrapht.graph.ListenableGraphTest.java:111, 62.50%>
		<org.jgrapht.graph.ListenableGraphTest.java:114, 12.50%>
		<org.jgrapht.graph.ListenableGraphTest.java:115, 70.83%>
		<org.jgrapht.graph.ListenableGraphTest.java:116, 62.50%>
		<org.jgrapht.graph.ListenableGraphTest.java:131, 62.50%>
		<org.jgrapht.graph.ListenableGraphTest.java:132, 62.50%>
		<org.jgrapht.graph.ListenableGraphTest.java:133, 62.50%>
		<org.jgrapht.graph.ListenableGraphTest.java:134, 62.50%>

Relevant Assertion clone sets (0):
==============================================

[148] Set (editDistance: 2, isComplete: false, packages: 1, classes: 2): 
Centroid (size: 13): <org.jgrapht.graph.ListenableGraphTest: void testVertexSetListener()>

Methods (2): 
	<org.jgrapht.graph.AsWeightedGraphTest: void test1()>:
		<org.jgrapht.graph.AsWeightedGraphTest.java:112, 5.88%>
		<org.jgrapht.graph.AsWeightedGraphTest.java:125, 5.88%>
		<org.jgrapht.graph.AsWeightedGraphTest.java:126, 5.88%>
		<org.jgrapht.graph.AsWeightedGraphTest.java:127, 5.88%>
		<org.jgrapht.graph.AsWeightedGraphTest.java:129, 5.88%>
		<org.jgrapht.graph.AsWeightedGraphTest.java:130, 5.88%>
		<org.jgrapht.graph.AsWeightedGraphTest.java:131, 5.88%>
		<org.jgrapht.graph.AsWeightedGraphTest.java:136, 5.88%>
		<org.jgrapht.graph.AsWeightedGraphTest.java:137, 5.88%>
		<org.jgrapht.graph.AsWeightedGraphTest.java:141, 5.88%>
		<org.jgrapht.graph.AsWeightedGraphTest.java:142, 5.88%>
	<org.jgrapht.graph.ListenableGraphTest: void testVertexSetListener()>:
		<org.jgrapht.graph.ListenableGraphTest.java:155, 66.67%>
		<org.jgrapht.graph.ListenableGraphTest.java:156, 62.50%>
		<org.jgrapht.graph.ListenableGraphTest.java:160, 66.67%>
		<org.jgrapht.graph.ListenableGraphTest.java:161, 62.50%>
		<org.jgrapht.graph.ListenableGraphTest.java:170, 62.50%>
		<org.jgrapht.graph.ListenableGraphTest.java:171, 62.50%>
		<org.jgrapht.graph.ListenableGraphTest.java:174, 12.50%>
		<org.jgrapht.graph.ListenableGraphTest.java:175, 62.50%>
		<org.jgrapht.graph.ListenableGraphTest.java:176, 62.50%>
		<org.jgrapht.graph.ListenableGraphTest.java:191, 62.50%>
		<org.jgrapht.graph.ListenableGraphTest.java:192, 62.50%>
		<org.jgrapht.graph.ListenableGraphTest.java:193, 62.50%>
		<org.jgrapht.graph.ListenableGraphTest.java:194, 62.50%>

Relevant Assertion clone sets (0):
==============================================

[149] Set (editDistance: 2, isComplete: true, packages: 2, classes: 2): 
Centroid (size: 10): <org.jgrapht.graph.SimpleDirectedGraphTest: void testInDegreeOf()>

Methods (2): 
	<org.jgrapht.generate.GraphGeneratorTest: void testLinearGraphGenerator()>:
		<org.jgrapht.generate.GraphGeneratorTest.java:106, 20.83%>
		<org.jgrapht.generate.GraphGeneratorTest.java:107, 20.83%>
		<org.jgrapht.generate.GraphGeneratorTest.java:117, 16.67%>
		<org.jgrapht.generate.GraphGeneratorTest.java:118, 16.67%>
		<org.jgrapht.generate.GraphGeneratorTest.java:124, 16.67%>
		<org.jgrapht.generate.GraphGeneratorTest.java:125, 16.67%>
		<org.jgrapht.generate.GraphGeneratorTest.java:130, 16.67%>
		<org.jgrapht.generate.GraphGeneratorTest.java:131, 16.67%>
	<org.jgrapht.graph.SimpleDirectedGraphTest: void testInDegreeOf()>:
		<org.jgrapht.graph.SimpleDirectedGraphTest.java:277, 15.79%>
		<org.jgrapht.graph.SimpleDirectedGraphTest.java:279, 21.05%>
		<org.jgrapht.graph.SimpleDirectedGraphTest.java:280, 26.32%>
		<org.jgrapht.graph.SimpleDirectedGraphTest.java:282, 31.58%>
		<org.jgrapht.graph.SimpleDirectedGraphTest.java:283, 36.84%>
		<org.jgrapht.graph.SimpleDirectedGraphTest.java:284, 42.11%>
		<org.jgrapht.graph.SimpleDirectedGraphTest.java:286, 47.37%>
		<org.jgrapht.graph.SimpleDirectedGraphTest.java:287, 52.63%>
		<org.jgrapht.graph.SimpleDirectedGraphTest.java:288, 57.89%>
		<org.jgrapht.graph.SimpleDirectedGraphTest.java:289, 63.16%>

Relevant Assertion clone sets (0):
==============================================

[150] Set (editDistance: 2, isComplete: false, packages: 2, classes: 2): 
Centroid (size: 9): <org.jgrapht.graph.SimpleDirectedGraphTest: void testReversedView()>

Methods (2): 
	<org.jgrapht.generate.GraphGeneratorTest: void testRingGraphGenerator()>:
		<org.jgrapht.generate.GraphGeneratorTest.java:146, 16.67%>
		<org.jgrapht.generate.GraphGeneratorTest.java:147, 16.67%>
		<org.jgrapht.generate.GraphGeneratorTest.java:150, 13.33%>
		<org.jgrapht.generate.GraphGeneratorTest.java:159, 13.33%>
		<org.jgrapht.generate.GraphGeneratorTest.java:160, 13.33%>
		<org.jgrapht.generate.GraphGeneratorTest.java:161, 16.67%>
		<org.jgrapht.generate.GraphGeneratorTest.java:166, 26.67%>
		<org.jgrapht.generate.GraphGeneratorTest.java:167, 10.00%>
	<org.jgrapht.graph.SimpleDirectedGraphTest: void testReversedView()>:
		<org.jgrapht.graph.SimpleDirectedGraphTest.java:407, 12.12%>
		<org.jgrapht.graph.SimpleDirectedGraphTest.java:408, 12.12%>
		<org.jgrapht.graph.SimpleDirectedGraphTest.java:409, 12.12%>
		<org.jgrapht.graph.SimpleDirectedGraphTest.java:410, 12.12%>
		<org.jgrapht.graph.SimpleDirectedGraphTest.java:411, 12.12%>
		<org.jgrapht.graph.SimpleDirectedGraphTest.java:412, 12.12%>
		<org.jgrapht.graph.SimpleDirectedGraphTest.java:413, 12.12%>
		<org.jgrapht.graph.SimpleDirectedGraphTest.java:414, 12.12%>
		<org.jgrapht.graph.SimpleDirectedGraphTest.java:415, 12.12%>

Relevant Assertion clone sets (0):
==============================================

[151] Set (editDistance: 2, isComplete: true, packages: 2, classes: 2): 
Centroid (size: 8): <org.jgrapht.generate.GraphGeneratorTest: void testLinearGraphGenerator()>

Methods (2): 
	<org.jgrapht.generate.GraphGeneratorTest: void testLinearGraphGenerator()>:
		<org.jgrapht.generate.GraphGeneratorTest.java:106, 20.83%>
		<org.jgrapht.generate.GraphGeneratorTest.java:107, 20.83%>
		<org.jgrapht.generate.GraphGeneratorTest.java:117, 16.67%>
		<org.jgrapht.generate.GraphGeneratorTest.java:118, 16.67%>
		<org.jgrapht.generate.GraphGeneratorTest.java:124, 16.67%>
		<org.jgrapht.generate.GraphGeneratorTest.java:125, 16.67%>
		<org.jgrapht.generate.GraphGeneratorTest.java:130, 16.67%>
		<org.jgrapht.generate.GraphGeneratorTest.java:131, 16.67%>
	<org.jgrapht.graph.SimpleDirectedGraphTest: void testInDegreeOf()>:
		<org.jgrapht.graph.SimpleDirectedGraphTest.java:277, 15.79%>
		<org.jgrapht.graph.SimpleDirectedGraphTest.java:279, 21.05%>
		<org.jgrapht.graph.SimpleDirectedGraphTest.java:280, 26.32%>
		<org.jgrapht.graph.SimpleDirectedGraphTest.java:282, 31.58%>
		<org.jgrapht.graph.SimpleDirectedGraphTest.java:283, 36.84%>
		<org.jgrapht.graph.SimpleDirectedGraphTest.java:284, 42.11%>
		<org.jgrapht.graph.SimpleDirectedGraphTest.java:286, 47.37%>
		<org.jgrapht.graph.SimpleDirectedGraphTest.java:287, 52.63%>
		<org.jgrapht.graph.SimpleDirectedGraphTest.java:288, 57.89%>
		<org.jgrapht.graph.SimpleDirectedGraphTest.java:289, 63.16%>

Relevant Assertion clone sets (0):
==============================================

[152] Set (editDistance: 2, isComplete: false, packages: 2, classes: 2): 
Centroid (size: 8): <org.jgrapht.alg.CycleDetectorTest: void testVertexEquals()>

Methods (2): 
	<org.jgrapht.alg.CycleDetectorTest: void testVertexEquals()>:
		<org.jgrapht.alg.CycleDetectorTest.java:201, 23.81%>
		<org.jgrapht.alg.CycleDetectorTest.java:207, 23.81%>
		<org.jgrapht.alg.CycleDetectorTest.java:215, 23.81%>
		<org.jgrapht.alg.CycleDetectorTest.java:216, 23.81%>
		<org.jgrapht.alg.CycleDetectorTest.java:229, 23.81%>
		<org.jgrapht.alg.CycleDetectorTest.java:230, 23.81%>
		<org.jgrapht.alg.CycleDetectorTest.java:231, 14.29%>
		<org.jgrapht.alg.CycleDetectorTest.java:233, 14.29%>
	<org.jgrapht.generate.GraphGeneratorTest: void testRingGraphGenerator()>:
		<org.jgrapht.generate.GraphGeneratorTest.java:146, 16.67%>
		<org.jgrapht.generate.GraphGeneratorTest.java:147, 16.67%>
		<org.jgrapht.generate.GraphGeneratorTest.java:150, 13.33%>
		<org.jgrapht.generate.GraphGeneratorTest.java:159, 13.33%>
		<org.jgrapht.generate.GraphGeneratorTest.java:160, 13.33%>
		<org.jgrapht.generate.GraphGeneratorTest.java:161, 16.67%>
		<org.jgrapht.generate.GraphGeneratorTest.java:166, 26.67%>
		<org.jgrapht.generate.GraphGeneratorTest.java:167, 10.00%>

Relevant Assertion clone sets (0):
==============================================

[153] Set (editDistance: 2, isComplete: false, packages: 3, classes: 3): 
Centroid (size: 8): <org.jgrapht.generate.GraphGeneratorTest: void testRingGraphGenerator()>

Methods (3): 
	<org.jgrapht.alg.CycleDetectorTest: void testVertexEquals()>:
		<org.jgrapht.alg.CycleDetectorTest.java:201, 23.81%>
		<org.jgrapht.alg.CycleDetectorTest.java:207, 23.81%>
		<org.jgrapht.alg.CycleDetectorTest.java:215, 23.81%>
		<org.jgrapht.alg.CycleDetectorTest.java:216, 23.81%>
		<org.jgrapht.alg.CycleDetectorTest.java:229, 23.81%>
		<org.jgrapht.alg.CycleDetectorTest.java:230, 23.81%>
		<org.jgrapht.alg.CycleDetectorTest.java:231, 14.29%>
		<org.jgrapht.alg.CycleDetectorTest.java:233, 14.29%>
	<org.jgrapht.generate.GraphGeneratorTest: void testRingGraphGenerator()>:
		<org.jgrapht.generate.GraphGeneratorTest.java:146, 16.67%>
		<org.jgrapht.generate.GraphGeneratorTest.java:147, 16.67%>
		<org.jgrapht.generate.GraphGeneratorTest.java:150, 13.33%>
		<org.jgrapht.generate.GraphGeneratorTest.java:159, 13.33%>
		<org.jgrapht.generate.GraphGeneratorTest.java:160, 13.33%>
		<org.jgrapht.generate.GraphGeneratorTest.java:161, 16.67%>
		<org.jgrapht.generate.GraphGeneratorTest.java:166, 26.67%>
		<org.jgrapht.generate.GraphGeneratorTest.java:167, 10.00%>
	<org.jgrapht.graph.SimpleDirectedGraphTest: void testReversedView()>:
		<org.jgrapht.graph.SimpleDirectedGraphTest.java:407, 12.12%>
		<org.jgrapht.graph.SimpleDirectedGraphTest.java:408, 12.12%>
		<org.jgrapht.graph.SimpleDirectedGraphTest.java:409, 12.12%>
		<org.jgrapht.graph.SimpleDirectedGraphTest.java:410, 12.12%>
		<org.jgrapht.graph.SimpleDirectedGraphTest.java:411, 12.12%>
		<org.jgrapht.graph.SimpleDirectedGraphTest.java:412, 12.12%>
		<org.jgrapht.graph.SimpleDirectedGraphTest.java:413, 12.12%>
		<org.jgrapht.graph.SimpleDirectedGraphTest.java:414, 12.12%>
		<org.jgrapht.graph.SimpleDirectedGraphTest.java:415, 12.12%>

Relevant Assertion clone sets (0):
==============================================

[154] Set (editDistance: 2, isComplete: false, packages: 2, classes: 2): 
Centroid (size: 7): <org.jgrapht.graph.SimpleDirectedGraphTest: void testAddVertex()>

Methods (3): 
	<org.jgrapht.alg.KShortestPathKValuesTest: void testMaxSizeValueCompleteGraph6()>:
		<org.jgrapht.alg.KShortestPathKValuesTest.java:86, 31.58%>
		<org.jgrapht.alg.KShortestPathKValuesTest.java:87, 31.58%>
		<org.jgrapht.alg.KShortestPathKValuesTest.java:88, 31.58%>
		<org.jgrapht.alg.KShortestPathKValuesTest.java:89, 31.58%>
		<org.jgrapht.alg.KShortestPathKValuesTest.java:90, 31.58%>
	<org.jgrapht.graph.SimpleDirectedGraphTest: void testAddVertex()>:
		<org.jgrapht.graph.SimpleDirectedGraphTest.java:157, 27.27%>
		<org.jgrapht.graph.SimpleDirectedGraphTest.java:158, 31.82%>
		<org.jgrapht.graph.SimpleDirectedGraphTest.java:159, 36.36%>
		<org.jgrapht.graph.SimpleDirectedGraphTest.java:160, 40.91%>
		<org.jgrapht.graph.SimpleDirectedGraphTest.java:162, 40.91%>
		<org.jgrapht.graph.SimpleDirectedGraphTest.java:163, 50.00%>
		<org.jgrapht.graph.SimpleDirectedGraphTest.java:164, 63.64%>
	<org.jgrapht.graph.SimpleDirectedGraphTest: void testRemoveEdgeEdge()>:
		<org.jgrapht.graph.SimpleDirectedGraphTest.java:341, 26.09%>
		<org.jgrapht.graph.SimpleDirectedGraphTest.java:343, 43.48%>
		<org.jgrapht.graph.SimpleDirectedGraphTest.java:344, 43.48%>
		<org.jgrapht.graph.SimpleDirectedGraphTest.java:345, 60.87%>
		<org.jgrapht.graph.SimpleDirectedGraphTest.java:346, 73.91%>

Relevant Assertion clone sets (0):
==============================================

[155] Set (editDistance: 2, isComplete: false, packages: 2, classes: 2): 
Centroid (size: 5): <org.jgrapht.alg.ConnectivityInspectorTest: void testIsGraphConnected()>

Methods (2): 
	<org.jgrapht.alg.ConnectivityInspectorTest: void testIsGraphConnected()>:
		<org.jgrapht.alg.ConnectivityInspectorTest.java:155, 25.00%>
		<org.jgrapht.alg.ConnectivityInspectorTest.java:159, 25.00%>
		<org.jgrapht.alg.ConnectivityInspectorTest.java:162, 37.50%>
		<org.jgrapht.alg.ConnectivityInspectorTest.java:166, 37.50%>
		<org.jgrapht.alg.ConnectivityInspectorTest.java:169, 25.00%>
	<org.jgrapht.graph.SimpleDirectedGraphTest: void testAddEdgeEdge()>:
		<org.jgrapht.graph.SimpleDirectedGraphTest.java:112, 56.25%>
		<org.jgrapht.graph.SimpleDirectedGraphTest.java:113, 65.63%>
		<org.jgrapht.graph.SimpleDirectedGraphTest.java:114, 75.00%>

Relevant Assertion clone sets (0):
==============================================

[156] Set (editDistance: 2, isComplete: false, packages: 2, classes: 2): 
Centroid (size: 5): <org.jgrapht.alg.KShortestPathCostTest: void testPicture1Graph()>

Methods (2): 
	<org.jgrapht.alg.KShortestPathCostTest: void testPicture1Graph()>:
		<org.jgrapht.alg.KShortestPathCostTest.java:97, 18.42%>
		<org.jgrapht.alg.KShortestPathCostTest.java:106, 10.53%>
		<org.jgrapht.alg.KShortestPathCostTest.java:111, 18.42%>
		<org.jgrapht.alg.KShortestPathCostTest.java:120, 10.53%>
		<org.jgrapht.alg.KShortestPathCostTest.java:131, 21.05%>
	<org.jgrapht.graph.AsUndirectedGraphTest: void testGetEdge()>:
		<org.jgrapht.graph.AsUndirectedGraphTest.java:137, 44.00%>
		<org.jgrapht.graph.AsUndirectedGraphTest.java:140, 68.00%>
		<org.jgrapht.graph.AsUndirectedGraphTest.java:144, 92.00%>

Relevant Assertion clone sets (0):
==============================================

[157] Set (editDistance: 2, isComplete: false, packages: 2, classes: 3): 
Centroid (size: 5): <org.jgrapht.alg.KShortestPathKValuesTest: void testMaxSizeValueCompleteGraph6()>

Methods (5): 
	<org.jgrapht.alg.ChromaticNumberTest: void testChromaticNumber()>:
		<org.jgrapht.alg.ChromaticNumberTest.java:78, 18.75%>
		<org.jgrapht.alg.ChromaticNumberTest.java:83, 31.25%>
		<org.jgrapht.alg.ChromaticNumberTest.java:100, 18.75%>
	<org.jgrapht.alg.KShortestPathKValuesTest: void testMaxSizeValueCompleteGraph6()>:
		<org.jgrapht.alg.KShortestPathKValuesTest.java:86, 31.58%>
		<org.jgrapht.alg.KShortestPathKValuesTest.java:87, 31.58%>
		<org.jgrapht.alg.KShortestPathKValuesTest.java:88, 31.58%>
		<org.jgrapht.alg.KShortestPathKValuesTest.java:89, 31.58%>
		<org.jgrapht.alg.KShortestPathKValuesTest.java:90, 31.58%>
	<org.jgrapht.graph.SimpleDirectedGraphTest: void testAddVertex()>:
		<org.jgrapht.graph.SimpleDirectedGraphTest.java:157, 27.27%>
		<org.jgrapht.graph.SimpleDirectedGraphTest.java:158, 31.82%>
		<org.jgrapht.graph.SimpleDirectedGraphTest.java:159, 36.36%>
		<org.jgrapht.graph.SimpleDirectedGraphTest.java:160, 40.91%>
		<org.jgrapht.graph.SimpleDirectedGraphTest.java:162, 40.91%>
		<org.jgrapht.graph.SimpleDirectedGraphTest.java:163, 50.00%>
		<org.jgrapht.graph.SimpleDirectedGraphTest.java:164, 63.64%>
	<org.jgrapht.graph.SimpleDirectedGraphTest: void testEdgesOf()>:
		<org.jgrapht.graph.SimpleDirectedGraphTest.java:232, 46.67%>
		<org.jgrapht.graph.SimpleDirectedGraphTest.java:233, 60.00%>
		<org.jgrapht.graph.SimpleDirectedGraphTest.java:243, 20.00%>
	<org.jgrapht.graph.SimpleDirectedGraphTest: void testRemoveEdgeEdge()>:
		<org.jgrapht.graph.SimpleDirectedGraphTest.java:341, 26.09%>
		<org.jgrapht.graph.SimpleDirectedGraphTest.java:343, 43.48%>
		<org.jgrapht.graph.SimpleDirectedGraphTest.java:344, 43.48%>
		<org.jgrapht.graph.SimpleDirectedGraphTest.java:345, 60.87%>
		<org.jgrapht.graph.SimpleDirectedGraphTest.java:346, 73.91%>

Relevant Assertion clone sets (0):
==============================================

[158] Set (editDistance: 2, isComplete: false, packages: 2, classes: 2): 
Centroid (size: 5): <org.jgrapht.graph.CloneTest: void testCloneSpecificsBug()>

Methods (2): 
	<org.jgrapht.alg.EdmondsBlossomShrinkingTest: void testOne()>:
		<org.jgrapht.alg.EdmondsBlossomShrinkingTest.java:80, 23.81%>
		<org.jgrapht.alg.EdmondsBlossomShrinkingTest.java:81, 19.05%>
		<org.jgrapht.alg.EdmondsBlossomShrinkingTest.java:82, 19.05%>
	<org.jgrapht.graph.CloneTest: void testCloneSpecificsBug()>:
		<org.jgrapht.graph.CloneTest.java:87, 35.29%>
		<org.jgrapht.graph.CloneTest.java:88, 23.53%>
		<org.jgrapht.graph.CloneTest.java:89, 23.53%>
		<org.jgrapht.graph.CloneTest.java:90, 23.53%>
		<org.jgrapht.graph.CloneTest.java:91, 29.41%>

Relevant Assertion clone sets (0):
==============================================

[159] Set (editDistance: 2, isComplete: false, packages: 3, classes: 5): 
Centroid (size: 5): <org.jgrapht.graph.SimpleDirectedGraphTest: void testRemoveEdgeEdge()>

Methods (8): 
	<org.jgrapht.alg.ChromaticNumberTest: void testChromaticNumber()>:
		<org.jgrapht.alg.ChromaticNumberTest.java:78, 18.75%>
		<org.jgrapht.alg.ChromaticNumberTest.java:83, 31.25%>
		<org.jgrapht.alg.ChromaticNumberTest.java:100, 18.75%>
	<org.jgrapht.alg.KShortestPathKValuesTest: void testMaxSizeValueCompleteGraph6()>:
		<org.jgrapht.alg.KShortestPathKValuesTest.java:86, 31.58%>
		<org.jgrapht.alg.KShortestPathKValuesTest.java:87, 31.58%>
		<org.jgrapht.alg.KShortestPathKValuesTest.java:88, 31.58%>
		<org.jgrapht.alg.KShortestPathKValuesTest.java:89, 31.58%>
		<org.jgrapht.alg.KShortestPathKValuesTest.java:90, 31.58%>
	<org.jgrapht.generate.GraphGeneratorTest: void testEmptyGraphGenerator()>:
		<org.jgrapht.generate.GraphGeneratorTest.java:90, 38.46%>
		<org.jgrapht.generate.GraphGeneratorTest.java:91, 38.46%>
		<org.jgrapht.generate.GraphGeneratorTest.java:92, 23.08%>
	<org.jgrapht.generate.GraphGeneratorTest: void testStarGraphGenerator()>:
		<org.jgrapht.generate.GraphGeneratorTest.java:287, 35.71%>
		<org.jgrapht.generate.GraphGeneratorTest.java:288, 35.71%>
		<org.jgrapht.generate.GraphGeneratorTest.java:289, 42.86%>
	<org.jgrapht.graph.AsUndirectedGraphTest: void testDegreeOf()>:
		<org.jgrapht.graph.AsUndirectedGraphTest.java:111, 46.15%>
		<org.jgrapht.graph.AsUndirectedGraphTest.java:112, 61.54%>
		<org.jgrapht.graph.AsUndirectedGraphTest.java:113, 76.92%>
		<org.jgrapht.graph.AsUndirectedGraphTest.java:114, 92.31%>
	<org.jgrapht.graph.SimpleDirectedGraphTest: void testAddVertex()>:
		<org.jgrapht.graph.SimpleDirectedGraphTest.java:157, 27.27%>
		<org.jgrapht.graph.SimpleDirectedGraphTest.java:158, 31.82%>
		<org.jgrapht.graph.SimpleDirectedGraphTest.java:159, 36.36%>
		<org.jgrapht.graph.SimpleDirectedGraphTest.java:160, 40.91%>
		<org.jgrapht.graph.SimpleDirectedGraphTest.java:162, 40.91%>
		<org.jgrapht.graph.SimpleDirectedGraphTest.java:163, 50.00%>
		<org.jgrapht.graph.SimpleDirectedGraphTest.java:164, 63.64%>
	<org.jgrapht.graph.SimpleDirectedGraphTest: void testEdgesOf()>:
		<org.jgrapht.graph.SimpleDirectedGraphTest.java:232, 46.67%>
		<org.jgrapht.graph.SimpleDirectedGraphTest.java:233, 60.00%>
		<org.jgrapht.graph.SimpleDirectedGraphTest.java:243, 20.00%>
	<org.jgrapht.graph.SimpleDirectedGraphTest: void testRemoveEdgeEdge()>:
		<org.jgrapht.graph.SimpleDirectedGraphTest.java:341, 26.09%>
		<org.jgrapht.graph.SimpleDirectedGraphTest.java:343, 43.48%>
		<org.jgrapht.graph.SimpleDirectedGraphTest.java:344, 43.48%>
		<org.jgrapht.graph.SimpleDirectedGraphTest.java:345, 60.87%>
		<org.jgrapht.graph.SimpleDirectedGraphTest.java:346, 73.91%>

Relevant Assertion clone sets (0):
==============================================

[160] Set (editDistance: 2, isComplete: false, packages: 4, classes: 6): 
Centroid (size: 4): <org.jgrapht.util.FibonacciHeapTest: void testAddRemoveOne()>

Methods (6): 
	<org.jgrapht.alg.FloydWarshallShortestPathsTest: void testCompareWithDijkstra()>:
		<org.jgrapht.alg.FloydWarshallShortestPathsTest.java:96, 7.41%>
		<org.jgrapht.alg.FloydWarshallShortestPathsTest.java:121, 7.41%>
	<org.jgrapht.alg.HamiltonianCycleTest: void testHamiltonianCycle()>:
		<org.jgrapht.alg.HamiltonianCycleTest.java:79, 33.33%>
		<org.jgrapht.alg.HamiltonianCycleTest.java:89, 27.78%>
	<org.jgrapht.alg.KShortestPathCostTest: void verifyShortestPathsInIncreasingOrderOfWeight(org.jgrapht.Graph)>:
		<org.jgrapht.alg.KShortestPathCostTest.java:222, 30.77%>
		<org.jgrapht.alg.KShortestPathCostTest.java:225, 30.77%>
	<org.jgrapht.experimental.dag.DirectedAcyclicGraphTest: void testCycleDetectionInRandomGraphBuild()>:
		<org.jgrapht.experimental.dag.DirectedAcyclicGraphTest.java:131, 14.29%>
		<org.jgrapht.experimental.dag.DirectedAcyclicGraphTest.java:141, 12.24%>
		<org.jgrapht.experimental.dag.DirectedAcyclicGraphTest.java:152, 6.12%>
	<org.jgrapht.experimental.isomorphism.IsomorphismInspectorTest: void assertIsomorphic(org.jgrapht.Graph[],boolean,org.jgrapht.experimental.equivalence.EquivalenceComparator,org.jgrapht.experimental.equivalence.EquivalenceComparator)>:
		<org.jgrapht.experimental.isomorphism.IsomorphismInspectorTest.java:138, 28.57%>
		<org.jgrapht.experimental.isomorphism.IsomorphismInspectorTest.java:140, 28.57%>
	<org.jgrapht.util.FibonacciHeapTest: void testAddRemoveOne()>:
		<org.jgrapht.util.FibonacciHeapTest.java:57, 25.00%>
		<org.jgrapht.util.FibonacciHeapTest.java:59, 25.00%>
		<org.jgrapht.util.FibonacciHeapTest.java:61, 50.00%>
		<org.jgrapht.util.FibonacciHeapTest.java:62, 25.00%>

Relevant Assertion clone sets (0):
==============================================

[161] Set (editDistance: 2, isComplete: false, packages: 4, classes: 8): 
Centroid (size: 4): <org.jgrapht.util.PrefetchIteratorTest: void testEnumInterface()>

Methods (11): 
	<org.jgrapht.alg.BlockCutpointGraphTest: void testGetBlock(org.jgrapht.alg.BlockCutpointGraph)>:
		<org.jgrapht.alg.BlockCutpointGraphTest.java:88, 33.33%>
		<org.jgrapht.alg.BlockCutpointGraphTest.java:94, 19.05%>
	<org.jgrapht.alg.ConnectivityInspectorTest: void testDirectedGraph()>:
		<org.jgrapht.alg.ConnectivityInspectorTest.java:139, 57.14%>
		<org.jgrapht.alg.ConnectivityInspectorTest.java:143, 57.14%>
	<org.jgrapht.alg.KruskalMinimumSpanningTreeTest: void testMinimumSpanningTree()>:
		<org.jgrapht.alg.KruskalMinimumSpanningTreeTest.java:80, 19.05%>
		<org.jgrapht.alg.KruskalMinimumSpanningTreeTest.java:84, 38.10%>
	<org.jgrapht.alg.TransitiveClosureTest: void testLinearGraph()>:
		<org.jgrapht.alg.TransitiveClosureTest.java:75, 47.83%>
		<org.jgrapht.alg.TransitiveClosureTest.java:78, 43.48%>
	<org.jgrapht.alg.TransitiveClosureTest: void testRingGraph()>:
		<org.jgrapht.alg.TransitiveClosureTest.java:107, 45.45%>
		<org.jgrapht.alg.TransitiveClosureTest.java:110, 50.00%>
	<org.jgrapht.experimental.dag.DirectedAcyclicGraphTest: void testCycleDetectionInRandomGraphBuild()>:
		<org.jgrapht.experimental.dag.DirectedAcyclicGraphTest.java:131, 14.29%>
		<org.jgrapht.experimental.dag.DirectedAcyclicGraphTest.java:141, 12.24%>
		<org.jgrapht.experimental.dag.DirectedAcyclicGraphTest.java:152, 6.12%>
	<org.jgrapht.graph.AsUndirectedGraphTest: void testAddVertex()>:
		<org.jgrapht.graph.AsUndirectedGraphTest.java:102, 85.71%>
		<org.jgrapht.graph.AsUndirectedGraphTest.java:103, 100.00%>
	<org.jgrapht.graph.AsUndirectedGraphTest: void testRemoveEdge()>:
		<org.jgrapht.graph.AsUndirectedGraphTest.java:155, 88.89%>
		<org.jgrapht.graph.AsUndirectedGraphTest.java:156, 111.11%>
	<org.jgrapht.graph.AsUndirectedGraphTest: void testRemoveVertex()>:
		<org.jgrapht.graph.AsUndirectedGraphTest.java:165, 88.89%>
		<org.jgrapht.graph.AsUndirectedGraphTest.java:166, 111.11%>
	<org.jgrapht.graph.SimpleDirectedGraphTest: void testAddEdgeEdge()>:
		<org.jgrapht.graph.SimpleDirectedGraphTest.java:112, 56.25%>
		<org.jgrapht.graph.SimpleDirectedGraphTest.java:113, 65.63%>
		<org.jgrapht.graph.SimpleDirectedGraphTest.java:114, 75.00%>
	<org.jgrapht.util.PrefetchIteratorTest: void testEnumInterface()>:
		<org.jgrapht.util.PrefetchIteratorTest.java:71, 33.33%>
		<org.jgrapht.util.PrefetchIteratorTest.java:72, 41.67%>
		<org.jgrapht.util.PrefetchIteratorTest.java:74, 33.33%>
		<org.jgrapht.util.PrefetchIteratorTest.java:81, 16.67%>

Relevant Assertion clone sets (0):
==============================================

[162] Set (editDistance: 2, isComplete: false, packages: 4, classes: 8): 
Centroid (size: 4): <org.jgrapht.util.PrefetchIteratorTest: void testIteratorInterface()>

Methods (11): 
	<org.jgrapht.alg.BlockCutpointGraphTest: void testGetBlock(org.jgrapht.alg.BlockCutpointGraph)>:
		<org.jgrapht.alg.BlockCutpointGraphTest.java:88, 33.33%>
		<org.jgrapht.alg.BlockCutpointGraphTest.java:94, 19.05%>
	<org.jgrapht.alg.ConnectivityInspectorTest: void testDirectedGraph()>:
		<org.jgrapht.alg.ConnectivityInspectorTest.java:139, 57.14%>
		<org.jgrapht.alg.ConnectivityInspectorTest.java:143, 57.14%>
	<org.jgrapht.alg.KruskalMinimumSpanningTreeTest: void testMinimumSpanningTree()>:
		<org.jgrapht.alg.KruskalMinimumSpanningTreeTest.java:80, 19.05%>
		<org.jgrapht.alg.KruskalMinimumSpanningTreeTest.java:84, 38.10%>
	<org.jgrapht.alg.TransitiveClosureTest: void testLinearGraph()>:
		<org.jgrapht.alg.TransitiveClosureTest.java:75, 47.83%>
		<org.jgrapht.alg.TransitiveClosureTest.java:78, 43.48%>
	<org.jgrapht.alg.TransitiveClosureTest: void testRingGraph()>:
		<org.jgrapht.alg.TransitiveClosureTest.java:107, 45.45%>
		<org.jgrapht.alg.TransitiveClosureTest.java:110, 50.00%>
	<org.jgrapht.experimental.dag.DirectedAcyclicGraphTest: void testCycleDetectionInRandomGraphBuild()>:
		<org.jgrapht.experimental.dag.DirectedAcyclicGraphTest.java:131, 14.29%>
		<org.jgrapht.experimental.dag.DirectedAcyclicGraphTest.java:141, 12.24%>
		<org.jgrapht.experimental.dag.DirectedAcyclicGraphTest.java:152, 6.12%>
	<org.jgrapht.graph.AsUndirectedGraphTest: void testAddVertex()>:
		<org.jgrapht.graph.AsUndirectedGraphTest.java:102, 85.71%>
		<org.jgrapht.graph.AsUndirectedGraphTest.java:103, 100.00%>
	<org.jgrapht.graph.AsUndirectedGraphTest: void testRemoveEdge()>:
		<org.jgrapht.graph.AsUndirectedGraphTest.java:155, 88.89%>
		<org.jgrapht.graph.AsUndirectedGraphTest.java:156, 111.11%>
	<org.jgrapht.graph.AsUndirectedGraphTest: void testRemoveVertex()>:
		<org.jgrapht.graph.AsUndirectedGraphTest.java:165, 88.89%>
		<org.jgrapht.graph.AsUndirectedGraphTest.java:166, 111.11%>
	<org.jgrapht.graph.SimpleDirectedGraphTest: void testAddEdgeEdge()>:
		<org.jgrapht.graph.SimpleDirectedGraphTest.java:112, 56.25%>
		<org.jgrapht.graph.SimpleDirectedGraphTest.java:113, 65.63%>
		<org.jgrapht.graph.SimpleDirectedGraphTest.java:114, 75.00%>
	<org.jgrapht.util.PrefetchIteratorTest: void testIteratorInterface()>:
		<org.jgrapht.util.PrefetchIteratorTest.java:54, 33.33%>
		<org.jgrapht.util.PrefetchIteratorTest.java:55, 41.67%>
		<org.jgrapht.util.PrefetchIteratorTest.java:57, 33.33%>
		<org.jgrapht.util.PrefetchIteratorTest.java:64, 16.67%>

Relevant Assertion clone sets (0):
==============================================

[163] Set (editDistance: 2, isComplete: false, packages: 6, classes: 6): 
Centroid (size: 3): <org.jgrapht.graph.SimpleDirectedGraphTest: void testAddEdgeEdge()>

Methods (7): 
	<org.jgrapht.alg.ConnectivityInspectorTest: void testIsGraphConnected()>:
		<org.jgrapht.alg.ConnectivityInspectorTest.java:155, 25.00%>
		<org.jgrapht.alg.ConnectivityInspectorTest.java:159, 25.00%>
		<org.jgrapht.alg.ConnectivityInspectorTest.java:162, 37.50%>
		<org.jgrapht.alg.ConnectivityInspectorTest.java:166, 37.50%>
		<org.jgrapht.alg.ConnectivityInspectorTest.java:169, 25.00%>
	<org.jgrapht.alg.util.UnionFindTest: void testIdentical(java.lang.String[],java.util.ArrayList,org.jgrapht.alg.util.UnionFind)>:
		<org.jgrapht.alg.util.UnionFindTest.java:131, 41.18%>
	<org.jgrapht.experimental.dag.DirectedAcyclicGraphTest: void testTopoIterationOrderLinearGraph()>:
		<org.jgrapht.experimental.dag.DirectedAcyclicGraphTest.java:181, 29.41%>
		<org.jgrapht.experimental.dag.DirectedAcyclicGraphTest.java:182, 41.18%>
	<org.jgrapht.experimental.isomorphism.IsomorphismInspectorTest: void assertIsomorphicStopAfterFirstMatch(org.jgrapht.Graph[],boolean,boolean,org.jgrapht.experimental.equivalence.EquivalenceComparator,org.jgrapht.experimental.equivalence.EquivalenceComparator)>:
		<org.jgrapht.experimental.isomorphism.IsomorphismInspectorTest.java:485, 14.71%>
	<org.jgrapht.graph.SimpleDirectedGraphTest: void testAddEdgeEdge()>:
		<org.jgrapht.graph.SimpleDirectedGraphTest.java:112, 56.25%>
		<org.jgrapht.graph.SimpleDirectedGraphTest.java:113, 65.63%>
		<org.jgrapht.graph.SimpleDirectedGraphTest.java:114, 75.00%>
	<org.jgrapht.util.PrefetchIteratorTest: void testEnumInterface()>:
		<org.jgrapht.util.PrefetchIteratorTest.java:71, 33.33%>
		<org.jgrapht.util.PrefetchIteratorTest.java:72, 41.67%>
		<org.jgrapht.util.PrefetchIteratorTest.java:74, 33.33%>
		<org.jgrapht.util.PrefetchIteratorTest.java:81, 16.67%>
	<org.jgrapht.util.PrefetchIteratorTest: void testIteratorInterface()>:
		<org.jgrapht.util.PrefetchIteratorTest.java:54, 33.33%>
		<org.jgrapht.util.PrefetchIteratorTest.java:55, 41.67%>
		<org.jgrapht.util.PrefetchIteratorTest.java:57, 33.33%>
		<org.jgrapht.util.PrefetchIteratorTest.java:64, 16.67%>

Relevant Assertion clone sets (0):
==============================================

